webpackJsonp([0], [
        /* 0 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/_export.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var core = __webpack_require__( /*! ./_core */ 23);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var PROTOTYPE = 'prototype';


            var $export = function(type, name, source) {
                var IS_FORCED = type & $export.F;
                var IS_GLOBAL = type & $export.G;
                var IS_STATIC = type & $export.S;
                var IS_PROTO = type & $export.P;
                var IS_BIND = type & $export.B;
                var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
                var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
                var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
                var key, own, out, exp;
                if (IS_GLOBAL) source = name;
                for (key in source) {
                    // contains in native
                    own = !IS_FORCED && target && target[key] !== undefined;
                    // export native or passed
                    out = (own ? target : source)[key];
                    // bind timers to global for call from export context
                    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                    // extend global
                    if (target) redefine(target, key, out, type & $export.U);
                    // export
                    if (exports[key] != out) hide(exports, key, exp);
                    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
                }
            };
            global.core = core;
            // type bitmap
            $export.F = 1; // forced
            $export.G = 2; // global
            $export.S = 4; // static
            $export.P = 8; // proto
            $export.B = 16; // bind
            $export.W = 32; // wrap
            $export.U = 64; // safe
            $export.R = 128; // real proto method for `library`
            module.exports = $export;


            /***/
        }),
        /* 1 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_an-object.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            module.exports = function(it) {
                if (!isObject(it)) throw TypeError(it + ' is not an object!');
                return it;
            };


            /***/
        }),
        /* 2 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/_global.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            var global = module.exports = typeof window != 'undefined' && window.Math == Math ?
                window : typeof self != 'undefined' && self.Math == Math ? self
                // eslint-disable-next-line no-new-func
                :
                Function('return this')();
            if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


            /***/
        }),
        /* 3 */
        /*!************************************************!*\
          !*** ./node_modules/core-js/modules/_fails.js ***!
          \************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(exec) {
                try {
                    return !!exec();
                } catch (e) {
                    return true;
                }
            };


            /***/
        }),
        /* 4 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_is-object.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(it) {
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };


            /***/
        }),
        /* 5 */
        /*!**********************************************!*\
          !*** ./node_modules/core-js/modules/_wks.js ***!
          \**********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var store = __webpack_require__( /*! ./_shared */ 53)('wks');
            var uid = __webpack_require__( /*! ./_uid */ 34);
            var Symbol = __webpack_require__( /*! ./_global */ 2).Symbol;
            var USE_SYMBOL = typeof Symbol == 'function';

            var $exports = module.exports = function(name) {
                return store[name] || (store[name] =
                    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
            };

            $exports.store = store;


            /***/
        }),
        /* 6 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_descriptors.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // Thank's IE8 for his funny defineProperty
            module.exports = !__webpack_require__( /*! ./_fails */ 3)(function() {
                return Object.defineProperty({}, 'a', { get: function() { return 7; } }).a != 7;
            });


            /***/
        }),
        /* 7 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_object-dp.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var IE8_DOM_DEFINE = __webpack_require__( /*! ./_ie8-dom-define */ 95);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var dP = Object.defineProperty;

            exports.f = __webpack_require__( /*! ./_descriptors */ 6) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE) try {
                    return dP(O, P, Attributes);
                } catch (e) { /* empty */ }
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                if ('value' in Attributes) O[P] = Attributes.value;
                return O;
            };


            /***/
        }),
        /* 8 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_to-length.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.1.15 ToLength
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var min = Math.min;
            module.exports = function(it) {
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
            };


            /***/
        }),
        /* 9 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_to-object.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.1.13 ToObject(argument)
            var defined = __webpack_require__( /*! ./_defined */ 25);
            module.exports = function(it) {
                return Object(defined(it));
            };


            /***/
        }),
        /* 10 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_a-function.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(it) {
                if (typeof it != 'function') throw TypeError(it + ' is not a function!');
                return it;
            };


            /***/
        }),
        /* 11 */
        /*!**********************************************!*\
          !*** ./node_modules/core-js/modules/_has.js ***!
          \**********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            var hasOwnProperty = {}.hasOwnProperty;
            module.exports = function(it, key) {
                return hasOwnProperty.call(it, key);
            };


            /***/
        }),
        /* 12 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_hide.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var dP = __webpack_require__( /*! ./_object-dp */ 7);
            var createDesc = __webpack_require__( /*! ./_property-desc */ 33);
            module.exports = __webpack_require__( /*! ./_descriptors */ 6) ? function(object, key, value) {
                return dP.f(object, key, createDesc(1, value));
            } : function(object, key, value) {
                object[key] = value;
                return object;
            };


            /***/
        }),
        /* 13 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_redefine.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var has = __webpack_require__( /*! ./_has */ 11);
            var SRC = __webpack_require__( /*! ./_uid */ 34)('src');
            var TO_STRING = 'toString';
            var $toString = Function[TO_STRING];
            var TPL = ('' + $toString).split(TO_STRING);

            __webpack_require__( /*! ./_core */ 23).inspectSource = function(it) {
                return $toString.call(it);
            };

            (module.exports = function(O, key, val, safe) {
                var isFunction = typeof val == 'function';
                if (isFunction) has(val, 'name') || hide(val, 'name', key);
                if (O[key] === val) return;
                if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
                if (O === global) {
                    O[key] = val;
                } else if (!safe) {
                    delete O[key];
                    hide(O, key, val);
                } else if (O[key]) {
                    O[key] = val;
                } else {
                    hide(O, key, val);
                }
                // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
            })(Function.prototype, TO_STRING, function toString() {
                return typeof this == 'function' && this[SRC] || $toString.call(this);
            });


            /***/
        }),
        /* 14 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_string-html.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            var quot = /"/g;
            // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
            var createHTML = function(string, tag, attribute, value) {
                var S = String(defined(string));
                var p1 = '<' + tag;
                if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
                return p1 + '>' + S + '</' + tag + '>';
            };
            module.exports = function(NAME, exec) {
                var O = {};
                O[NAME] = exec(createHTML);
                $export($export.P + $export.F * fails(function() {
                    var test = '' [NAME]('"');
                    return test !== test.toLowerCase() || test.split('"').length > 3;
                }), 'String', O);
            };


            /***/
        }),
        /* 15 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_to-iobject.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // to indexed object, toObject with fallback for non-array-like ES3 strings
            var IObject = __webpack_require__( /*! ./_iobject */ 49);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            module.exports = function(it) {
                return IObject(defined(it));
            };


            /***/
        }),
        /* 16 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_object-gopd.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var pIE = __webpack_require__( /*! ./_object-pie */ 50);
            var createDesc = __webpack_require__( /*! ./_property-desc */ 33);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var has = __webpack_require__( /*! ./_has */ 11);
            var IE8_DOM_DEFINE = __webpack_require__( /*! ./_ie8-dom-define */ 95);
            var gOPD = Object.getOwnPropertyDescriptor;

            exports.f = __webpack_require__( /*! ./_descriptors */ 6) ? gOPD : function getOwnPropertyDescriptor(O, P) {
                O = toIObject(O);
                P = toPrimitive(P, true);
                if (IE8_DOM_DEFINE) try {
                    return gOPD(O, P);
                } catch (e) { /* empty */ }
                if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
            };


            /***/
        }),
        /* 17 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_object-gpo.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            var has = __webpack_require__( /*! ./_has */ 11);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var IE_PROTO = __webpack_require__( /*! ./_shared-key */ 69)('IE_PROTO');
            var ObjectProto = Object.prototype;

            module.exports = Object.getPrototypeOf || function(O) {
                O = toObject(O);
                if (has(O, IE_PROTO)) return O[IE_PROTO];
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                    return O.constructor.prototype;
                }
                return O instanceof Object ? ObjectProto : null;
            };


            /***/
        }),
        /* 18 */
        ,
        /* 19 */
        /*!**********************************************!*\
          !*** ./node_modules/core-js/modules/_ctx.js ***!
          \**********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // optional / simple context binding
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            module.exports = function(fn, that, length) {
                aFunction(fn);
                if (that === undefined) return fn;
                switch (length) {
                    case 1:
                        return function(a) {
                            return fn.call(that, a);
                        };
                    case 2:
                        return function(a, b) {
                            return fn.call(that, a, b);
                        };
                    case 3:
                        return function(a, b, c) {
                            return fn.call(that, a, b, c);
                        };
                }
                return function( /* ...args */ ) {
                    return fn.apply(that, arguments);
                };
            };


            /***/
        }),
        /* 20 */
        /*!**********************************************!*\
          !*** ./node_modules/core-js/modules/_cof.js ***!
          \**********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            var toString = {}.toString;

            module.exports = function(it) {
                return toString.call(it).slice(8, -1);
            };


            /***/
        }),
        /* 21 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_strict-method.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var fails = __webpack_require__( /*! ./_fails */ 3);

            module.exports = function(method, arg) {
                return !!method && fails(function() {
                    // eslint-disable-next-line no-useless-call
                    arg ? method.call(null, function() { /* empty */ }, 1) : method.call(null);
                });
            };


            /***/
        }),
        /* 22 */
        /*!***********************!*\
          !*** ./src/config.js ***!
          \***********************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = {
                gameWidth: 1100,
                gameHeight: 800,
                localStorageName: 'lettris',
                webfonts: ['Roboto:700'],
                backgroundColor: 0x273f64,
                titleLayout: [{
                    x: 0,
                    y: 0,
                    letter: 'L'
                }, {
                    x: 1,
                    y: 0,
                    letter: 'E'
                }, {
                    x: 2,
                    y: 0,
                    letter: 'T'
                }, {
                    x: 2,
                    y: 1,
                    letter: 'T'
                }, {
                    x: 3,
                    y: 1,
                    letter: 'R'
                }, {
                    x: 4,
                    y: 1,
                    letter: 'I'
                }, {
                    x: 4,
                    y: 2,
                    letter: 'S'
                }],
                tileLetterConfig: {
                    font: '100px Roboto',
                    fill: '#644e27',
                    smoothed: true
                },
                uiLetterConfig: {
                    font: '100px Roboto',
                    fill: '#ffffff',
                    smoothed: true
                },
                definitionLetterConfig: {
                    font: '60px Roboto',
                    fill: '#ffffff',
                    smoothed: true,
                    boundsAlignH: "center",
                    wordWrap: true,
                    wordWrapWidth: 1200,
                    align: 'center'
                },
                grid: {
                    position: {
                        x: 400,
                        y: 50
                    },
                    tileSize: {
                        width: 41,
                        height: 41
                    },
                    width: 9,
                    height: 18
                }
            };

            /***/
        }),
        /* 23 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_core.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            var core = module.exports = { version: '2.5.3' };
            if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


            /***/
        }),
        /* 24 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/_to-primitive.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.1.1 ToPrimitive(input [, PreferredType])
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function(it, S) {
                if (!isObject(it)) return it;
                var fn, val;
                if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                throw TypeError("Can't convert object to primitive value");
            };


            /***/
        }),
        /* 25 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_defined.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 7.2.1 RequireObjectCoercible(argument)
            module.exports = function(it) {
                if (it == undefined) throw TypeError("Can't call method on  " + it);
                return it;
            };


            /***/
        }),
        /* 26 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_to-integer.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 7.1.4 ToInteger
            var ceil = Math.ceil;
            var floor = Math.floor;
            module.exports = function(it) {
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };


            /***/
        }),
        /* 27 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_object-sap.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // most Object methods by ES6 should accept primitives
            var $export = __webpack_require__( /*! ./_export */ 0);
            var core = __webpack_require__( /*! ./_core */ 23);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            module.exports = function(KEY, exec) {
                var fn = (core.Object || {})[KEY] || Object[KEY];
                var exp = {};
                exp[KEY] = exec(fn);
                $export($export.S + $export.F * fails(function() { fn(1); }), 'Object', exp);
            };


            /***/
        }),
        /* 28 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_array-methods.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 0 -> Array#forEach
            // 1 -> Array#map
            // 2 -> Array#filter
            // 3 -> Array#some
            // 4 -> Array#every
            // 5 -> Array#find
            // 6 -> Array#findIndex
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var IObject = __webpack_require__( /*! ./_iobject */ 49);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var asc = __webpack_require__( /*! ./_array-species-create */ 86);
            module.exports = function(TYPE, $create) {
                var IS_MAP = TYPE == 1;
                var IS_FILTER = TYPE == 2;
                var IS_SOME = TYPE == 3;
                var IS_EVERY = TYPE == 4;
                var IS_FIND_INDEX = TYPE == 6;
                var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                var create = $create || asc;
                return function($this, callbackfn, that) {
                    var O = toObject($this);
                    var self = IObject(O);
                    var f = ctx(callbackfn, that, 3);
                    var length = toLength(self.length);
                    var index = 0;
                    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                    var val, res;
                    for (; length > index; index++)
                        if (NO_HOLES || index in self) {
                            val = self[index];
                            res = f(val, index, O);
                            if (TYPE) {
                                if (IS_MAP) result[index] = res; // map
                                else if (res) switch (TYPE) {
                                        case 3:
                                            return true; // some
                                        case 5:
                                            return val; // find
                                        case 6:
                                            return index; // findIndex
                                        case 2:
                                            result.push(val); // filter
                                    } else if (IS_EVERY) return false; // every
                            }
                        }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
                };
            };


            /***/
        }),
        /* 29 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_typed-array.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            if (__webpack_require__( /*! ./_descriptors */ 6)) {
                var LIBRARY = __webpack_require__( /*! ./_library */ 35);
                var global = __webpack_require__( /*! ./_global */ 2);
                var fails = __webpack_require__( /*! ./_fails */ 3);
                var $export = __webpack_require__( /*! ./_export */ 0);
                var $typed = __webpack_require__( /*! ./_typed */ 63);
                var $buffer = __webpack_require__( /*! ./_typed-buffer */ 92);
                var ctx = __webpack_require__( /*! ./_ctx */ 19);
                var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
                var propertyDesc = __webpack_require__( /*! ./_property-desc */ 33);
                var hide = __webpack_require__( /*! ./_hide */ 12);
                var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
                var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
                var toLength = __webpack_require__( /*! ./_to-length */ 8);
                var toIndex = __webpack_require__( /*! ./_to-index */ 121);
                var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
                var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
                var has = __webpack_require__( /*! ./_has */ 11);
                var classof = __webpack_require__( /*! ./_classof */ 51);
                var isObject = __webpack_require__( /*! ./_is-object */ 4);
                var toObject = __webpack_require__( /*! ./_to-object */ 9);
                var isArrayIter = __webpack_require__( /*! ./_is-array-iter */ 83);
                var create = __webpack_require__( /*! ./_object-create */ 38);
                var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
                var gOPN = __webpack_require__( /*! ./_object-gopn */ 39).f;
                var getIterFn = __webpack_require__( /*! ./core.get-iterator-method */ 85);
                var uid = __webpack_require__( /*! ./_uid */ 34);
                var wks = __webpack_require__( /*! ./_wks */ 5);
                var createArrayMethod = __webpack_require__( /*! ./_array-methods */ 28);
                var createArrayIncludes = __webpack_require__( /*! ./_array-includes */ 54);
                var speciesConstructor = __webpack_require__( /*! ./_species-constructor */ 61);
                var ArrayIterators = __webpack_require__( /*! ./es6.array.iterator */ 88);
                var Iterators = __webpack_require__( /*! ./_iterators */ 46);
                var $iterDetect = __webpack_require__( /*! ./_iter-detect */ 58);
                var setSpecies = __webpack_require__( /*! ./_set-species */ 40);
                var arrayFill = __webpack_require__( /*! ./_array-fill */ 87);
                var arrayCopyWithin = __webpack_require__( /*! ./_array-copy-within */ 111);
                var $DP = __webpack_require__( /*! ./_object-dp */ 7);
                var $GOPD = __webpack_require__( /*! ./_object-gopd */ 16);
                var dP = $DP.f;
                var gOPD = $GOPD.f;
                var RangeError = global.RangeError;
                var TypeError = global.TypeError;
                var Uint8Array = global.Uint8Array;
                var ARRAY_BUFFER = 'ArrayBuffer';
                var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
                var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
                var PROTOTYPE = 'prototype';
                var ArrayProto = Array[PROTOTYPE];
                var $ArrayBuffer = $buffer.ArrayBuffer;
                var $DataView = $buffer.DataView;
                var arrayForEach = createArrayMethod(0);
                var arrayFilter = createArrayMethod(2);
                var arraySome = createArrayMethod(3);
                var arrayEvery = createArrayMethod(4);
                var arrayFind = createArrayMethod(5);
                var arrayFindIndex = createArrayMethod(6);
                var arrayIncludes = createArrayIncludes(true);
                var arrayIndexOf = createArrayIncludes(false);
                var arrayValues = ArrayIterators.values;
                var arrayKeys = ArrayIterators.keys;
                var arrayEntries = ArrayIterators.entries;
                var arrayLastIndexOf = ArrayProto.lastIndexOf;
                var arrayReduce = ArrayProto.reduce;
                var arrayReduceRight = ArrayProto.reduceRight;
                var arrayJoin = ArrayProto.join;
                var arraySort = ArrayProto.sort;
                var arraySlice = ArrayProto.slice;
                var arrayToString = ArrayProto.toString;
                var arrayToLocaleString = ArrayProto.toLocaleString;
                var ITERATOR = wks('iterator');
                var TAG = wks('toStringTag');
                var TYPED_CONSTRUCTOR = uid('typed_constructor');
                var DEF_CONSTRUCTOR = uid('def_constructor');
                var ALL_CONSTRUCTORS = $typed.CONSTR;
                var TYPED_ARRAY = $typed.TYPED;
                var VIEW = $typed.VIEW;
                var WRONG_LENGTH = 'Wrong length!';

                var $map = createArrayMethod(1, function(O, length) {
                    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
                });

                var LITTLE_ENDIAN = fails(function() {
                    // eslint-disable-next-line no-undef
                    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
                });

                var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function() {
                    new Uint8Array(1).set({});
                });

                var toOffset = function(it, BYTES) {
                    var offset = toInteger(it);
                    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
                    return offset;
                };

                var validate = function(it) {
                    if (isObject(it) && TYPED_ARRAY in it) return it;
                    throw TypeError(it + ' is not a typed array!');
                };

                var allocate = function(C, length) {
                    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                        throw TypeError('It is not a typed array constructor!');
                    }
                    return new C(length);
                };

                var speciesFromList = function(O, list) {
                    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
                };

                var fromList = function(C, list) {
                    var index = 0;
                    var length = list.length;
                    var result = allocate(C, length);
                    while (length > index) result[index] = list[index++];
                    return result;
                };

                var addGetter = function(it, key, internal) {
                    dP(it, key, { get: function() { return this._d[internal]; } });
                };

                var $from = function from(source /* , mapfn, thisArg */ ) {
                    var O = toObject(source);
                    var aLen = arguments.length;
                    var mapfn = aLen > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var iterFn = getIterFn(O);
                    var i, length, values, result, step, iterator;
                    if (iterFn != undefined && !isArrayIter(iterFn)) {
                        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                            values.push(step.value);
                        }
                        O = values;
                    }
                    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
                    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                        result[i] = mapping ? mapfn(O[i], i) : O[i];
                    }
                    return result;
                };

                var $of = function of( /* ...items */ ) {
                    var index = 0;
                    var length = arguments.length;
                    var result = allocate(this, length);
                    while (length > index) result[index] = arguments[index++];
                    return result;
                };

                // iOS Safari 6.x fails here
                var TO_LOCALE_BUG = !!Uint8Array && fails(function() { arrayToLocaleString.call(new Uint8Array(1)); });

                var $toLocaleString = function toLocaleString() {
                    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
                };

                var proto = {
                    copyWithin: function copyWithin(target, start /* , end */ ) {
                        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
                    },
                    every: function every(callbackfn /* , thisArg */ ) {
                        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    fill: function fill(value /* , start, end */ ) { // eslint-disable-line no-unused-vars
                        return arrayFill.apply(validate(this), arguments);
                    },
                    filter: function filter(callbackfn /* , thisArg */ ) {
                        return speciesFromList(this, arrayFilter(validate(this), callbackfn,
                            arguments.length > 1 ? arguments[1] : undefined));
                    },
                    find: function find(predicate /* , thisArg */ ) {
                        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    findIndex: function findIndex(predicate /* , thisArg */ ) {
                        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    forEach: function forEach(callbackfn /* , thisArg */ ) {
                        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    indexOf: function indexOf(searchElement /* , fromIndex */ ) {
                        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    includes: function includes(searchElement /* , fromIndex */ ) {
                        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    join: function join(separator) { // eslint-disable-line no-unused-vars
                        return arrayJoin.apply(validate(this), arguments);
                    },
                    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */ ) { // eslint-disable-line no-unused-vars
                        return arrayLastIndexOf.apply(validate(this), arguments);
                    },
                    map: function map(mapfn /* , thisArg */ ) {
                        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    reduce: function reduce(callbackfn /* , initialValue */ ) { // eslint-disable-line no-unused-vars
                        return arrayReduce.apply(validate(this), arguments);
                    },
                    reduceRight: function reduceRight(callbackfn /* , initialValue */ ) { // eslint-disable-line no-unused-vars
                        return arrayReduceRight.apply(validate(this), arguments);
                    },
                    reverse: function reverse() {
                        var that = this;
                        var length = validate(that).length;
                        var middle = Math.floor(length / 2);
                        var index = 0;
                        var value;
                        while (index < middle) {
                            value = that[index];
                            that[index++] = that[--length];
                            that[length] = value;
                        }
                        return that;
                    },
                    some: function some(callbackfn /* , thisArg */ ) {
                        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    sort: function sort(comparefn) {
                        return arraySort.call(validate(this), comparefn);
                    },
                    subarray: function subarray(begin, end) {
                        var O = validate(this);
                        var length = O.length;
                        var $begin = toAbsoluteIndex(begin, length);
                        return new(speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
                            O.buffer,
                            O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
                            toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
                        );
                    }
                };

                var $slice = function slice(start, end) {
                    return speciesFromList(this, arraySlice.call(validate(this), start, end));
                };

                var $set = function set(arrayLike /* , offset */ ) {
                    validate(this);
                    var offset = toOffset(arguments[1], 1);
                    var length = this.length;
                    var src = toObject(arrayLike);
                    var len = toLength(src.length);
                    var index = 0;
                    if (len + offset > length) throw RangeError(WRONG_LENGTH);
                    while (index < len) this[offset + index] = src[index++];
                };

                var $iterators = {
                    entries: function entries() {
                        return arrayEntries.call(validate(this));
                    },
                    keys: function keys() {
                        return arrayKeys.call(validate(this));
                    },
                    values: function values() {
                        return arrayValues.call(validate(this));
                    }
                };

                var isTAIndex = function(target, key) {
                    return isObject(target) &&
                        target[TYPED_ARRAY] &&
                        typeof key != 'symbol' &&
                        key in target &&
                        String(+key) == String(key);
                };
                var $getDesc = function getOwnPropertyDescriptor(target, key) {
                    return isTAIndex(target, key = toPrimitive(key, true)) ?
                        propertyDesc(2, target[key]) :
                        gOPD(target, key);
                };
                var $setDesc = function defineProperty(target, key, desc) {
                    if (isTAIndex(target, key = toPrimitive(key, true)) &&
                        isObject(desc) &&
                        has(desc, 'value') &&
                        !has(desc, 'get') &&
                        !has(desc, 'set')
                        // TODO: add validation descriptor w/o calling accessors
                        &&
                        !desc.configurable &&
                        (!has(desc, 'writable') || desc.writable) &&
                        (!has(desc, 'enumerable') || desc.enumerable)
                    ) {
                        target[key] = desc.value;
                        return target;
                    }
                    return dP(target, key, desc);
                };

                if (!ALL_CONSTRUCTORS) {
                    $GOPD.f = $getDesc;
                    $DP.f = $setDesc;
                }

                $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
                    getOwnPropertyDescriptor: $getDesc,
                    defineProperty: $setDesc
                });

                if (fails(function() { arrayToString.call({}); })) {
                    arrayToString = arrayToLocaleString = function toString() {
                        return arrayJoin.call(this);
                    };
                }

                var $TypedArrayPrototype$ = redefineAll({}, proto);
                redefineAll($TypedArrayPrototype$, $iterators);
                hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
                redefineAll($TypedArrayPrototype$, {
                    slice: $slice,
                    set: $set,
                    constructor: function() { /* noop */ },
                    toString: arrayToString,
                    toLocaleString: $toLocaleString
                });
                addGetter($TypedArrayPrototype$, 'buffer', 'b');
                addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
                addGetter($TypedArrayPrototype$, 'byteLength', 'l');
                addGetter($TypedArrayPrototype$, 'length', 'e');
                dP($TypedArrayPrototype$, TAG, {
                    get: function() { return this[TYPED_ARRAY]; }
                });

                // eslint-disable-next-line max-statements
                module.exports = function(KEY, BYTES, wrapper, CLAMPED) {
                    CLAMPED = !!CLAMPED;
                    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
                    var GETTER = 'get' + KEY;
                    var SETTER = 'set' + KEY;
                    var TypedArray = global[NAME];
                    var Base = TypedArray || {};
                    var TAC = TypedArray && getPrototypeOf(TypedArray);
                    var FORCED = !TypedArray || !$typed.ABV;
                    var O = {};
                    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
                    var getter = function(that, index) {
                        var data = that._d;
                        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
                    };
                    var setter = function(that, index, value) {
                        var data = that._d;
                        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
                        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
                    };
                    var addElement = function(that, index) {
                        dP(that, index, {
                            get: function() {
                                return getter(this, index);
                            },
                            set: function(value) {
                                return setter(this, index, value);
                            },
                            enumerable: true
                        });
                    };
                    if (FORCED) {
                        TypedArray = wrapper(function(that, data, $offset, $length) {
                            anInstance(that, TypedArray, NAME, '_d');
                            var index = 0;
                            var offset = 0;
                            var buffer, byteLength, length, klass;
                            if (!isObject(data)) {
                                length = toIndex(data);
                                byteLength = length * BYTES;
                                buffer = new $ArrayBuffer(byteLength);
                            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                                buffer = data;
                                offset = toOffset($offset, BYTES);
                                var $len = data.byteLength;
                                if ($length === undefined) {
                                    if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                                    byteLength = $len - offset;
                                    if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                                } else {
                                    byteLength = toLength($length) * BYTES;
                                    if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
                                }
                                length = byteLength / BYTES;
                            } else if (TYPED_ARRAY in data) {
                                return fromList(TypedArray, data);
                            } else {
                                return $from.call(TypedArray, data);
                            }
                            hide(that, '_d', {
                                b: buffer,
                                o: offset,
                                l: byteLength,
                                e: length,
                                v: new $DataView(buffer)
                            });
                            while (index < length) addElement(that, index++);
                        });
                        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
                        hide(TypedArrayPrototype, 'constructor', TypedArray);
                    } else if (!fails(function() {
                            TypedArray(1);
                        }) || !fails(function() {
                            new TypedArray(-1); // eslint-disable-line no-new
                        }) || !$iterDetect(function(iter) {
                            new TypedArray(); // eslint-disable-line no-new
                            new TypedArray(null); // eslint-disable-line no-new
                            new TypedArray(1.5); // eslint-disable-line no-new
                            new TypedArray(iter); // eslint-disable-line no-new
                        }, true)) {
                        TypedArray = wrapper(function(that, data, $offset, $length) {
                            anInstance(that, TypedArray, NAME);
                            var klass;
                            // `ws` module bug, temporarily remove validation length for Uint8Array
                            // https://github.com/websockets/ws/pull/645
                            if (!isObject(data)) return new Base(toIndex(data));
                            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                                return $length !== undefined ?
                                    new Base(data, toOffset($offset, BYTES), $length) :
                                    $offset !== undefined ?
                                    new Base(data, toOffset($offset, BYTES)) :
                                    new Base(data);
                            }
                            if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                            return $from.call(TypedArray, data);
                        });
                        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key) {
                            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
                        });
                        TypedArray[PROTOTYPE] = TypedArrayPrototype;
                        if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
                    }
                    var $nativeIterator = TypedArrayPrototype[ITERATOR];
                    var CORRECT_ITER_NAME = !!$nativeIterator &&
                        ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
                    var $iterator = $iterators.values;
                    hide(TypedArray, TYPED_CONSTRUCTOR, true);
                    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
                    hide(TypedArrayPrototype, VIEW, true);
                    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

                    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                        dP(TypedArrayPrototype, TAG, {
                            get: function() { return NAME; }
                        });
                    }

                    O[NAME] = TypedArray;

                    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

                    $export($export.S, NAME, {
                        BYTES_PER_ELEMENT: BYTES
                    });

                    $export($export.S + $export.F * fails(function() { Base.of.call(TypedArray, 1); }), NAME, {
                        from: $from,
                        of: $of
                    });

                    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

                    $export($export.P, NAME, proto);

                    setSpecies(NAME);

                    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

                    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

                    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

                    $export($export.P + $export.F * fails(function() {
                        new TypedArray(1).slice();
                    }), NAME, { slice: $slice });

                    $export($export.P + $export.F * (fails(function() {
                        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
                    }) || !fails(function() {
                        TypedArrayPrototype.toLocaleString.call([1, 2]);
                    })), NAME, { toLocaleString: $toLocaleString });

                    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
                    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
                };
            } else module.exports = function() { /* empty */ };


            /***/
        }),
        /* 30 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_metadata.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var Map = __webpack_require__( /*! ./es6.map */ 116);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var shared = __webpack_require__( /*! ./_shared */ 53)('metadata');
            var store = shared.store || (shared.store = new(__webpack_require__( /*! ./es6.weak-map */ 119))());

            var getOrCreateMetadataMap = function(target, targetKey, create) {
                var targetMetadata = store.get(target);
                if (!targetMetadata) {
                    if (!create) return undefined;
                    store.set(target, targetMetadata = new Map());
                }
                var keyMetadata = targetMetadata.get(targetKey);
                if (!keyMetadata) {
                    if (!create) return undefined;
                    targetMetadata.set(targetKey, keyMetadata = new Map());
                }
                return keyMetadata;
            };
            var ordinaryHasOwnMetadata = function(MetadataKey, O, P) {
                var metadataMap = getOrCreateMetadataMap(O, P, false);
                return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
            };
            var ordinaryGetOwnMetadata = function(MetadataKey, O, P) {
                var metadataMap = getOrCreateMetadataMap(O, P, false);
                return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
            };
            var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P) {
                getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
            };
            var ordinaryOwnMetadataKeys = function(target, targetKey) {
                var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
                var keys = [];
                if (metadataMap) metadataMap.forEach(function(_, key) { keys.push(key); });
                return keys;
            };
            var toMetaKey = function(it) {
                return it === undefined || typeof it == 'symbol' ? it : String(it);
            };
            var exp = function(O) {
                $export($export.S, 'Reflect', O);
            };

            module.exports = {
                store: store,
                map: getOrCreateMetadataMap,
                has: ordinaryHasOwnMetadata,
                get: ordinaryGetOwnMetadata,
                set: ordinaryDefineOwnMetadata,
                keys: ordinaryOwnMetadataKeys,
                key: toMetaKey,
                exp: exp
            };


            /***/
        }),
        /* 31 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_meta.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var META = __webpack_require__( /*! ./_uid */ 34)('meta');
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var has = __webpack_require__( /*! ./_has */ 11);
            var setDesc = __webpack_require__( /*! ./_object-dp */ 7).f;
            var id = 0;
            var isExtensible = Object.isExtensible || function() {
                return true;
            };
            var FREEZE = !__webpack_require__( /*! ./_fails */ 3)(function() {
                return isExtensible(Object.preventExtensions({}));
            });
            var setMeta = function(it) {
                setDesc(it, META, {
                    value: {
                        i: 'O' + ++id, // object ID
                        w: {} // weak collections IDs
                    }
                });
            };
            var fastKey = function(it, create) {
                // return primitive with prefix
                if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                if (!has(it, META)) {
                    // can't set metadata to uncaught frozen object
                    if (!isExtensible(it)) return 'F';
                    // not necessary to add metadata
                    if (!create) return 'E';
                    // add missing metadata
                    setMeta(it);
                    // return object ID
                }
                return it[META].i;
            };
            var getWeak = function(it, create) {
                if (!has(it, META)) {
                    // can't set metadata to uncaught frozen object
                    if (!isExtensible(it)) return true;
                    // not necessary to add metadata
                    if (!create) return false;
                    // add missing metadata
                    setMeta(it);
                    // return hash weak collections IDs
                }
                return it[META].w;
            };
            // add metadata on freeze-family methods calling
            var onFreeze = function(it) {
                if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
                return it;
            };
            var meta = module.exports = {
                KEY: META,
                NEED: false,
                fastKey: fastKey,
                getWeak: getWeak,
                onFreeze: onFreeze
            };


            /***/
        }),
        /* 32 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 22.1.3.31 Array.prototype[@@unscopables]
            var UNSCOPABLES = __webpack_require__( /*! ./_wks */ 5)('unscopables');
            var ArrayProto = Array.prototype;
            if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__( /*! ./_hide */ 12)(ArrayProto, UNSCOPABLES, {});
            module.exports = function(key) {
                ArrayProto[UNSCOPABLES][key] = true;
            };


            /***/
        }),
        /* 33 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_property-desc.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(bitmap, value) {
                return {
                    enumerable: !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable: !(bitmap & 4),
                    value: value
                };
            };


            /***/
        }),
        /* 34 */
        /*!**********************************************!*\
          !*** ./node_modules/core-js/modules/_uid.js ***!
          \**********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            var id = 0;
            var px = Math.random();
            module.exports = function(key) {
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };


            /***/
        }),
        /* 35 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_library.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = false;


            /***/
        }),
        /* 36 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_object-keys.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.14 / 15.2.3.14 Object.keys(O)
            var $keys = __webpack_require__( /*! ./_object-keys-internal */ 97);
            var enumBugKeys = __webpack_require__( /*! ./_enum-bug-keys */ 70);

            module.exports = Object.keys || function keys(O) {
                return $keys(O, enumBugKeys);
            };


            /***/
        }),
        /* 37 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var max = Math.max;
            var min = Math.min;
            module.exports = function(index, length) {
                index = toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
            };


            /***/
        }),
        /* 38 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_object-create.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var dPs = __webpack_require__( /*! ./_object-dps */ 98);
            var enumBugKeys = __webpack_require__( /*! ./_enum-bug-keys */ 70);
            var IE_PROTO = __webpack_require__( /*! ./_shared-key */ 69)('IE_PROTO');
            var Empty = function() { /* empty */ };
            var PROTOTYPE = 'prototype';

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var createDict = function() {
                // Thrash, waste and sodomy: IE GC bug
                var iframe = __webpack_require__( /*! ./_dom-create */ 67)('iframe');
                var i = enumBugKeys.length;
                var lt = '<';
                var gt = '>';
                var iframeDocument;
                iframe.style.display = 'none';
                __webpack_require__( /*! ./_html */ 71).appendChild(iframe);
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url
                // createDict = iframe.contentWindow.Object;
                // html.removeChild(iframe);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
                return createDict();
            };

            module.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                    Empty[PROTOTYPE] = anObject(O);
                    result = new Empty();
                    Empty[PROTOTYPE] = null;
                    // add "__proto__" for Object.getPrototypeOf polyfill
                    result[IE_PROTO] = O;
                } else result = createDict();
                return Properties === undefined ? result : dPs(result, Properties);
            };


            /***/
        }),
        /* 39 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_object-gopn.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
            var $keys = __webpack_require__( /*! ./_object-keys-internal */ 97);
            var hiddenKeys = __webpack_require__( /*! ./_enum-bug-keys */ 70).concat('length', 'prototype');

            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                return $keys(O, hiddenKeys);
            };


            /***/
        }),
        /* 40 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_set-species.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var global = __webpack_require__( /*! ./_global */ 2);
            var dP = __webpack_require__( /*! ./_object-dp */ 7);
            var DESCRIPTORS = __webpack_require__( /*! ./_descriptors */ 6);
            var SPECIES = __webpack_require__( /*! ./_wks */ 5)('species');

            module.exports = function(KEY) {
                var C = global[KEY];
                if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                    configurable: true,
                    get: function() { return this; }
                });
            };


            /***/
        }),
        /* 41 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_an-instance.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(it, Constructor, name, forbiddenField) {
                if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
                    throw TypeError(name + ': incorrect invocation!');
                }
                return it;
            };


            /***/
        }),
        /* 42 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/_for-of.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var call = __webpack_require__( /*! ./_iter-call */ 109);
            var isArrayIter = __webpack_require__( /*! ./_is-array-iter */ 83);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var getIterFn = __webpack_require__( /*! ./core.get-iterator-method */ 85);
            var BREAK = {};
            var RETURN = {};
            var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
                var iterFn = ITERATOR ? function() { return iterable; } : getIterFn(iterable);
                var f = ctx(fn, that, entries ? 2 : 1);
                var index = 0;
                var length, step, iterator, result;
                if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
                // fast case for arrays with default iterator
                if (isArrayIter(iterFn))
                    for (length = toLength(iterable.length); length > index; index++) {
                        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                        if (result === BREAK || result === RETURN) return result;
                    } else
                        for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                            result = call(iterator, f, step.value, entries);
                            if (result === BREAK || result === RETURN) return result;
                        }
            };
            exports.BREAK = BREAK;
            exports.RETURN = RETURN;


            /***/
        }),
        /* 43 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/_redefine-all.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            module.exports = function(target, src, safe) {
                for (var key in src) redefine(target, key, src[key], safe);
                return target;
            };


            /***/
        }),
        /* 44 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var def = __webpack_require__( /*! ./_object-dp */ 7).f;
            var has = __webpack_require__( /*! ./_has */ 11);
            var TAG = __webpack_require__( /*! ./_wks */ 5)('toStringTag');

            module.exports = function(it, tag, stat) {
                if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
            };


            /***/
        }),
        /* 45 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_string-trim.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var spaces = __webpack_require__( /*! ./_string-ws */ 73);
            var space = '[' + spaces + ']';
            var non = '\u200b\u0085';
            var ltrim = RegExp('^' + space + space + '*');
            var rtrim = RegExp(space + space + '*$');

            var exporter = function(KEY, exec, ALIAS) {
                var exp = {};
                var FORCE = fails(function() {
                    return !!spaces[KEY]() || non[KEY]() != non;
                });
                var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
                if (ALIAS) exp[ALIAS] = fn;
                $export($export.P + $export.F * FORCE, 'String', exp);
            };

            // 1 -> String#trimLeft
            // 2 -> String#trimRight
            // 3 -> String#trim
            var trim = exporter.trim = function(string, TYPE) {
                string = String(defined(string));
                if (TYPE & 1) string = string.replace(ltrim, '');
                if (TYPE & 2) string = string.replace(rtrim, '');
                return string;
            };

            module.exports = exporter;


            /***/
        }),
        /* 46 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_iterators.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = {};


            /***/
        }),
        /* 47 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/_validate-collection.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            module.exports = function(it, TYPE) {
                if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
                return it;
            };


            /***/
        }),
        /* 48 */
        ,
        /* 49 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_iobject.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            var cof = __webpack_require__( /*! ./_cof */ 20);
            // eslint-disable-next-line no-prototype-builtins
            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
                return cof(it) == 'String' ? it.split('') : Object(it);
            };


            /***/
        }),
        /* 50 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_object-pie.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            exports.f = {}.propertyIsEnumerable;


            /***/
        }),
        /* 51 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_classof.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // getting tag from 19.1.3.6 Object.prototype.toString()
            var cof = __webpack_require__( /*! ./_cof */ 20);
            var TAG = __webpack_require__( /*! ./_wks */ 5)('toStringTag');
            // ES3 wrong here
            var ARG = cof(function() { return arguments; }()) == 'Arguments';

            // fallback for IE11 Script Access Denied error
            var tryGet = function(it, key) {
                try {
                    return it[key];
                } catch (e) { /* empty */ }
            };

            module.exports = function(it) {
                var O, T, B;
                return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    :
                    typeof(T = tryGet(O = Object(it), TAG)) == 'string' ? T
                    // builtinTag case
                    :
                    ARG ? cof(O)
                    // ES3 arguments fallback
                    :
                    (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };


            /***/
        }),
        /* 52 */
        /*!**********************!*\
          !*** ./src/utils.js ***!
          \**********************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.flat = exports.randomYPos = exports.randomXPos = exports.delay = exports.range = exports.centerGameObjects = undefined;

            var _config = __webpack_require__( /*! ./config */ 22);

            var _config2 = _interopRequireDefault(_config);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

            var centerGameObjects = exports.centerGameObjects = function centerGameObjects(objects) {
                objects.forEach(function(object) {
                    object.anchor.setTo(0.5);
                });
            };

            var range = exports.range = function range(max) {
                return [].concat(_toConsumableArray(Array(max).keys()));
            };

            var delay = exports.delay = function delay(time) {
                return new Promise(function(resolve) {
                    return setTimeout(resolve, time);
                });
            };

            var randomXPos = exports.randomXPos = function randomXPos() {
                return Math.floor(Math.random() * _config2.default.gameWidth);
            };
            var randomYPos = exports.randomYPos = function randomYPos() {
                return Math.floor(Math.random() * _config2.default.gameHeight);
            };

            var flat = exports.flat = function flat(arr) {
                return arr.reduce(function(acc, val) {
                    return acc.concat(val);
                }, []);
            };

            /***/
        }),
        /* 53 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/_shared.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var SHARED = '__core-js_shared__';
            var store = global[SHARED] || (global[SHARED] = {});
            module.exports = function(key) {
                return store[key] || (store[key] = {});
            };


            /***/
        }),
        /* 54 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/_array-includes.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // false -> Array#indexOf
            // true  -> Array#includes
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            module.exports = function(IS_INCLUDES) {
                return function($this, el, fromIndex) {
                    var O = toIObject($this);
                    var length = toLength(O.length);
                    var index = toAbsoluteIndex(fromIndex, length);
                    var value;
                    // Array#includes uses SameValueZero equality algorithm
                    // eslint-disable-next-line no-self-compare
                    if (IS_INCLUDES && el != el)
                        while (length > index) {
                            value = O[index++];
                            // eslint-disable-next-line no-self-compare
                            if (value != value) return true;
                            // Array#indexOf ignores holes, Array#includes - not
                        } else
                            for (; length > index; index++)
                                if (IS_INCLUDES || index in O) {
                                    if (O[index] === el) return IS_INCLUDES || index || 0;
                                }
                    return !IS_INCLUDES && -1;
                };
            };


            /***/
        }),
        /* 55 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_object-gops.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            exports.f = Object.getOwnPropertySymbols;


            /***/
        }),
        /* 56 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_is-array.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.2.2 IsArray(argument)
            var cof = __webpack_require__( /*! ./_cof */ 20);
            module.exports = Array.isArray || function isArray(arg) {
                return cof(arg) == 'Array';
            };


            /***/
        }),
        /* 57 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_is-regexp.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.2.8 IsRegExp(argument)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var cof = __webpack_require__( /*! ./_cof */ 20);
            var MATCH = __webpack_require__( /*! ./_wks */ 5)('match');
            module.exports = function(it) {
                var isRegExp;
                return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
            };


            /***/
        }),
        /* 58 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_iter-detect.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var ITERATOR = __webpack_require__( /*! ./_wks */ 5)('iterator');
            var SAFE_CLOSING = false;

            try {
                var riter = [7][ITERATOR]();
                riter['return'] = function() { SAFE_CLOSING = true; };
                // eslint-disable-next-line no-throw-literal
                Array.from(riter, function() { throw 2; });
            } catch (e) { /* empty */ }

            module.exports = function(exec, skipClosing) {
                if (!skipClosing && !SAFE_CLOSING) return false;
                var safe = false;
                try {
                    var arr = [7];
                    var iter = arr[ITERATOR]();
                    iter.next = function() { return { done: safe = true }; };
                    arr[ITERATOR] = function() { return iter; };
                    exec(arr);
                } catch (e) { /* empty */ }
                return safe;
            };


            /***/
        }),
        /* 59 */
        /*!************************************************!*\
          !*** ./node_modules/core-js/modules/_flags.js ***!
          \************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 21.2.5.3 get RegExp.prototype.flags
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            module.exports = function() {
                var that = anObject(this);
                var result = '';
                if (that.global) result += 'g';
                if (that.ignoreCase) result += 'i';
                if (that.multiline) result += 'm';
                if (that.unicode) result += 'u';
                if (that.sticky) result += 'y';
                return result;
            };


            /***/
        }),
        /* 60 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var hide = __webpack_require__( /*! ./_hide */ 12);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            var wks = __webpack_require__( /*! ./_wks */ 5);

            module.exports = function(KEY, length, exec) {
                var SYMBOL = wks(KEY);
                var fns = exec(defined, SYMBOL, '' [KEY]);
                var strfn = fns[0];
                var rxfn = fns[1];
                if (fails(function() {
                        var O = {};
                        O[SYMBOL] = function() { return 7; };
                        return '' [KEY](O) != 7;
                    })) {
                    redefine(String.prototype, KEY, strfn);
                    hide(RegExp.prototype, SYMBOL, length == 2
                        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                        ?

                        function(string, arg) { return rxfn.call(string, this, arg); }
                        // 21.2.5.6 RegExp.prototype[@@match](string)
                        // 21.2.5.9 RegExp.prototype[@@search](string)
                        :
                        function(string) { return rxfn.call(string, this); }
                    );
                }
            };


            /***/
        }),
        /* 61 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/_species-constructor.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 7.3.20 SpeciesConstructor(O, defaultConstructor)
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var SPECIES = __webpack_require__( /*! ./_wks */ 5)('species');
            module.exports = function(O, D) {
                var C = anObject(O).constructor;
                var S;
                return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
            };


            /***/
        }),
        /* 62 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_collection.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var global = __webpack_require__( /*! ./_global */ 2);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
            var meta = __webpack_require__( /*! ./_meta */ 31);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var $iterDetect = __webpack_require__( /*! ./_iter-detect */ 58);
            var setToStringTag = __webpack_require__( /*! ./_set-to-string-tag */ 44);
            var inheritIfRequired = __webpack_require__( /*! ./_inherit-if-required */ 74);

            module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
                var Base = global[NAME];
                var C = Base;
                var ADDER = IS_MAP ? 'set' : 'add';
                var proto = C && C.prototype;
                var O = {};
                var fixMethod = function(KEY) {
                    var fn = proto[KEY];
                    redefine(proto, KEY,
                        KEY == 'delete' ? function(a) {
                            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                        } : KEY == 'has' ? function has(a) {
                            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                        } : KEY == 'get' ? function get(a) {
                            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                        } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; } :
                        function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
                    );
                };
                if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
                        new C().entries().next();
                    }))) {
                    // create collection constructor
                    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                    redefineAll(C.prototype, methods);
                    meta.NEED = true;
                } else {
                    var instance = new C();
                    // early implementations not supports chaining
                    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
                    var THROWS_ON_PRIMITIVES = fails(function() { instance.has(1); });
                    // most early implementations doesn't supports iterables, most modern - not close it correctly
                    var ACCEPT_ITERABLES = $iterDetect(function(iter) { new C(iter); }); // eslint-disable-line no-new
                    // for early implementations -0 and +0 not the same
                    var BUGGY_ZERO = !IS_WEAK && fails(function() {
                        // V8 ~ Chromium 42- fails only with 5+ elements
                        var $instance = new C();
                        var index = 5;
                        while (index--) $instance[ADDER](index, index);
                        return !$instance.has(-0);
                    });
                    if (!ACCEPT_ITERABLES) {
                        C = wrapper(function(target, iterable) {
                            anInstance(target, C, NAME);
                            var that = inheritIfRequired(new Base(), target, C);
                            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                            return that;
                        });
                        C.prototype = proto;
                        proto.constructor = C;
                    }
                    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                        fixMethod('delete');
                        fixMethod('has');
                        IS_MAP && fixMethod('get');
                    }
                    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
                    // weak collections should not contains .clear method
                    if (IS_WEAK && proto.clear) delete proto.clear;
                }

                setToStringTag(C, NAME);

                O[NAME] = C;
                $export($export.G + $export.W + $export.F * (C != Base), O);

                if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

                return C;
            };


            /***/
        }),
        /* 63 */
        /*!************************************************!*\
          !*** ./node_modules/core-js/modules/_typed.js ***!
          \************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var uid = __webpack_require__( /*! ./_uid */ 34);
            var TYPED = uid('typed_array');
            var VIEW = uid('view');
            var ABV = !!(global.ArrayBuffer && global.DataView);
            var CONSTR = ABV;
            var i = 0;
            var l = 9;
            var Typed;

            var TypedArrayConstructors = (
                'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
            ).split(',');

            while (i < l) {
                if (Typed = global[TypedArrayConstructors[i++]]) {
                    hide(Typed.prototype, TYPED, true);
                    hide(Typed.prototype, VIEW, true);
                } else CONSTR = false;
            }

            module.exports = {
                ABV: ABV,
                CONSTR: CONSTR,
                TYPED: TYPED,
                VIEW: VIEW
            };


            /***/
        }),
        /* 64 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_object-forced-pam.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // Forced replacement prototype accessors methods
            module.exports = __webpack_require__( /*! ./_library */ 35) || !__webpack_require__( /*! ./_fails */ 3)(function() {
                var K = Math.random();
                // In FF throws only define methods
                // eslint-disable-next-line no-undef, no-useless-call
                __defineSetter__.call(null, K, function() { /* empty */ });
                delete __webpack_require__( /*! ./_global */ 2)[K];
            });


            /***/
        }),
        /* 65 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_set-collection-of.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/proposal-setmap-offrom/
            var $export = __webpack_require__( /*! ./_export */ 0);

            module.exports = function(COLLECTION) {
                $export($export.S, COLLECTION, {
                    of: function of() {
                        var length = arguments.length;
                        var A = new Array(length);
                        while (length--) A[length] = arguments[length];
                        return new this(A);
                    }
                });
            };


            /***/
        }),
        /* 66 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/_set-collection-from.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/proposal-setmap-offrom/
            var $export = __webpack_require__( /*! ./_export */ 0);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);

            module.exports = function(COLLECTION) {
                $export($export.S, COLLECTION, {
                    from: function from(source /* , mapFn, thisArg */ ) {
                        var mapFn = arguments[1];
                        var mapping, A, n, cb;
                        aFunction(this);
                        mapping = mapFn !== undefined;
                        if (mapping) aFunction(mapFn);
                        if (source == undefined) return new this();
                        A = [];
                        if (mapping) {
                            n = 0;
                            cb = ctx(mapFn, arguments[2], 2);
                            forOf(source, false, function(nextItem) {
                                A.push(cb(nextItem, n++));
                            });
                        } else {
                            forOf(source, false, A.push, A);
                        }
                        return new this(A);
                    }
                });
            };


            /***/
        }),
        /* 67 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_dom-create.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var document = __webpack_require__( /*! ./_global */ 2).document;
            // typeof document.createElement is 'object' in old IE
            var is = isObject(document) && isObject(document.createElement);
            module.exports = function(it) {
                return is ? document.createElement(it) : {};
            };


            /***/
        }),
        /* 68 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_wks-define.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var core = __webpack_require__( /*! ./_core */ 23);
            var LIBRARY = __webpack_require__( /*! ./_library */ 35);
            var wksExt = __webpack_require__( /*! ./_wks-ext */ 96);
            var defineProperty = __webpack_require__( /*! ./_object-dp */ 7).f;
            module.exports = function(name) {
                var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
                if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
            };


            /***/
        }),
        /* 69 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_shared-key.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var shared = __webpack_require__( /*! ./_shared */ 53)('keys');
            var uid = __webpack_require__( /*! ./_uid */ 34);
            module.exports = function(key) {
                return shared[key] || (shared[key] = uid(key));
            };


            /***/
        }),
        /* 70 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // IE 8- don't enum bug keys
            module.exports = (
                'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
            ).split(',');


            /***/
        }),
        /* 71 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_html.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var document = __webpack_require__( /*! ./_global */ 2).document;
            module.exports = document && document.documentElement;


            /***/
        }),
        /* 72 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_set-proto.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // Works with __proto__ only. Old v8 can't work with null proto objects.
            /* eslint-disable no-proto */
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var check = function(O, proto) {
                anObject(O);
                if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
            };
            module.exports = {
                set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
                    function(test, buggy, set) {
                        try {
                            set = __webpack_require__( /*! ./_ctx */ 19)(Function.call, __webpack_require__( /*! ./_object-gopd */ 16).f(Object.prototype, '__proto__').set, 2);
                            set(test, []);
                            buggy = !(test instanceof Array);
                        } catch (e) { buggy = true; }
                        return function setPrototypeOf(O, proto) {
                            check(O, proto);
                            if (buggy) O.__proto__ = proto;
                            else set(O, proto);
                            return O;
                        };
                    }({}, false) : undefined),
                check: check
            };


            /***/
        }),
        /* 73 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_string-ws.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
                '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


            /***/
        }),
        /* 74 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var setPrototypeOf = __webpack_require__( /*! ./_set-proto */ 72).set;
            module.exports = function(that, target, C) {
                var S = target.constructor;
                var P;
                if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                    setPrototypeOf(that, P);
                }
                return that;
            };


            /***/
        }),
        /* 75 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_string-repeat.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var defined = __webpack_require__( /*! ./_defined */ 25);

            module.exports = function repeat(count) {
                var str = String(defined(this));
                var res = '';
                var n = toInteger(count);
                if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
                for (; n > 0;
                    (n >>>= 1) && (str += str))
                    if (n & 1) res += str;
                return res;
            };


            /***/
        }),
        /* 76 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_math-sign.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 20.2.2.28 Math.sign(x)
            module.exports = Math.sign || function sign(x) {
                // eslint-disable-next-line no-self-compare
                return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
            };


            /***/
        }),
        /* 77 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_math-expm1.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 20.2.2.14 Math.expm1(x)
            var $expm1 = Math.expm1;
            module.exports = (!$expm1
                // Old FF bug
                ||
                $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
                // Tor Browser bug
                ||
                $expm1(-2e-17) != -2e-17
            ) ? function expm1(x) {
                return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
            } : $expm1;


            /***/
        }),
        /* 78 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_string-at.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            // true  -> String#at
            // false -> String#codePointAt
            module.exports = function(TO_STRING) {
                return function(that, pos) {
                    var s = String(defined(that));
                    var i = toInteger(pos);
                    var l = s.length;
                    var a, b;
                    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                    a = s.charCodeAt(i);
                    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ?
                        TO_STRING ? s.charAt(i) : a :
                        TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                };
            };


            /***/
        }),
        /* 79 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_iter-define.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var LIBRARY = __webpack_require__( /*! ./_library */ 35);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var has = __webpack_require__( /*! ./_has */ 11);
            var Iterators = __webpack_require__( /*! ./_iterators */ 46);
            var $iterCreate = __webpack_require__( /*! ./_iter-create */ 80);
            var setToStringTag = __webpack_require__( /*! ./_set-to-string-tag */ 44);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var ITERATOR = __webpack_require__( /*! ./_wks */ 5)('iterator');
            var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
            var FF_ITERATOR = '@@iterator';
            var KEYS = 'keys';
            var VALUES = 'values';

            var returnThis = function() { return this; };

            module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                $iterCreate(Constructor, NAME, next);
                var getMethod = function(kind) {
                    if (!BUGGY && kind in proto) return proto[kind];
                    switch (kind) {
                        case KEYS:
                            return function keys() { return new Constructor(this, kind); };
                        case VALUES:
                            return function values() { return new Constructor(this, kind); };
                    }
                    return function entries() { return new Constructor(this, kind); };
                };
                var TAG = NAME + ' Iterator';
                var DEF_VALUES = DEFAULT == VALUES;
                var VALUES_BUG = false;
                var proto = Base.prototype;
                var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
                var $default = (!BUGGY && $native) || getMethod(DEFAULT);
                var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
                var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
                var methods, key, IteratorPrototype;
                // Fix native
                if ($anyNative) {
                    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                        // Set @@toStringTag to native iterators
                        setToStringTag(IteratorPrototype, TAG, true);
                        // fix for some old engines
                        if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                    }
                }
                // fix Array#{values, @@iterator}.name in V8 / FF
                if (DEF_VALUES && $native && $native.name !== VALUES) {
                    VALUES_BUG = true;
                    $default = function values() { return $native.call(this); };
                }
                // Define iterator
                if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                    hide(proto, ITERATOR, $default);
                }
                // Plug for library
                Iterators[NAME] = $default;
                Iterators[TAG] = returnThis;
                if (DEFAULT) {
                    methods = {
                        values: DEF_VALUES ? $default : getMethod(VALUES),
                        keys: IS_SET ? $default : getMethod(KEYS),
                        entries: $entries
                    };
                    if (FORCED)
                        for (key in methods) {
                            if (!(key in proto)) redefine(proto, key, methods[key]);
                        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                }
                return methods;
            };


            /***/
        }),
        /* 80 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_iter-create.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var create = __webpack_require__( /*! ./_object-create */ 38);
            var descriptor = __webpack_require__( /*! ./_property-desc */ 33);
            var setToStringTag = __webpack_require__( /*! ./_set-to-string-tag */ 44);
            var IteratorPrototype = {};

            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            __webpack_require__( /*! ./_hide */ 12)(IteratorPrototype, __webpack_require__( /*! ./_wks */ 5)('iterator'), function() { return this; });

            module.exports = function(Constructor, NAME, next) {
                Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
                setToStringTag(Constructor, NAME + ' Iterator');
            };


            /***/
        }),
        /* 81 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/_string-context.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // helper for String#{startsWith, endsWith, includes}
            var isRegExp = __webpack_require__( /*! ./_is-regexp */ 57);
            var defined = __webpack_require__( /*! ./_defined */ 25);

            module.exports = function(that, searchString, NAME) {
                if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
                return String(defined(that));
            };


            /***/
        }),
        /* 82 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var MATCH = __webpack_require__( /*! ./_wks */ 5)('match');
            module.exports = function(KEY) {
                var re = /./;
                try {
                    '/./' [KEY](re);
                } catch (e) {
                    try {
                        re[MATCH] = false;
                        return !'/./' [KEY](re);
                    } catch (f) { /* empty */ }
                }
                return true;
            };


            /***/
        }),
        /* 83 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // check on default Array iterator
            var Iterators = __webpack_require__( /*! ./_iterators */ 46);
            var ITERATOR = __webpack_require__( /*! ./_wks */ 5)('iterator');
            var ArrayProto = Array.prototype;

            module.exports = function(it) {
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };


            /***/
        }),
        /* 84 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_create-property.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $defineProperty = __webpack_require__( /*! ./_object-dp */ 7);
            var createDesc = __webpack_require__( /*! ./_property-desc */ 33);

            module.exports = function(object, index, value) {
                if (index in object) $defineProperty.f(object, index, createDesc(0, value));
                else object[index] = value;
            };


            /***/
        }),
        /* 85 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__( /*! ./_classof */ 51);
            var ITERATOR = __webpack_require__( /*! ./_wks */ 5)('iterator');
            var Iterators = __webpack_require__( /*! ./_iterators */ 46);
            module.exports = __webpack_require__( /*! ./_core */ 23).getIteratorMethod = function(it) {
                if (it != undefined) return it[ITERATOR] ||
                    it['@@iterator'] ||
                    Iterators[classof(it)];
            };


            /***/
        }),
        /* 86 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/_array-species-create.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
            var speciesConstructor = __webpack_require__( /*! ./_array-species-constructor */ 227);

            module.exports = function(original, length) {
                return new(speciesConstructor(original))(length);
            };


            /***/
        }),
        /* 87 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_array-fill.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            module.exports = function fill(value /* , start = 0, end = @length */ ) {
                var O = toObject(this);
                var length = toLength(O.length);
                var aLen = arguments.length;
                var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
                var end = aLen > 2 ? arguments[2] : undefined;
                var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
                while (endPos > index) O[index++] = value;
                return O;
            };


            /***/
        }),
        /* 88 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var addToUnscopables = __webpack_require__( /*! ./_add-to-unscopables */ 32);
            var step = __webpack_require__( /*! ./_iter-step */ 112);
            var Iterators = __webpack_require__( /*! ./_iterators */ 46);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);

            // 22.1.3.4 Array.prototype.entries()
            // 22.1.3.13 Array.prototype.keys()
            // 22.1.3.29 Array.prototype.values()
            // 22.1.3.30 Array.prototype[@@iterator]()
            module.exports = __webpack_require__( /*! ./_iter-define */ 79)(Array, 'Array', function(iterated, kind) {
                this._t = toIObject(iterated); // target
                this._i = 0; // next index
                this._k = kind; // kind
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
            }, function() {
                var O = this._t;
                var kind = this._k;
                var index = this._i++;
                if (!O || index >= O.length) {
                    this._t = undefined;
                    return step(1);
                }
                if (kind == 'keys') return step(0, index);
                if (kind == 'values') return step(0, O[index]);
                return step(0, [index, O[index]]);
            }, 'values');

            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
            Iterators.Arguments = Iterators.Array;

            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');


            /***/
        }),
        /* 89 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_task.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var invoke = __webpack_require__( /*! ./_invoke */ 102);
            var html = __webpack_require__( /*! ./_html */ 71);
            var cel = __webpack_require__( /*! ./_dom-create */ 67);
            var global = __webpack_require__( /*! ./_global */ 2);
            var process = global.process;
            var setTask = global.setImmediate;
            var clearTask = global.clearImmediate;
            var MessageChannel = global.MessageChannel;
            var Dispatch = global.Dispatch;
            var counter = 0;
            var queue = {};
            var ONREADYSTATECHANGE = 'onreadystatechange';
            var defer, channel, port;
            var run = function() {
                var id = +this;
                // eslint-disable-next-line no-prototype-builtins
                if (queue.hasOwnProperty(id)) {
                    var fn = queue[id];
                    delete queue[id];
                    fn();
                }
            };
            var listener = function(event) {
                run.call(event.data);
            };
            // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
            if (!setTask || !clearTask) {
                setTask = function setImmediate(fn) {
                    var args = [];
                    var i = 1;
                    while (arguments.length > i) args.push(arguments[i++]);
                    queue[++counter] = function() {
                        // eslint-disable-next-line no-new-func
                        invoke(typeof fn == 'function' ? fn : Function(fn), args);
                    };
                    defer(counter);
                    return counter;
                };
                clearTask = function clearImmediate(id) {
                    delete queue[id];
                };
                // Node.js 0.8-
                if (__webpack_require__( /*! ./_cof */ 20)(process) == 'process') {
                    defer = function(id) {
                        process.nextTick(ctx(run, id, 1));
                    };
                    // Sphere (JS game engine) Dispatch API
                } else if (Dispatch && Dispatch.now) {
                    defer = function(id) {
                        Dispatch.now(ctx(run, id, 1));
                    };
                    // Browsers with MessageChannel, includes WebWorkers
                } else if (MessageChannel) {
                    channel = new MessageChannel();
                    port = channel.port2;
                    channel.port1.onmessage = listener;
                    defer = ctx(port.postMessage, port, 1);
                    // Browsers with postMessage, skip WebWorkers
                    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
                } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                    defer = function(id) {
                        global.postMessage(id + '', '*');
                    };
                    global.addEventListener('message', listener, false);
                    // IE8-
                } else if (ONREADYSTATECHANGE in cel('script')) {
                    defer = function(id) {
                        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
                            html.removeChild(this);
                            run.call(id);
                        };
                    };
                    // Rest old browsers
                } else {
                    defer = function(id) {
                        setTimeout(ctx(run, id, 1), 0);
                    };
                }
            }
            module.exports = {
                set: setTask,
                clear: clearTask
            };


            /***/
        }),
        /* 90 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_microtask.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var macrotask = __webpack_require__( /*! ./_task */ 89).set;
            var Observer = global.MutationObserver || global.WebKitMutationObserver;
            var process = global.process;
            var Promise = global.Promise;
            var isNode = __webpack_require__( /*! ./_cof */ 20)(process) == 'process';

            module.exports = function() {
                var head, last, notify;

                var flush = function() {
                    var parent, fn;
                    if (isNode && (parent = process.domain)) parent.exit();
                    while (head) {
                        fn = head.fn;
                        head = head.next;
                        try {
                            fn();
                        } catch (e) {
                            if (head) notify();
                            else last = undefined;
                            throw e;
                        }
                    }
                    last = undefined;
                    if (parent) parent.enter();
                };

                // Node.js
                if (isNode) {
                    notify = function() {
                        process.nextTick(flush);
                    };
                    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
                } else if (Observer && !(global.navigator && global.navigator.standalone)) {
                    var toggle = true;
                    var node = document.createTextNode('');
                    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
                    notify = function() {
                        node.data = toggle = !toggle;
                    };
                    // environments with maybe non-completely correct, but existent Promise
                } else if (Promise && Promise.resolve) {
                    var promise = Promise.resolve();
                    notify = function() {
                        promise.then(flush);
                    };
                    // for other environments - macrotask based on:
                    // - setImmediate
                    // - MessageChannel
                    // - window.postMessag
                    // - onreadystatechange
                    // - setTimeout
                } else {
                    notify = function() {
                        // strange IE + webpack dev server bug - use .call(global)
                        macrotask.call(global, flush);
                    };
                }

                return function(fn) {
                    var task = { fn: fn, next: undefined };
                    if (last) last.next = task;
                    if (!head) {
                        head = task;
                        notify();
                    }
                    last = task;
                };
            };


            /***/
        }),
        /* 91 */
        /*!*****************************************************************!*\
          !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
          \*****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 25.4.1.5 NewPromiseCapability(C)
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);

            function PromiseCapability(C) {
                var resolve, reject;
                this.promise = new C(function($$resolve, $$reject) {
                    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                    resolve = $$resolve;
                    reject = $$reject;
                });
                this.resolve = aFunction(resolve);
                this.reject = aFunction(reject);
            }

            module.exports.f = function(C) {
                return new PromiseCapability(C);
            };


            /***/
        }),
        /* 92 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var global = __webpack_require__( /*! ./_global */ 2);
            var DESCRIPTORS = __webpack_require__( /*! ./_descriptors */ 6);
            var LIBRARY = __webpack_require__( /*! ./_library */ 35);
            var $typed = __webpack_require__( /*! ./_typed */ 63);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var toIndex = __webpack_require__( /*! ./_to-index */ 121);
            var gOPN = __webpack_require__( /*! ./_object-gopn */ 39).f;
            var dP = __webpack_require__( /*! ./_object-dp */ 7).f;
            var arrayFill = __webpack_require__( /*! ./_array-fill */ 87);
            var setToStringTag = __webpack_require__( /*! ./_set-to-string-tag */ 44);
            var ARRAY_BUFFER = 'ArrayBuffer';
            var DATA_VIEW = 'DataView';
            var PROTOTYPE = 'prototype';
            var WRONG_LENGTH = 'Wrong length!';
            var WRONG_INDEX = 'Wrong index!';
            var $ArrayBuffer = global[ARRAY_BUFFER];
            var $DataView = global[DATA_VIEW];
            var Math = global.Math;
            var RangeError = global.RangeError;
            // eslint-disable-next-line no-shadow-restricted-names
            var Infinity = global.Infinity;
            var BaseBuffer = $ArrayBuffer;
            var abs = Math.abs;
            var pow = Math.pow;
            var floor = Math.floor;
            var log = Math.log;
            var LN2 = Math.LN2;
            var BUFFER = 'buffer';
            var BYTE_LENGTH = 'byteLength';
            var BYTE_OFFSET = 'byteOffset';
            var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
            var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
            var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

            // IEEE754 conversions based on https://github.com/feross/ieee754
            function packIEEE754(value, mLen, nBytes) {
                var buffer = new Array(nBytes);
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
                var i = 0;
                var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                var e, m, c;
                value = abs(value);
                // eslint-disable-next-line no-self-compare
                if (value != value || value === Infinity) {
                    // eslint-disable-next-line no-self-compare
                    m = value != value ? 1 : 0;
                    e = eMax;
                } else {
                    e = floor(log(value) / LN2);
                    if (value * (c = pow(2, -e)) < 1) {
                        e--;
                        c *= 2;
                    }
                    if (e + eBias >= 1) {
                        value += rt / c;
                    } else {
                        value += rt * pow(2, 1 - eBias);
                    }
                    if (value * c >= 2) {
                        e++;
                        c /= 2;
                    }
                    if (e + eBias >= eMax) {
                        m = 0;
                        e = eMax;
                    } else if (e + eBias >= 1) {
                        m = (value * c - 1) * pow(2, mLen);
                        e = e + eBias;
                    } else {
                        m = value * pow(2, eBias - 1) * pow(2, mLen);
                        e = 0;
                    }
                }
                for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
                e = e << mLen | m;
                eLen += mLen;
                for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
                buffer[--i] |= s * 128;
                return buffer;
            }

            function unpackIEEE754(buffer, mLen, nBytes) {
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var nBits = eLen - 7;
                var i = nBytes - 1;
                var s = buffer[i--];
                var e = s & 127;
                var m;
                s >>= 7;
                for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
                m = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;
                for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
                if (e === 0) {
                    e = 1 - eBias;
                } else if (e === eMax) {
                    return m ? NaN : s ? -Infinity : Infinity;
                } else {
                    m = m + pow(2, mLen);
                    e = e - eBias;
                }
                return (s ? -1 : 1) * m * pow(2, e - mLen);
            }

            function unpackI32(bytes) {
                return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
            }

            function packI8(it) {
                return [it & 0xff];
            }

            function packI16(it) {
                return [it & 0xff, it >> 8 & 0xff];
            }

            function packI32(it) {
                return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
            }

            function packF64(it) {
                return packIEEE754(it, 52, 8);
            }

            function packF32(it) {
                return packIEEE754(it, 23, 4);
            }

            function addGetter(C, key, internal) {
                dP(C[PROTOTYPE], key, { get: function() { return this[internal]; } });
            }

            function get(view, bytes, index, isLittleEndian) {
                var numIndex = +index;
                var intIndex = toIndex(numIndex);
                if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
                var store = view[$BUFFER]._b;
                var start = intIndex + view[$OFFSET];
                var pack = store.slice(start, start + bytes);
                return isLittleEndian ? pack : pack.reverse();
            }

            function set(view, bytes, index, conversion, value, isLittleEndian) {
                var numIndex = +index;
                var intIndex = toIndex(numIndex);
                if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
                var store = view[$BUFFER]._b;
                var start = intIndex + view[$OFFSET];
                var pack = conversion(+value);
                for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
            }

            if (!$typed.ABV) {
                $ArrayBuffer = function ArrayBuffer(length) {
                    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                    var byteLength = toIndex(length);
                    this._b = arrayFill.call(new Array(byteLength), 0);
                    this[$LENGTH] = byteLength;
                };

                $DataView = function DataView(buffer, byteOffset, byteLength) {
                    anInstance(this, $DataView, DATA_VIEW);
                    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                    var bufferLength = buffer[$LENGTH];
                    var offset = toInteger(byteOffset);
                    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
                    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
                    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
                    this[$BUFFER] = buffer;
                    this[$OFFSET] = offset;
                    this[$LENGTH] = byteLength;
                };

                if (DESCRIPTORS) {
                    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
                    addGetter($DataView, BUFFER, '_b');
                    addGetter($DataView, BYTE_LENGTH, '_l');
                    addGetter($DataView, BYTE_OFFSET, '_o');
                }

                redefineAll($DataView[PROTOTYPE], {
                    getInt8: function getInt8(byteOffset) {
                        return get(this, 1, byteOffset)[0] << 24 >> 24;
                    },
                    getUint8: function getUint8(byteOffset) {
                        return get(this, 1, byteOffset)[0];
                    },
                    getInt16: function getInt16(byteOffset /* , littleEndian */ ) {
                        var bytes = get(this, 2, byteOffset, arguments[1]);
                        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                    },
                    getUint16: function getUint16(byteOffset /* , littleEndian */ ) {
                        var bytes = get(this, 2, byteOffset, arguments[1]);
                        return bytes[1] << 8 | bytes[0];
                    },
                    getInt32: function getInt32(byteOffset /* , littleEndian */ ) {
                        return unpackI32(get(this, 4, byteOffset, arguments[1]));
                    },
                    getUint32: function getUint32(byteOffset /* , littleEndian */ ) {
                        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
                    },
                    getFloat32: function getFloat32(byteOffset /* , littleEndian */ ) {
                        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
                    },
                    getFloat64: function getFloat64(byteOffset /* , littleEndian */ ) {
                        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
                    },
                    setInt8: function setInt8(byteOffset, value) {
                        set(this, 1, byteOffset, packI8, value);
                    },
                    setUint8: function setUint8(byteOffset, value) {
                        set(this, 1, byteOffset, packI8, value);
                    },
                    setInt16: function setInt16(byteOffset, value /* , littleEndian */ ) {
                        set(this, 2, byteOffset, packI16, value, arguments[2]);
                    },
                    setUint16: function setUint16(byteOffset, value /* , littleEndian */ ) {
                        set(this, 2, byteOffset, packI16, value, arguments[2]);
                    },
                    setInt32: function setInt32(byteOffset, value /* , littleEndian */ ) {
                        set(this, 4, byteOffset, packI32, value, arguments[2]);
                    },
                    setUint32: function setUint32(byteOffset, value /* , littleEndian */ ) {
                        set(this, 4, byteOffset, packI32, value, arguments[2]);
                    },
                    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */ ) {
                        set(this, 4, byteOffset, packF32, value, arguments[2]);
                    },
                    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */ ) {
                        set(this, 8, byteOffset, packF64, value, arguments[2]);
                    }
                });
            } else {
                if (!fails(function() {
                        $ArrayBuffer(1);
                    }) || !fails(function() {
                        new $ArrayBuffer(-1); // eslint-disable-line no-new
                    }) || fails(function() {
                        new $ArrayBuffer(); // eslint-disable-line no-new
                        new $ArrayBuffer(1.5); // eslint-disable-line no-new
                        new $ArrayBuffer(NaN); // eslint-disable-line no-new
                        return $ArrayBuffer.name != ARRAY_BUFFER;
                    })) {
                    $ArrayBuffer = function ArrayBuffer(length) {
                        anInstance(this, $ArrayBuffer);
                        return new BaseBuffer(toIndex(length));
                    };
                    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
                    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                        if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
                    }
                    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
                }
                // iOS Safari 7.x bug
                var view = new $DataView(new $ArrayBuffer(2));
                var $setInt8 = $DataView[PROTOTYPE].setInt8;
                view.setInt8(0, 2147483648);
                view.setInt8(1, 2147483649);
                if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
                    setInt8: function setInt8(byteOffset, value) {
                        $setInt8.call(this, byteOffset, value << 24 >> 24);
                    },
                    setUint8: function setUint8(byteOffset, value) {
                        $setInt8.call(this, byteOffset, value << 24 >> 24);
                    }
                }, true);
            }
            setToStringTag($ArrayBuffer, ARRAY_BUFFER);
            setToStringTag($DataView, DATA_VIEW);
            hide($DataView[PROTOTYPE], $typed.VIEW, true);
            exports[ARRAY_BUFFER] = $ArrayBuffer;
            exports[DATA_VIEW] = $DataView;


            /***/
        }),
        /* 93 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_user-agent.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var navigator = global.navigator;

            module.exports = navigator && navigator.userAgent || '';


            /***/
        }),
        /* 94 */
        /*!************************!*\
          !*** ./src/letters.js ***!
          \************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

            var lettersWithQuantities = exports.lettersWithQuantities = {
                'A': 9,
                'B': 2,
                'C': 2,
                'Č': 2,
                'Ć': 2,
                'D': 4,
                'Đ': 2,
                'E': 12,
                'F': 2,
                'G': 3,
                'H': 2,
                'I': 9,
                'J': 1,
                'K': 1,
                'L': 4,
                'M': 2,
                'N': 6,
                'O': 8,
                'P': 2,
                'R': 6,
                'S': 4,
                'Š': 4,
                'T': 6,
                'U': 4,
                'V': 2,
                'Z': 1,
                'Ž': 1
            };

            var letterPoints = exports.letterPoints = {
                'A': 1,
                'B': 3,
                'C': 3,
                'Č': 3,
                'Ć': 3,
                'D': 2,
                'Đ': 10,
                'E': 1,
                'F': 4,
                'G': 2,
                'H': 4,
                'I': 1,
                'J': 8,
                'K': 5,
                'L': 1,
                'M': 3,
                'N': 1,
                'O': 1,
                'P': 3,
                'R': 1,
                'S': 1,
                'Š': 10,
                'T': 1,
                'U': 1,
                'V': 2,
                'Z': 10,
                'Ž': 12
            };

            var letterToPoint = exports.letterToPoint = function letterToPoint(letter) {
                return letterPoints[letter.toUpperCase()];
            };

            var letters = exports.letters = Object.keys(lettersWithQuantities);

            var distributedLetters = exports.distributedLetters = letters.reduce(function(arr, letter) {
                arr = [].concat(_toConsumableArray(arr), _toConsumableArray(Array(lettersWithQuantities[letter]).fill(letter)));
                return arr;
            }, []);

            var randomLetter = exports.randomLetter = function randomLetter() {
                return distributedLetters[Math.floor(Math.random() * distributedLetters.length)];
            };

            /***/
        }),
        /* 95 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            module.exports = !__webpack_require__( /*! ./_descriptors */ 6) && !__webpack_require__( /*! ./_fails */ 3)(function() {
                return Object.defineProperty(__webpack_require__( /*! ./_dom-create */ 67)('div'), 'a', { get: function() { return 7; } }).a != 7;
            });


            /***/
        }),
        /* 96 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_wks-ext.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            exports.f = __webpack_require__( /*! ./_wks */ 5);


            /***/
        }),
        /* 97 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var has = __webpack_require__( /*! ./_has */ 11);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var arrayIndexOf = __webpack_require__( /*! ./_array-includes */ 54)(false);
            var IE_PROTO = __webpack_require__( /*! ./_shared-key */ 69)('IE_PROTO');

            module.exports = function(object, names) {
                var O = toIObject(object);
                var i = 0;
                var result = [];
                var key;
                for (key in O)
                    if (key != IE_PROTO) has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                while (names.length > i)
                    if (has(O, key = names[i++])) {
                        ~arrayIndexOf(result, key) || result.push(key);
                    }
                return result;
            };


            /***/
        }),
        /* 98 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_object-dps.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var dP = __webpack_require__( /*! ./_object-dp */ 7);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var getKeys = __webpack_require__( /*! ./_object-keys */ 36);

            module.exports = __webpack_require__( /*! ./_descriptors */ 6) ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var keys = getKeys(Properties);
                var length = keys.length;
                var i = 0;
                var P;
                while (length > i) dP.f(O, P = keys[i++], Properties[P]);
                return O;
            };


            /***/
        }),
        /* 99 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var gOPN = __webpack_require__( /*! ./_object-gopn */ 39).f;
            var toString = {}.toString;

            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ?
                Object.getOwnPropertyNames(window) : [];

            var getWindowNames = function(it) {
                try {
                    return gOPN(it);
                } catch (e) {
                    return windowNames.slice();
                }
            };

            module.exports.f = function getOwnPropertyNames(it) {
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
            };


            /***/
        }),
        /* 100 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/_object-assign.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 19.1.2.1 Object.assign(target, source, ...)
            var getKeys = __webpack_require__( /*! ./_object-keys */ 36);
            var gOPS = __webpack_require__( /*! ./_object-gops */ 55);
            var pIE = __webpack_require__( /*! ./_object-pie */ 50);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var IObject = __webpack_require__( /*! ./_iobject */ 49);
            var $assign = Object.assign;

            // should work with symbols and should have deterministic property order (V8 bug)
            module.exports = !$assign || __webpack_require__( /*! ./_fails */ 3)(function() {
                var A = {};
                var B = {};
                // eslint-disable-next-line no-undef
                var S = Symbol();
                var K = 'abcdefghijklmnopqrst';
                A[S] = 7;
                K.split('').forEach(function(k) { B[k] = k; });
                return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
            }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var aLen = arguments.length;
                var index = 1;
                var getSymbols = gOPS.f;
                var isEnum = pIE.f;
                while (aLen > index) {
                    var S = IObject(arguments[index++]);
                    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                    var length = keys.length;
                    var j = 0;
                    var key;
                    while (length > j)
                        if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
                }
                return T;
            } : $assign;


            /***/
        }),
        /* 101 */
        /*!***********************************************!*\
          !*** ./node_modules/core-js/modules/_bind.js ***!
          \***********************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var invoke = __webpack_require__( /*! ./_invoke */ 102);
            var arraySlice = [].slice;
            var factories = {};

            var construct = function(F, len, args) {
                if (!(len in factories)) {
                    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
                    // eslint-disable-next-line no-new-func
                    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
                }
                return factories[len](F, args);
            };

            module.exports = Function.bind || function bind(that /* , ...args */ ) {
                var fn = aFunction(this);
                var partArgs = arraySlice.call(arguments, 1);
                var bound = function( /* args... */ ) {
                    var args = partArgs.concat(arraySlice.call(arguments));
                    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
                };
                if (isObject(fn.prototype)) bound.prototype = fn.prototype;
                return bound;
            };


            /***/
        }),
        /* 102 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/_invoke.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // fast apply, http://jsperf.lnkit.com/fast-apply/5
            module.exports = function(fn, args, that) {
                var un = that === undefined;
                switch (args.length) {
                    case 0:
                        return un ? fn() :
                            fn.call(that);
                    case 1:
                        return un ? fn(args[0]) :
                            fn.call(that, args[0]);
                    case 2:
                        return un ? fn(args[0], args[1]) :
                            fn.call(that, args[0], args[1]);
                    case 3:
                        return un ? fn(args[0], args[1], args[2]) :
                            fn.call(that, args[0], args[1], args[2]);
                    case 4:
                        return un ? fn(args[0], args[1], args[2], args[3]) :
                            fn.call(that, args[0], args[1], args[2], args[3]);
                }
                return fn.apply(that, args);
            };


            /***/
        }),
        /* 103 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_parse-int.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $parseInt = __webpack_require__( /*! ./_global */ 2).parseInt;
            var $trim = __webpack_require__( /*! ./_string-trim */ 45).trim;
            var ws = __webpack_require__( /*! ./_string-ws */ 73);
            var hex = /^[-+]?0[xX]/;

            module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
                var string = $trim(String(str), 3);
                return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
            } : $parseInt;


            /***/
        }),
        /* 104 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_parse-float.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $parseFloat = __webpack_require__( /*! ./_global */ 2).parseFloat;
            var $trim = __webpack_require__( /*! ./_string-trim */ 45).trim;

            module.exports = 1 / $parseFloat(__webpack_require__( /*! ./_string-ws */ 73) + '-0') !== -Infinity ? function parseFloat(str) {
                var string = $trim(String(str), 3);
                var result = $parseFloat(string);
                return result === 0 && string.charAt(0) == '-' ? -0 : result;
            } : $parseFloat;


            /***/
        }),
        /* 105 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/_a-number-value.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var cof = __webpack_require__( /*! ./_cof */ 20);
            module.exports = function(it, msg) {
                if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
                return +it;
            };


            /***/
        }),
        /* 106 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_is-integer.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.3 Number.isInteger(number)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var floor = Math.floor;
            module.exports = function isInteger(it) {
                return !isObject(it) && isFinite(it) && floor(it) === it;
            };


            /***/
        }),
        /* 107 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_math-log1p.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 20.2.2.20 Math.log1p(x)
            module.exports = Math.log1p || function log1p(x) {
                return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
            };


            /***/
        }),
        /* 108 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/_math-fround.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.16 Math.fround(x)
            var sign = __webpack_require__( /*! ./_math-sign */ 76);
            var pow = Math.pow;
            var EPSILON = pow(2, -52);
            var EPSILON32 = pow(2, -23);
            var MAX32 = pow(2, 127) * (2 - EPSILON32);
            var MIN32 = pow(2, -126);

            var roundTiesToEven = function(n) {
                return n + 1 / EPSILON - 1 / EPSILON;
            };

            module.exports = Math.fround || function fround(x) {
                var $abs = Math.abs(x);
                var $sign = sign(x);
                var a, result;
                if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
                a = (1 + EPSILON32 / EPSILON) * $abs;
                result = a - (a - $abs);
                // eslint-disable-next-line no-self-compare
                if (result > MAX32 || result != result) return $sign * Infinity;
                return $sign * result;
            };


            /***/
        }),
        /* 109 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_iter-call.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // call something on iterator step with safe closing on error
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            module.exports = function(iterator, fn, value, entries) {
                try {
                    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                    // 7.4.6 IteratorClose(iterator, completion)
                } catch (e) {
                    var ret = iterator['return'];
                    if (ret !== undefined) anObject(ret.call(iterator));
                    throw e;
                }
            };


            /***/
        }),
        /* 110 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/_array-reduce.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var IObject = __webpack_require__( /*! ./_iobject */ 49);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);

            module.exports = function(that, callbackfn, aLen, memo, isRight) {
                aFunction(callbackfn);
                var O = toObject(that);
                var self = IObject(O);
                var length = toLength(O.length);
                var index = isRight ? length - 1 : 0;
                var i = isRight ? -1 : 1;
                if (aLen < 2)
                    for (;;) {
                        if (index in self) {
                            memo = self[index];
                            index += i;
                            break;
                        }
                        index += i;
                        if (isRight ? index < 0 : length <= index) {
                            throw TypeError('Reduce of empty array with no initial value');
                        }
                    }
                for (; isRight ? index >= 0 : length > index; index += i)
                    if (index in self) {
                        memo = callbackfn(memo, self[index], index, O);
                    }
                return memo;
            };


            /***/
        }),
        /* 111 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);

            module.exports = [].copyWithin || function copyWithin(target /* = 0 */ , start /* = 0, end = @length */ ) {
                var O = toObject(this);
                var len = toLength(O.length);
                var to = toAbsoluteIndex(target, len);
                var from = toAbsoluteIndex(start, len);
                var end = arguments.length > 2 ? arguments[2] : undefined;
                var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
                var inc = 1;
                if (from < to && to < from + count) {
                    inc = -1;
                    from += count - 1;
                    to += count - 1;
                }
                while (count-- > 0) {
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                    to += inc;
                    from += inc;
                }
                return O;
            };


            /***/
        }),
        /* 112 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_iter-step.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(done, value) {
                return { value: value, done: !!done };
            };


            /***/
        }),
        /* 113 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 21.2.5.3 get RegExp.prototype.flags()
            if (__webpack_require__( /*! ./_descriptors */ 6) && /./g.flags != 'g') __webpack_require__( /*! ./_object-dp */ 7).f(RegExp.prototype, 'flags', {
                configurable: true,
                get: __webpack_require__( /*! ./_flags */ 59)
            });


            /***/
        }),
        /* 114 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/_perform.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(exec) {
                try {
                    return { e: false, v: exec() };
                } catch (e) {
                    return { e: true, v: e };
                }
            };


            /***/
        }),
        /* 115 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var newPromiseCapability = __webpack_require__( /*! ./_new-promise-capability */ 91);

            module.exports = function(C, x) {
                anObject(C);
                if (isObject(x) && x.constructor === C) return x;
                var promiseCapability = newPromiseCapability.f(C);
                var resolve = promiseCapability.resolve;
                resolve(x);
                return promiseCapability.promise;
            };


            /***/
        }),
        /* 116 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/es6.map.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var strong = __webpack_require__( /*! ./_collection-strong */ 117);
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var MAP = 'Map';

            // 23.1 Map Objects
            module.exports = __webpack_require__( /*! ./_collection */ 62)(MAP, function(get) {
                return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
            }, {
                // 23.1.3.6 Map.prototype.get(key)
                get: function get(key) {
                    var entry = strong.getEntry(validate(this, MAP), key);
                    return entry && entry.v;
                },
                // 23.1.3.9 Map.prototype.set(key, value)
                set: function set(key, value) {
                    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
                }
            }, strong, true);


            /***/
        }),
        /* 117 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_collection-strong.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var dP = __webpack_require__( /*! ./_object-dp */ 7).f;
            var create = __webpack_require__( /*! ./_object-create */ 38);
            var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);
            var $iterDefine = __webpack_require__( /*! ./_iter-define */ 79);
            var step = __webpack_require__( /*! ./_iter-step */ 112);
            var setSpecies = __webpack_require__( /*! ./_set-species */ 40);
            var DESCRIPTORS = __webpack_require__( /*! ./_descriptors */ 6);
            var fastKey = __webpack_require__( /*! ./_meta */ 31).fastKey;
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var SIZE = DESCRIPTORS ? '_s' : 'size';

            var getEntry = function(that, key) {
                // fast case
                var index = fastKey(key);
                var entry;
                if (index !== 'F') return that._i[index];
                // frozen object case
                for (entry = that._f; entry; entry = entry.n) {
                    if (entry.k == key) return entry;
                }
            };

            module.exports = {
                getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                    var C = wrapper(function(that, iterable) {
                        anInstance(that, C, NAME, '_i');
                        that._t = NAME; // collection type
                        that._i = create(null); // index
                        that._f = undefined; // first entry
                        that._l = undefined; // last entry
                        that[SIZE] = 0; // size
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        // 23.1.3.1 Map.prototype.clear()
                        // 23.2.3.2 Set.prototype.clear()
                        clear: function clear() {
                            for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                                entry.r = true;
                                if (entry.p) entry.p = entry.p.n = undefined;
                                delete data[entry.i];
                            }
                            that._f = that._l = undefined;
                            that[SIZE] = 0;
                        },
                        // 23.1.3.3 Map.prototype.delete(key)
                        // 23.2.3.4 Set.prototype.delete(value)
                        'delete': function(key) {
                            var that = validate(this, NAME);
                            var entry = getEntry(that, key);
                            if (entry) {
                                var next = entry.n;
                                var prev = entry.p;
                                delete that._i[entry.i];
                                entry.r = true;
                                if (prev) prev.n = next;
                                if (next) next.p = prev;
                                if (that._f == entry) that._f = next;
                                if (that._l == entry) that._l = prev;
                                that[SIZE]--;
                            }
                            return !!entry;
                        },
                        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                        forEach: function forEach(callbackfn /* , that = undefined */ ) {
                            validate(this, NAME);
                            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                            var entry;
                            while (entry = entry ? entry.n : this._f) {
                                f(entry.v, entry.k, this);
                                // revert to the last existing entry
                                while (entry && entry.r) entry = entry.p;
                            }
                        },
                        // 23.1.3.7 Map.prototype.has(key)
                        // 23.2.3.7 Set.prototype.has(value)
                        has: function has(key) {
                            return !!getEntry(validate(this, NAME), key);
                        }
                    });
                    if (DESCRIPTORS) dP(C.prototype, 'size', {
                        get: function() {
                            return validate(this, NAME)[SIZE];
                        }
                    });
                    return C;
                },
                def: function(that, key, value) {
                    var entry = getEntry(that, key);
                    var prev, index;
                    // change existing entry
                    if (entry) {
                        entry.v = value;
                        // create new entry
                    } else {
                        that._l = entry = {
                            i: index = fastKey(key, true), // <- index
                            k: key, // <- key
                            v: value, // <- value
                            p: prev = that._l, // <- previous entry
                            n: undefined, // <- next entry
                            r: false // <- removed
                        };
                        if (!that._f) that._f = entry;
                        if (prev) prev.n = entry;
                        that[SIZE]++;
                        // add to index
                        if (index !== 'F') that._i[index] = entry;
                    }
                    return that;
                },
                getEntry: getEntry,
                setStrong: function(C, NAME, IS_MAP) {
                    // add .keys, .values, .entries, [@@iterator]
                    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
                    $iterDefine(C, NAME, function(iterated, kind) {
                        this._t = validate(iterated, NAME); // target
                        this._k = kind; // kind
                        this._l = undefined; // previous
                    }, function() {
                        var that = this;
                        var kind = that._k;
                        var entry = that._l;
                        // revert to the last existing entry
                        while (entry && entry.r) entry = entry.p;
                        // get next entry
                        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                            // or finish the iteration
                            that._t = undefined;
                            return step(1);
                        }
                        // return step by kind
                        if (kind == 'keys') return step(0, entry.k);
                        if (kind == 'values') return step(0, entry.v);
                        return step(0, [entry.k, entry.v]);
                    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

                    // add [@@species], 23.1.2.2, 23.2.2.2
                    setSpecies(NAME);
                }
            };


            /***/
        }),
        /* 118 */
        /*!*************************************************!*\
          !*** ./node_modules/core-js/modules/es6.set.js ***!
          \*************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var strong = __webpack_require__( /*! ./_collection-strong */ 117);
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var SET = 'Set';

            // 23.2 Set Objects
            module.exports = __webpack_require__( /*! ./_collection */ 62)(SET, function(get) {
                return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
            }, {
                // 23.2.3.1 Set.prototype.add(value)
                add: function add(value) {
                    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
                }
            }, strong);


            /***/
        }),
        /* 119 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var each = __webpack_require__( /*! ./_array-methods */ 28)(0);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var meta = __webpack_require__( /*! ./_meta */ 31);
            var assign = __webpack_require__( /*! ./_object-assign */ 100);
            var weak = __webpack_require__( /*! ./_collection-weak */ 120);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var WEAK_MAP = 'WeakMap';
            var getWeak = meta.getWeak;
            var isExtensible = Object.isExtensible;
            var uncaughtFrozenStore = weak.ufstore;
            var tmp = {};
            var InternalMap;

            var wrapper = function(get) {
                return function WeakMap() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            };

            var methods = {
                // 23.3.3.3 WeakMap.prototype.get(key)
                get: function get(key) {
                    if (isObject(key)) {
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
                        return data ? data[this._i] : undefined;
                    }
                },
                // 23.3.3.5 WeakMap.prototype.set(key, value)
                set: function set(key, value) {
                    return weak.def(validate(this, WEAK_MAP), key, value);
                }
            };

            // 23.3 WeakMap Objects
            var $WeakMap = module.exports = __webpack_require__( /*! ./_collection */ 62)(WEAK_MAP, wrapper, methods, weak, true, true);

            // IE11 WeakMap frozen keys fix
            if (fails(function() { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
                InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
                assign(InternalMap.prototype, methods);
                meta.NEED = true;
                each(['delete', 'has', 'get', 'set'], function(key) {
                    var proto = $WeakMap.prototype;
                    var method = proto[key];
                    redefine(proto, key, function(a, b) {
                        // store frozen objects on internal weakmap shim
                        if (isObject(a) && !isExtensible(a)) {
                            if (!this._f) this._f = new InternalMap();
                            var result = this._f[key](a, b);
                            return key == 'set' ? this : result;
                            // store all the rest on native weakmap
                        }
                        return method.call(this, a, b);
                    });
                });
            }


            /***/
        }),
        /* 120 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_collection-weak.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
            var getWeak = __webpack_require__( /*! ./_meta */ 31).getWeak;
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);
            var createArrayMethod = __webpack_require__( /*! ./_array-methods */ 28);
            var $has = __webpack_require__( /*! ./_has */ 11);
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var arrayFind = createArrayMethod(5);
            var arrayFindIndex = createArrayMethod(6);
            var id = 0;

            // fallback for uncaught frozen keys
            var uncaughtFrozenStore = function(that) {
                return that._l || (that._l = new UncaughtFrozenStore());
            };
            var UncaughtFrozenStore = function() {
                this.a = [];
            };
            var findUncaughtFrozen = function(store, key) {
                return arrayFind(store.a, function(it) {
                    return it[0] === key;
                });
            };
            UncaughtFrozenStore.prototype = {
                get: function(key) {
                    var entry = findUncaughtFrozen(this, key);
                    if (entry) return entry[1];
                },
                has: function(key) {
                    return !!findUncaughtFrozen(this, key);
                },
                set: function(key, value) {
                    var entry = findUncaughtFrozen(this, key);
                    if (entry) entry[1] = value;
                    else this.a.push([key, value]);
                },
                'delete': function(key) {
                    var index = arrayFindIndex(this.a, function(it) {
                        return it[0] === key;
                    });
                    if (~index) this.a.splice(index, 1);
                    return !!~index;
                }
            };

            module.exports = {
                getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                    var C = wrapper(function(that, iterable) {
                        anInstance(that, C, NAME, '_i');
                        that._t = NAME; // collection type
                        that._i = id++; // collection id
                        that._l = undefined; // leak store for uncaught frozen objects
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        // 23.3.3.2 WeakMap.prototype.delete(key)
                        // 23.4.3.3 WeakSet.prototype.delete(value)
                        'delete': function(key) {
                            if (!isObject(key)) return false;
                            var data = getWeak(key);
                            if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
                            return data && $has(data, this._i) && delete data[this._i];
                        },
                        // 23.3.3.4 WeakMap.prototype.has(key)
                        // 23.4.3.4 WeakSet.prototype.has(value)
                        has: function has(key) {
                            if (!isObject(key)) return false;
                            var data = getWeak(key);
                            if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                            return data && $has(data, this._i);
                        }
                    });
                    return C;
                },
                def: function(that, key, value) {
                    var data = getWeak(anObject(key), true);
                    if (data === true) uncaughtFrozenStore(that).set(key, value);
                    else data[that._i] = value;
                    return that;
                },
                ufstore: uncaughtFrozenStore
            };


            /***/
        }),
        /* 121 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_to-index.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/ecma262/#sec-toindex
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            module.exports = function(it) {
                if (it === undefined) return 0;
                var number = toInteger(it);
                var length = toLength(number);
                if (number !== length) throw RangeError('Wrong length!');
                return length;
            };


            /***/
        }),
        /* 122 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_own-keys.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // all object keys, includes non-enumerable and symbols
            var gOPN = __webpack_require__( /*! ./_object-gopn */ 39);
            var gOPS = __webpack_require__( /*! ./_object-gops */ 55);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var Reflect = __webpack_require__( /*! ./_global */ 2).Reflect;
            module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
                var keys = gOPN.f(anObject(it));
                var getSymbols = gOPS.f;
                return getSymbols ? keys.concat(getSymbols(it)) : keys;
            };


            /***/
        }),
        /* 123 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/_flatten-into-array.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
            var isArray = __webpack_require__( /*! ./_is-array */ 56);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var IS_CONCAT_SPREADABLE = __webpack_require__( /*! ./_wks */ 5)('isConcatSpreadable');

            function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
                var targetIndex = start;
                var sourceIndex = 0;
                var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
                var element, spreadable;

                while (sourceIndex < sourceLen) {
                    if (sourceIndex in source) {
                        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                        spreadable = false;
                        if (isObject(element)) {
                            spreadable = element[IS_CONCAT_SPREADABLE];
                            spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
                        }

                        if (spreadable && depth > 0) {
                            targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                        } else {
                            if (targetIndex >= 0x1fffffffffffff) throw TypeError();
                            target[targetIndex] = element;
                        }

                        targetIndex++;
                    }
                    sourceIndex++;
                }
                return targetIndex;
            }

            module.exports = flattenIntoArray;


            /***/
        }),
        /* 124 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_string-pad.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-string-pad-start-end
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var repeat = __webpack_require__( /*! ./_string-repeat */ 75);
            var defined = __webpack_require__( /*! ./_defined */ 25);

            module.exports = function(that, maxLength, fillString, left) {
                var S = String(defined(that));
                var stringLength = S.length;
                var fillStr = fillString === undefined ? ' ' : String(fillString);
                var intMaxLength = toLength(maxLength);
                if (intMaxLength <= stringLength || fillStr == '') return S;
                var fillLen = intMaxLength - stringLength;
                var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
                if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
                return left ? stringFiller + S : S + stringFiller;
            };


            /***/
        }),
        /* 125 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/_object-to-array.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var getKeys = __webpack_require__( /*! ./_object-keys */ 36);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var isEnum = __webpack_require__( /*! ./_object-pie */ 50).f;
            module.exports = function(isEntries) {
                return function(it) {
                    var O = toIObject(it);
                    var keys = getKeys(O);
                    var length = keys.length;
                    var i = 0;
                    var result = [];
                    var key;
                    while (length > i)
                        if (isEnum.call(O, key = keys[i++])) {
                            result.push(isEntries ? [key, O[key]] : O[key]);
                        }
                    return result;
                };
            };


            /***/
        }),
        /* 126 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/_collection-to-json.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var classof = __webpack_require__( /*! ./_classof */ 51);
            var from = __webpack_require__( /*! ./_array-from-iterable */ 127);
            module.exports = function(NAME) {
                return function toJSON() {
                    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
                    return from(this);
                };
            };


            /***/
        }),
        /* 127 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/_array-from-iterable.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var forOf = __webpack_require__( /*! ./_for-of */ 42);

            module.exports = function(iter, ITERATOR) {
                var result = [];
                forOf(iter, false, result.push, result, ITERATOR);
                return result;
            };


            /***/
        }),
        /* 128 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_math-scale.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // https://rwaldron.github.io/proposal-math-extensions/
            module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
                if (
                    arguments.length === 0
                    // eslint-disable-next-line no-self-compare
                    ||
                    x != x
                    // eslint-disable-next-line no-self-compare
                    ||
                    inLow != inLow
                    // eslint-disable-next-line no-self-compare
                    ||
                    inHigh != inHigh
                    // eslint-disable-next-line no-self-compare
                    ||
                    outLow != outLow
                    // eslint-disable-next-line no-self-compare
                    ||
                    outHigh != outHigh
                ) return NaN;
                if (x === Infinity || x === -Infinity) return x;
                return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
            };


            /***/
        }),
        /* 129 */
        ,
        /* 130 */
        ,
        /* 131 */
        ,
        /* 132 */
        /*!*****************************!*\
          !*** ./src/classes/Grid.js ***!
          \*****************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.checkForWords = exports.checkForRows = exports.emptyGrid = exports.coordToPosition = undefined;

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
            }();

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _config = __webpack_require__( /*! ../config */ 22);

            var _config2 = _interopRequireDefault(_config);

            var _utils = __webpack_require__( /*! ../utils */ 52);

            var _words = __webpack_require__( /*! ../../assets/js/words */ 348);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

            var coordToPosition = exports.coordToPosition = function coordToPosition(coord) {
                return {
                    x: coord.x * _config2.default.grid.tileSize.width + _config2.default.grid.position.x,
                    y: coord.y * _config2.default.grid.tileSize.height + _config2.default.grid.position.y
                };
            };

            var emptyGrid = exports.emptyGrid = function emptyGrid() {
                var grid = [];
                (0, _utils.range)(_config2.default.grid.height).forEach(function(y) {
                    (0, _utils.range)(_config2.default.grid.width).forEach(function(x) {
                        grid.push({
                            x: x,
                            y: y,
                            letter: ' '
                        });
                    });
                });
                return grid;
            };

            var checkForRows = exports.checkForRows = function checkForRows(placedTetraminoes) {
                var coords = (0, _utils.flat)([].concat(_toConsumableArray(placedTetraminoes.map(function(t) {
                    return t.layoutAsCoords();
                }))));
                var coordsToRemove = [];
                (0, _utils.range)(_config2.default.grid.height).map(function(i) {
                    return i + 1;
                }).forEach(function(y) {
                    var coordsOnRow = coords.filter(function(c) {
                        return c.y === y;
                    });
                    if (coordsOnRow.length < _config2.default.grid.width) return;

                    coordsOnRow.map(function(c) {
                        return coordsToRemove.push(c);
                    });
                });
                return coordsToRemove;
            };

            var checkForWords = exports.checkForWords = function checkForWords(placedTetraminoes, createWordResult) {
                var grid = emptyGrid();

                var coordsTilesAndLetters = (0, _utils.flat)(placedTetraminoes.map(function(t) {
                    return t.getCoordsTilesAndLetters();
                }));

                grid = grid.map(function(coord) {
                    return coordsTilesAndLetters.find(function(obj) {
                        return obj.x === coord.x && obj.y === coord.y;
                    }) || coord;
                });

                var rowsOfLetters = (0, _utils.range)(_config2.default.grid.height).map(function(y) {
                    return grid.filter(function(c) {
                        return c.y === y;
                    });
                });
                var columnsOfLetters = (0, _utils.range)(_config2.default.grid.width).map(function(x) {
                    return grid.filter(function(c) {
                        return c.x === x;
                    });
                });
                var linesOfLetters = rowsOfLetters.concat(columnsOfLetters);

                var bigStringOfGrid = (0, _utils.flat)(linesOfLetters).map(function(c) {
                    return c.letter;
                }).join('').toLowerCase();
                var allFoundWords = _words.wordList.filter(function(w) {
                    return bigStringOfGrid.includes(w);
                }).sort(function(a, b) {
                    return b.length - a.length;
                });
                var coordsToRemove = [];

                if (allFoundWords.length === 0) return coordsToRemove;

                linesOfLetters.forEach(function(line) {
                    var joined = line.map(function(obj) {
                        return obj.letter;
                    }).join('').toLowerCase();
                    var found = allFoundWords.find(function(w) {
                        return joined.includes(w);
                    });
                    if (!found) return;

                    console.log(found);
                    createWordResult(found);

                    var index = joined.indexOf(found);

                    found.split('').forEach(function(char, i) {
                        var coordToRemove = { x: line[index + i].x, y: line[index + i].y };
                        coordsToRemove.push(coordToRemove);
                    });
                });
                return coordsToRemove;
            };

            var _class = function() {
                function _class(_ref) {
                    var createBackgroundTile = _ref.createBackgroundTile;

                    _classCallCheck(this, _class);

                    (0, _utils.range)(_config2.default.grid.width).map(function(x) {
                        (0, _utils.range)(_config2.default.grid.height).map(function(y) {
                            createBackgroundTile(coordToPosition({ x: x, y: y }), x);
                        });
                    });
                }

                _createClass(_class, [{
                    key: 'update',
                    value: function update() {}
                }]);

                return _class;
            }();

            exports.default = _class;

            /***/
        }),
        /* 133 */
        /*!****************************!*\
          !*** ./src/tetraminoes.js ***!
          \****************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var config = {
                shapes: [{
                    poses: [
                        [
                            [0, 0],
                            [1, 0],
                            [-1, 0],
                            [0, -1]
                        ],
                        [
                            [0, 0],
                            [0, -1],
                            [0, 1],
                            [1, 0]
                        ],
                        [
                            [0, 0],
                            [0, 1],
                            [-1, 0],
                            [1, 0]
                        ],
                        [
                            [0, 0],
                            [0, 1],
                            [0, -1],
                            [-1, 0]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [0, -1],
                            [0, 1],
                            [1, 1]
                        ],
                        [
                            [0, 0],
                            [-1, 0],
                            [1, 0],
                            [-1, 1]
                        ],
                        [
                            [0, 0],
                            [0, 1],
                            [0, -1],
                            [-1, -1]
                        ],
                        [
                            [0, 0],
                            [1, 0],
                            [-1, 0],
                            [1, -1]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [0, 1],
                            [0, -1],
                            [-1, 1]
                        ],
                        [
                            [0, 0],
                            [1, 0],
                            [-1, 0],
                            [-1, -1]
                        ],
                        [
                            [0, 0],
                            [0, 1],
                            [0, -1],
                            [1, -1]
                        ],
                        [
                            [0, 0],
                            [-1, 0],
                            [1, 0],
                            [1, 1]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [1, 0],
                            [1, -1],
                            [0, -1]
                        ],
                        [
                            [0, -1],
                            [0, 0],
                            [1, 0],
                            [1, -1]
                        ],
                        [
                            [1, -1],
                            [0, -1],
                            [0, 0],
                            [1, 0]
                        ],
                        [
                            [1, 0],
                            [1, -1],
                            [0, -1],
                            [0, 0]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [0, -1],
                            [0, -2],
                            [0, 1]
                        ],
                        [
                            [0, 0],
                            [1, 0],
                            [2, 0],
                            [-1, 0]
                        ],
                        [
                            [0, 0],
                            [0, -1],
                            [0, -2],
                            [0, 1]
                        ],
                        [
                            [0, 0],
                            [1, 0],
                            [2, 0],
                            [-1, 0]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [1, 0],
                            [0, -1],
                            [-1, -1]
                        ],
                        [
                            [0, 0],
                            [0, -1],
                            [1, -1],
                            [1, -2]
                        ],
                        [
                            [0, 0],
                            [1, 0],
                            [0, -1],
                            [-1, -1]
                        ],
                        [
                            [0, 0],
                            [0, -1],
                            [1, -1],
                            [1, -2]
                        ]
                    ]
                }, {
                    poses: [
                        [
                            [0, 0],
                            [-1, 0],
                            [0, -1],
                            [1, -1]
                        ],
                        [
                            [1, 0],
                            [0, -1],
                            [1, -1],
                            [0, -2]
                        ],
                        [
                            [0, 0],
                            [-1, 0],
                            [0, -1],
                            [1, -1]
                        ],
                        [
                            [1, 0],
                            [0, -1],
                            [1, -1],
                            [0, -2]
                        ]
                    ]
                }]
            };

            exports.default = { shapes: config.shapes };
            var arrayToCoord = exports.arrayToCoord = function arrayToCoord(array) {
                return { x: array[0], y: array[1] };
            };
            var randomTIndex = exports.randomTIndex = function randomTIndex() {
                return Math.floor(Math.random() * config.shapes.length);
            };

            /***/
        }),
        /* 134 */
        /*!******************************************!*\
          !*** multi babel-polyfill ./src/main.js ***!
          \******************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! babel-polyfill */ 135);
            module.exports = __webpack_require__( /*! /home/joe/Radna površina/test/lettris-master/src/main.js */ 337);


            /***/
        }),
        /* 135 */
        /*!**************************************************!*\
          !*** ./node_modules/babel-polyfill/lib/index.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function(global) {

                __webpack_require__( /*! core-js/shim */ 136);

                __webpack_require__( /*! regenerator-runtime/runtime */ 333);

                __webpack_require__( /*! core-js/fn/regexp/escape */ 334);

                if (global._babelPolyfill) {
                    throw new Error("only one instance of babel-polyfill is allowed");
                }
                global._babelPolyfill = true;

                var DEFINE_PROPERTY = "defineProperty";

                function define(O, key, value) {
                    O[key] || Object[DEFINE_PROPERTY](O, key, {
                        writable: true,
                        configurable: true,
                        value: value
                    });
                }

                define(String.prototype, "padLeft", "".padStart);
                define(String.prototype, "padRight", "".padEnd);

                "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(key) {
                    [][key] && define(Array, key, Function.call.bind([][key]));
                });
                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__( /*! ./../../webpack/buildin/global.js */ 48)))

            /***/
        }),
        /* 136 */
        /*!**************************************!*\
          !*** ./node_modules/core-js/shim.js ***!
          \**************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./modules/es6.symbol */ 137);
            __webpack_require__( /*! ./modules/es6.object.create */ 139);
            __webpack_require__( /*! ./modules/es6.object.define-property */ 140);
            __webpack_require__( /*! ./modules/es6.object.define-properties */ 141);
            __webpack_require__( /*! ./modules/es6.object.get-own-property-descriptor */ 142);
            __webpack_require__( /*! ./modules/es6.object.get-prototype-of */ 143);
            __webpack_require__( /*! ./modules/es6.object.keys */ 144);
            __webpack_require__( /*! ./modules/es6.object.get-own-property-names */ 145);
            __webpack_require__( /*! ./modules/es6.object.freeze */ 146);
            __webpack_require__( /*! ./modules/es6.object.seal */ 147);
            __webpack_require__( /*! ./modules/es6.object.prevent-extensions */ 148);
            __webpack_require__( /*! ./modules/es6.object.is-frozen */ 149);
            __webpack_require__( /*! ./modules/es6.object.is-sealed */ 150);
            __webpack_require__( /*! ./modules/es6.object.is-extensible */ 151);
            __webpack_require__( /*! ./modules/es6.object.assign */ 152);
            __webpack_require__( /*! ./modules/es6.object.is */ 153);
            __webpack_require__( /*! ./modules/es6.object.set-prototype-of */ 155);
            __webpack_require__( /*! ./modules/es6.object.to-string */ 156);
            __webpack_require__( /*! ./modules/es6.function.bind */ 157);
            __webpack_require__( /*! ./modules/es6.function.name */ 158);
            __webpack_require__( /*! ./modules/es6.function.has-instance */ 159);
            __webpack_require__( /*! ./modules/es6.parse-int */ 160);
            __webpack_require__( /*! ./modules/es6.parse-float */ 161);
            __webpack_require__( /*! ./modules/es6.number.constructor */ 162);
            __webpack_require__( /*! ./modules/es6.number.to-fixed */ 163);
            __webpack_require__( /*! ./modules/es6.number.to-precision */ 164);
            __webpack_require__( /*! ./modules/es6.number.epsilon */ 165);
            __webpack_require__( /*! ./modules/es6.number.is-finite */ 166);
            __webpack_require__( /*! ./modules/es6.number.is-integer */ 167);
            __webpack_require__( /*! ./modules/es6.number.is-nan */ 168);
            __webpack_require__( /*! ./modules/es6.number.is-safe-integer */ 169);
            __webpack_require__( /*! ./modules/es6.number.max-safe-integer */ 170);
            __webpack_require__( /*! ./modules/es6.number.min-safe-integer */ 171);
            __webpack_require__( /*! ./modules/es6.number.parse-float */ 172);
            __webpack_require__( /*! ./modules/es6.number.parse-int */ 173);
            __webpack_require__( /*! ./modules/es6.math.acosh */ 174);
            __webpack_require__( /*! ./modules/es6.math.asinh */ 175);
            __webpack_require__( /*! ./modules/es6.math.atanh */ 176);
            __webpack_require__( /*! ./modules/es6.math.cbrt */ 177);
            __webpack_require__( /*! ./modules/es6.math.clz32 */ 178);
            __webpack_require__( /*! ./modules/es6.math.cosh */ 179);
            __webpack_require__( /*! ./modules/es6.math.expm1 */ 180);
            __webpack_require__( /*! ./modules/es6.math.fround */ 181);
            __webpack_require__( /*! ./modules/es6.math.hypot */ 182);
            __webpack_require__( /*! ./modules/es6.math.imul */ 183);
            __webpack_require__( /*! ./modules/es6.math.log10 */ 184);
            __webpack_require__( /*! ./modules/es6.math.log1p */ 185);
            __webpack_require__( /*! ./modules/es6.math.log2 */ 186);
            __webpack_require__( /*! ./modules/es6.math.sign */ 187);
            __webpack_require__( /*! ./modules/es6.math.sinh */ 188);
            __webpack_require__( /*! ./modules/es6.math.tanh */ 189);
            __webpack_require__( /*! ./modules/es6.math.trunc */ 190);
            __webpack_require__( /*! ./modules/es6.string.from-code-point */ 191);
            __webpack_require__( /*! ./modules/es6.string.raw */ 192);
            __webpack_require__( /*! ./modules/es6.string.trim */ 193);
            __webpack_require__( /*! ./modules/es6.string.iterator */ 194);
            __webpack_require__( /*! ./modules/es6.string.code-point-at */ 195);
            __webpack_require__( /*! ./modules/es6.string.ends-with */ 196);
            __webpack_require__( /*! ./modules/es6.string.includes */ 197);
            __webpack_require__( /*! ./modules/es6.string.repeat */ 198);
            __webpack_require__( /*! ./modules/es6.string.starts-with */ 199);
            __webpack_require__( /*! ./modules/es6.string.anchor */ 200);
            __webpack_require__( /*! ./modules/es6.string.big */ 201);
            __webpack_require__( /*! ./modules/es6.string.blink */ 202);
            __webpack_require__( /*! ./modules/es6.string.bold */ 203);
            __webpack_require__( /*! ./modules/es6.string.fixed */ 204);
            __webpack_require__( /*! ./modules/es6.string.fontcolor */ 205);
            __webpack_require__( /*! ./modules/es6.string.fontsize */ 206);
            __webpack_require__( /*! ./modules/es6.string.italics */ 207);
            __webpack_require__( /*! ./modules/es6.string.link */ 208);
            __webpack_require__( /*! ./modules/es6.string.small */ 209);
            __webpack_require__( /*! ./modules/es6.string.strike */ 210);
            __webpack_require__( /*! ./modules/es6.string.sub */ 211);
            __webpack_require__( /*! ./modules/es6.string.sup */ 212);
            __webpack_require__( /*! ./modules/es6.date.now */ 213);
            __webpack_require__( /*! ./modules/es6.date.to-json */ 214);
            __webpack_require__( /*! ./modules/es6.date.to-iso-string */ 215);
            __webpack_require__( /*! ./modules/es6.date.to-string */ 217);
            __webpack_require__( /*! ./modules/es6.date.to-primitive */ 218);
            __webpack_require__( /*! ./modules/es6.array.is-array */ 220);
            __webpack_require__( /*! ./modules/es6.array.from */ 221);
            __webpack_require__( /*! ./modules/es6.array.of */ 222);
            __webpack_require__( /*! ./modules/es6.array.join */ 223);
            __webpack_require__( /*! ./modules/es6.array.slice */ 224);
            __webpack_require__( /*! ./modules/es6.array.sort */ 225);
            __webpack_require__( /*! ./modules/es6.array.for-each */ 226);
            __webpack_require__( /*! ./modules/es6.array.map */ 228);
            __webpack_require__( /*! ./modules/es6.array.filter */ 229);
            __webpack_require__( /*! ./modules/es6.array.some */ 230);
            __webpack_require__( /*! ./modules/es6.array.every */ 231);
            __webpack_require__( /*! ./modules/es6.array.reduce */ 232);
            __webpack_require__( /*! ./modules/es6.array.reduce-right */ 233);
            __webpack_require__( /*! ./modules/es6.array.index-of */ 234);
            __webpack_require__( /*! ./modules/es6.array.last-index-of */ 235);
            __webpack_require__( /*! ./modules/es6.array.copy-within */ 236);
            __webpack_require__( /*! ./modules/es6.array.fill */ 237);
            __webpack_require__( /*! ./modules/es6.array.find */ 238);
            __webpack_require__( /*! ./modules/es6.array.find-index */ 239);
            __webpack_require__( /*! ./modules/es6.array.species */ 240);
            __webpack_require__( /*! ./modules/es6.array.iterator */ 88);
            __webpack_require__( /*! ./modules/es6.regexp.constructor */ 241);
            __webpack_require__( /*! ./modules/es6.regexp.to-string */ 242);
            __webpack_require__( /*! ./modules/es6.regexp.flags */ 113);
            __webpack_require__( /*! ./modules/es6.regexp.match */ 243);
            __webpack_require__( /*! ./modules/es6.regexp.replace */ 244);
            __webpack_require__( /*! ./modules/es6.regexp.search */ 245);
            __webpack_require__( /*! ./modules/es6.regexp.split */ 246);
            __webpack_require__( /*! ./modules/es6.promise */ 247);
            __webpack_require__( /*! ./modules/es6.map */ 116);
            __webpack_require__( /*! ./modules/es6.set */ 118);
            __webpack_require__( /*! ./modules/es6.weak-map */ 119);
            __webpack_require__( /*! ./modules/es6.weak-set */ 248);
            __webpack_require__( /*! ./modules/es6.typed.array-buffer */ 249);
            __webpack_require__( /*! ./modules/es6.typed.data-view */ 250);
            __webpack_require__( /*! ./modules/es6.typed.int8-array */ 251);
            __webpack_require__( /*! ./modules/es6.typed.uint8-array */ 252);
            __webpack_require__( /*! ./modules/es6.typed.uint8-clamped-array */ 253);
            __webpack_require__( /*! ./modules/es6.typed.int16-array */ 254);
            __webpack_require__( /*! ./modules/es6.typed.uint16-array */ 255);
            __webpack_require__( /*! ./modules/es6.typed.int32-array */ 256);
            __webpack_require__( /*! ./modules/es6.typed.uint32-array */ 257);
            __webpack_require__( /*! ./modules/es6.typed.float32-array */ 258);
            __webpack_require__( /*! ./modules/es6.typed.float64-array */ 259);
            __webpack_require__( /*! ./modules/es6.reflect.apply */ 260);
            __webpack_require__( /*! ./modules/es6.reflect.construct */ 261);
            __webpack_require__( /*! ./modules/es6.reflect.define-property */ 262);
            __webpack_require__( /*! ./modules/es6.reflect.delete-property */ 263);
            __webpack_require__( /*! ./modules/es6.reflect.enumerate */ 264);
            __webpack_require__( /*! ./modules/es6.reflect.get */ 265);
            __webpack_require__( /*! ./modules/es6.reflect.get-own-property-descriptor */ 266);
            __webpack_require__( /*! ./modules/es6.reflect.get-prototype-of */ 267);
            __webpack_require__( /*! ./modules/es6.reflect.has */ 268);
            __webpack_require__( /*! ./modules/es6.reflect.is-extensible */ 269);
            __webpack_require__( /*! ./modules/es6.reflect.own-keys */ 270);
            __webpack_require__( /*! ./modules/es6.reflect.prevent-extensions */ 271);
            __webpack_require__( /*! ./modules/es6.reflect.set */ 272);
            __webpack_require__( /*! ./modules/es6.reflect.set-prototype-of */ 273);
            __webpack_require__( /*! ./modules/es7.array.includes */ 274);
            __webpack_require__( /*! ./modules/es7.array.flat-map */ 275);
            __webpack_require__( /*! ./modules/es7.array.flatten */ 276);
            __webpack_require__( /*! ./modules/es7.string.at */ 277);
            __webpack_require__( /*! ./modules/es7.string.pad-start */ 278);
            __webpack_require__( /*! ./modules/es7.string.pad-end */ 279);
            __webpack_require__( /*! ./modules/es7.string.trim-left */ 280);
            __webpack_require__( /*! ./modules/es7.string.trim-right */ 281);
            __webpack_require__( /*! ./modules/es7.string.match-all */ 282);
            __webpack_require__( /*! ./modules/es7.symbol.async-iterator */ 283);
            __webpack_require__( /*! ./modules/es7.symbol.observable */ 284);
            __webpack_require__( /*! ./modules/es7.object.get-own-property-descriptors */ 285);
            __webpack_require__( /*! ./modules/es7.object.values */ 286);
            __webpack_require__( /*! ./modules/es7.object.entries */ 287);
            __webpack_require__( /*! ./modules/es7.object.define-getter */ 288);
            __webpack_require__( /*! ./modules/es7.object.define-setter */ 289);
            __webpack_require__( /*! ./modules/es7.object.lookup-getter */ 290);
            __webpack_require__( /*! ./modules/es7.object.lookup-setter */ 291);
            __webpack_require__( /*! ./modules/es7.map.to-json */ 292);
            __webpack_require__( /*! ./modules/es7.set.to-json */ 293);
            __webpack_require__( /*! ./modules/es7.map.of */ 294);
            __webpack_require__( /*! ./modules/es7.set.of */ 295);
            __webpack_require__( /*! ./modules/es7.weak-map.of */ 296);
            __webpack_require__( /*! ./modules/es7.weak-set.of */ 297);
            __webpack_require__( /*! ./modules/es7.map.from */ 298);
            __webpack_require__( /*! ./modules/es7.set.from */ 299);
            __webpack_require__( /*! ./modules/es7.weak-map.from */ 300);
            __webpack_require__( /*! ./modules/es7.weak-set.from */ 301);
            __webpack_require__( /*! ./modules/es7.global */ 302);
            __webpack_require__( /*! ./modules/es7.system.global */ 303);
            __webpack_require__( /*! ./modules/es7.error.is-error */ 304);
            __webpack_require__( /*! ./modules/es7.math.clamp */ 305);
            __webpack_require__( /*! ./modules/es7.math.deg-per-rad */ 306);
            __webpack_require__( /*! ./modules/es7.math.degrees */ 307);
            __webpack_require__( /*! ./modules/es7.math.fscale */ 308);
            __webpack_require__( /*! ./modules/es7.math.iaddh */ 309);
            __webpack_require__( /*! ./modules/es7.math.isubh */ 310);
            __webpack_require__( /*! ./modules/es7.math.imulh */ 311);
            __webpack_require__( /*! ./modules/es7.math.rad-per-deg */ 312);
            __webpack_require__( /*! ./modules/es7.math.radians */ 313);
            __webpack_require__( /*! ./modules/es7.math.scale */ 314);
            __webpack_require__( /*! ./modules/es7.math.umulh */ 315);
            __webpack_require__( /*! ./modules/es7.math.signbit */ 316);
            __webpack_require__( /*! ./modules/es7.promise.finally */ 317);
            __webpack_require__( /*! ./modules/es7.promise.try */ 318);
            __webpack_require__( /*! ./modules/es7.reflect.define-metadata */ 319);
            __webpack_require__( /*! ./modules/es7.reflect.delete-metadata */ 320);
            __webpack_require__( /*! ./modules/es7.reflect.get-metadata */ 321);
            __webpack_require__( /*! ./modules/es7.reflect.get-metadata-keys */ 322);
            __webpack_require__( /*! ./modules/es7.reflect.get-own-metadata */ 323);
            __webpack_require__( /*! ./modules/es7.reflect.get-own-metadata-keys */ 324);
            __webpack_require__( /*! ./modules/es7.reflect.has-metadata */ 325);
            __webpack_require__( /*! ./modules/es7.reflect.has-own-metadata */ 326);
            __webpack_require__( /*! ./modules/es7.reflect.metadata */ 327);
            __webpack_require__( /*! ./modules/es7.asap */ 328);
            __webpack_require__( /*! ./modules/es7.observable */ 329);
            __webpack_require__( /*! ./modules/web.timers */ 330);
            __webpack_require__( /*! ./modules/web.immediate */ 331);
            __webpack_require__( /*! ./modules/web.dom.iterable */ 332);
            module.exports = __webpack_require__( /*! ./modules/_core */ 23);


            /***/
        }),
        /* 137 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/es6.symbol.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // ECMAScript 6 symbols shim
            var global = __webpack_require__( /*! ./_global */ 2);
            var has = __webpack_require__( /*! ./_has */ 11);
            var DESCRIPTORS = __webpack_require__( /*! ./_descriptors */ 6);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var META = __webpack_require__( /*! ./_meta */ 31).KEY;
            var $fails = __webpack_require__( /*! ./_fails */ 3);
            var shared = __webpack_require__( /*! ./_shared */ 53);
            var setToStringTag = __webpack_require__( /*! ./_set-to-string-tag */ 44);
            var uid = __webpack_require__( /*! ./_uid */ 34);
            var wks = __webpack_require__( /*! ./_wks */ 5);
            var wksExt = __webpack_require__( /*! ./_wks-ext */ 96);
            var wksDefine = __webpack_require__( /*! ./_wks-define */ 68);
            var enumKeys = __webpack_require__( /*! ./_enum-keys */ 138);
            var isArray = __webpack_require__( /*! ./_is-array */ 56);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var createDesc = __webpack_require__( /*! ./_property-desc */ 33);
            var _create = __webpack_require__( /*! ./_object-create */ 38);
            var gOPNExt = __webpack_require__( /*! ./_object-gopn-ext */ 99);
            var $GOPD = __webpack_require__( /*! ./_object-gopd */ 16);
            var $DP = __webpack_require__( /*! ./_object-dp */ 7);
            var $keys = __webpack_require__( /*! ./_object-keys */ 36);
            var gOPD = $GOPD.f;
            var dP = $DP.f;
            var gOPN = gOPNExt.f;
            var $Symbol = global.Symbol;
            var $JSON = global.JSON;
            var _stringify = $JSON && $JSON.stringify;
            var PROTOTYPE = 'prototype';
            var HIDDEN = wks('_hidden');
            var TO_PRIMITIVE = wks('toPrimitive');
            var isEnum = {}.propertyIsEnumerable;
            var SymbolRegistry = shared('symbol-registry');
            var AllSymbols = shared('symbols');
            var OPSymbols = shared('op-symbols');
            var ObjectProto = Object[PROTOTYPE];
            var USE_NATIVE = typeof $Symbol == 'function';
            var QObject = global.QObject;
            // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
            var setSymbolDesc = DESCRIPTORS && $fails(function() {
                return _create(dP({}, 'a', {
                    get: function() { return dP(this, 'a', { value: 7 }).a; }
                })).a != 7;
            }) ? function(it, key, D) {
                var protoDesc = gOPD(ObjectProto, key);
                if (protoDesc) delete ObjectProto[key];
                dP(it, key, D);
                if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
            } : dP;

            var wrap = function(tag) {
                var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
                sym._k = tag;
                return sym;
            };

            var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it) {
                return typeof it == 'symbol';
            } : function(it) {
                return it instanceof $Symbol;
            };

            var $defineProperty = function defineProperty(it, key, D) {
                if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
                anObject(it);
                key = toPrimitive(key, true);
                anObject(D);
                if (has(AllSymbols, key)) {
                    if (!D.enumerable) {
                        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                        it[HIDDEN][key] = true;
                    } else {
                        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                        D = _create(D, { enumerable: createDesc(0, false) });
                    }
                    return setSymbolDesc(it, key, D);
                }
                return dP(it, key, D);
            };
            var $defineProperties = function defineProperties(it, P) {
                anObject(it);
                var keys = enumKeys(P = toIObject(P));
                var i = 0;
                var l = keys.length;
                var key;
                while (l > i) $defineProperty(it, key = keys[i++], P[key]);
                return it;
            };
            var $create = function create(it, P) {
                return P === undefined ? _create(it) : $defineProperties(_create(it), P);
            };
            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                var E = isEnum.call(this, key = toPrimitive(key, true));
                if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                it = toIObject(it);
                key = toPrimitive(key, true);
                if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
                var D = gOPD(it, key);
                if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
                return D;
            };
            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                var names = gOPN(toIObject(it));
                var result = [];
                var i = 0;
                var key;
                while (names.length > i) {
                    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
                }
                return result;
            };
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                var IS_OP = it === ObjectProto;
                var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
                var result = [];
                var i = 0;
                var key;
                while (names.length > i) {
                    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
                }
                return result;
            };

            // 19.4.1.1 Symbol([description])
            if (!USE_NATIVE) {
                $Symbol = function Symbol() {
                    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
                    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                    var $set = function(value) {
                        if (this === ObjectProto) $set.call(OPSymbols, value);
                        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                        setSymbolDesc(this, tag, createDesc(1, value));
                    };
                    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
                    return wrap(tag);
                };
                redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                    return this._k;
                });

                $GOPD.f = $getOwnPropertyDescriptor;
                $DP.f = $defineProperty;
                __webpack_require__( /*! ./_object-gopn */ 39).f = gOPNExt.f = $getOwnPropertyNames;
                __webpack_require__( /*! ./_object-pie */ 50).f = $propertyIsEnumerable;
                __webpack_require__( /*! ./_object-gops */ 55).f = $getOwnPropertySymbols;

                if (DESCRIPTORS && !__webpack_require__( /*! ./_library */ 35)) {
                    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
                }

                wksExt.f = function(name) {
                    return wrap(wks(name));
                };
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

            for (var es6Symbols = (
                    // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
                    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
                ).split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

            for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
                // 19.4.2.1 Symbol.for(key)
                'for': function(key) {
                    return has(SymbolRegistry, key += '') ?
                        SymbolRegistry[key] :
                        SymbolRegistry[key] = $Symbol(key);
                },
                // 19.4.2.5 Symbol.keyFor(sym)
                keyFor: function keyFor(sym) {
                    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
                    for (var key in SymbolRegistry)
                        if (SymbolRegistry[key] === sym) return key;
                },
                useSetter: function() { setter = true; },
                useSimple: function() { setter = false; }
            });

            $export($export.S + $export.F * !USE_NATIVE, 'Object', {
                // 19.1.2.2 Object.create(O [, Properties])
                create: $create,
                // 19.1.2.4 Object.defineProperty(O, P, Attributes)
                defineProperty: $defineProperty,
                // 19.1.2.3 Object.defineProperties(O, Properties)
                defineProperties: $defineProperties,
                // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                // 19.1.2.7 Object.getOwnPropertyNames(O)
                getOwnPropertyNames: $getOwnPropertyNames,
                // 19.1.2.8 Object.getOwnPropertySymbols(O)
                getOwnPropertySymbols: $getOwnPropertySymbols
            });

            // 24.3.2 JSON.stringify(value [, replacer [, space]])
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
                var S = $Symbol();
                // MS Edge converts symbol values to JSON as {}
                // WebKit converts symbol values to JSON as null
                // V8 throws on boxed symbols
                return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
            })), 'JSON', {
                stringify: function stringify(it) {
                    var args = [it];
                    var i = 1;
                    var replacer, $replacer;
                    while (arguments.length > i) args.push(arguments[i++]);
                    $replacer = replacer = args[1];
                    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                    if (!isArray(replacer)) replacer = function(key, value) {
                        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                        if (!isSymbol(value)) return value;
                    };
                    args[1] = replacer;
                    return _stringify.apply($JSON, args);
                }
            });

            // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
            $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__( /*! ./_hide */ 12)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
            // 19.4.3.5 Symbol.prototype[@@toStringTag]
            setToStringTag($Symbol, 'Symbol');
            // 20.2.1.9 Math[@@toStringTag]
            setToStringTag(Math, 'Math', true);
            // 24.3.3 JSON[@@toStringTag]
            setToStringTag(global.JSON, 'JSON', true);


            /***/
        }),
        /* 138 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/_enum-keys.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // all enumerable object keys, includes symbols
            var getKeys = __webpack_require__( /*! ./_object-keys */ 36);
            var gOPS = __webpack_require__( /*! ./_object-gops */ 55);
            var pIE = __webpack_require__( /*! ./_object-pie */ 50);
            module.exports = function(it) {
                var result = getKeys(it);
                var getSymbols = gOPS.f;
                if (getSymbols) {
                    var symbols = getSymbols(it);
                    var isEnum = pIE.f;
                    var i = 0;
                    var key;
                    while (symbols.length > i)
                        if (isEnum.call(it, key = symbols[i++])) result.push(key);
                }
                return result;
            };


            /***/
        }),
        /* 139 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.create.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            $export($export.S, 'Object', { create: __webpack_require__( /*! ./_object-create */ 38) });


            /***/
        }),
        /* 140 */
        /*!********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
          \********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
            $export($export.S + $export.F * !__webpack_require__( /*! ./_descriptors */ 6), 'Object', { defineProperty: __webpack_require__( /*! ./_object-dp */ 7).f });


            /***/
        }),
        /* 141 */
        /*!**********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.define-properties.js ***!
          \**********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
            $export($export.S + $export.F * !__webpack_require__( /*! ./_descriptors */ 6), 'Object', { defineProperties: __webpack_require__( /*! ./_object-dps */ 98) });


            /***/
        }),
        /* 142 */
        /*!********************************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js ***!
          \********************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var $getOwnPropertyDescriptor = __webpack_require__( /*! ./_object-gopd */ 16).f;

            __webpack_require__( /*! ./_object-sap */ 27)('getOwnPropertyDescriptor', function() {
                return function getOwnPropertyDescriptor(it, key) {
                    return $getOwnPropertyDescriptor(toIObject(it), key);
                };
            });


            /***/
        }),
        /* 143 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.get-prototype-of.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.9 Object.getPrototypeOf(O)
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var $getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);

            __webpack_require__( /*! ./_object-sap */ 27)('getPrototypeOf', function() {
                return function getPrototypeOf(it) {
                    return $getPrototypeOf(toObject(it));
                };
            });


            /***/
        }),
        /* 144 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.14 Object.keys(O)
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var $keys = __webpack_require__( /*! ./_object-keys */ 36);

            __webpack_require__( /*! ./_object-sap */ 27)('keys', function() {
                return function keys(it) {
                    return $keys(toObject(it));
                };
            });


            /***/
        }),
        /* 145 */
        /*!***************************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.get-own-property-names.js ***!
          \***************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.7 Object.getOwnPropertyNames(O)
            __webpack_require__( /*! ./_object-sap */ 27)('getOwnPropertyNames', function() {
                return __webpack_require__( /*! ./_object-gopn-ext */ 99).f;
            });


            /***/
        }),
        /* 146 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.freeze.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.5 Object.freeze(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var meta = __webpack_require__( /*! ./_meta */ 31).onFreeze;

            __webpack_require__( /*! ./_object-sap */ 27)('freeze', function($freeze) {
                return function freeze(it) {
                    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
                };
            });


            /***/
        }),
        /* 147 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.seal.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.17 Object.seal(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var meta = __webpack_require__( /*! ./_meta */ 31).onFreeze;

            __webpack_require__( /*! ./_object-sap */ 27)('seal', function($seal) {
                return function seal(it) {
                    return $seal && isObject(it) ? $seal(meta(it)) : it;
                };
            });


            /***/
        }),
        /* 148 */
        /*!***********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.prevent-extensions.js ***!
          \***********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.15 Object.preventExtensions(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var meta = __webpack_require__( /*! ./_meta */ 31).onFreeze;

            __webpack_require__( /*! ./_object-sap */ 27)('preventExtensions', function($preventExtensions) {
                return function preventExtensions(it) {
                    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
                };
            });


            /***/
        }),
        /* 149 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.is-frozen.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.12 Object.isFrozen(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);

            __webpack_require__( /*! ./_object-sap */ 27)('isFrozen', function($isFrozen) {
                return function isFrozen(it) {
                    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
                };
            });


            /***/
        }),
        /* 150 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.is-sealed.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.13 Object.isSealed(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);

            __webpack_require__( /*! ./_object-sap */ 27)('isSealed', function($isSealed) {
                return function isSealed(it) {
                    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
                };
            });


            /***/
        }),
        /* 151 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.is-extensible.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.2.11 Object.isExtensible(O)
            var isObject = __webpack_require__( /*! ./_is-object */ 4);

            __webpack_require__( /*! ./_object-sap */ 27)('isExtensible', function($isExtensible) {
                return function isExtensible(it) {
                    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
                };
            });


            /***/
        }),
        /* 152 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.3.1 Object.assign(target, source)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S + $export.F, 'Object', { assign: __webpack_require__( /*! ./_object-assign */ 100) });


            /***/
        }),
        /* 153 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.is.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.3.10 Object.is(value1, value2)
            var $export = __webpack_require__( /*! ./_export */ 0);
            $export($export.S, 'Object', { is: __webpack_require__( /*! ./_same-value */ 154) });


            /***/
        }),
        /* 154 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/_same-value.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            // 7.2.9 SameValue(x, y)
            module.exports = Object.is || function is(x, y) {
                // eslint-disable-next-line no-self-compare
                return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };


            /***/
        }),
        /* 155 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.1.3.19 Object.setPrototypeOf(O, proto)
            var $export = __webpack_require__( /*! ./_export */ 0);
            $export($export.S, 'Object', { setPrototypeOf: __webpack_require__( /*! ./_set-proto */ 72).set });


            /***/
        }),
        /* 156 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 19.1.3.6 Object.prototype.toString()
            var classof = __webpack_require__( /*! ./_classof */ 51);
            var test = {};
            test[__webpack_require__( /*! ./_wks */ 5)('toStringTag')] = 'z';
            if (test + '' != '[object z]') {
                __webpack_require__( /*! ./_redefine */ 13)(Object.prototype, 'toString', function toString() {
                    return '[object ' + classof(this) + ']';
                }, true);
            }


            /***/
        }),
        /* 157 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P, 'Function', { bind: __webpack_require__( /*! ./_bind */ 101) });


            /***/
        }),
        /* 158 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.function.name.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var dP = __webpack_require__( /*! ./_object-dp */ 7).f;
            var FProto = Function.prototype;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = 'name';

            // 19.2.4.2 name
            NAME in FProto || __webpack_require__( /*! ./_descriptors */ 6) && dP(FProto, NAME, {
                configurable: true,
                get: function() {
                    try {
                        return ('' + this).match(nameRE)[1];
                    } catch (e) {
                        return '';
                    }
                }
            });


            /***/
        }),
        /* 159 */
        /*!*******************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.function.has-instance.js ***!
          \*******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var HAS_INSTANCE = __webpack_require__( /*! ./_wks */ 5)('hasInstance');
            var FunctionProto = Function.prototype;
            // 19.2.3.6 Function.prototype[@@hasInstance](V)
            if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__( /*! ./_object-dp */ 7).f(FunctionProto, HAS_INSTANCE, {
                value: function(O) {
                    if (typeof this != 'function' || !isObject(O)) return false;
                    if (!isObject(this.prototype)) return O instanceof this;
                    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
                    while (O = getPrototypeOf(O))
                        if (this.prototype === O) return true;
                    return false;
                }
            });


            /***/
        }),
        /* 160 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.parse-int.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $parseInt = __webpack_require__( /*! ./_parse-int */ 103);
            // 18.2.5 parseInt(string, radix)
            $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


            /***/
        }),
        /* 161 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.parse-float.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $parseFloat = __webpack_require__( /*! ./_parse-float */ 104);
            // 18.2.4 parseFloat(string)
            $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


            /***/
        }),
        /* 162 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var global = __webpack_require__( /*! ./_global */ 2);
            var has = __webpack_require__( /*! ./_has */ 11);
            var cof = __webpack_require__( /*! ./_cof */ 20);
            var inheritIfRequired = __webpack_require__( /*! ./_inherit-if-required */ 74);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var gOPN = __webpack_require__( /*! ./_object-gopn */ 39).f;
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16).f;
            var dP = __webpack_require__( /*! ./_object-dp */ 7).f;
            var $trim = __webpack_require__( /*! ./_string-trim */ 45).trim;
            var NUMBER = 'Number';
            var $Number = global[NUMBER];
            var Base = $Number;
            var proto = $Number.prototype;
            // Opera ~12 has broken Object#toString
            var BROKEN_COF = cof(__webpack_require__( /*! ./_object-create */ 38)(proto)) == NUMBER;
            var TRIM = 'trim' in String.prototype;

            // 7.1.3 ToNumber(argument)
            var toNumber = function(argument) {
                var it = toPrimitive(argument, false);
                if (typeof it == 'string' && it.length > 2) {
                    it = TRIM ? it.trim() : $trim(it, 3);
                    var first = it.charCodeAt(0);
                    var third, radix, maxCode;
                    if (first === 43 || first === 45) {
                        third = it.charCodeAt(2);
                        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                    } else if (first === 48) {
                        switch (it.charCodeAt(1)) {
                            case 66:
                            case 98:
                                radix = 2;
                                maxCode = 49;
                                break; // fast equal /^0b[01]+$/i
                            case 79:
                            case 111:
                                radix = 8;
                                maxCode = 55;
                                break; // fast equal /^0o[0-7]+$/i
                            default:
                                return +it;
                        }
                        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
                            code = digits.charCodeAt(i);
                            // parseInt parses a string to a first unavailable symbol
                            // but ToNumber should return NaN if a string contains unavailable symbols
                            if (code < 48 || code > maxCode) return NaN;
                        }
                        return parseInt(digits, radix);
                    }
                }
                return +it;
            };

            if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
                $Number = function Number(value) {
                    var it = arguments.length < 1 ? 0 : value;
                    var that = this;
                    return that instanceof $Number
                        // check on 1..constructor(foo) case
                        &&
                        (BROKEN_COF ? fails(function() { proto.valueOf.call(that); }) : cof(that) != NUMBER) ?
                        inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
                };
                for (var keys = __webpack_require__( /*! ./_descriptors */ 6) ? gOPN(Base) : (
                        // ES3:
                        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                        // ES6 (in case, if modules with ES6 Number statics required before):
                        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
                    ).split(','), j = 0, key; keys.length > j; j++) {
                    if (has(Base, key = keys[j]) && !has($Number, key)) {
                        dP($Number, key, gOPD(Base, key));
                    }
                }
                $Number.prototype = proto;
                proto.constructor = $Number;
                __webpack_require__( /*! ./_redefine */ 13)(global, NUMBER, $Number);
            }


            /***/
        }),
        /* 163 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.to-fixed.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var aNumberValue = __webpack_require__( /*! ./_a-number-value */ 105);
            var repeat = __webpack_require__( /*! ./_string-repeat */ 75);
            var $toFixed = 1.0.toFixed;
            var floor = Math.floor;
            var data = [0, 0, 0, 0, 0, 0];
            var ERROR = 'Number.toFixed: incorrect invocation!';
            var ZERO = '0';

            var multiply = function(n, c) {
                var i = -1;
                var c2 = c;
                while (++i < 6) {
                    c2 += n * data[i];
                    data[i] = c2 % 1e7;
                    c2 = floor(c2 / 1e7);
                }
            };
            var divide = function(n) {
                var i = 6;
                var c = 0;
                while (--i >= 0) {
                    c += data[i];
                    data[i] = floor(c / n);
                    c = (c % n) * 1e7;
                }
            };
            var numToString = function() {
                var i = 6;
                var s = '';
                while (--i >= 0) {
                    if (s !== '' || i === 0 || data[i] !== 0) {
                        var t = String(data[i]);
                        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
                    }
                }
                return s;
            };
            var pow = function(x, n, acc) {
                return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
            };
            var log = function(x) {
                var n = 0;
                var x2 = x;
                while (x2 >= 4096) {
                    n += 12;
                    x2 /= 4096;
                }
                while (x2 >= 2) {
                    n += 1;
                    x2 /= 2;
                }
                return n;
            };

            $export($export.P + $export.F * (!!$toFixed && (
                0.00008.toFixed(3) !== '0.000' ||
                0.9.toFixed(0) !== '1' ||
                1.255.toFixed(2) !== '1.25' ||
                1000000000000000128.0.toFixed(0) !== '1000000000000000128'
            ) || !__webpack_require__( /*! ./_fails */ 3)(function() {
                // V8 ~ Android 4.3-
                $toFixed.call({});
            })), 'Number', {
                toFixed: function toFixed(fractionDigits) {
                    var x = aNumberValue(this, ERROR);
                    var f = toInteger(fractionDigits);
                    var s = '';
                    var m = ZERO;
                    var e, z, j, k;
                    if (f < 0 || f > 20) throw RangeError(ERROR);
                    // eslint-disable-next-line no-self-compare
                    if (x != x) return 'NaN';
                    if (x <= -1e21 || x >= 1e21) return String(x);
                    if (x < 0) {
                        s = '-';
                        x = -x;
                    }
                    if (x > 1e-21) {
                        e = log(x * pow(2, 69, 1)) - 69;
                        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
                        z *= 0x10000000000000;
                        e = 52 - e;
                        if (e > 0) {
                            multiply(0, z);
                            j = f;
                            while (j >= 7) {
                                multiply(1e7, 0);
                                j -= 7;
                            }
                            multiply(pow(10, j, 1), 0);
                            j = e - 1;
                            while (j >= 23) {
                                divide(1 << 23);
                                j -= 23;
                            }
                            divide(1 << j);
                            multiply(1, 1);
                            divide(2);
                            m = numToString();
                        } else {
                            multiply(0, z);
                            multiply(1 << -e, 0);
                            m = numToString() + repeat.call(ZERO, f);
                        }
                    }
                    if (f > 0) {
                        k = m.length;
                        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
                    } else {
                        m = s + m;
                    }
                    return m;
                }
            });


            /***/
        }),
        /* 164 */
        /*!*****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.to-precision.js ***!
          \*****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $fails = __webpack_require__( /*! ./_fails */ 3);
            var aNumberValue = __webpack_require__( /*! ./_a-number-value */ 105);
            var $toPrecision = 1.0.toPrecision;

            $export($export.P + $export.F * ($fails(function() {
                // IE7-
                return $toPrecision.call(1, undefined) !== '1';
            }) || !$fails(function() {
                // V8 ~ Android 4.3-
                $toPrecision.call({});
            })), 'Number', {
                toPrecision: function toPrecision(precision) {
                    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
                    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
                }
            });


            /***/
        }),
        /* 165 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.epsilon.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.1 Number.EPSILON
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


            /***/
        }),
        /* 166 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.is-finite.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.2 Number.isFinite(number)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var _isFinite = __webpack_require__( /*! ./_global */ 2).isFinite;

            $export($export.S, 'Number', {
                isFinite: function isFinite(it) {
                    return typeof it == 'number' && _isFinite(it);
                }
            });


            /***/
        }),
        /* 167 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.is-integer.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.3 Number.isInteger(number)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Number', { isInteger: __webpack_require__( /*! ./_is-integer */ 106) });


            /***/
        }),
        /* 168 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.is-nan.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.4 Number.isNaN(number)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Number', {
                isNaN: function isNaN(number) {
                    // eslint-disable-next-line no-self-compare
                    return number != number;
                }
            });


            /***/
        }),
        /* 169 */
        /*!********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.is-safe-integer.js ***!
          \********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.5 Number.isSafeInteger(number)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var isInteger = __webpack_require__( /*! ./_is-integer */ 106);
            var abs = Math.abs;

            $export($export.S, 'Number', {
                isSafeInteger: function isSafeInteger(number) {
                    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
                }
            });


            /***/
        }),
        /* 170 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.max-safe-integer.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.6 Number.MAX_SAFE_INTEGER
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


            /***/
        }),
        /* 171 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.min-safe-integer.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.1.2.10 Number.MIN_SAFE_INTEGER
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


            /***/
        }),
        /* 172 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.parse-float.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $parseFloat = __webpack_require__( /*! ./_parse-float */ 104);
            // 20.1.2.12 Number.parseFloat(string)
            $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


            /***/
        }),
        /* 173 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.number.parse-int.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $parseInt = __webpack_require__( /*! ./_parse-int */ 103);
            // 20.1.2.13 Number.parseInt(string, radix)
            $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


            /***/
        }),
        /* 174 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.acosh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.3 Math.acosh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var log1p = __webpack_require__( /*! ./_math-log1p */ 107);
            var sqrt = Math.sqrt;
            var $acosh = Math.acosh;

            $export($export.S + $export.F * !($acosh
                // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
                &&
                Math.floor($acosh(Number.MAX_VALUE)) == 710
                // Tor Browser bug: Math.acosh(Infinity) -> NaN
                &&
                $acosh(Infinity) == Infinity
            ), 'Math', {
                acosh: function acosh(x) {
                    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ?
                        Math.log(x) + Math.LN2 :
                        log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
                }
            });


            /***/
        }),
        /* 175 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.asinh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.5 Math.asinh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $asinh = Math.asinh;

            function asinh(x) {
                return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
            }

            // Tor Browser bug: Math.asinh(0) -> -0
            $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


            /***/
        }),
        /* 176 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.atanh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.7 Math.atanh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $atanh = Math.atanh;

            // Tor Browser bug: Math.atanh(-0) -> 0
            $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
                atanh: function atanh(x) {
                    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
                }
            });


            /***/
        }),
        /* 177 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.cbrt.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.9 Math.cbrt(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var sign = __webpack_require__( /*! ./_math-sign */ 76);

            $export($export.S, 'Math', {
                cbrt: function cbrt(x) {
                    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
                }
            });


            /***/
        }),
        /* 178 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.clz32.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.11 Math.clz32(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                clz32: function clz32(x) {
                    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
                }
            });


            /***/
        }),
        /* 179 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.cosh.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.12 Math.cosh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var exp = Math.exp;

            $export($export.S, 'Math', {
                cosh: function cosh(x) {
                    return (exp(x = +x) + exp(-x)) / 2;
                }
            });


            /***/
        }),
        /* 180 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.expm1.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.14 Math.expm1(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $expm1 = __webpack_require__( /*! ./_math-expm1 */ 77);

            $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


            /***/
        }),
        /* 181 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.fround.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.16 Math.fround(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { fround: __webpack_require__( /*! ./_math-fround */ 108) });


            /***/
        }),
        /* 182 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.hypot.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
            var $export = __webpack_require__( /*! ./_export */ 0);
            var abs = Math.abs;

            $export($export.S, 'Math', {
                hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
                    var sum = 0;
                    var i = 0;
                    var aLen = arguments.length;
                    var larg = 0;
                    var arg, div;
                    while (i < aLen) {
                        arg = abs(arguments[i++]);
                        if (larg < arg) {
                            div = larg / arg;
                            sum = sum * div * div + 1;
                            larg = arg;
                        } else if (arg > 0) {
                            div = arg / larg;
                            sum += div * div;
                        } else sum += arg;
                    }
                    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
                }
            });


            /***/
        }),
        /* 183 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.imul.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.18 Math.imul(x, y)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $imul = Math.imul;

            // some WebKit versions fails with big numbers, some has wrong arity
            $export($export.S + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
            }), 'Math', {
                imul: function imul(x, y) {
                    var UINT16 = 0xffff;
                    var xn = +x;
                    var yn = +y;
                    var xl = UINT16 & xn;
                    var yl = UINT16 & yn;
                    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
                }
            });


            /***/
        }),
        /* 184 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.log10.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.21 Math.log10(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                log10: function log10(x) {
                    return Math.log(x) * Math.LOG10E;
                }
            });


            /***/
        }),
        /* 185 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.log1p.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.20 Math.log1p(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { log1p: __webpack_require__( /*! ./_math-log1p */ 107) });


            /***/
        }),
        /* 186 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.log2.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.22 Math.log2(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                log2: function log2(x) {
                    return Math.log(x) / Math.LN2;
                }
            });


            /***/
        }),
        /* 187 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.sign.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.28 Math.sign(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { sign: __webpack_require__( /*! ./_math-sign */ 76) });


            /***/
        }),
        /* 188 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.sinh.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.30 Math.sinh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var expm1 = __webpack_require__( /*! ./_math-expm1 */ 77);
            var exp = Math.exp;

            // V8 near Chromium 38 has a problem with very small numbers
            $export($export.S + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                return !Math.sinh(-2e-17) != -2e-17;
            }), 'Math', {
                sinh: function sinh(x) {
                    return Math.abs(x = +x) < 1 ?
                        (expm1(x) - expm1(-x)) / 2 :
                        (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
                }
            });


            /***/
        }),
        /* 189 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.tanh.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.33 Math.tanh(x)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var expm1 = __webpack_require__( /*! ./_math-expm1 */ 77);
            var exp = Math.exp;

            $export($export.S, 'Math', {
                tanh: function tanh(x) {
                    var a = expm1(x = +x);
                    var b = expm1(-x);
                    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
                }
            });


            /***/
        }),
        /* 190 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.math.trunc.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.2.2.34 Math.trunc(x)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                trunc: function trunc(it) {
                    return (it > 0 ? Math.floor : Math.ceil)(it);
                }
            });


            /***/
        }),
        /* 191 */
        /*!********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.from-code-point.js ***!
          \********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            var fromCharCode = String.fromCharCode;
            var $fromCodePoint = String.fromCodePoint;

            // length should be 1, old FF problem
            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
                // 21.1.2.2 String.fromCodePoint(...codePoints)
                fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
                    var res = [];
                    var aLen = arguments.length;
                    var i = 0;
                    var code;
                    while (aLen > i) {
                        code = +arguments[i++];
                        if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
                        res.push(code < 0x10000 ?
                            fromCharCode(code) :
                            fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
                        );
                    }
                    return res.join('');
                }
            });


            /***/
        }),
        /* 192 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.raw.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);

            $export($export.S, 'String', {
                // 21.1.2.4 String.raw(callSite, ...substitutions)
                raw: function raw(callSite) {
                    var tpl = toIObject(callSite.raw);
                    var len = toLength(tpl.length);
                    var aLen = arguments.length;
                    var res = [];
                    var i = 0;
                    while (len > i) {
                        res.push(String(tpl[i++]));
                        if (i < aLen) res.push(String(arguments[i]));
                    }
                    return res.join('');
                }
            });


            /***/
        }),
        /* 193 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.trim.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 21.1.3.25 String.prototype.trim()
            __webpack_require__( /*! ./_string-trim */ 45)('trim', function($trim) {
                return function trim() {
                    return $trim(this, 3);
                };
            });


            /***/
        }),
        /* 194 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $at = __webpack_require__( /*! ./_string-at */ 78)(true);

            // 21.1.3.27 String.prototype[@@iterator]()
            __webpack_require__( /*! ./_iter-define */ 79)(String, 'String', function(iterated) {
                this._t = String(iterated); // target
                this._i = 0; // next index
                // 21.1.5.2.1 %StringIteratorPrototype%.next()
            }, function() {
                var O = this._t;
                var index = this._i;
                var point;
                if (index >= O.length) return { value: undefined, done: true };
                point = $at(O, index);
                this._i += point.length;
                return { value: point, done: false };
            });


            /***/
        }),
        /* 195 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.code-point-at.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $at = __webpack_require__( /*! ./_string-at */ 78)(false);
            $export($export.P, 'String', {
                // 21.1.3.3 String.prototype.codePointAt(pos)
                codePointAt: function codePointAt(pos) {
                    return $at(this, pos);
                }
            });


            /***/
        }),
        /* 196 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var context = __webpack_require__( /*! ./_string-context */ 81);
            var ENDS_WITH = 'endsWith';
            var $endsWith = '' [ENDS_WITH];

            $export($export.P + $export.F * __webpack_require__( /*! ./_fails-is-regexp */ 82)(ENDS_WITH), 'String', {
                endsWith: function endsWith(searchString /* , endPosition = @length */ ) {
                    var that = context(this, searchString, ENDS_WITH);
                    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                    var len = toLength(that.length);
                    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
                    var search = String(searchString);
                    return $endsWith ?
                        $endsWith.call(that, search, end) :
                        that.slice(end - search.length, end) === search;
                }
            });


            /***/
        }),
        /* 197 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // 21.1.3.7 String.prototype.includes(searchString, position = 0)

            var $export = __webpack_require__( /*! ./_export */ 0);
            var context = __webpack_require__( /*! ./_string-context */ 81);
            var INCLUDES = 'includes';

            $export($export.P + $export.F * __webpack_require__( /*! ./_fails-is-regexp */ 82)(INCLUDES), 'String', {
                includes: function includes(searchString /* , position = 0 */ ) {
                    return !!~context(this, searchString, INCLUDES)
                        .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
                }
            });


            /***/
        }),
        /* 198 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.repeat.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P, 'String', {
                // 21.1.3.13 String.prototype.repeat(count)
                repeat: __webpack_require__( /*! ./_string-repeat */ 75)
            });


            /***/
        }),
        /* 199 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // 21.1.3.18 String.prototype.startsWith(searchString [, position ])

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var context = __webpack_require__( /*! ./_string-context */ 81);
            var STARTS_WITH = 'startsWith';
            var $startsWith = '' [STARTS_WITH];

            $export($export.P + $export.F * __webpack_require__( /*! ./_fails-is-regexp */ 82)(STARTS_WITH), 'String', {
                startsWith: function startsWith(searchString /* , position = 0 */ ) {
                    var that = context(this, searchString, STARTS_WITH);
                    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
                    var search = String(searchString);
                    return $startsWith ?
                        $startsWith.call(that, search, index) :
                        that.slice(index, index + search.length) === search;
                }
            });


            /***/
        }),
        /* 200 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.anchor.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.2 String.prototype.anchor(name)
            __webpack_require__( /*! ./_string-html */ 14)('anchor', function(createHTML) {
                return function anchor(name) {
                    return createHTML(this, 'a', 'name', name);
                };
            });


            /***/
        }),
        /* 201 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.big.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.3 String.prototype.big()
            __webpack_require__( /*! ./_string-html */ 14)('big', function(createHTML) {
                return function big() {
                    return createHTML(this, 'big', '', '');
                };
            });


            /***/
        }),
        /* 202 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.blink.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.4 String.prototype.blink()
            __webpack_require__( /*! ./_string-html */ 14)('blink', function(createHTML) {
                return function blink() {
                    return createHTML(this, 'blink', '', '');
                };
            });


            /***/
        }),
        /* 203 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.bold.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.5 String.prototype.bold()
            __webpack_require__( /*! ./_string-html */ 14)('bold', function(createHTML) {
                return function bold() {
                    return createHTML(this, 'b', '', '');
                };
            });


            /***/
        }),
        /* 204 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.fixed.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.6 String.prototype.fixed()
            __webpack_require__( /*! ./_string-html */ 14)('fixed', function(createHTML) {
                return function fixed() {
                    return createHTML(this, 'tt', '', '');
                };
            });


            /***/
        }),
        /* 205 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.fontcolor.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.7 String.prototype.fontcolor(color)
            __webpack_require__( /*! ./_string-html */ 14)('fontcolor', function(createHTML) {
                return function fontcolor(color) {
                    return createHTML(this, 'font', 'color', color);
                };
            });


            /***/
        }),
        /* 206 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.fontsize.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.8 String.prototype.fontsize(size)
            __webpack_require__( /*! ./_string-html */ 14)('fontsize', function(createHTML) {
                return function fontsize(size) {
                    return createHTML(this, 'font', 'size', size);
                };
            });


            /***/
        }),
        /* 207 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.italics.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.9 String.prototype.italics()
            __webpack_require__( /*! ./_string-html */ 14)('italics', function(createHTML) {
                return function italics() {
                    return createHTML(this, 'i', '', '');
                };
            });


            /***/
        }),
        /* 208 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.link.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.10 String.prototype.link(url)
            __webpack_require__( /*! ./_string-html */ 14)('link', function(createHTML) {
                return function link(url) {
                    return createHTML(this, 'a', 'href', url);
                };
            });


            /***/
        }),
        /* 209 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.small.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.11 String.prototype.small()
            __webpack_require__( /*! ./_string-html */ 14)('small', function(createHTML) {
                return function small() {
                    return createHTML(this, 'small', '', '');
                };
            });


            /***/
        }),
        /* 210 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.strike.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.12 String.prototype.strike()
            __webpack_require__( /*! ./_string-html */ 14)('strike', function(createHTML) {
                return function strike() {
                    return createHTML(this, 'strike', '', '');
                };
            });


            /***/
        }),
        /* 211 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.13 String.prototype.sub()
            __webpack_require__( /*! ./_string-html */ 14)('sub', function(createHTML) {
                return function sub() {
                    return createHTML(this, 'sub', '', '');
                };
            });


            /***/
        }),
        /* 212 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.string.sup.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // B.2.3.14 String.prototype.sup()
            __webpack_require__( /*! ./_string-html */ 14)('sup', function(createHTML) {
                return function sup() {
                    return createHTML(this, 'sup', '', '');
                };
            });


            /***/
        }),
        /* 213 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.date.now.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.3.3.1 / 15.9.4.4 Date.now()
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Date', { now: function() { return new Date().getTime(); } });


            /***/
        }),
        /* 214 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.date.to-json.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);

            $export($export.P + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                return new Date(NaN).toJSON() !== null ||
                    Date.prototype.toJSON.call({ toISOString: function() { return 1; } }) !== 1;
            }), 'Date', {
                // eslint-disable-next-line no-unused-vars
                toJSON: function toJSON(key) {
                    var O = toObject(this);
                    var pv = toPrimitive(O);
                    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
                }
            });


            /***/
        }),
        /* 215 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.date.to-iso-string.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
            var $export = __webpack_require__( /*! ./_export */ 0);
            var toISOString = __webpack_require__( /*! ./_date-to-iso-string */ 216);

            // PhantomJS / old WebKit has a broken implementations
            $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
                toISOString: toISOString
            });


            /***/
        }),
        /* 216 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/_date-to-iso-string.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var getTime = Date.prototype.getTime;
            var $toISOString = Date.prototype.toISOString;

            var lz = function(num) {
                return num > 9 ? num : '0' + num;
            };

            // PhantomJS / old WebKit has a broken implementations
            module.exports = (fails(function() {
                return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
            }) || !fails(function() {
                $toISOString.call(new Date(NaN));
            })) ? function toISOString() {
                if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
                var d = this;
                var y = d.getUTCFullYear();
                var m = d.getUTCMilliseconds();
                var s = y < 0 ? '-' : y > 9999 ? '+' : '';
                return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
                    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
                    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
                    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
            } : $toISOString;


            /***/
        }),
        /* 217 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var DateProto = Date.prototype;
            var INVALID_DATE = 'Invalid Date';
            var TO_STRING = 'toString';
            var $toString = DateProto[TO_STRING];
            var getTime = DateProto.getTime;
            if (new Date(NaN) + '' != INVALID_DATE) {
                __webpack_require__( /*! ./_redefine */ 13)(DateProto, TO_STRING, function toString() {
                    var value = getTime.call(this);
                    // eslint-disable-next-line no-self-compare
                    return value === value ? $toString.call(this) : INVALID_DATE;
                });
            }


            /***/
        }),
        /* 218 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.date.to-primitive.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var TO_PRIMITIVE = __webpack_require__( /*! ./_wks */ 5)('toPrimitive');
            var proto = Date.prototype;

            if (!(TO_PRIMITIVE in proto)) __webpack_require__( /*! ./_hide */ 12)(proto, TO_PRIMITIVE, __webpack_require__( /*! ./_date-to-primitive */ 219));


            /***/
        }),
        /* 219 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/_date-to-primitive.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var NUMBER = 'number';

            module.exports = function(hint) {
                if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
                return toPrimitive(anObject(this), hint != NUMBER);
            };


            /***/
        }),
        /* 220 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.is-array.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Array', { isArray: __webpack_require__( /*! ./_is-array */ 56) });


            /***/
        }),
        /* 221 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.from.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var call = __webpack_require__( /*! ./_iter-call */ 109);
            var isArrayIter = __webpack_require__( /*! ./_is-array-iter */ 83);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var createProperty = __webpack_require__( /*! ./_create-property */ 84);
            var getIterFn = __webpack_require__( /*! ./core.get-iterator-method */ 85);

            $export($export.S + $export.F * !__webpack_require__( /*! ./_iter-detect */ 58)(function(iter) { Array.from(iter); }), 'Array', {
                // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
                from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */ ) {
                    var O = toObject(arrayLike);
                    var C = typeof this == 'function' ? this : Array;
                    var aLen = arguments.length;
                    var mapfn = aLen > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var index = 0;
                    var iterFn = getIterFn(O);
                    var length, result, step, iterator;
                    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                    // if object isn't iterable or it's array with default iterator - use simple case
                    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                        }
                    } else {
                        length = toLength(O.length);
                        for (result = new C(length); length > index; index++) {
                            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                        }
                    }
                    result.length = index;
                    return result;
                }
            });


            /***/
        }),
        /* 222 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.of.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var createProperty = __webpack_require__( /*! ./_create-property */ 84);

            // WebKit Array.of isn't generic
            $export($export.S + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                function F() { /* empty */ }
                return !(Array.of.call(F) instanceof F);
            }), 'Array', {
                // 22.1.2.3 Array.of( ...items)
                of: function of( /* ...args */ ) {
                    var index = 0;
                    var aLen = arguments.length;
                    var result = new(typeof this == 'function' ? this : Array)(aLen);
                    while (aLen > index) createProperty(result, index, arguments[index++]);
                    result.length = aLen;
                    return result;
                }
            });


            /***/
        }),
        /* 223 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.join.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 22.1.3.13 Array.prototype.join(separator)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var arrayJoin = [].join;

            // fallback for not array-like strings
            $export($export.P + $export.F * (__webpack_require__( /*! ./_iobject */ 49) != Object || !__webpack_require__( /*! ./_strict-method */ 21)(arrayJoin)), 'Array', {
                join: function join(separator) {
                    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
                }
            });


            /***/
        }),
        /* 224 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.slice.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var html = __webpack_require__( /*! ./_html */ 71);
            var cof = __webpack_require__( /*! ./_cof */ 20);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var arraySlice = [].slice;

            // fallback for not array-like ES3 strings and DOM objects
            $export($export.P + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                if (html) arraySlice.call(html);
            }), 'Array', {
                slice: function slice(begin, end) {
                    var len = toLength(this.length);
                    var klass = cof(this);
                    end = end === undefined ? len : end;
                    if (klass == 'Array') return arraySlice.call(this, begin, end);
                    var start = toAbsoluteIndex(begin, len);
                    var upTo = toAbsoluteIndex(end, len);
                    var size = toLength(upTo - start);
                    var cloned = new Array(size);
                    var i = 0;
                    for (; i < size; i++) cloned[i] = klass == 'String' ?
                        this.charAt(start + i) :
                        this[start + i];
                    return cloned;
                }
            });


            /***/
        }),
        /* 225 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var $sort = [].sort;
            var test = [1, 2, 3];

            $export($export.P + $export.F * (fails(function() {
                // IE8-
                test.sort(undefined);
            }) || !fails(function() {
                // V8 bug
                test.sort(null);
                // Old WebKit
            }) || !__webpack_require__( /*! ./_strict-method */ 21)($sort)), 'Array', {
                // 22.1.3.25 Array.prototype.sort(comparefn)
                sort: function sort(comparefn) {
                    return comparefn === undefined ?
                        $sort.call(toObject(this)) :
                        $sort.call(toObject(this), aFunction(comparefn));
                }
            });


            /***/
        }),
        /* 226 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.for-each.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $forEach = __webpack_require__( /*! ./_array-methods */ 28)(0);
            var STRICT = __webpack_require__( /*! ./_strict-method */ 21)([].forEach, true);

            $export($export.P + $export.F * !STRICT, 'Array', {
                // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
                forEach: function forEach(callbackfn /* , thisArg */ ) {
                    return $forEach(this, callbackfn, arguments[1]);
                }
            });


            /***/
        }),
        /* 227 */
        /*!********************************************************************!*\
          !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
          \********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var isArray = __webpack_require__( /*! ./_is-array */ 56);
            var SPECIES = __webpack_require__( /*! ./_wks */ 5)('species');

            module.exports = function(original) {
                var C;
                if (isArray(original)) {
                    C = original.constructor;
                    // cross-realm fallback
                    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                    if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                    }
                }
                return C === undefined ? Array : C;
            };


            /***/
        }),
        /* 228 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.map.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $map = __webpack_require__( /*! ./_array-methods */ 28)(1);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].map, true), 'Array', {
                // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
                map: function map(callbackfn /* , thisArg */ ) {
                    return $map(this, callbackfn, arguments[1]);
                }
            });


            /***/
        }),
        /* 229 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.filter.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $filter = __webpack_require__( /*! ./_array-methods */ 28)(2);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].filter, true), 'Array', {
                // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
                filter: function filter(callbackfn /* , thisArg */ ) {
                    return $filter(this, callbackfn, arguments[1]);
                }
            });


            /***/
        }),
        /* 230 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.some.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $some = __webpack_require__( /*! ./_array-methods */ 28)(3);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].some, true), 'Array', {
                // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
                some: function some(callbackfn /* , thisArg */ ) {
                    return $some(this, callbackfn, arguments[1]);
                }
            });


            /***/
        }),
        /* 231 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.every.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $every = __webpack_require__( /*! ./_array-methods */ 28)(4);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].every, true), 'Array', {
                // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
                every: function every(callbackfn /* , thisArg */ ) {
                    return $every(this, callbackfn, arguments[1]);
                }
            });


            /***/
        }),
        /* 232 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.reduce.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $reduce = __webpack_require__( /*! ./_array-reduce */ 110);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].reduce, true), 'Array', {
                // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
                reduce: function reduce(callbackfn /* , initialValue */ ) {
                    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
                }
            });


            /***/
        }),
        /* 233 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.reduce-right.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $reduce = __webpack_require__( /*! ./_array-reduce */ 110);

            $export($export.P + $export.F * !__webpack_require__( /*! ./_strict-method */ 21)([].reduceRight, true), 'Array', {
                // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
                reduceRight: function reduceRight(callbackfn /* , initialValue */ ) {
                    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
                }
            });


            /***/
        }),
        /* 234 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $indexOf = __webpack_require__( /*! ./_array-includes */ 54)(false);
            var $native = [].indexOf;
            var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

            $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__( /*! ./_strict-method */ 21)($native)), 'Array', {
                // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
                indexOf: function indexOf(searchElement /* , fromIndex = 0 */ ) {
                    return NEGATIVE_ZERO
                        // convert -0 to +0
                        ?
                        $native.apply(this, arguments) || 0 :
                        $indexOf(this, searchElement, arguments[1]);
                }
            });


            /***/
        }),
        /* 235 */
        /*!*****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.last-index-of.js ***!
          \*****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var $native = [].lastIndexOf;
            var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

            $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__( /*! ./_strict-method */ 21)($native)), 'Array', {
                // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
                lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */ ) {
                    // convert -0 to +0
                    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
                    var O = toIObject(this);
                    var length = toLength(O.length);
                    var index = length - 1;
                    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
                    if (index < 0) index = length + index;
                    for (; index >= 0; index--)
                        if (index in O)
                            if (O[index] === searchElement) return index || 0;
                    return -1;
                }
            });


            /***/
        }),
        /* 236 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.copy-within.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P, 'Array', { copyWithin: __webpack_require__( /*! ./_array-copy-within */ 111) });

            __webpack_require__( /*! ./_add-to-unscopables */ 32)('copyWithin');


            /***/
        }),
        /* 237 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P, 'Array', { fill: __webpack_require__( /*! ./_array-fill */ 87) });

            __webpack_require__( /*! ./_add-to-unscopables */ 32)('fill');


            /***/
        }),
        /* 238 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.find.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $find = __webpack_require__( /*! ./_array-methods */ 28)(5);
            var KEY = 'find';
            var forced = true;
            // Shouldn't skip holes
            if (KEY in []) Array(1)[KEY](function() { forced = false; });
            $export($export.P + $export.F * forced, 'Array', {
                find: function find(callbackfn /* , that = undefined */ ) {
                    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
            __webpack_require__( /*! ./_add-to-unscopables */ 32)(KEY);


            /***/
        }),
        /* 239 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.find-index.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $find = __webpack_require__( /*! ./_array-methods */ 28)(6);
            var KEY = 'findIndex';
            var forced = true;
            // Shouldn't skip holes
            if (KEY in []) Array(1)[KEY](function() { forced = false; });
            $export($export.P + $export.F * forced, 'Array', {
                findIndex: function findIndex(callbackfn /* , that = undefined */ ) {
                    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
            __webpack_require__( /*! ./_add-to-unscopables */ 32)(KEY);


            /***/
        }),
        /* 240 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.array.species.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_set-species */ 40)('Array');


            /***/
        }),
        /* 241 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var global = __webpack_require__( /*! ./_global */ 2);
            var inheritIfRequired = __webpack_require__( /*! ./_inherit-if-required */ 74);
            var dP = __webpack_require__( /*! ./_object-dp */ 7).f;
            var gOPN = __webpack_require__( /*! ./_object-gopn */ 39).f;
            var isRegExp = __webpack_require__( /*! ./_is-regexp */ 57);
            var $flags = __webpack_require__( /*! ./_flags */ 59);
            var $RegExp = global.RegExp;
            var Base = $RegExp;
            var proto = $RegExp.prototype;
            var re1 = /a/g;
            var re2 = /a/g;
            // "new" creates a new object, old webkit buggy here
            var CORRECT_NEW = new $RegExp(re1) !== re1;

            if (__webpack_require__( /*! ./_descriptors */ 6) && (!CORRECT_NEW || __webpack_require__( /*! ./_fails */ 3)(function() {
                    re2[__webpack_require__( /*! ./_wks */ 5)('match')] = false;
                    // RegExp constructor can alter flags and IsRegExp works correct with @@match
                    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
                }))) {
                $RegExp = function RegExp(p, f) {
                    var tiRE = this instanceof $RegExp;
                    var piRE = isRegExp(p);
                    var fiU = f === undefined;
                    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p :
                        inheritIfRequired(CORRECT_NEW ?
                            new Base(piRE && !fiU ? p.source : p, f) :
                            Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
                };
                var proxy = function(key) {
                    key in $RegExp || dP($RegExp, key, {
                        configurable: true,
                        get: function() { return Base[key]; },
                        set: function(it) { Base[key] = it; }
                    });
                };
                for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
                proto.constructor = $RegExp;
                $RegExp.prototype = proto;
                __webpack_require__( /*! ./_redefine */ 13)(global, 'RegExp', $RegExp);
            }

            __webpack_require__( /*! ./_set-species */ 40)('RegExp');


            /***/
        }),
        /* 242 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            __webpack_require__( /*! ./es6.regexp.flags */ 113);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var $flags = __webpack_require__( /*! ./_flags */ 59);
            var DESCRIPTORS = __webpack_require__( /*! ./_descriptors */ 6);
            var TO_STRING = 'toString';
            var $toString = /./ [TO_STRING];

            var define = function(fn) {
                __webpack_require__( /*! ./_redefine */ 13)(RegExp.prototype, TO_STRING, fn, true);
            };

            // 21.2.5.14 RegExp.prototype.toString()
            if (__webpack_require__( /*! ./_fails */ 3)(function() { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
                define(function toString() {
                    var R = anObject(this);
                    return '/'.concat(R.source, '/',
                        'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
                });
                // FF44- RegExp#toString has a wrong name
            } else if ($toString.name != TO_STRING) {
                define(function toString() {
                    return $toString.call(this);
                });
            }


            /***/
        }),
        /* 243 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // @@match logic
            __webpack_require__( /*! ./_fix-re-wks */ 60)('match', 1, function(defined, MATCH, $match) {
                // 21.1.3.11 String.prototype.match(regexp)
                return [function match(regexp) {
                    'use strict';
                    var O = defined(this);
                    var fn = regexp == undefined ? undefined : regexp[MATCH];
                    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
                }, $match];
            });


            /***/
        }),
        /* 244 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // @@replace logic
            __webpack_require__( /*! ./_fix-re-wks */ 60)('replace', 2, function(defined, REPLACE, $replace) {
                // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
                return [function replace(searchValue, replaceValue) {
                    'use strict';
                    var O = defined(this);
                    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                    return fn !== undefined ?
                        fn.call(searchValue, O, replaceValue) :
                        $replace.call(String(O), searchValue, replaceValue);
                }, $replace];
            });


            /***/
        }),
        /* 245 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // @@search logic
            __webpack_require__( /*! ./_fix-re-wks */ 60)('search', 1, function(defined, SEARCH, $search) {
                // 21.1.3.15 String.prototype.search(regexp)
                return [function search(regexp) {
                    'use strict';
                    var O = defined(this);
                    var fn = regexp == undefined ? undefined : regexp[SEARCH];
                    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
                }, $search];
            });


            /***/
        }),
        /* 246 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // @@split logic
            __webpack_require__( /*! ./_fix-re-wks */ 60)('split', 2, function(defined, SPLIT, $split) {
                'use strict';
                var isRegExp = __webpack_require__( /*! ./_is-regexp */ 57);
                var _split = $split;
                var $push = [].push;
                var $SPLIT = 'split';
                var LENGTH = 'length';
                var LAST_INDEX = 'lastIndex';
                if (
                    'abbc' [$SPLIT](/(b)*/)[1] == 'c' ||
                    'test' [$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
                    'ab' [$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
                    '.' [$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
                    '.' [$SPLIT](/()()/)[LENGTH] > 1 ||
                    '' [$SPLIT](/.?/)[LENGTH]
                ) {
                    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
                    // based on es5-shim implementation, need to rework it
                    $split = function(separator, limit) {
                        var string = String(this);
                        if (separator === undefined && limit === 0) return [];
                        // If `separator` is not a regex, use native split
                        if (!isRegExp(separator)) return _split.call(string, separator, limit);
                        var output = [];
                        var flags = (separator.ignoreCase ? 'i' : '') +
                            (separator.multiline ? 'm' : '') +
                            (separator.unicode ? 'u' : '') +
                            (separator.sticky ? 'y' : '');
                        var lastLastIndex = 0;
                        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
                        // Make `global` and avoid `lastIndex` issues by working with a copy
                        var separatorCopy = new RegExp(separator.source, flags + 'g');
                        var separator2, match, lastIndex, lastLength, i;
                        // Doesn't need flags gy, but they don't hurt
                        if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
                        while (match = separatorCopy.exec(string)) {
                            // `separatorCopy.lastIndex` is not reliable cross-browser
                            lastIndex = match.index + match[0][LENGTH];
                            if (lastIndex > lastLastIndex) {
                                output.push(string.slice(lastLastIndex, match.index));
                                // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
                                // eslint-disable-next-line no-loop-func
                                if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function() {
                                    for (i = 1; i < arguments[LENGTH] - 2; i++)
                                        if (arguments[i] === undefined) match[i] = undefined;
                                });
                                if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                                lastLength = match[0][LENGTH];
                                lastLastIndex = lastIndex;
                                if (output[LENGTH] >= splitLimit) break;
                            }
                            if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
                        }
                        if (lastLastIndex === string[LENGTH]) {
                            if (lastLength || !separatorCopy.test('')) output.push('');
                        } else output.push(string.slice(lastLastIndex));
                        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
                    };
                    // Chakra, V8
                } else if ('0' [$SPLIT](undefined, 0)[LENGTH]) {
                    $split = function(separator, limit) {
                        return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
                    };
                }
                // 21.1.3.17 String.prototype.split(separator, limit)
                return [function split(separator, limit) {
                    var O = defined(this);
                    var fn = separator == undefined ? undefined : separator[SPLIT];
                    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
                }, $split];
            });


            /***/
        }),
        /* 247 */
        /*!*****************************************************!*\
          !*** ./node_modules/core-js/modules/es6.promise.js ***!
          \*****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var LIBRARY = __webpack_require__( /*! ./_library */ 35);
            var global = __webpack_require__( /*! ./_global */ 2);
            var ctx = __webpack_require__( /*! ./_ctx */ 19);
            var classof = __webpack_require__( /*! ./_classof */ 51);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);
            var speciesConstructor = __webpack_require__( /*! ./_species-constructor */ 61);
            var task = __webpack_require__( /*! ./_task */ 89).set;
            var microtask = __webpack_require__( /*! ./_microtask */ 90)();
            var newPromiseCapabilityModule = __webpack_require__( /*! ./_new-promise-capability */ 91);
            var perform = __webpack_require__( /*! ./_perform */ 114);
            var promiseResolve = __webpack_require__( /*! ./_promise-resolve */ 115);
            var PROMISE = 'Promise';
            var TypeError = global.TypeError;
            var process = global.process;
            var $Promise = global[PROMISE];
            var isNode = classof(process) == 'process';
            var empty = function() { /* empty */ };
            var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
            var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

            var USE_NATIVE = !! function() {
                try {
                    // correct subclassing with @@species support
                    var promise = $Promise.resolve(1);
                    var FakePromise = (promise.constructor = {})[__webpack_require__( /*! ./_wks */ 5)('species')] = function(exec) {
                        exec(empty, empty);
                    };
                    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
                } catch (e) { /* empty */ }
            }();

            // helpers
            var isThenable = function(it) {
                var then;
                return isObject(it) && typeof(then = it.then) == 'function' ? then : false;
            };
            var notify = function(promise, isReject) {
                if (promise._n) return;
                promise._n = true;
                var chain = promise._c;
                microtask(function() {
                    var value = promise._v;
                    var ok = promise._s == 1;
                    var i = 0;
                    var run = function(reaction) {
                        var handler = ok ? reaction.ok : reaction.fail;
                        var resolve = reaction.resolve;
                        var reject = reaction.reject;
                        var domain = reaction.domain;
                        var result, then;
                        try {
                            if (handler) {
                                if (!ok) {
                                    if (promise._h == 2) onHandleUnhandled(promise);
                                    promise._h = 1;
                                }
                                if (handler === true) result = value;
                                else {
                                    if (domain) domain.enter();
                                    result = handler(value);
                                    if (domain) domain.exit();
                                }
                                if (result === reaction.promise) {
                                    reject(TypeError('Promise-chain cycle'));
                                } else if (then = isThenable(result)) {
                                    then.call(result, resolve, reject);
                                } else resolve(result);
                            } else reject(value);
                        } catch (e) {
                            reject(e);
                        }
                    };
                    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
                    promise._c = [];
                    promise._n = false;
                    if (isReject && !promise._h) onUnhandled(promise);
                });
            };
            var onUnhandled = function(promise) {
                task.call(global, function() {
                    var value = promise._v;
                    var unhandled = isUnhandled(promise);
                    var result, handler, console;
                    if (unhandled) {
                        result = perform(function() {
                            if (isNode) {
                                process.emit('unhandledRejection', value, promise);
                            } else if (handler = global.onunhandledrejection) {
                                handler({ promise: promise, reason: value });
                            } else if ((console = global.console) && console.error) {
                                console.error('Unhandled promise rejection', value);
                            }
                        });
                        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                    }
                    promise._a = undefined;
                    if (unhandled && result.e) throw result.v;
                });
            };
            var isUnhandled = function(promise) {
                return promise._h !== 1 && (promise._a || promise._c).length === 0;
            };
            var onHandleUnhandled = function(promise) {
                task.call(global, function() {
                    var handler;
                    if (isNode) {
                        process.emit('rejectionHandled', promise);
                    } else if (handler = global.onrejectionhandled) {
                        handler({ promise: promise, reason: promise._v });
                    }
                });
            };
            var $reject = function(value) {
                var promise = this;
                if (promise._d) return;
                promise._d = true;
                promise = promise._w || promise; // unwrap
                promise._v = value;
                promise._s = 2;
                if (!promise._a) promise._a = promise._c.slice();
                notify(promise, true);
            };
            var $resolve = function(value) {
                var promise = this;
                var then;
                if (promise._d) return;
                promise._d = true;
                promise = promise._w || promise; // unwrap
                try {
                    if (promise === value) throw TypeError("Promise can't be resolved itself");
                    if (then = isThenable(value)) {
                        microtask(function() {
                            var wrapper = { _w: promise, _d: false }; // wrap
                            try {
                                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                            } catch (e) {
                                $reject.call(wrapper, e);
                            }
                        });
                    } else {
                        promise._v = value;
                        promise._s = 1;
                        notify(promise, false);
                    }
                } catch (e) {
                    $reject.call({ _w: promise, _d: false }, e); // wrap
                }
            };

            // constructor polyfill
            if (!USE_NATIVE) {
                // 25.4.3.1 Promise(executor)
                $Promise = function Promise(executor) {
                    anInstance(this, $Promise, PROMISE, '_h');
                    aFunction(executor);
                    Internal.call(this);
                    try {
                        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                    } catch (err) {
                        $reject.call(this, err);
                    }
                };
                // eslint-disable-next-line no-unused-vars
                Internal = function Promise(executor) {
                    this._c = []; // <- awaiting reactions
                    this._a = undefined; // <- checked in isUnhandled reactions
                    this._s = 0; // <- state
                    this._d = false; // <- done
                    this._v = undefined; // <- value
                    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
                    this._n = false; // <- notify
                };
                Internal.prototype = __webpack_require__( /*! ./_redefine-all */ 43)($Promise.prototype, {
                    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
                    then: function then(onFulfilled, onRejected) {
                        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                        reaction.fail = typeof onRejected == 'function' && onRejected;
                        reaction.domain = isNode ? process.domain : undefined;
                        this._c.push(reaction);
                        if (this._a) this._a.push(reaction);
                        if (this._s) notify(this, false);
                        return reaction.promise;
                    },
                    // 25.4.5.1 Promise.prototype.catch(onRejected)
                    'catch': function(onRejected) {
                        return this.then(undefined, onRejected);
                    }
                });
                OwnPromiseCapability = function() {
                    var promise = new Internal();
                    this.promise = promise;
                    this.resolve = ctx($resolve, promise, 1);
                    this.reject = ctx($reject, promise, 1);
                };
                newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                    return C === $Promise || C === Wrapper ?
                        new OwnPromiseCapability(C) :
                        newGenericPromiseCapability(C);
                };
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
            __webpack_require__( /*! ./_set-to-string-tag */ 44)($Promise, PROMISE);
            __webpack_require__( /*! ./_set-species */ 40)(PROMISE);
            Wrapper = __webpack_require__( /*! ./_core */ 23)[PROMISE];

            // statics
            $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
                // 25.4.4.5 Promise.reject(r)
                reject: function reject(r) {
                    var capability = newPromiseCapability(this);
                    var $$reject = capability.reject;
                    $$reject(r);
                    return capability.promise;
                }
            });
            $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
                // 25.4.4.6 Promise.resolve(x)
                resolve: function resolve(x) {
                    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
                }
            });
            $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__( /*! ./_iter-detect */ 58)(function(iter) {
                $Promise.all(iter)['catch'](empty);
            })), PROMISE, {
                // 25.4.4.1 Promise.all(iterable)
                all: function all(iterable) {
                    var C = this;
                    var capability = newPromiseCapability(C);
                    var resolve = capability.resolve;
                    var reject = capability.reject;
                    var result = perform(function() {
                        var values = [];
                        var index = 0;
                        var remaining = 1;
                        forOf(iterable, false, function(promise) {
                            var $index = index++;
                            var alreadyCalled = false;
                            values.push(undefined);
                            remaining++;
                            C.resolve(promise).then(function(value) {
                                if (alreadyCalled) return;
                                alreadyCalled = true;
                                values[$index] = value;
                                --remaining || resolve(values);
                            }, reject);
                        });
                        --remaining || resolve(values);
                    });
                    if (result.e) reject(result.v);
                    return capability.promise;
                },
                // 25.4.4.4 Promise.race(iterable)
                race: function race(iterable) {
                    var C = this;
                    var capability = newPromiseCapability(C);
                    var reject = capability.reject;
                    var result = perform(function() {
                        forOf(iterable, false, function(promise) {
                            C.resolve(promise).then(capability.resolve, reject);
                        });
                    });
                    if (result.e) reject(result.v);
                    return capability.promise;
                }
            });


            /***/
        }),
        /* 248 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es6.weak-set.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var weak = __webpack_require__( /*! ./_collection-weak */ 120);
            var validate = __webpack_require__( /*! ./_validate-collection */ 47);
            var WEAK_SET = 'WeakSet';

            // 23.4 WeakSet Objects
            __webpack_require__( /*! ./_collection */ 62)(WEAK_SET, function(get) {
                return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
            }, {
                // 23.4.3.1 WeakSet.prototype.add(value)
                add: function add(value) {
                    return weak.def(validate(this, WEAK_SET), value, true);
                }
            }, weak, false, true);


            /***/
        }),
        /* 249 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.array-buffer.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $typed = __webpack_require__( /*! ./_typed */ 63);
            var buffer = __webpack_require__( /*! ./_typed-buffer */ 92);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toAbsoluteIndex = __webpack_require__( /*! ./_to-absolute-index */ 37);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var ArrayBuffer = __webpack_require__( /*! ./_global */ 2).ArrayBuffer;
            var speciesConstructor = __webpack_require__( /*! ./_species-constructor */ 61);
            var $ArrayBuffer = buffer.ArrayBuffer;
            var $DataView = buffer.DataView;
            var $isView = $typed.ABV && ArrayBuffer.isView;
            var $slice = $ArrayBuffer.prototype.slice;
            var VIEW = $typed.VIEW;
            var ARRAY_BUFFER = 'ArrayBuffer';

            $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

            $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
                // 24.1.3.1 ArrayBuffer.isView(arg)
                isView: function isView(it) {
                    return $isView && $isView(it) || isObject(it) && VIEW in it;
                }
            });

            $export($export.P + $export.U + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
            }), ARRAY_BUFFER, {
                // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
                slice: function slice(start, end) {
                    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
                    var len = anObject(this).byteLength;
                    var first = toAbsoluteIndex(start, len);
                    var final = toAbsoluteIndex(end === undefined ? len : end, len);
                    var result = new(speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
                    var viewS = new $DataView(this);
                    var viewT = new $DataView(result);
                    var index = 0;
                    while (first < final) {
                        viewT.setUint8(index++, viewS.getUint8(first++));
                    }
                    return result;
                }
            });

            __webpack_require__( /*! ./_set-species */ 40)(ARRAY_BUFFER);


            /***/
        }),
        /* 250 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.data-view.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            $export($export.G + $export.W + $export.F * !__webpack_require__( /*! ./_typed */ 63).ABV, {
                DataView: __webpack_require__( /*! ./_typed-buffer */ 92).DataView
            });


            /***/
        }),
        /* 251 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.int8-array.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Int8', 1, function(init) {
                return function Int8Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 252 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Uint8', 1, function(init) {
                return function Uint8Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 253 */
        /*!***********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js ***!
          \***********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Uint8', 1, function(init) {
                return function Uint8ClampedArray(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            }, true);


            /***/
        }),
        /* 254 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.int16-array.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Int16', 2, function(init) {
                return function Int16Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 255 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.uint16-array.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Uint16', 2, function(init) {
                return function Uint16Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 256 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.int32-array.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Int32', 4, function(init) {
                return function Int32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 257 */
        /*!****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.uint32-array.js ***!
          \****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Uint32', 4, function(init) {
                return function Uint32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 258 */
        /*!*****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.float32-array.js ***!
          \*****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Float32', 4, function(init) {
                return function Float32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 259 */
        /*!*****************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.typed.float64-array.js ***!
          \*****************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_typed-array */ 29)('Float64', 8, function(init) {
                return function Float64Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });


            /***/
        }),
        /* 260 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.apply.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var rApply = (__webpack_require__( /*! ./_global */ 2).Reflect || {}).apply;
            var fApply = Function.apply;
            // MS Edge argumentsList argument is optional
            $export($export.S + $export.F * !__webpack_require__( /*! ./_fails */ 3)(function() {
                rApply(function() { /* empty */ });
            }), 'Reflect', {
                apply: function apply(target, thisArgument, argumentsList) {
                    var T = aFunction(target);
                    var L = anObject(argumentsList);
                    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
                }
            });


            /***/
        }),
        /* 261 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
            var $export = __webpack_require__( /*! ./_export */ 0);
            var create = __webpack_require__( /*! ./_object-create */ 38);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var fails = __webpack_require__( /*! ./_fails */ 3);
            var bind = __webpack_require__( /*! ./_bind */ 101);
            var rConstruct = (__webpack_require__( /*! ./_global */ 2).Reflect || {}).construct;

            // MS Edge supports only 2 arguments and argumentsList argument is optional
            // FF Nightly sets third argument as `new.target`, but does not create `this` from it
            var NEW_TARGET_BUG = fails(function() {
                function F() { /* empty */ }
                return !(rConstruct(function() { /* empty */ }, [], F) instanceof F);
            });
            var ARGS_BUG = !fails(function() {
                rConstruct(function() { /* empty */ });
            });

            $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
                construct: function construct(Target, args /* , newTarget */ ) {
                    aFunction(Target);
                    anObject(args);
                    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
                    if (Target == newTarget) {
                        // w/o altered newTarget, optimization for 0-4 arguments
                        switch (args.length) {
                            case 0:
                                return new Target();
                            case 1:
                                return new Target(args[0]);
                            case 2:
                                return new Target(args[0], args[1]);
                            case 3:
                                return new Target(args[0], args[1], args[2]);
                            case 4:
                                return new Target(args[0], args[1], args[2], args[3]);
                        }
                        // w/o altered newTarget, lot of arguments case
                        var $args = [null];
                        $args.push.apply($args, args);
                        return new(bind.apply(Target, $args))();
                    }
                    // with altered newTarget, not support built-in constructors
                    var proto = newTarget.prototype;
                    var instance = create(isObject(proto) ? proto : Object.prototype);
                    var result = Function.apply.call(Target, instance, args);
                    return isObject(result) ? result : instance;
                }
            });


            /***/
        }),
        /* 262 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.define-property.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
            var dP = __webpack_require__( /*! ./_object-dp */ 7);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);

            // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
            $export($export.S + $export.F * __webpack_require__( /*! ./_fails */ 3)(function() {
                // eslint-disable-next-line no-undef
                Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
            }), 'Reflect', {
                defineProperty: function defineProperty(target, propertyKey, attributes) {
                    anObject(target);
                    propertyKey = toPrimitive(propertyKey, true);
                    anObject(attributes);
                    try {
                        dP.f(target, propertyKey, attributes);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
            });


            /***/
        }),
        /* 263 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.delete-property.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.4 Reflect.deleteProperty(target, propertyKey)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16).f;
            var anObject = __webpack_require__( /*! ./_an-object */ 1);

            $export($export.S, 'Reflect', {
                deleteProperty: function deleteProperty(target, propertyKey) {
                    var desc = gOPD(anObject(target), propertyKey);
                    return desc && !desc.configurable ? false : delete target[propertyKey];
                }
            });


            /***/
        }),
        /* 264 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.enumerate.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // 26.1.5 Reflect.enumerate(target)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var Enumerate = function(iterated) {
                this._t = anObject(iterated); // target
                this._i = 0; // next index
                var keys = this._k = []; // keys
                var key;
                for (key in iterated) keys.push(key);
            };
            __webpack_require__( /*! ./_iter-create */ 80)(Enumerate, 'Object', function() {
                var that = this;
                var keys = that._k;
                var key;
                do {
                    if (that._i >= keys.length) return { value: undefined, done: true };
                } while (!((key = keys[that._i++]) in that._t));
                return { value: key, done: false };
            });

            $export($export.S, 'Reflect', {
                enumerate: function enumerate(target) {
                    return new Enumerate(target);
                }
            });


            /***/
        }),
        /* 265 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.6 Reflect.get(target, propertyKey [, receiver])
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var has = __webpack_require__( /*! ./_has */ 11);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);

            function get(target, propertyKey /* , receiver */ ) {
                var receiver = arguments.length < 3 ? target : arguments[2];
                var desc, proto;
                if (anObject(target) === receiver) return target[propertyKey];
                if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ?
                    desc.value :
                    desc.get !== undefined ?
                    desc.get.call(receiver) :
                    undefined;
                if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
            }

            $export($export.S, 'Reflect', { get: get });


            /***/
        }),
        /* 266 */
        /*!*********************************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js ***!
          \*********************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);

            $export($export.S, 'Reflect', {
                getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                    return gOPD.f(anObject(target), propertyKey);
                }
            });


            /***/
        }),
        /* 267 */
        /*!**********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js ***!
          \**********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.8 Reflect.getPrototypeOf(target)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var getProto = __webpack_require__( /*! ./_object-gpo */ 17);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);

            $export($export.S, 'Reflect', {
                getPrototypeOf: function getPrototypeOf(target) {
                    return getProto(anObject(target));
                }
            });


            /***/
        }),
        /* 268 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.has.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.9 Reflect.has(target, propertyKey)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Reflect', {
                has: function has(target, propertyKey) {
                    return propertyKey in target;
                }
            });


            /***/
        }),
        /* 269 */
        /*!*******************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.is-extensible.js ***!
          \*******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.10 Reflect.isExtensible(target)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var $isExtensible = Object.isExtensible;

            $export($export.S, 'Reflect', {
                isExtensible: function isExtensible(target) {
                    anObject(target);
                    return $isExtensible ? $isExtensible(target) : true;
                }
            });


            /***/
        }),
        /* 270 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.own-keys.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.11 Reflect.ownKeys(target)
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Reflect', { ownKeys: __webpack_require__( /*! ./_own-keys */ 122) });


            /***/
        }),
        /* 271 */
        /*!************************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js ***!
          \************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.12 Reflect.preventExtensions(target)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var $preventExtensions = Object.preventExtensions;

            $export($export.S, 'Reflect', {
                preventExtensions: function preventExtensions(target) {
                    anObject(target);
                    try {
                        if ($preventExtensions) $preventExtensions(target);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
            });


            /***/
        }),
        /* 272 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.set.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
            var dP = __webpack_require__( /*! ./_object-dp */ 7);
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var has = __webpack_require__( /*! ./_has */ 11);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var createDesc = __webpack_require__( /*! ./_property-desc */ 33);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var isObject = __webpack_require__( /*! ./_is-object */ 4);

            function set(target, propertyKey, V /* , receiver */ ) {
                var receiver = arguments.length < 4 ? target : arguments[3];
                var ownDesc = gOPD.f(anObject(target), propertyKey);
                var existingDescriptor, proto;
                if (!ownDesc) {
                    if (isObject(proto = getPrototypeOf(target))) {
                        return set(proto, propertyKey, V, receiver);
                    }
                    ownDesc = createDesc(0);
                }
                if (has(ownDesc, 'value')) {
                    if (ownDesc.writable === false || !isObject(receiver)) return false;
                    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
                    existingDescriptor.value = V;
                    dP.f(receiver, propertyKey, existingDescriptor);
                    return true;
                }
                return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
            }

            $export($export.S, 'Reflect', { set: set });


            /***/
        }),
        /* 273 */
        /*!**********************************************************************!*\
          !*** ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js ***!
          \**********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // 26.1.14 Reflect.setPrototypeOf(target, proto)
            var $export = __webpack_require__( /*! ./_export */ 0);
            var setProto = __webpack_require__( /*! ./_set-proto */ 72);

            if (setProto) $export($export.S, 'Reflect', {
                setPrototypeOf: function setPrototypeOf(target, proto) {
                    setProto.check(target, proto);
                    try {
                        setProto.set(target, proto);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
            });


            /***/
        }),
        /* 274 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/tc39/Array.prototype.includes
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $includes = __webpack_require__( /*! ./_array-includes */ 54)(true);

            $export($export.P, 'Array', {
                includes: function includes(el /* , fromIndex = 0 */ ) {
                    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
                }
            });

            __webpack_require__( /*! ./_add-to-unscopables */ 32)('includes');


            /***/
        }),
        /* 275 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.array.flat-map.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
            var $export = __webpack_require__( /*! ./_export */ 0);
            var flattenIntoArray = __webpack_require__( /*! ./_flatten-into-array */ 123);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var arraySpeciesCreate = __webpack_require__( /*! ./_array-species-create */ 86);

            $export($export.P, 'Array', {
                flatMap: function flatMap(callbackfn /* , thisArg */ ) {
                    var O = toObject(this);
                    var sourceLen, A;
                    aFunction(callbackfn);
                    sourceLen = toLength(O.length);
                    A = arraySpeciesCreate(O, 0);
                    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                    return A;
                }
            });

            __webpack_require__( /*! ./_add-to-unscopables */ 32)('flatMap');


            /***/
        }),
        /* 276 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.array.flatten.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
            var $export = __webpack_require__( /*! ./_export */ 0);
            var flattenIntoArray = __webpack_require__( /*! ./_flatten-into-array */ 123);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var toInteger = __webpack_require__( /*! ./_to-integer */ 26);
            var arraySpeciesCreate = __webpack_require__( /*! ./_array-species-create */ 86);

            $export($export.P, 'Array', {
                flatten: function flatten( /* depthArg = 1 */ ) {
                    var depthArg = arguments[0];
                    var O = toObject(this);
                    var sourceLen = toLength(O.length);
                    var A = arraySpeciesCreate(O, 0);
                    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                    return A;
                }
            });

            __webpack_require__( /*! ./_add-to-unscopables */ 32)('flatten');


            /***/
        }),
        /* 277 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.at.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/mathiasbynens/String.prototype.at
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $at = __webpack_require__( /*! ./_string-at */ 78)(true);

            $export($export.P, 'String', {
                at: function at(pos) {
                    return $at(this, pos);
                }
            });


            /***/
        }),
        /* 278 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/tc39/proposal-string-pad-start-end
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $pad = __webpack_require__( /*! ./_string-pad */ 124);
            var userAgent = __webpack_require__( /*! ./_user-agent */ 93);

            // https://github.com/zloirock/core-js/issues/280
            $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                padStart: function padStart(maxLength /* , fillString = ' ' */ ) {
                    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
                }
            });


            /***/
        }),
        /* 279 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/tc39/proposal-string-pad-start-end
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $pad = __webpack_require__( /*! ./_string-pad */ 124);
            var userAgent = __webpack_require__( /*! ./_user-agent */ 93);

            // https://github.com/zloirock/core-js/issues/280
            $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                padEnd: function padEnd(maxLength /* , fillString = ' ' */ ) {
                    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
                }
            });


            /***/
        }),
        /* 280 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.trim-left.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
            __webpack_require__( /*! ./_string-trim */ 45)('trimLeft', function($trim) {
                return function trimLeft() {
                    return $trim(this, 1);
                };
            }, 'trimStart');


            /***/
        }),
        /* 281 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.trim-right.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
            __webpack_require__( /*! ./_string-trim */ 45)('trimRight', function($trim) {
                return function trimRight() {
                    return $trim(this, 2);
                };
            }, 'trimEnd');


            /***/
        }),
        /* 282 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.string.match-all.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://tc39.github.io/String.prototype.matchAll/
            var $export = __webpack_require__( /*! ./_export */ 0);
            var defined = __webpack_require__( /*! ./_defined */ 25);
            var toLength = __webpack_require__( /*! ./_to-length */ 8);
            var isRegExp = __webpack_require__( /*! ./_is-regexp */ 57);
            var getFlags = __webpack_require__( /*! ./_flags */ 59);
            var RegExpProto = RegExp.prototype;

            var $RegExpStringIterator = function(regexp, string) {
                this._r = regexp;
                this._s = string;
            };

            __webpack_require__( /*! ./_iter-create */ 80)($RegExpStringIterator, 'RegExp String', function next() {
                var match = this._r.exec(this._s);
                return { value: match, done: match === null };
            });

            $export($export.P, 'String', {
                matchAll: function matchAll(regexp) {
                    defined(this);
                    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
                    var S = String(this);
                    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
                    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
                    rx.lastIndex = toLength(regexp.lastIndex);
                    return new $RegExpStringIterator(rx, S);
                }
            });


            /***/
        }),
        /* 283 */
        /*!*******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
          \*******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_wks-define */ 68)('asyncIterator');


            /***/
        }),
        /* 284 */
        /*!***************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.symbol.observable.js ***!
          \***************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ./_wks-define */ 68)('observable');


            /***/
        }),
        /* 285 */
        /*!*********************************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js ***!
          \*********************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-object-getownpropertydescriptors
            var $export = __webpack_require__( /*! ./_export */ 0);
            var ownKeys = __webpack_require__( /*! ./_own-keys */ 122);
            var toIObject = __webpack_require__( /*! ./_to-iobject */ 15);
            var gOPD = __webpack_require__( /*! ./_object-gopd */ 16);
            var createProperty = __webpack_require__( /*! ./_create-property */ 84);

            $export($export.S, 'Object', {
                getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                    var O = toIObject(object);
                    var getDesc = gOPD.f;
                    var keys = ownKeys(O);
                    var result = {};
                    var i = 0;
                    var key, desc;
                    while (keys.length > i) {
                        desc = getDesc(O, key = keys[i++]);
                        if (desc !== undefined) createProperty(result, key, desc);
                    }
                    return result;
                }
            });


            /***/
        }),
        /* 286 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.values.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-object-values-entries
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $values = __webpack_require__( /*! ./_object-to-array */ 125)(false);

            $export($export.S, 'Object', {
                values: function values(it) {
                    return $values(it);
                }
            });


            /***/
        }),
        /* 287 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.entries.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-object-values-entries
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $entries = __webpack_require__( /*! ./_object-to-array */ 125)(true);

            $export($export.S, 'Object', {
                entries: function entries(it) {
                    return $entries(it);
                }
            });


            /***/
        }),
        /* 288 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.define-getter.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var $defineProperty = __webpack_require__( /*! ./_object-dp */ 7);

            // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
            __webpack_require__( /*! ./_descriptors */ 6) && $export($export.P + __webpack_require__( /*! ./_object-forced-pam */ 64), 'Object', {
                __defineGetter__: function __defineGetter__(P, getter) {
                    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
                }
            });


            /***/
        }),
        /* 289 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.define-setter.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var $defineProperty = __webpack_require__( /*! ./_object-dp */ 7);

            // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
            __webpack_require__( /*! ./_descriptors */ 6) && $export($export.P + __webpack_require__( /*! ./_object-forced-pam */ 64), 'Object', {
                __defineSetter__: function __defineSetter__(P, setter) {
                    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
                }
            });


            /***/
        }),
        /* 290 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.lookup-getter.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var getOwnPropertyDescriptor = __webpack_require__( /*! ./_object-gopd */ 16).f;

            // B.2.2.4 Object.prototype.__lookupGetter__(P)
            __webpack_require__( /*! ./_descriptors */ 6) && $export($export.P + __webpack_require__( /*! ./_object-forced-pam */ 64), 'Object', {
                __lookupGetter__: function __lookupGetter__(P) {
                    var O = toObject(this);
                    var K = toPrimitive(P, true);
                    var D;
                    do {
                        if (D = getOwnPropertyDescriptor(O, K)) return D.get;
                    } while (O = getPrototypeOf(O));
                }
            });


            /***/
        }),
        /* 291 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.object.lookup-setter.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            var $export = __webpack_require__( /*! ./_export */ 0);
            var toObject = __webpack_require__( /*! ./_to-object */ 9);
            var toPrimitive = __webpack_require__( /*! ./_to-primitive */ 24);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var getOwnPropertyDescriptor = __webpack_require__( /*! ./_object-gopd */ 16).f;

            // B.2.2.5 Object.prototype.__lookupSetter__(P)
            __webpack_require__( /*! ./_descriptors */ 6) && $export($export.P + __webpack_require__( /*! ./_object-forced-pam */ 64), 'Object', {
                __lookupSetter__: function __lookupSetter__(P) {
                    var O = toObject(this);
                    var K = toPrimitive(P, true);
                    var D;
                    do {
                        if (D = getOwnPropertyDescriptor(O, K)) return D.set;
                    } while (O = getPrototypeOf(O));
                }
            });


            /***/
        }),
        /* 292 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.map.to-json.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P + $export.R, 'Map', { toJSON: __webpack_require__( /*! ./_collection-to-json */ 126)('Map') });


            /***/
        }),
        /* 293 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.set.to-json.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.P + $export.R, 'Set', { toJSON: __webpack_require__( /*! ./_collection-to-json */ 126)('Set') });


            /***/
        }),
        /* 294 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/es7.map.of.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
            __webpack_require__( /*! ./_set-collection-of */ 65)('Map');


            /***/
        }),
        /* 295 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/es7.set.of.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
            __webpack_require__( /*! ./_set-collection-of */ 65)('Set');


            /***/
        }),
        /* 296 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.weak-map.of.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
            __webpack_require__( /*! ./_set-collection-of */ 65)('WeakMap');


            /***/
        }),
        /* 297 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.weak-set.of.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
            __webpack_require__( /*! ./_set-collection-of */ 65)('WeakSet');


            /***/
        }),
        /* 298 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es7.map.from.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
            __webpack_require__( /*! ./_set-collection-from */ 66)('Map');


            /***/
        }),
        /* 299 */
        /*!******************************************************!*\
          !*** ./node_modules/core-js/modules/es7.set.from.js ***!
          \******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
            __webpack_require__( /*! ./_set-collection-from */ 66)('Set');


            /***/
        }),
        /* 300 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.weak-map.from.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
            __webpack_require__( /*! ./_set-collection-from */ 66)('WeakMap');


            /***/
        }),
        /* 301 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.weak-set.from.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
            __webpack_require__( /*! ./_set-collection-from */ 66)('WeakSet');


            /***/
        }),
        /* 302 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/es7.global.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-global
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.G, { global: __webpack_require__( /*! ./_global */ 2) });


            /***/
        }),
        /* 303 */
        /*!***********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.system.global.js ***!
          \***********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/tc39/proposal-global
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'System', { global: __webpack_require__( /*! ./_global */ 2) });


            /***/
        }),
        /* 304 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.error.is-error.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/ljharb/proposal-is-error
            var $export = __webpack_require__( /*! ./_export */ 0);
            var cof = __webpack_require__( /*! ./_cof */ 20);

            $export($export.S, 'Error', {
                isError: function isError(it) {
                    return cof(it) === 'Error';
                }
            });


            /***/
        }),
        /* 305 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.clamp.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                clamp: function clamp(x, lower, upper) {
                    return Math.min(upper, Math.max(lower, x));
                }
            });


            /***/
        }),
        /* 306 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.deg-per-rad.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


            /***/
        }),
        /* 307 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.degrees.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);
            var RAD_PER_DEG = 180 / Math.PI;

            $export($export.S, 'Math', {
                degrees: function degrees(radians) {
                    return radians * RAD_PER_DEG;
                }
            });


            /***/
        }),
        /* 308 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.fscale.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);
            var scale = __webpack_require__( /*! ./_math-scale */ 128);
            var fround = __webpack_require__( /*! ./_math-fround */ 108);

            $export($export.S, 'Math', {
                fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
                    return fround(scale(x, inLow, inHigh, outLow, outHigh));
                }
            });


            /***/
        }),
        /* 309 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.iaddh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                iaddh: function iaddh(x0, x1, y0, y1) {
                    var $x0 = x0 >>> 0;
                    var $x1 = x1 >>> 0;
                    var $y0 = y0 >>> 0;
                    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
                }
            });


            /***/
        }),
        /* 310 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.isubh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                isubh: function isubh(x0, x1, y0, y1) {
                    var $x0 = x0 >>> 0;
                    var $x1 = x1 >>> 0;
                    var $y0 = y0 >>> 0;
                    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
                }
            });


            /***/
        }),
        /* 311 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.imulh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                imulh: function imulh(u, v) {
                    var UINT16 = 0xffff;
                    var $u = +u;
                    var $v = +v;
                    var u0 = $u & UINT16;
                    var v0 = $v & UINT16;
                    var u1 = $u >> 16;
                    var v1 = $v >> 16;
                    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
                }
            });


            /***/
        }),
        /* 312 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.rad-per-deg.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


            /***/
        }),
        /* 313 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.radians.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);
            var DEG_PER_RAD = Math.PI / 180;

            $export($export.S, 'Math', {
                radians: function radians(degrees) {
                    return degrees * DEG_PER_RAD;
                }
            });


            /***/
        }),
        /* 314 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.scale.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', { scale: __webpack_require__( /*! ./_math-scale */ 128) });


            /***/
        }),
        /* 315 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.umulh.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                umulh: function umulh(u, v) {
                    var UINT16 = 0xffff;
                    var $u = +u;
                    var $v = +v;
                    var u0 = $u & UINT16;
                    var v0 = $v & UINT16;
                    var u1 = $u >>> 16;
                    var v1 = $v >>> 16;
                    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
                }
            });


            /***/
        }),
        /* 316 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.math.signbit.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // http://jfbastien.github.io/papers/Math.signbit.html
            var $export = __webpack_require__( /*! ./_export */ 0);

            $export($export.S, 'Math', {
                signbit: function signbit(x) {
                    // eslint-disable-next-line no-self-compare
                    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
                }
            });


            /***/
        }),
        /* 317 */
        /*!*************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.promise.finally.js ***!
          \*************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";
            // https://github.com/tc39/proposal-promise-finally

            var $export = __webpack_require__( /*! ./_export */ 0);
            var core = __webpack_require__( /*! ./_core */ 23);
            var global = __webpack_require__( /*! ./_global */ 2);
            var speciesConstructor = __webpack_require__( /*! ./_species-constructor */ 61);
            var promiseResolve = __webpack_require__( /*! ./_promise-resolve */ 115);

            $export($export.P + $export.R, 'Promise', {
                'finally': function(onFinally) {
                    var C = speciesConstructor(this, core.Promise || global.Promise);
                    var isFunction = typeof onFinally == 'function';
                    return this.then(
                        isFunction ? function(x) {
                            return promiseResolve(C, onFinally()).then(function() { return x; });
                        } : onFinally,
                        isFunction ? function(e) {
                            return promiseResolve(C, onFinally()).then(function() { throw e; });
                        } : onFinally
                    );
                }
            });


            /***/
        }),
        /* 318 */
        /*!*********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.promise.try.js ***!
          \*********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/tc39/proposal-promise-try
            var $export = __webpack_require__( /*! ./_export */ 0);
            var newPromiseCapability = __webpack_require__( /*! ./_new-promise-capability */ 91);
            var perform = __webpack_require__( /*! ./_perform */ 114);

            $export($export.S, 'Promise', {
                'try': function(callbackfn) {
                    var promiseCapability = newPromiseCapability.f(this);
                    var result = perform(callbackfn);
                    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                    return promiseCapability.promise;
                }
            });


            /***/
        }),
        /* 319 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.define-metadata.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toMetaKey = metadata.key;
            var ordinaryDefineOwnMetadata = metadata.set;

            metadata.exp({
                defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
                }
            });


            /***/
        }),
        /* 320 */
        /*!*********************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.delete-metadata.js ***!
          \*********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var toMetaKey = metadata.key;
            var getOrCreateMetadataMap = metadata.map;
            var store = metadata.store;

            metadata.exp({
                deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */ ) {
                    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
                    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
                    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
                    if (metadataMap.size) return true;
                    var targetMetadata = store.get(target);
                    targetMetadata['delete'](targetKey);
                    return !!targetMetadata.size || store['delete'](target);
                }
            });


            /***/
        }),
        /* 321 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.get-metadata.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var ordinaryHasOwnMetadata = metadata.has;
            var ordinaryGetOwnMetadata = metadata.get;
            var toMetaKey = metadata.key;

            var ordinaryGetMetadata = function(MetadataKey, O, P) {
                var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
                var parent = getPrototypeOf(O);
                return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
            };

            metadata.exp({
                getMetadata: function getMetadata(metadataKey, target /* , targetKey */ ) {
                    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });


            /***/
        }),
        /* 322 */
        /*!***********************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js ***!
          \***********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var Set = __webpack_require__( /*! ./es6.set */ 118);
            var from = __webpack_require__( /*! ./_array-from-iterable */ 127);
            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var ordinaryOwnMetadataKeys = metadata.keys;
            var toMetaKey = metadata.key;

            var ordinaryMetadataKeys = function(O, P) {
                var oKeys = ordinaryOwnMetadataKeys(O, P);
                var parent = getPrototypeOf(O);
                if (parent === null) return oKeys;
                var pKeys = ordinaryMetadataKeys(parent, P);
                return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
            };

            metadata.exp({
                getMetadataKeys: function getMetadataKeys(target /* , targetKey */ ) {
                    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
                }
            });


            /***/
        }),
        /* 323 */
        /*!**********************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata.js ***!
          \**********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var ordinaryGetOwnMetadata = metadata.get;
            var toMetaKey = metadata.key;

            metadata.exp({
                getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */ ) {
                    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });


            /***/
        }),
        /* 324 */
        /*!***************************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js ***!
          \***************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var ordinaryOwnMetadataKeys = metadata.keys;
            var toMetaKey = metadata.key;

            metadata.exp({
                getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */ ) {
                    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
                }
            });


            /***/
        }),
        /* 325 */
        /*!******************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.has-metadata.js ***!
          \******************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var getPrototypeOf = __webpack_require__( /*! ./_object-gpo */ 17);
            var ordinaryHasOwnMetadata = metadata.has;
            var toMetaKey = metadata.key;

            var ordinaryHasMetadata = function(MetadataKey, O, P) {
                var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return true;
                var parent = getPrototypeOf(O);
                return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
            };

            metadata.exp({
                hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */ ) {
                    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });


            /***/
        }),
        /* 326 */
        /*!**********************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.has-own-metadata.js ***!
          \**********************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var ordinaryHasOwnMetadata = metadata.has;
            var toMetaKey = metadata.key;

            metadata.exp({
                hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */ ) {
                    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });


            /***/
        }),
        /* 327 */
        /*!**************************************************************!*\
          !*** ./node_modules/core-js/modules/es7.reflect.metadata.js ***!
          \**************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $metadata = __webpack_require__( /*! ./_metadata */ 30);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var toMetaKey = $metadata.key;
            var ordinaryDefineOwnMetadata = $metadata.set;

            $metadata.exp({
                metadata: function metadata(metadataKey, metadataValue) {
                    return function decorator(target, targetKey) {
                        ordinaryDefineOwnMetadata(
                            metadataKey, metadataValue,
                            (targetKey !== undefined ? anObject : aFunction)(target),
                            toMetaKey(targetKey)
                        );
                    };
                }
            });


            /***/
        }),
        /* 328 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/modules/es7.asap.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
            var $export = __webpack_require__( /*! ./_export */ 0);
            var microtask = __webpack_require__( /*! ./_microtask */ 90)();
            var process = __webpack_require__( /*! ./_global */ 2).process;
            var isNode = __webpack_require__( /*! ./_cof */ 20)(process) == 'process';

            $export($export.G, {
                asap: function asap(fn) {
                    var domain = isNode && process.domain;
                    microtask(domain ? domain.bind(fn) : fn);
                }
            });


            /***/
        }),
        /* 329 */
        /*!********************************************************!*\
          !*** ./node_modules/core-js/modules/es7.observable.js ***!
          \********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";

            // https://github.com/zenparsing/es-observable
            var $export = __webpack_require__( /*! ./_export */ 0);
            var global = __webpack_require__( /*! ./_global */ 2);
            var core = __webpack_require__( /*! ./_core */ 23);
            var microtask = __webpack_require__( /*! ./_microtask */ 90)();
            var OBSERVABLE = __webpack_require__( /*! ./_wks */ 5)('observable');
            var aFunction = __webpack_require__( /*! ./_a-function */ 10);
            var anObject = __webpack_require__( /*! ./_an-object */ 1);
            var anInstance = __webpack_require__( /*! ./_an-instance */ 41);
            var redefineAll = __webpack_require__( /*! ./_redefine-all */ 43);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var forOf = __webpack_require__( /*! ./_for-of */ 42);
            var RETURN = forOf.RETURN;

            var getMethod = function(fn) {
                return fn == null ? undefined : aFunction(fn);
            };

            var cleanupSubscription = function(subscription) {
                var cleanup = subscription._c;
                if (cleanup) {
                    subscription._c = undefined;
                    cleanup();
                }
            };

            var subscriptionClosed = function(subscription) {
                return subscription._o === undefined;
            };

            var closeSubscription = function(subscription) {
                if (!subscriptionClosed(subscription)) {
                    subscription._o = undefined;
                    cleanupSubscription(subscription);
                }
            };

            var Subscription = function(observer, subscriber) {
                anObject(observer);
                this._c = undefined;
                this._o = observer;
                observer = new SubscriptionObserver(this);
                try {
                    var cleanup = subscriber(observer);
                    var subscription = cleanup;
                    if (cleanup != null) {
                        if (typeof cleanup.unsubscribe === 'function') cleanup = function() { subscription.unsubscribe(); };
                        else aFunction(cleanup);
                        this._c = cleanup;
                    }
                } catch (e) {
                    observer.error(e);
                    return;
                }
                if (subscriptionClosed(this)) cleanupSubscription(this);
            };

            Subscription.prototype = redefineAll({}, {
                unsubscribe: function unsubscribe() { closeSubscription(this); }
            });

            var SubscriptionObserver = function(subscription) {
                this._s = subscription;
            };

            SubscriptionObserver.prototype = redefineAll({}, {
                next: function next(value) {
                    var subscription = this._s;
                    if (!subscriptionClosed(subscription)) {
                        var observer = subscription._o;
                        try {
                            var m = getMethod(observer.next);
                            if (m) return m.call(observer, value);
                        } catch (e) {
                            try {
                                closeSubscription(subscription);
                            } finally {
                                throw e;
                            }
                        }
                    }
                },
                error: function error(value) {
                    var subscription = this._s;
                    if (subscriptionClosed(subscription)) throw value;
                    var observer = subscription._o;
                    subscription._o = undefined;
                    try {
                        var m = getMethod(observer.error);
                        if (!m) throw value;
                        value = m.call(observer, value);
                    } catch (e) {
                        try {
                            cleanupSubscription(subscription);
                        } finally {
                            throw e;
                        }
                    }
                    cleanupSubscription(subscription);
                    return value;
                },
                complete: function complete(value) {
                    var subscription = this._s;
                    if (!subscriptionClosed(subscription)) {
                        var observer = subscription._o;
                        subscription._o = undefined;
                        try {
                            var m = getMethod(observer.complete);
                            value = m ? m.call(observer, value) : undefined;
                        } catch (e) {
                            try {
                                cleanupSubscription(subscription);
                            } finally {
                                throw e;
                            }
                        }
                        cleanupSubscription(subscription);
                        return value;
                    }
                }
            });

            var $Observable = function Observable(subscriber) {
                anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
            };

            redefineAll($Observable.prototype, {
                subscribe: function subscribe(observer) {
                    return new Subscription(observer, this._f);
                },
                forEach: function forEach(fn) {
                    var that = this;
                    return new(core.Promise || global.Promise)(function(resolve, reject) {
                        aFunction(fn);
                        var subscription = that.subscribe({
                            next: function(value) {
                                try {
                                    return fn(value);
                                } catch (e) {
                                    reject(e);
                                    subscription.unsubscribe();
                                }
                            },
                            error: reject,
                            complete: resolve
                        });
                    });
                }
            });

            redefineAll($Observable, {
                from: function from(x) {
                    var C = typeof this === 'function' ? this : $Observable;
                    var method = getMethod(anObject(x)[OBSERVABLE]);
                    if (method) {
                        var observable = anObject(method.call(x));
                        return observable.constructor === C ? observable : new C(function(observer) {
                            return observable.subscribe(observer);
                        });
                    }
                    return new C(function(observer) {
                        var done = false;
                        microtask(function() {
                            if (!done) {
                                try {
                                    if (forOf(x, false, function(it) {
                                            observer.next(it);
                                            if (done) return RETURN;
                                        }) === RETURN) return;
                                } catch (e) {
                                    if (done) throw e;
                                    observer.error(e);
                                    return;
                                }
                                observer.complete();
                            }
                        });
                        return function() { done = true; };
                    });
                },
                of: function of() {
                    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
                    return new(typeof this === 'function' ? this : $Observable)(function(observer) {
                        var done = false;
                        microtask(function() {
                            if (!done) {
                                for (var j = 0; j < items.length; ++j) {
                                    observer.next(items[j]);
                                    if (done) return;
                                }
                                observer.complete();
                            }
                        });
                        return function() { done = true; };
                    });
                }
            });

            hide($Observable.prototype, OBSERVABLE, function() { return this; });

            $export($export.G, { Observable: $Observable });

            __webpack_require__( /*! ./_set-species */ 40)('Observable');


            /***/
        }),
        /* 330 */
        /*!****************************************************!*\
          !*** ./node_modules/core-js/modules/web.timers.js ***!
          \****************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // ie9- setTimeout & setInterval additional parameters fix
            var global = __webpack_require__( /*! ./_global */ 2);
            var $export = __webpack_require__( /*! ./_export */ 0);
            var userAgent = __webpack_require__( /*! ./_user-agent */ 93);
            var slice = [].slice;
            var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
            var wrap = function(set) {
                return function(fn, time /* , ...args */ ) {
                    var boundArgs = arguments.length > 2;
                    var args = boundArgs ? slice.call(arguments, 2) : false;
                    return set(boundArgs ? function() {
                        // eslint-disable-next-line no-new-func
                        (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
                    } : fn, time);
                };
            };
            $export($export.G + $export.B + $export.F * MSIE, {
                setTimeout: wrap(global.setTimeout),
                setInterval: wrap(global.setInterval)
            });


            /***/
        }),
        /* 331 */
        /*!*******************************************************!*\
          !*** ./node_modules/core-js/modules/web.immediate.js ***!
          \*******************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__( /*! ./_export */ 0);
            var $task = __webpack_require__( /*! ./_task */ 89);
            $export($export.G + $export.B, {
                setImmediate: $task.set,
                clearImmediate: $task.clear
            });


            /***/
        }),
        /* 332 */
        /*!**********************************************************!*\
          !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
          \**********************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            var $iterators = __webpack_require__( /*! ./es6.array.iterator */ 88);
            var getKeys = __webpack_require__( /*! ./_object-keys */ 36);
            var redefine = __webpack_require__( /*! ./_redefine */ 13);
            var global = __webpack_require__( /*! ./_global */ 2);
            var hide = __webpack_require__( /*! ./_hide */ 12);
            var Iterators = __webpack_require__( /*! ./_iterators */ 46);
            var wks = __webpack_require__( /*! ./_wks */ 5);
            var ITERATOR = wks('iterator');
            var TO_STRING_TAG = wks('toStringTag');
            var ArrayValues = Iterators.Array;

            var DOMIterables = {
                CSSRuleList: true, // TODO: Not spec compliant, should be false.
                CSSStyleDeclaration: false,
                CSSValueList: false,
                ClientRectList: false,
                DOMRectList: false,
                DOMStringList: false,
                DOMTokenList: true,
                DataTransferItemList: false,
                FileList: false,
                HTMLAllCollection: false,
                HTMLCollection: false,
                HTMLFormElement: false,
                HTMLSelectElement: false,
                MediaList: true, // TODO: Not spec compliant, should be false.
                MimeTypeArray: false,
                NamedNodeMap: false,
                NodeList: true,
                PaintRequestList: false,
                Plugin: false,
                PluginArray: false,
                SVGLengthList: false,
                SVGNumberList: false,
                SVGPathSegList: false,
                SVGPointList: false,
                SVGStringList: false,
                SVGTransformList: false,
                SourceBufferList: false,
                StyleSheetList: true, // TODO: Not spec compliant, should be false.
                TextTrackCueList: false,
                TextTrackList: false,
                TouchList: false
            };

            for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
                var NAME = collections[i];
                var explicit = DOMIterables[NAME];
                var Collection = global[NAME];
                var proto = Collection && Collection.prototype;
                var key;
                if (proto) {
                    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                    Iterators[NAME] = ArrayValues;
                    if (explicit)
                        for (key in $iterators)
                            if (!proto[key]) redefine(proto, key, $iterators[key], true);
                }
            }


            /***/
        }),
        /* 333 */
        /*!*********************************************************************************!*\
          !*** ./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js ***!
          \*********************************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */
            (function(global) {
                /**
                 * Copyright (c) 2014, Facebook, Inc.
                 * All rights reserved.
                 *
                 * This source code is licensed under the BSD-style license found in the
                 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
                 * additional grant of patent rights can be found in the PATENTS file in
                 * the same directory.
                 */

                !(function(global) {
                    "use strict";

                    var Op = Object.prototype;
                    var hasOwn = Op.hasOwnProperty;
                    var undefined; // More compressible than void 0.
                    var $Symbol = typeof Symbol === "function" ? Symbol : {};
                    var iteratorSymbol = $Symbol.iterator || "@@iterator";
                    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                    var inModule = typeof module === "object";
                    var runtime = global.regeneratorRuntime;
                    if (runtime) {
                        if (inModule) {
                            // If regeneratorRuntime is defined globally and we're in a module,
                            // make the exports object identical to regeneratorRuntime.
                            module.exports = runtime;
                        }
                        // Don't bother evaluating the rest of this file if the runtime was
                        // already defined globally.
                        return;
                    }

                    // Define the runtime globally (as expected by generated code) as either
                    // module.exports (if we're in a module) or a new, empty object.
                    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                    function wrap(innerFn, outerFn, self, tryLocsList) {
                        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                        var generator = Object.create(protoGenerator.prototype);
                        var context = new Context(tryLocsList || []);

                        // The ._invoke method unifies the implementations of the .next,
                        // .throw, and .return methods.
                        generator._invoke = makeInvokeMethod(innerFn, self, context);

                        return generator;
                    }
                    runtime.wrap = wrap;

                    // Try/catch helper to minimize deoptimizations. Returns a completion
                    // record like context.tryEntries[i].completion. This interface could
                    // have been (and was previously) designed to take a closure to be
                    // invoked without arguments, but in all the cases we care about we
                    // already have an existing method we want to call, so there's no need
                    // to create a new function object. We can even get away with assuming
                    // the method takes exactly one argument, since that happens to be true
                    // in every case, so we don't have to touch the arguments object. The
                    // only additional allocation required is the completion record, which
                    // has a stable shape and so hopefully should be cheap to allocate.
                    function tryCatch(fn, obj, arg) {
                        try {
                            return { type: "normal", arg: fn.call(obj, arg) };
                        } catch (err) {
                            return { type: "throw", arg: err };
                        }
                    }

                    var GenStateSuspendedStart = "suspendedStart";
                    var GenStateSuspendedYield = "suspendedYield";
                    var GenStateExecuting = "executing";
                    var GenStateCompleted = "completed";

                    // Returning this object from the innerFn has the same effect as
                    // breaking out of the dispatch switch statement.
                    var ContinueSentinel = {};

                    // Dummy constructor functions that we use as the .constructor and
                    // .constructor.prototype properties for functions that return Generator
                    // objects. For full spec compliance, you may wish to configure your
                    // minifier not to mangle the names of these two functions.
                    function Generator() {}

                    function GeneratorFunction() {}

                    function GeneratorFunctionPrototype() {}

                    // This is a polyfill for %IteratorPrototype% for environments that
                    // don't natively support it.
                    var IteratorPrototype = {};
                    IteratorPrototype[iteratorSymbol] = function() {
                        return this;
                    };

                    var getProto = Object.getPrototypeOf;
                    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                    if (NativeIteratorPrototype &&
                        NativeIteratorPrototype !== Op &&
                        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                        // This environment has a native %IteratorPrototype%; use it instead
                        // of the polyfill.
                        IteratorPrototype = NativeIteratorPrototype;
                    }

                    var Gp = GeneratorFunctionPrototype.prototype =
                        Generator.prototype = Object.create(IteratorPrototype);
                    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                    GeneratorFunctionPrototype.constructor = GeneratorFunction;
                    GeneratorFunctionPrototype[toStringTagSymbol] =
                        GeneratorFunction.displayName = "GeneratorFunction";

                    // Helper for defining the .next, .throw, and .return methods of the
                    // Iterator interface in terms of a single ._invoke method.
                    function defineIteratorMethods(prototype) {
                        ["next", "throw", "return"].forEach(function(method) {
                            prototype[method] = function(arg) {
                                return this._invoke(method, arg);
                            };
                        });
                    }

                    runtime.isGeneratorFunction = function(genFun) {
                        var ctor = typeof genFun === "function" && genFun.constructor;
                        return ctor ?
                            ctor === GeneratorFunction ||
                            // For the native GeneratorFunction constructor, the best we can
                            // do is to check its .name property.
                            (ctor.displayName || ctor.name) === "GeneratorFunction" :
                            false;
                    };

                    runtime.mark = function(genFun) {
                        if (Object.setPrototypeOf) {
                            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                        } else {
                            genFun.__proto__ = GeneratorFunctionPrototype;
                            if (!(toStringTagSymbol in genFun)) {
                                genFun[toStringTagSymbol] = "GeneratorFunction";
                            }
                        }
                        genFun.prototype = Object.create(Gp);
                        return genFun;
                    };

                    // Within the body of any async function, `await x` is transformed to
                    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                    // `hasOwn.call(value, "__await")` to determine if the yielded value is
                    // meant to be awaited.
                    runtime.awrap = function(arg) {
                        return { __await: arg };
                    };

                    function AsyncIterator(generator) {
                        function invoke(method, arg, resolve, reject) {
                            var record = tryCatch(generator[method], generator, arg);
                            if (record.type === "throw") {
                                reject(record.arg);
                            } else {
                                var result = record.arg;
                                var value = result.value;
                                if (value &&
                                    typeof value === "object" &&
                                    hasOwn.call(value, "__await")) {
                                    return Promise.resolve(value.__await).then(function(value) {
                                        invoke("next", value, resolve, reject);
                                    }, function(err) {
                                        invoke("throw", err, resolve, reject);
                                    });
                                }

                                return Promise.resolve(value).then(function(unwrapped) {
                                    // When a yielded Promise is resolved, its final value becomes
                                    // the .value of the Promise<{value,done}> result for the
                                    // current iteration. If the Promise is rejected, however, the
                                    // result for this iteration will be rejected with the same
                                    // reason. Note that rejections of yielded Promises are not
                                    // thrown back into the generator function, as is the case
                                    // when an awaited Promise is rejected. This difference in
                                    // behavior between yield and await is important, because it
                                    // allows the consumer to decide what to do with the yielded
                                    // rejection (swallow it and continue, manually .throw it back
                                    // into the generator, abandon iteration, whatever). With
                                    // await, by contrast, there is no opportunity to examine the
                                    // rejection reason outside the generator function, so the
                                    // only option is to throw it from the await expression, and
                                    // let the generator function handle the exception.
                                    result.value = unwrapped;
                                    resolve(result);
                                }, reject);
                            }
                        }

                        if (typeof global.process === "object" && global.process.domain) {
                            invoke = global.process.domain.bind(invoke);
                        }

                        var previousPromise;

                        function enqueue(method, arg) {
                            function callInvokeWithMethodAndArg() {
                                return new Promise(function(resolve, reject) {
                                    invoke(method, arg, resolve, reject);
                                });
                            }

                            return previousPromise =
                                // If enqueue has been called before, then we want to wait until
                                // all previous Promises have been resolved before calling invoke,
                                // so that results are always delivered in the correct order. If
                                // enqueue has not been called before, then it is important to
                                // call invoke immediately, without waiting on a callback to fire,
                                // so that the async generator function has the opportunity to do
                                // any necessary setup in a predictable way. This predictability
                                // is why the Promise constructor synchronously invokes its
                                // executor callback, and why async functions synchronously
                                // execute code before the first await. Since we implement simple
                                // async functions in terms of async generators, it is especially
                                // important to get this right, even though it requires care.
                                previousPromise ? previousPromise.then(
                                    callInvokeWithMethodAndArg,
                                    // Avoid propagating failures to Promises returned by later
                                    // invocations of the iterator.
                                    callInvokeWithMethodAndArg
                                ) : callInvokeWithMethodAndArg();
                        }

                        // Define the unified helper method that is used to implement .next,
                        // .throw, and .return (see defineIteratorMethods).
                        this._invoke = enqueue;
                    }

                    defineIteratorMethods(AsyncIterator.prototype);
                    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                        return this;
                    };
                    runtime.AsyncIterator = AsyncIterator;

                    // Note that simple async functions are implemented on top of
                    // AsyncIterator objects; they just return a Promise for the value of
                    // the final result produced by the iterator.
                    runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                        var iter = new AsyncIterator(
                            wrap(innerFn, outerFn, self, tryLocsList)
                        );

                        return runtime.isGeneratorFunction(outerFn) ?
                            iter // If outerFn is a generator, return the full iterator.
                            :
                            iter.next().then(function(result) {
                                return result.done ? result.value : iter.next();
                            });
                    };

                    function makeInvokeMethod(innerFn, self, context) {
                        var state = GenStateSuspendedStart;

                        return function invoke(method, arg) {
                            if (state === GenStateExecuting) {
                                throw new Error("Generator is already running");
                            }

                            if (state === GenStateCompleted) {
                                if (method === "throw") {
                                    throw arg;
                                }

                                // Be forgiving, per 25.3.3.3.3 of the spec:
                                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                return doneResult();
                            }

                            context.method = method;
                            context.arg = arg;

                            while (true) {
                                var delegate = context.delegate;
                                if (delegate) {
                                    var delegateResult = maybeInvokeDelegate(delegate, context);
                                    if (delegateResult) {
                                        if (delegateResult === ContinueSentinel) continue;
                                        return delegateResult;
                                    }
                                }

                                if (context.method === "next") {
                                    // Setting context._sent for legacy support of Babel's
                                    // function.sent implementation.
                                    context.sent = context._sent = context.arg;

                                } else if (context.method === "throw") {
                                    if (state === GenStateSuspendedStart) {
                                        state = GenStateCompleted;
                                        throw context.arg;
                                    }

                                    context.dispatchException(context.arg);

                                } else if (context.method === "return") {
                                    context.abrupt("return", context.arg);
                                }

                                state = GenStateExecuting;

                                var record = tryCatch(innerFn, self, context);
                                if (record.type === "normal") {
                                    // If an exception is thrown from innerFn, we leave state ===
                                    // GenStateExecuting and loop back for another invocation.
                                    state = context.done ?
                                        GenStateCompleted :
                                        GenStateSuspendedYield;

                                    if (record.arg === ContinueSentinel) {
                                        continue;
                                    }

                                    return {
                                        value: record.arg,
                                        done: context.done
                                    };

                                } else if (record.type === "throw") {
                                    state = GenStateCompleted;
                                    // Dispatch the exception by looping back around to the
                                    // context.dispatchException(context.arg) call above.
                                    context.method = "throw";
                                    context.arg = record.arg;
                                }
                            }
                        };
                    }

                    // Call delegate.iterator[context.method](context.arg) and handle the
                    // result, either by returning a { value, done } result from the
                    // delegate iterator, or by modifying context.method and context.arg,
                    // setting context.delegate to null, and returning the ContinueSentinel.
                    function maybeInvokeDelegate(delegate, context) {
                        var method = delegate.iterator[context.method];
                        if (method === undefined) {
                            // A .throw or .return when the delegate iterator has no .throw
                            // method always terminates the yield* loop.
                            context.delegate = null;

                            if (context.method === "throw") {
                                if (delegate.iterator.return) {
                                    // If the delegate iterator has a return method, give it a
                                    // chance to clean up.
                                    context.method = "return";
                                    context.arg = undefined;
                                    maybeInvokeDelegate(delegate, context);

                                    if (context.method === "throw") {
                                        // If maybeInvokeDelegate(context) changed context.method from
                                        // "return" to "throw", let that override the TypeError below.
                                        return ContinueSentinel;
                                    }
                                }

                                context.method = "throw";
                                context.arg = new TypeError(
                                    "The iterator does not provide a 'throw' method");
                            }

                            return ContinueSentinel;
                        }

                        var record = tryCatch(method, delegate.iterator, context.arg);

                        if (record.type === "throw") {
                            context.method = "throw";
                            context.arg = record.arg;
                            context.delegate = null;
                            return ContinueSentinel;
                        }

                        var info = record.arg;

                        if (!info) {
                            context.method = "throw";
                            context.arg = new TypeError("iterator result is not an object");
                            context.delegate = null;
                            return ContinueSentinel;
                        }

                        if (info.done) {
                            // Assign the result of the finished delegate to the temporary
                            // variable specified by delegate.resultName (see delegateYield).
                            context[delegate.resultName] = info.value;

                            // Resume execution at the desired location (see delegateYield).
                            context.next = delegate.nextLoc;

                            // If context.method was "throw" but the delegate handled the
                            // exception, let the outer generator proceed normally. If
                            // context.method was "next", forget context.arg since it has been
                            // "consumed" by the delegate iterator. If context.method was
                            // "return", allow the original .return call to continue in the
                            // outer generator.
                            if (context.method !== "return") {
                                context.method = "next";
                                context.arg = undefined;
                            }

                        } else {
                            // Re-yield the result returned by the delegate method.
                            return info;
                        }

                        // The delegate iterator is finished, so forget it and continue with
                        // the outer generator.
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    // Define Generator.prototype.{next,throw,return} in terms of the
                    // unified ._invoke helper method.
                    defineIteratorMethods(Gp);

                    Gp[toStringTagSymbol] = "Generator";

                    // A Generator should always return itself as the iterator object when the
                    // @@iterator function is called on it. Some browsers' implementations of the
                    // iterator prototype chain incorrectly implement this, causing the Generator
                    // object to not be returned from this call. This ensures that doesn't happen.
                    // See https://github.com/facebook/regenerator/issues/274 for more details.
                    Gp[iteratorSymbol] = function() {
                        return this;
                    };

                    Gp.toString = function() {
                        return "[object Generator]";
                    };

                    function pushTryEntry(locs) {
                        var entry = { tryLoc: locs[0] };

                        if (1 in locs) {
                            entry.catchLoc = locs[1];
                        }

                        if (2 in locs) {
                            entry.finallyLoc = locs[2];
                            entry.afterLoc = locs[3];
                        }

                        this.tryEntries.push(entry);
                    }

                    function resetTryEntry(entry) {
                        var record = entry.completion || {};
                        record.type = "normal";
                        delete record.arg;
                        entry.completion = record;
                    }

                    function Context(tryLocsList) {
                        // The root entry object (effectively a try statement without a catch
                        // or a finally block) gives us a place to store values thrown from
                        // locations where there is no enclosing try statement.
                        this.tryEntries = [{ tryLoc: "root" }];
                        tryLocsList.forEach(pushTryEntry, this);
                        this.reset(true);
                    }

                    runtime.keys = function(object) {
                        var keys = [];
                        for (var key in object) {
                            keys.push(key);
                        }
                        keys.reverse();

                        // Rather than returning an object with a next method, we keep
                        // things simple and return the next function itself.
                        return function next() {
                            while (keys.length) {
                                var key = keys.pop();
                                if (key in object) {
                                    next.value = key;
                                    next.done = false;
                                    return next;
                                }
                            }

                            // To avoid creating an additional object, we just hang the .value
                            // and .done properties off the next function object itself. This
                            // also ensures that the minifier will not anonymize the function.
                            next.done = true;
                            return next;
                        };
                    };

                    function values(iterable) {
                        if (iterable) {
                            var iteratorMethod = iterable[iteratorSymbol];
                            if (iteratorMethod) {
                                return iteratorMethod.call(iterable);
                            }

                            if (typeof iterable.next === "function") {
                                return iterable;
                            }

                            if (!isNaN(iterable.length)) {
                                var i = -1,
                                    next = function next() {
                                        while (++i < iterable.length) {
                                            if (hasOwn.call(iterable, i)) {
                                                next.value = iterable[i];
                                                next.done = false;
                                                return next;
                                            }
                                        }

                                        next.value = undefined;
                                        next.done = true;

                                        return next;
                                    };

                                return next.next = next;
                            }
                        }

                        // Return an iterator with no values.
                        return { next: doneResult };
                    }
                    runtime.values = values;

                    function doneResult() {
                        return { value: undefined, done: true };
                    }

                    Context.prototype = {
                        constructor: Context,

                        reset: function(skipTempReset) {
                            this.prev = 0;
                            this.next = 0;
                            // Resetting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            this.sent = this._sent = undefined;
                            this.done = false;
                            this.delegate = null;

                            this.method = "next";
                            this.arg = undefined;

                            this.tryEntries.forEach(resetTryEntry);

                            if (!skipTempReset) {
                                for (var name in this) {
                                    // Not sure about the optimal order of these conditions:
                                    if (name.charAt(0) === "t" &&
                                        hasOwn.call(this, name) &&
                                        !isNaN(+name.slice(1))) {
                                        this[name] = undefined;
                                    }
                                }
                            }
                        },

                        stop: function() {
                            this.done = true;

                            var rootEntry = this.tryEntries[0];
                            var rootRecord = rootEntry.completion;
                            if (rootRecord.type === "throw") {
                                throw rootRecord.arg;
                            }

                            return this.rval;
                        },

                        dispatchException: function(exception) {
                            if (this.done) {
                                throw exception;
                            }

                            var context = this;

                            function handle(loc, caught) {
                                record.type = "throw";
                                record.arg = exception;
                                context.next = loc;

                                if (caught) {
                                    // If the dispatched exception was caught by a catch block,
                                    // then let that catch block handle the exception normally.
                                    context.method = "next";
                                    context.arg = undefined;
                                }

                                return !!caught;
                            }

                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                var record = entry.completion;

                                if (entry.tryLoc === "root") {
                                    // Exception thrown outside of any try block that could handle
                                    // it, so set the completion value of the entire function to
                                    // throw the exception.
                                    return handle("end");
                                }

                                if (entry.tryLoc <= this.prev) {
                                    var hasCatch = hasOwn.call(entry, "catchLoc");
                                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                                    if (hasCatch && hasFinally) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        } else if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }

                                    } else if (hasCatch) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        }

                                    } else if (hasFinally) {
                                        if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }

                                    } else {
                                        throw new Error("try statement without catch or finally");
                                    }
                                }
                            }
                        },

                        abrupt: function(type, arg) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc <= this.prev &&
                                    hasOwn.call(entry, "finallyLoc") &&
                                    this.prev < entry.finallyLoc) {
                                    var finallyEntry = entry;
                                    break;
                                }
                            }

                            if (finallyEntry &&
                                (type === "break" ||
                                    type === "continue") &&
                                finallyEntry.tryLoc <= arg &&
                                arg <= finallyEntry.finallyLoc) {
                                // Ignore the finally entry if control is not jumping to a
                                // location outside the try/catch block.
                                finallyEntry = null;
                            }

                            var record = finallyEntry ? finallyEntry.completion : {};
                            record.type = type;
                            record.arg = arg;

                            if (finallyEntry) {
                                this.method = "next";
                                this.next = finallyEntry.finallyLoc;
                                return ContinueSentinel;
                            }

                            return this.complete(record);
                        },

                        complete: function(record, afterLoc) {
                            if (record.type === "throw") {
                                throw record.arg;
                            }

                            if (record.type === "break" ||
                                record.type === "continue") {
                                this.next = record.arg;
                            } else if (record.type === "return") {
                                this.rval = this.arg = record.arg;
                                this.method = "return";
                                this.next = "end";
                            } else if (record.type === "normal" && afterLoc) {
                                this.next = afterLoc;
                            }

                            return ContinueSentinel;
                        },

                        finish: function(finallyLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.finallyLoc === finallyLoc) {
                                    this.complete(entry.completion, entry.afterLoc);
                                    resetTryEntry(entry);
                                    return ContinueSentinel;
                                }
                            }
                        },

                        "catch": function(tryLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc === tryLoc) {
                                    var record = entry.completion;
                                    if (record.type === "throw") {
                                        var thrown = record.arg;
                                        resetTryEntry(entry);
                                    }
                                    return thrown;
                                }
                            }

                            // The context.catch method must only be called with a location
                            // argument that corresponds to a known catch block.
                            throw new Error("illegal catch attempt");
                        },

                        delegateYield: function(iterable, resultName, nextLoc) {
                            this.delegate = {
                                iterator: values(iterable),
                                resultName: resultName,
                                nextLoc: nextLoc
                            };

                            if (this.method === "next") {
                                // Deliberately forget the last sent value so that we don't
                                // accidentally pass it on to the delegate.
                                this.arg = undefined;
                            }

                            return ContinueSentinel;
                        }
                    };
                })(
                    // Among the various tricks for obtaining a reference to the global
                    // object, this seems to be the most reliable technique that does not
                    // use indirect eval (which violates Content Security Policy).
                    typeof global === "object" ? global :
                    typeof window === "object" ? window :
                    typeof self === "object" ? self : this
                );

                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__( /*! ./../../../webpack/buildin/global.js */ 48)))

            /***/
        }),
        /* 334 */
        /*!**************************************************!*\
          !*** ./node_modules/core-js/fn/regexp/escape.js ***!
          \**************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            __webpack_require__( /*! ../../modules/core.regexp.escape */ 335);
            module.exports = __webpack_require__( /*! ../../modules/_core */ 23).RegExp.escape;


            /***/
        }),
        /* 335 */
        /*!************************************************************!*\
          !*** ./node_modules/core-js/modules/core.regexp.escape.js ***!
          \************************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            // https://github.com/benjamingr/RexExp.escape
            var $export = __webpack_require__( /*! ./_export */ 0);
            var $re = __webpack_require__( /*! ./_replacer */ 336)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

            $export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


            /***/
        }),
        /* 336 */
        /*!***************************************************!*\
          !*** ./node_modules/core-js/modules/_replacer.js ***!
          \***************************************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports) {

            module.exports = function(regExp, replace) {
                var replacer = replace === Object(replace) ? function(part) {
                    return replace[part];
                } : replace;
                return function(it) {
                    return String(it).replace(regExp, replacer);
                };
            };


            /***/
        }),
        /* 337 */
        /*!*********************!*\
          !*** ./src/main.js ***!
          \*********************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            __webpack_require__( /*! pixi */ 129);

            __webpack_require__( /*! p2 */ 130);

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _Boot = __webpack_require__( /*! ./states/Boot */ 342);

            var _Boot2 = _interopRequireDefault(_Boot);

            var _Splash = __webpack_require__( /*! ./states/Splash */ 343);

            var _Splash2 = _interopRequireDefault(_Splash);

            var _Game = __webpack_require__( /*! ./states/Game */ 344);

            var _Game2 = _interopRequireDefault(_Game);

            var _config = __webpack_require__( /*! ./config */ 22);

            var _config2 = _interopRequireDefault(_config);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var Game = function(_Phaser$Game) {
                _inherits(Game, _Phaser$Game);

                function Game() {
                    _classCallCheck(this, Game);

                    var docElement = document.documentElement;
                    var width = docElement.clientWidth > _config2.default.gameWidth ? _config2.default.gameWidth : docElement.clientWidth;
                    var height = docElement.clientHeight > _config2.default.gameHeight ? _config2.default.gameHeight : docElement.clientHeight;

                    var _this = _possibleConstructorReturn(this, (Game.__proto__ || Object.getPrototypeOf(Game)).call(this, width, height, _phaser2.default.AUTO, 'content', null));

                    _this.state.add('Boot', _Boot2.default, false);
                    _this.state.add('Splash', _Splash2.default, false);
                    _this.state.add('Game', _Game2.default, false);

                    // with Cordova with need to wait that the device is ready so we will call the Boot state in another file
                    if (!window.cordova) {
                        _this.state.start('Boot');
                    }
                    return _this;
                }

                return Game;
            }(_phaser2.default.Game);

            window.game = new Game();

            if (window.cordova) {
                var app = {
                    initialize: function initialize() {
                        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
                    },

                    // deviceready Event Handler
                    //
                    onDeviceReady: function onDeviceReady() {
                        this.receivedEvent('deviceready');

                        // When the device is ready, start Phaser Boot state.
                        window.game.state.start('Boot');
                    },

                    receivedEvent: function receivedEvent(id) {
                        console.log('Received Event: ' + id);
                    }
                };

                app.initialize();
            }

            if ('serviceWorker' in navigator) {
                window.addEventListener('load', function() {
                    navigator.serviceWorker.register('/service-worker.js').then(function(registration) {
                        console.log('SW registered: ', registration);
                    }).catch(function(registrationError) {
                        console.log('SW registration failed: ', registrationError);
                    });
                });
            }

            /***/
        }),
        /* 338 */
        ,
        /* 339 */
        ,
        /* 340 */
        ,
        /* 341 */
        ,
        /* 342 */
        /*!****************************!*\
          !*** ./src/states/Boot.js ***!
          \****************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
            }();

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _webfontloader = __webpack_require__( /*! webfontloader */ 131);

            var _webfontloader2 = _interopRequireDefault(_webfontloader);

            var _config = __webpack_require__( /*! ../config */ 22);

            var _config2 = _interopRequireDefault(_config);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var _class = function(_Phaser$State) {
                _inherits(_class, _Phaser$State);

                function _class() {
                    _classCallCheck(this, _class);

                    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
                }

                _createClass(_class, [{
                    key: 'init',
                    value: function init() {
                        this.stage.backgroundColor = _config2.default.backgroundColor;
                        this.fontsReady = false;
                        this.fontsLoaded = this.fontsLoaded.bind(this);
                    }
                }, {
                    key: 'preload',
                    value: function preload() {
                        if (_config2.default.webfonts.length) {
                            _webfontloader2.default.load({
                                google: {
                                    families: _config2.default.webfonts
                                },
                                active: this.fontsLoaded
                            });
                        }

                        var text = this.add.text(this.world.centerX, this.world.centerY, 'loading fonts', { font: '16px Roboto', fill: '#dddddd', align: 'center' });
                        text.anchor.setTo(0.5, 0.5);

                        this.load.image('loaderBg', './assets/images/loader-bg.png');
                        this.load.image('loaderBar', './assets/images/loader-bar.png');
                    }
                }, {
                    key: 'render',
                    value: function render() {
                        if (_config2.default.webfonts.length && this.fontsReady) {
                            this.state.start('Splash');
                        }
                        if (!_config2.default.webfonts.length) {
                            this.state.start('Splash');
                        }
                    }
                }, {
                    key: 'fontsLoaded',
                    value: function fontsLoaded() {
                        this.fontsReady = true;
                    }
                }]);

                return _class;
            }(_phaser2.default.State);

            exports.default = _class;

            /***/
        }),
        /* 343 */
        /*!******************************!*\
          !*** ./src/states/Splash.js ***!
          \******************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
            }();

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _utils = __webpack_require__( /*! ../utils */ 52);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var _class = function(_Phaser$State) {
                _inherits(_class, _Phaser$State);

                function _class() {
                    _classCallCheck(this, _class);

                    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
                }

                _createClass(_class, [{
                    key: 'init',
                    value: function init() {}
                }, {
                    key: 'preload',
                    value: function preload() {
                        this.loaderBg = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'loaderBg');
                        this.loaderBar = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'loaderBar');
                        (0, _utils.centerGameObjects)([this.loaderBg, this.loaderBar]);

                        this.load.setPreloadSprite(this.loaderBar);
                        //
                        // load your assets
                        //
                        this.load.audio('bgLoop', 'assets/audio/bgLoop.wav');
                        this.load.image('tile', 'assets/images/tile.png');
                        this.load.image('bgTile', 'assets/images/bgTile.png');
                        this.load.image('gameOverBg', 'assets/images/gameOverBg.png');
                        this.load.image('buttonBg', 'assets/images/buttonBg.png');
                        this.load.image('arrowKeys', 'assets/images/arrowKeys.png');
                    }
                }, {
                    key: 'create',
                    value: function create() {
                        this.state.start('Game');
                    }
                }]);

                return _class;
            }(_phaser2.default.State);

            exports.default = _class;

            /***/
        }),
        /* 344 */
        /*!****************************!*\
          !*** ./src/states/Game.js ***!
          \****************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
            }();

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _Tile = __webpack_require__( /*! ../sprites/Tile */ 345);

            var _Tile2 = _interopRequireDefault(_Tile);

            var _WordResult = __webpack_require__( /*! ../sprites/WordResult */ 346);

            var _WordResult2 = _interopRequireDefault(_WordResult);

            var _GameOver = __webpack_require__( /*! ../sprites/GameOver */ 347);

            var _GameOver2 = _interopRequireDefault(_GameOver);

            var _Grid = __webpack_require__( /*! ../classes/Grid */ 132);

            var _Grid2 = _interopRequireDefault(_Grid);

            var _lang = __webpack_require__( /*! ../lang */ 349);

            var _lang2 = _interopRequireDefault(_lang);

            var _Tetramino = __webpack_require__( /*! ../sprites/Tetramino */ 351);

            var _Tetramino2 = _interopRequireDefault(_Tetramino);

            var _tetraminoes = __webpack_require__( /*! ../tetraminoes */ 133);

            var _utils = __webpack_require__( /*! ../utils */ 52);

            var _config = __webpack_require__( /*! ../config */ 22);

            var _config2 = _interopRequireDefault(_config);

            var _Points = __webpack_require__( /*! ../sprites/Points */ 352);

            var _Points2 = _interopRequireDefault(_Points);

            var _BackgroundFXTile = __webpack_require__( /*! ../sprites/BackgroundFXTile */ 353);

            var _BackgroundFXTile2 = _interopRequireDefault(_BackgroundFXTile);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            } /* globals __DEV__ */


            var _class = function(_Phaser$State) {
                _inherits(_class, _Phaser$State);

                function _class() {
                    _classCallCheck(this, _class);

                    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
                }

                _createClass(_class, [{
                    key: 'init',
                    value: function init() {}
                }, {
                    key: 'preload',
                    value: function preload() {}
                }, {
                    key: 'createTitle',
                    value: function createTitle() {
                        var _this2 = this;

                        this.titleTiles = _config2.default.titleLayout.map(function(pos) {
                            return _this2.createTile({
                                x: pos.x * 60 + 60,
                                y: pos.y * 60 + 60
                            }, pos.letter);
                        });
                        this.titleTiles.forEach(function(tile) {
                            return tile.scale.set(0.45);
                        });

                        var titlePulseLoop = function titlePulseLoop() {
                            Promise.all(_this2.titleTiles.map(function(tile, i) {
                                return (0, _utils.delay)(i * 50).then(function() {
                                    return tile.pulse();
                                });
                            })).then(function() {
                                return (0, _utils.delay)(3000);
                            }).then(titlePulseLoop);
                        };
                        (0, _utils.delay)(1000).then(titlePulseLoop);
                    }
                }, {
                    key: 'createTile',
                    value: function createTile(pos, letter) {
                        var tile = new _Tile2.default({
                            game: this.game,
                            x: pos.x,
                            y: pos.y,
                            asset: 'tile',
                            letter: letter
                        });

                        this.game.add.existing(tile);

                        return tile;
                    }
                }, {
                    key: 'createBackgroundTile',
                    value: function createBackgroundTile(pos, i) {
                        var tile = new _Tile2.default({
                            game: this.game,
                            x: pos.x,
                            y: pos.y,
                            asset: 'bgTile',
                            letter: '',
                            alpha: i % 2 ? 0.7 : 0.5
                        });

                        this.game.add.existing(tile);

                        return tile;
                    }
                }, {
                    key: 'createFXTiles',
                    value: function createFXTiles() {
                        var _this3 = this;

                        (0, _utils.range)(10).forEach(function(i) {
                            var fxTile = new _BackgroundFXTile2.default({
                                game: _this3.game,
                                x: 0,
                                y: 0
                            });

                            _this3.game.add.existing(fxTile);

                            (0, _utils.delay)(Math.floor(Math.random() * 4000)).then(function() {
                                return fxTile.loop();
                            });
                        });
                    }
                }, {
                    key: 'create',
                    value: function create() {

                        this.music = game.sound.play('bgLoop');
                        this.music.loopFull();

                        this.createFXTiles();

                        var bgRect = new _phaser2.default.Graphics(this.game);
                        bgRect.beginFill(_config2.default.backgroundColor);
                        bgRect.drawRect(_config2.default.grid.position.x - _config2.default.grid.tileSize.width / 2, _config2.default.grid.position.y - _config2.default.grid.tileSize.height / 2, _config2.default.grid.width * _config2.default.grid.tileSize.width, _config2.default.grid.height * _config2.default.grid.tileSize.height);
                        bgRect.endFill();

                        this.game.add.existing(bgRect);

                        this.placedTetraminoes = [];
                        this.wordResults = [];

                        this.createTitle();

                        this.cursors = game.input.keyboard.createCursorKeys();

                        this.points = new _Points2.default({
                            game: this.game,
                            x: _config2.default.gameWidth - 185,
                            y: 100,
                            asset: 'tile'
                        });
                        this.game.add.existing(this.points);

                        var arrowImg = this.add.sprite(_config2.default.gameWidth - 320, _config2.default.gameHeight - 230, 'arrowKeys');
                        arrowImg.scale.set(0.8);

                        this.grid = new _Grid2.default({
                            createBackgroundTile: this.createBackgroundTile.bind(this)
                        });

                        var shapeIndex = (0, _tetraminoes.randomTIndex)();
                        this.activeTetramino = new _Tetramino2.default({
                            x: Math.floor(_config2.default.grid.width / 2),
                            y: shapeIndex === 4 ? 2 : 1,
                            createTile: this.createTile.bind(this),
                            shapeIndex: shapeIndex
                        });
                        this.activeTetramino.enter();
                    }
                }, {
                    key: 'coordOverlapsWithAnyOtherTet',
                    value: function coordOverlapsWithAnyOtherTet(tets) {
                        return function(coord) {
                            return tets.filter(function(tet) {
                                return tet.layout.filter(function(c) {
                                    return c.x + tet.coord.x === coord.x && c.y + tet.coord.y === coord.y;
                                }).length > 0;
                            }).length > 0;
                        };
                    }
                }, {
                    key: 'tetraminoIsAtTheBottom',
                    value: function tetraminoIsAtTheBottom(tetramino) {
                        return tetramino.layoutAsCoords().filter(function(coord) {
                            return coord.y === _config2.default.grid.height - 1;
                        }).length > 0;
                    }
                }, {
                    key: 'tetraminoWouldOverlap',
                    value: function tetraminoWouldOverlap(tetramino, offset) {
                        return tetramino.layout.map(function(coord) {
                            return {
                                x: coord.x + tetramino.coord.x + offset.x,
                                y: coord.y + tetramino.coord.y + offset.y
                            };
                        }).filter(this.coordOverlapsWithAnyOtherTet(this.placedTetraminoes)).length > 0;
                    }
                }, {
                    key: 'tetraminoCanMoveLeft',
                    value: function tetraminoCanMoveLeft(tetramino) {
                        return tetramino.layout.filter(function(offset) {
                            return tetramino.coord.x + offset.x <= 0;
                        }).length === 0 && !this.tetraminoWouldOverlap(tetramino, { x: -1, y: 0 });
                    }
                }, {
                    key: 'tetraminoCanMoveRight',
                    value: function tetraminoCanMoveRight(tetramino) {
                        return tetramino.layout.filter(function(offset) {
                            return tetramino.coord.x + offset.x >= _config2.default.grid.width - 1;
                        }).length === 0 && !this.tetraminoWouldOverlap(tetramino, { x: 1, y: 0 });
                    }
                }, {
                    key: 'tetraminoCanMoveDown',
                    value: function tetraminoCanMoveDown(tetramino) {
                        return !(this.tetraminoIsAtTheBottom(tetramino) || this.tetraminoWouldOverlap(tetramino, { x: 0, y: 1 }));
                    }
                }, {
                    key: 'tetraminoLayoutOverlapsAnything',
                    value: function tetraminoLayoutOverlapsAnything(tetramino) {
                        return tetramino.layout.filter(function(offset) {
                            return tetramino.coord.x + offset.x < 0;
                        }).length > 0 || tetramino.layout.filter(function(offset) {
                            return tetramino.coord.x + offset.x > _config2.default.grid.width - 1;
                        }).length > 0 || this.tetraminoWouldOverlap(tetramino, { x: 0, y: 0 });
                    }
                }, {
                    key: 'collectPoints',
                    value: function collectPoints(word) {
                        word.split('').forEach(this.points.collectLetter.bind(this.points));
                    }
                }, {
                    key: 'createWordResult',
                    value: function createWordResult(word) {
                        this.collectPoints(word);
                        var wordResult = new _WordResult2.default({
                            game: this.game,
                            x: 195,
                            y: 250,
                            word: word.toUpperCase(),
                            asset: 'tile'
                        });
                        wordResult.enter();
                        this.game.add.existing(wordResult);
                        this.wordResults.unshift(wordResult);
                        if (this.wordResults.length > 5) {
                            var wr = this.wordResults.pop();
                            wr.destroy();
                        }

                        this.wordResults.forEach(function(wr, i) {
                            wr.dropTo(i * 100 + 250);
                        });
                    }
                }, {
                    key: 'replaceActiveTetWithNewTet',
                    value: function replaceActiveTetWithNewTet(previousTetramino) {
                        var _this4 = this;

                        this.placedTetraminoes.push(this.activeTetramino);
                        var currentlyActive = this.activeTetramino;
                        this.activeTetramino = undefined;
                        currentlyActive.pulse().then(function() {
                            _this4.checkForWordsAndRows();
                            if (_this4.checkForGameOver()) return;
                            var shapeIndex = (0, _tetraminoes.randomTIndex)();
                            _this4.activeTetramino = new _Tetramino2.default({
                                x: Math.floor(_config2.default.grid.width / 2),
                                y: shapeIndex === 4 ? 2 : 1,
                                createTile: _this4.createTile.bind(_this4),
                                shapeIndex: shapeIndex
                            });
                            _this4.activeTetramino.enter();
                        });
                    }
                }, {
                    key: 'checkForGameOver',
                    value: function checkForGameOver() {
                        var allTileCoords = (0, _utils.flat)(this.placedTetraminoes.map(function(t) {
                            return t.layoutAsCoords();
                        })).filter(function(coord) {
                            return coord.y === 0;
                        });

                        if (allTileCoords.length > 0) {
                            this.gameOver();
                            return true;
                        }
                        return false;
                    }
                }, {
                    key: 'gameOver',
                    value: function gameOver() {
                        this.gameOverMessage = new _GameOver2.default({
                            game: this.game,
                            x: _config2.default.gameWidth - 180,
                            y: _config2.default.gameHeight / 2 - 50,
                            asset: 'gameOverBg'
                        });
                        this.gameOverMessage.enter();
                        this.game.add.existing(this.gameOverMessage);
                    }
                }, {
                    key: 'checkForWordsAndRows',
                    value: function checkForWordsAndRows() {
                        var _this5 = this;

                        var coordsToRemove = (0, _Grid.checkForWords)(this.placedTetraminoes, this.createWordResult.bind(this));

                        coordsToRemove.forEach(function(c, i) {
                            _this5.removeBlockAtCoord(c, i * 50);
                        });
                    }
                }, {
                    key: 'tetIncludesCoord',
                    value: function tetIncludesCoord(tet, coord) {
                        return tet.layoutAsCoords().map(function(c) {
                            return JSON.stringify(c);
                        }).includes(JSON.stringify(coord));
                    }
                }, {
                    key: 'removeBlockAtCoord',
                    value: function removeBlockAtCoord(coord, removalDelay) {
                        var _this6 = this;

                        this.placedTetraminoes.filter(function(t) {
                            return _this6.tetIncludesCoord(t, coord);
                        }).forEach(function(t) {
                            (0, _utils.delay)(removalDelay == undefined ? _this6.randomDelay() : removalDelay).then(function() {
                                return t.removeBlockAtCoord(coord);
                            });
                        });
                    }
                }, {
                    key: 'randomDelay',
                    value: function randomDelay() {
                        return Math.floor(Math.random() * 150);
                    }
                }, {
                    key: 'update',
                    value: function update(game) {
                        if (!!this.gameOverMessage) return;
                        if (!this.activeTetramino) return;

                        this.activeTetramino.update(game, this.cursors, {
                            canMoveDown: this.tetraminoCanMoveDown.bind(this),
                            canMoveLeft: this.tetraminoCanMoveLeft.bind(this),
                            canMoveRight: this.tetraminoCanMoveRight.bind(this),
                            layoutOverlapsAnything: this.tetraminoLayoutOverlapsAnything.bind(this)
                        }, this.replaceActiveTetWithNewTet.bind(this));
                    }
                }, {
                    key: 'render',
                    value: function render() {
                        // if (__DEV__) {
                        //   this.game.debug.spriteInfo(this.mushroom, 32, 32)
                        // }
                    }
                }]);

                return _class;
            }(_phaser2.default.State);

            exports.default = _class;

            /***/
        }),
        /* 345 */
        /*!*****************************!*\
          !*** ./src/sprites/Tile.js ***!
          \*****************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
            }();

            var _phaser = __webpack_require__( /*! phaser */ 18);

            var _phaser2 = _interopRequireDefault(_phaser);

            var _config = __webpack_require__( /*! ../config */ 22);

            var _config2 = _interopRequireDefault(_config);

            var _letters = __webpack_require__( /*! ../letters */ 94);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var _class = function(_Phaser$Sprite) {
                _inherits(_class, _Phaser$Sprite);

                function _class(_ref) {
                    var game = _ref.game,
                        x = _ref.x,
                        y = _ref.y,
                        asset = _ref.asset,
                        letter = _ref.letter,
                        alpha = _ref.alpha;

                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, game, x, y, asset));

                    _this.letter = game.add.text(0, 0, letter, _config2.default.tileLetterConfig);
                    _this.letter.anchor.set(0.5);
                    _this.letter.scale.set(0.85);
                    _this.addChild(_this.letter);
                    _this.anchor.set(0.5);
                    _this.scale.set(0.31);
                    _this.alpha = alpha || 1;
                    _this.game = game;
                    _this.letterValue = letter;
                    if (letter) {
                        _this.pointsValue = (0, _letters.letterToPoint)(letter).toString();
                        _this.addPointLabel(_this.pointsValue);
                    }
                    return _this;
                }

                _createClass(_class, [{
                    key: 'addPointLabel',
                    value: function addPointLabel(points) {
                        this.pointLabel = game.add.text(50, 60, points, _config2.default.tileLetterConfig);
                        this.pointLabel.anchor.set(1);
                        this.pointLabel.scale.set(0.35);
                        this.addChild(this.pointLabel);
                    }
                }, {
                    key: 'pulse',
                    value: function pulse() {
                        var _this2 = this;

                        var scale = this.scale.x;
                        var targetScale = scale * 1.2;
                        var duration = 200;
                        return new Promise(function(resolve) {
                            return _this2.game.add.tween(_this2.scale).to({ x: targetScale, y: targetScale }, duration / 2, _phaser2.default.Easing.Quadratic.In, true).onComplete.add(function() {
                                return _this2.game.add.tween(_this2.scale).to({ x: scale, y: scale }, duration / 2, _phaser2.default.Easing.Quadratic.Out, true).onComplete.add(resolve);
                            });
                        });
                    }
                }, {
                    key: 'remove',
                    value: function remove() {
                        var _this3 = this;

                        this.removalTween = this.game.add.tween(this.scale).to({ x: 0, y: 0 }, 200, _phaser2.default.Easing.Back.In, true);
                        this.removalTween.onComplete.add(function() {
                            return _this3.destroy();
                        });
                    }
                }, {
                    key: 'enter',
                    value: function enter() {
                        var _this4 = this;

                        return new Promise(function(resolve) {
                            return _this4.game.add.tween(_this4.scale).to({ x: 0.31, y: 0.31 }, 200, _phaser2.default.Easing.Back.Out, true).onComplete.add(resolve);
                        });
                    }
                }, {
                    key: 'update',
                    value: function update() {}
                }]);

                return _class;
            }(_phaser2.default.Sprite);

            exports.default = _class;

            /***/
        }),
        /* 346 */
        /*!***********************************!*\
          !*** ./src/sprites/WordResult.js ***!
          \***********************************/
        /*! dynamic exports provided */
        /*! all exports used */
        /***/
        (function(module, exports, __webpack_require__) {

                "use strict";


                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _createClass = function() {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || false;
                            descriptor.configurable = true;
                            if ("value" in descriptor) descriptor.writable = true;
                            Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
                }();

                var _phaser = __webpack_require__( /*! phaser */ 18);

                var _phaser2 = _interopRequireDefault(_phaser);

                var _config = __webpack_require__( /*! ../config */ 22);

                var _config2 = _interopRequireDefault(_config);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

                function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                }

                var _class = function(_Phaser$Text) {
                    _inherits(_class, _Phaser$Text);

                    function _class(_ref) {
                        var game = _ref.game,
                            x = _ref.x,
                            y = _ref.y,
                            word = _ref.word;

                        _classCallCheck(this, _class);

                        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, game, x, y, word, _config2.default.uiLetterConfig));

                        _this.anchor.set(0.5);
                        _this.scale.set(0);
                        _this.game = game;
                        _this.getDefinition(word).then(function(response) {
                            return _this.showDefinition(_this.limitDefinitionLength(response));
                        });
                        return _this;
                    }

                    // remove() {
                    //   this.removalTween = this.game.add.tween(this.scale)
                    //     .to({x: 0, y: 0}, 200, Phaser.Easing.Back.In, true)
                    //   this.removalTween.onComplete.add(() => this.destroy())
                    // }

                    var definicije = {
                        'abeceda': ' Abeceda je ustaljeni redoslijed slova u latinici, popis slova u dogovorenome poretku. ',
                        'abecedni': ' Abecedni je koji se odnosi na abecedu, u kojemu se jedinice navode po abecedi.',
                        'adapter': ' Adapter je uređaj koji omogućuje međusobno spajanje dvaju ili više neusklađenih uređaja ili sustava.',
                        'administracija': ' Administracija je uredski, upravni ili izvršni posao. ',
                        'administracijski': ' Administracijski je koji se odnosi na administraciju. ',
                        'administrativni': ' Administrativni je koji se odnosi na administraciju. ',
                        'administrirati': ' Administrirati što ili čime znači voditi upravne poslove povezane s kakvom organizacijom, područjem ili djelatnošću.',
                        'admiral': ' Admiral je najviši vojni čin u ratnoj mornarici, viši od admiralskoga čina viceadmirala, a niži od admiralskoga čina admirala flote. ',
                        'admiralica': ' Admiralica je žena s činom admirala.',
                        'admiraličin': ' Admiraličin je koji pripada admiralici.',
                        'admiralov': ' Admiralov je koji pripada admiralu.',
                        'admiralski': ' Admiralski je koji se odnosi na admirale.',
                        'adresa': ' Adresa je oznaka poštanskoga broja, ime sela ili grada, ulica i kućni broj te ime države u koju se šalje pošta.',
                        'advent': ' Advent je četverotjedna priprava za blagdan Božića.',
                        'adventski': ' Adventski je koji se odnosi na advent. ',
                        'aerodrom': ' Aerodrom je mjesto uređeno za polijetanje i slijetanje letjelica.',
                        'aerodromski': ' Aerodromski je koji se odnosi na aerodrom.',
                        'afganistanski': ' Afganistanski je koji se odnosi na Afganistan i Afganistance.',
                        'afrički': ' Afrički je koji se odnosi na Afriku i Afrikance.',
                        'aga': ' Aga je naslov zapovjednika turske plemićke vojske.',
                        'agencija': ' Agencija je ustanova koja prikuplja i prenosi vijesti.',
                        'agencijski': ' Agencijski je koji se odnosi na agencije, ustanove koje prikupljaju i prenose vijesti.',
                        'agresivan': ' Agresivan je koji provodi nasilje ili je sklon nasilničkomu ponašanju.',
                        'agresivno': ' Agresivno je tako da odražava čiju sklonost nasilničkomu ponašanju.',
                        'agresivnost': ' Agresivnost je osobina onoga koji je agresivan, koji je sklon nasilničkomu ponašanju.',
                        'aha': ' Aha je usklik kojim se izriče iznenadno shvaćanje čega. ',
                        'ajme': ' Ajme je usklik kojim se izriče jadikovanje, žalost, bol, tjeskoba i strah.',
                        'akcelerator': ' Akcelerator je uređaj za povećanje kinetičke energije električno nabijenih čestica.',
                        'akcija': ' Akcija je djelovanje kojim se izaziva kakav učinak.',
                        'akcijski': ' Akcijski je koji se odnosi na akciju, djelovanje kojim se izaziva kakav učinak.',
                        'akna': ' Akna je gnojni prišt na koži prouzročen upalom žlijezda lojnica.',
                        'ako': ' Ako uvodi zavisnu surečenicu u stvarnoj uvjetnoj rečenici.',
                        'akrostih': ' Akrostih je vrsta pjesme u kojoj početna slova stihova, čitana odozgo nadolje daju neko ime, pojam ili misao.',
                        'aktiv': ' Aktiv je glagolsko stanje kojim se izriče radnja koju vrši subjekt.',
                        'aktiv': ' Aktiv je skupina ljudi povezana kakvom zajedničkom aktivnošću.',
                        'aktiva': ' Aktiva je stavka u bilanci koja prikazuje imovinu tvrtke, njezina osnovna i obrtna sredstva.',
                        'aktivan': ' Aktivan je koji djeluje, koji je uključen u što.',
                        'aktivirati': ' Aktivirati znači potaknuti/poticati što na pravilan rad.',
                        'aktivist': ' Aktivist je odrasla osoba bez obzira na spol ili muškarac koji javno djeluje u promicanju kakvih ideja.',
                        'aktivistica': ' Aktivistica je žena koja javno djeluje u promicanju kakvih ideja.',
                        'aktivističin': ' Aktivističin je koji pripada aktivistici.',
                        'aktivistički': ' Aktivistički je koji se odnosi na aktiviste i aktivizam.',
                        'aktivistkinja': ' Aktivistkinja je žena koja javno djeluje u promicanju kakvih ideja.',
                        'aktivistkinjin': ' Aktivistkinjin je koji pripada aktivistkinji.',
                        'aktivistov': ' Aktivistov je koji pripada aktivistu. ',
                        'aktivizam': ' Aktivizam je intenzivno zagovaranje ciljeva ili uvjerenja povezanih s različitim područjima društvenoga života.',
                        'aktivni': ' Aktivni je koji se odnosi na aktiv.',
                        'aktivni': ' Aktivni je koji se odnosi na aktivu.',
                        'aktivno': ' Aktivno je tako da se zainteresirano sudjeluje.',
                        'aktivnost': ' Aktivnost je stanje onoga koji je aktivan, koji djeluje ili je uključen u što.',
                        'aktualan': ' Aktualan je koji se odnosi na suvremenost, sadašnji trenutak.',
                        'akuzativ': ' Akuzativ je padež koji odgovara na pitanja.',
                        'akuzativni': ' Akuzativni je koji se odnosi na akuzativ.',
                        'akvarij': ' Akvarij je posuda ili bazen prozirnih stijenka ispunjen vodom u kojemu se čuvaju i/ili uzgajaju ribe i vodozemci. ',
                        'akvarijski': ' Akvarijski je koji je namijenjen za život u akvariju.',
                        'alarm': ' Alarm je znak za uzbunu ili upozorenje na neposrednu opasnost koji se daje u obliku zvučnoga ili svjetlosnoga signala (u vojsci, vatrogasnoj službi i sl.).',
                        'alat': ' Alat je oruđe ili pribor koji služi za izvođenje radnih postupaka ili obradu gradiva ili predmeta. ',
                        'alatni': ' Alatni je koji se odnosi na alat, oruđe ili pribor koji služi za izvođenje radnih postupaka ili obradu gradiva ili predmeta. ',
                        'alatnica': ' Alatnica je prostorija u kojoj se čuva alat. ',
                        'albanski': ' Albanski je koji se odnosi na Albaniju i Albance.',
                        'album': ' Album  je knjiga namijenjena umetanju i čuvanju kakve zbirke. ',
                        'alegorija': ' Alegorija je stilska figura u kojoj se pojmovi, ideje ili radnje prikazuju s pomoću likova i slika prenesena značenja.',
                        'alegorijski': ' Alegorijski je koji je utemeljen na alegoriji, u kojemu se pojmovi, ideje ili radnje prikazuju s pomoću likova i slika prenesena značenja.',
                        'alfabet': ' Alfabet je svaki sustav i redoslijed grafema kojima se, za razliku od slogovnoga i slikovnoga pisma, označavaju posebni fonemi.',
                        'alfa-mužjak': ' Alfa-mužjak dominantan je mužjak u životinjskoj zajednici..',
                        'alfa-ženka': ' Alfa-ženka je dominantna ženka u životinjskoj zajednici.',
                        'algoritam': ' Algoritam je postupak koji se sastoji od konačno mnogo koraka s pomoću kojih se dolazi do rješenja kojega zadatka. ',
                        'algoritamski': ' Algoritamski je koji se odnosi na algoritam. ',
                        'ali': ' Ali je veznik u suprotnoj rečenici kojom se izriče izrazita suprotnost: iznevjereno očekivanje ili neostvarena posljedica.',
                        'aliteracija': ' Aliteracija je glasovna figura u kojoj se ponavljaju isti suglasnici ili suglasničke skupine u stihu ili prozi',
                        'aliteracijski': ' Aliteracijski je koji se odnosi na aliteraciju, koji sadržava aliteraciju.',
                        'alkohol': ' Alkohol je organski spoj koji sadržava jednu ili više hidroksilnih skupina vezanih za ugljik.',
                        'alkoholičar': ' Alkoholičar je osoba bez obzira na spol ili muška osoba ovisna o alkoholu.',
                        'alkoholičarev': ' Alkoholičarev je koji pripada alkoholičaru.',
                        'alkoholičarka': ' Alkoholičarka je ženska osoba ovisna o alkoholu.',
                        'alkoholičarkin': ' Alkoholičarkin je koji pripada alkoholičarki.',
                        'alkoholičarov': ' Alkoholičarov je koji pripada alkoholičaru.',
                        'alkoholičarski': ' Alkoholičarski je koji se odnosi na alkoholičare i alkoholizam.',
                        'alkoholni': ' Alkoholni je koji sadržava alkohol.',
                        'alkoholometar': ' Alkoholometar je uređaj s pomoću kojega se mjeri koncentracija alkohola u organizmu.',
                        'alpinist': ' Alpinist je odrasla osoba bez obzira na spol ili muškarac koji se bavi alpinizmom.',
                        'alpinistica': ' Alpinistica je žena koja se bavi alpinizmom.',
                        'alpinističin': ' Alpinističin je koji pripada alpinistici.',
                        'alpinistički': ' Alpinistički je koji se odnosi na alpinizam i alpiniste.',
                        'alpinistkinja': ' Alpinistkinja je žena koja se bavi alpinizmom.',
                        'alpinistkinjin': '  Alpinistkinjin je koji pripada alpinistkinji.',
                        'alpinistov': ' Alpinistov je koji pripada alpinistu.',
                        'alpinizam': ' Alpinizam je kretanje neuređenim i neprisupačnim planinskim predjelima, uspinjanje po strmim i teško pristupačnim stijenama radi otkrivanja i doživljavanja prirodnih ljepota i osvajanja teško dostupnih planinskih vrhova.',
                        'aluminij': ' Aluminij je kemijski element (Al), srebrnobijela laka kovina, u prirodi se pojavljuje samo u spojevima, nakon kisika i silicija najprošireniji je element u Zemljinoj kori.',
                        'aluminijev': ' Aluminijev je koji pripada aluminiju.',
                        'aluminijski': ' Aluminijski je koji je načinjen od aluminija.',
                        'alžirski': ' Alžirski je koji se odnosi na Alžir i Alžirce.',
                        'amen': "Amen je usklik kojim završava molitva u kršćanskome i židovskome bogoslužju i koji znači 'neka bude tako' te kojim se poziva ili zahtijeva da izrečeno bude ispunjeno.",
                        'američki': ' Američki je koji se odnosi na Ameriku i Amerikance. ',
                        'amper': ' Amper je mjerna jedinica za jakost električne struje (A).',
                        'ampermetar': ' Ampermetar je uređaj za mjerenje jakosti električne struje.',
                        'amsterdamski': ' Amsterdamski je koji se odnosi na Amsterdam i Amsterdamce.',
                        'analitički': ' Analitički je koji se odnosi na analizu, iscrpno istraživanje i rastavljanje kakve složene cjeline na dijelove ili podatke i činjenice radi boljega razumijevanja ili znanstvenoga istraživanja. ',
                        'analiza': ' Analiza je iscrpno istraživanje i rastavljanje kakve složene cjeline na sastavne dijelove ili podatke i činjenice radi boljega razumijevanja ili znanstvenoga istraživanja. ',
                        'analizirati': ' Analizirati znači provesti/provoditi analizu.',
                        'ananas': ' Ananas je tropska grmolika voćka dugih mesnatih listova s cvatom.',
                        'anđelov': ' Anđelov je koji pripada anđelu.',
                        'anđeo': ' Anđeo je, prema Bibliji, glasnik koji ljudima prenosi Božju poruku, a obično se prikazuje kao biće s krilima i aureolom.',
                        'anđeoski': ' Anđeoski je koji se odnosi na anđele.',
                        'anglist': ' Anglist je stručnjak za engleski jezik i književnost.',
                        'anglistica': ' Anglistica je stručnjakinja za engleski jezik i književnost.',
                        'anglističin': ' Anglističin je koji pripada anglistici.',
                        'anglistički': ' Anglistički je koji se odnosi na anglistiku i angliste. ',
                        'anglistika': ' Anglistika je znanstvena disciplina koja se bavi proučavanjem engleskoga jezika i književnosti.',
                        'anglistkinja': ' Anglistkinja stručnjakinja za engleski jezik i englesku književnost.',
                        'anglistkinjin': ' Anglistkinjin je koji pripada anglistkinji.',
                        'anglistov': ' Anglistov je koji pripada anglistu.',
                        'anglizam': ' Anglizam je riječ ili sveza engleskoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                        'angolski': ' Angolski je koji se odnosi na Angolu i Angolce.',
                        'anosmija': ' Anosmija je  gubitak njuha, jedan od rjeđih simptoma bolesti COVID-19, najčešće se pojavljuje u mladih pacijenata s blagom kliničkom slikom.',
                        'antena': ' Antena je dio odašiljača i prijamnika, kovinska konstrukcija kojom se kroz atmosferu šalju i primaju elektromagnetski valovi.',
                        'antenski': ' Antenski je koji se odnosi na antene.',
                        'antialkoholičar': ' Antialkoholičar je osoba bez obzira na spol ili muška osoba koja se protivi pijenju alkoholnih pića.',
                        'antialkoholičarev': ' Antialkoholičarev je koji pripada antialkoholičaru.',
                        'antialkoholičarka': ' Antialkoholičarka je ženska osoba koja se protivi pijenju alkoholnih pića.',
                        'antialkoholičarkin': ' Antialkoholičarkin je koji pripada antialkoholičarki.',
                        'antialkoholičarov': ' Antialkoholičarov je koji pripada antialkoholičaru.',
                        'antialkoholičarski': ' Antialkoholičarski je koji se odnosi na antialkoholizam i antiakoholičare.',
                        'antivirusni': ' Antivirusni je koji se odnosi na liječenje zaraze prouzročene virusima.',
                        'antologija': ' Antologija je zbirka odabranih književnih tekstova jednoga pisca ili skupine pisaca.',
                        'antologijski': ' Antologijski je koji se nalazi u antologiji.',
                        'aorist': ' Aorist je glagolsko vrijeme koje se najčešće tvori od svršenih glagola, pa se obično i određuje kao prošlo svršeno glagolsko vrijeme.',
                        'aoristni': ' Aoristni je koji se odnosi na aorist.',
                        'aparat': ' Aparat je manji uređaj s pomoću kojega se obavlja kakav jednostavniji posao.',
                        'apartman': ' Apartman je manji stan, obično za odmor.',
                        'apartmanski': ' Apartmanski je koji se odnosi na apartmane.',
                        'apciha': ' Apciha je onomatopejska riječ kojom se oponaša kihanje. ',
                        'apologija': ' Apologija je tekst ili govor kojim se brani, hvali ili opravdava kakvo načelo ili osoba.',
                        'apologijski': ' Apologijski je koji ima značajke apologije, kojim se hvali ili opravdava kakvo načelo ili osoba. ',
                        'apostrof': "Apostrof je pravopisni znak (’ i ') koji se piše umjesto izostavljenoga slova.",
                        'apoteka': ' Apoteka  je mjesto na kojemu se pripremaju i prodaju lijekovi, pripravci i sredstva  za zaštitu zdravlja. ',
                        'apozicija': ' Apozicija je nesamostalni rečenični dio koji je uvijek imenica koja pobliže određuje drugu imenicu i slaže se s njom u padežu, a najčešće i u rodu i broju',
                        'apozicijski': ' Apozicijski je koji se odnosi na apoziciju. ',
                        'arapski': ' Arapski je koji se odnosi na Arabiju i Arape.',
                        'argentinski': ' Argentinski je koji se odnosi na Argentinu i Argentince.',
                        'argon': ' Argon je kemijski element (Ar), bezbojni plemeniti plin koji se upotrebljava za punjenje žarulja.',
                        'arhitekt': ' Arhitekt je odrasla osoba bez obzira na spol ili muškarac koji je završio studij arhitekture i koji planira, projektira i nadzire izgradnju različitih građevina te oblikovanje prostora.',
                        'arhitektica': ' Arhitektica je žena koja je završila studij arhitekture i koja planira, projektira i nadzire izgradnju različitih građevina te oblikovanje prostora.',
                        'arhitektičin': ' Arhitektičin je koji pripada arhitektici.',
                        'arhitektonski': ' Arhitektonski je koji se odnosi na arhitekte i arhitekturu.',
                        'arhitektov': ' Arhitektov je koji pripada arhitektu.',
                        'arhitektski': ' Arhitektski je koji se odnosi na arhitekte.',
                        'arhitektura': ' Arhitektura je znanstvena, umjetnička i tehnička disciplina usmjerena stvaranju okoliša primjerenoga ljudskomu prebivanju i potrebama te promišljanju s tim povezanih pitanja. ',
                        'arhitekturni': ' Arhitekturni je koji se odnosi na arhitekturu.',
                        'arhiv': ' Arhiv je ustanova odgovorna za čuvanje i davanje na korištenje arhivskoga gradiva.',
                        'arhiva': ' Arhiva je mjesto u tvrtki ili ustanovi na kojemu se čuvaju zapisi te tvrtke ili ustanove.',
                        'arhivist': ' Arhivist je odrasla osoba bez obzira na spol ili muškarac koji je odgovoran za vrednovanje, prikupljanje, uređivanje, opisivanje, čuvanje i dostupnost zapisa trajne vrijednosti koji se čuvaju u arhivima. ',
                        'arhivistica': ' Arhivistica je žena koja je odgovorna za vrednovanje, prikupljanje, uređivanje, opisivanje, čuvanje i dostupnost zapisa trajne vrijednosti koji se čuvaju u arhivima. ',
                        'arhivističin': ' Arhivističin je koji pripada arhivistici. ',
                        'arhivistički': ' Arhivistički je koji se odnosi na arhivistiku i arhiviste.',
                        'arhivistov': ' Arhivistov je koji pripada arhivistu. ',
                        'arhivski': ' Arhivski je koji se odnosi na arhiv.',
                        'arkanđelov': ' Arkanđelov je koji pripada arkanđelu.',
                        'arkanđeo': ' Arkanđeo je najviši naslov anđela.',
                        'armenski': ' Armenski je koji se odnosi na Armeniju i Armence.',
                        'arsen': ' Arsen je kemijski element (As), element kovinskih i nekovinskih osobina, u spojevima je veoma otrovan, a pri izgaranju miriše kao češnjak.',
                        'arsenov': ' Arsenov je koji sadržava arsen. ',
                        'asimptomatski': ' Asimptomatski je koji se ne očituje nikakvim simptomima (o bolesti ili stanju).',
                        'asonancija': ' Asonancija je glasovna figura u kojoj se ponavljaju isti samoglasnici u stihu ili prozi.',
                        'asonancijski': ' Asonancijski je koji se odnosi na asonanciju.',
                        'astat': ' Astat (At) umjetni je radiokativni halogeni kemijski element.',
                        'atenski': ' Atenski je koji se odnosi na Atenu i Atenjane.',
                        'atribut': ' Atribut je značajka, svojstvo ili osobina koje tko ili što ima. ',
                        'atributni': ' Atributni je koji se odnosi na atribut, nesamostalni rečenični dio. ',
                        'augmentativ': ' Augmentativ je izvedenica koja znači da je ono što je označeno osnovnom riječju uvećano ili veliko.',
                        'augmentativni': ' Augmentativni je koji se odnosi na augmentativ. ',
                        'aureola': ' Aureola je krug ili kružnica koji se na slikama nalaze oko glave Isusa Krista, Bogorodice i svetaca.',
                        'austrijski': ' Austrijski je koji se odnosi na Austriju i Austrijance.',
                        'autić': ' Autić je mali auto, auto od milja.',
                        'auto': ' Auto je cestovno motorno vozilo na četiri kotača koje služi za prijevoz manjega broja ljudi.',
                        'autobiografija': ' Autobiografija je književna vrsta koja obuhvaća djela u kojima autor opisuje vlastiti život.',
                        'autobus': ' Autobus je cestovno motorno vozilo za prijevoz više putnika u javnome prometu.',
                        'autobusni': ' Autobusni je koji se odnosi na autobus.',
                        'automat': ' Automat je uređaj ili stroj koji samostalno izvršava unaprijed zadane radnje.',
                        'automehaničar': ' Automehaničar je odrasla osoba bez obzira na spol ili muškarac koji popravlja automobile, kamione, autobuse i druga motorna vozila.',
                        'automehaničarev': ' Automehaničarev je koji pripada automehaničaru. ',
                        'automehaničarka': ' Automehaničarka je žena koja popravlja automobile, kamione, autobuse i druga motorna vozila.',
                        'automehaničarkin': ' Automehaničarkin je koji pripada automehaničarki. ',
                        'automehaničarov': ' Automehaničarov je koji pripada automehaničaru. ',
                        'automehaničarski': ' Automehaničarski je koji se odnosi na automehaničare. ',
                        'automobil': ' Automobil je cestovno motorno vozilo na četiri kotača koje služi za prijevoz manjega broja ljudi.',
                        'automobilski': ' Automobilski je koji se odnosi na automobile.',
                        'autopraona': ' Autopraona je mjesto na kojemu se peru i čiste automobili.',
                        'autopraonica': ' Autopraonica je mjesto na kojemu se peru i čiste automobili.',
                        'autor': ' Autor je odrasla osoba ili muškarac koji stvara umjetnička ili kulturna djela.',
                        'autorčić': ' Autorčić je autor čije djelo nema osobitu vrijednost.',
                        'autorica': ' Autorica je žena koja stvara umjetnička ili kulturna djela.',
                        'autoričin': ' Autoričin je koji pripada autorici.',
                        'autorov': ' Autorov je koji pripada autoru.',
                        'autorski': ' Autorski je koji se odnosi na autore.',
                        'avion': ' Avion je letjelica teža od zraka s krilima i motorom.',
                        'aviončić': ' Aviončić je mali avion.',
                        'avionski': ' Avionski je koji se odnosi na avion.',
                        'azijski': ' Azijski je koji se odnosi na Aziju i Azijce.',
                        'baba': ' Baba je žena u visokoj životnoj dobi.',
                        'babica': ' Babica je starija žena.',
                        'babičin': ' Babičin je koji pripada babici, starijoj ženi.',
                        'babura': ' Babura je paprika velikoga ploda.',
                        'bacač': ' Bacač je osoba koja što baca.',
                        'bacačev': ' Bacačev je koji pripada bacaču.',
                        'bacačica': ' Bacačica je žena koja što baca.',
                        'bacačičin': ' Bacačičin je koji pripada bacačici.',
                        'bacački': ' Bacački je koji se odnosi na bacanje i bacače.',
                        'bacati': ' Bacati što znači puštati šiz ruke u zamahu, tako da ono što se u njoj drži leti kroz zrak na drugo mjesto.',
                        'baciti': ' Baciti što znači pustiti što iz ruke u zamahu, tako da ono što se u njoj drži odleti kroz zrak na drugo mjesto.',
                        'bački': ' Bački je koji se odnosi na Bačku i Bačvane.',
                        'bačva': ' Bačva je valjkasta posuda koja služi za čuvanje i prijevoz tekućine.',
                        'bačvar': ' Bačvar je odrasla osoba bez obzira na spol ili muškarac koji izrađuje bačve i druge drvene posude koje se izrađuju spajanjem duga obručima.',
                        'bačvarev': ' Bačvarev je koji pripada bačvaru',
                        'bačvarica': ' Bačvarica je žena koja izrađuje bačve i druge drvene posude koje se izrađuju spajanjem duga obručima.',
                        'bačvaričin': ' Bačvaričin je koji pripada bačvarici.',
                        'bačvarov': ' Bačvarov je koji pripada bačvaru.',
                        'bačvarski': ' Bačvarski je koji se odnosi na bačvare i bačvarstvo.',
                        'bačvica': ' Bačvica je mala bačva.',
                        'badem': ' Badem je sredozemna drvenasta biljka s jestivim plodovima.',
                        'bademov': ' Bademov je koji pripada bademu, biljci.',
                        'badnjak': ' Badnjak je panj koji se unosi u kuću na Badnju večer.',
                        'bagdadski': ' Bagdadski je onaj koji se odnosi na Bagdad i Bagdađane.',
                        'bahat': ' Bahat je koji nema poštovanja prema drugome, koji se pravi važan.',
                        'bahato': ' Bahato znači bez poštovanja prema drugome, tako da se pravi važan.',
                        'bahatost': ' Bahatost je osobina onoga koji je bahat.',
                        'bajka': ' Bajka je jednostavna prozna književna vrsta koja obuhvaća djela u kojima se pojavljuju i nadnaravne sile i bića.',
                        'bajkovit': ' Bajkovit je koji je kao u bajci.',
                        'bajkovito': ' Bajkovito je kao u bajci.',
                        'bajkovitost': ' Bajkovitost je svojstvo onoga što je bajkovito.',
                        'bajram': ' Bajram je muslimanski blagdan.',
                        'bajramski': ' Bajramski je koji se odnosi na Bajram ili bajrame.',
                        'bajt': ' Bajt je jedinica za količinu podataka koja se obično sastoji od osam bitova.',
                        'baka': ' Baka je majčina ili očeva majka.',
                        'bakalar': ' Bakalar je riba koja živi u sjevernim morima.',
                        'bakar': ' Bakar je kemijski element (Cu), crvenkasta kovina, sastojak je bronce, a u starije se doba upotrebljavao u izradi oruđa i oružja.',
                        'bakin': ' Bakin je koji pripada baki.',
                        'bakren': ' Bakren je koji je narančastocrvene boje, boje bakra.',
                        'bakreni': ' Bakreni je koji se odnosi na bakar.',
                        'bakrov': ' Bakrov je koji pripada bakru.',
                        'bakterija': ' Bakterije su jednostanični mikroorganizmi, najjednostavniji stanični organizmi. ',
                        'bakterijski': ' Bakterijski je koji je prouzročen bakterijom.',
                        'balada': ' Balada je književna vrsta u stihovima, pripovjednoga karaktera, s naglašenim lirskim ugođajem, a često i dramskim zapletima u radnji i dijalozima.',
                        'balerina': ' Balerina je plesačica koja se bavi baletom.',
                        'balerinka': ' Balerinke su lagana ljetna ženska obuća s ravnim potplatom koja izgledom podsjeća na baletne papučice.',
                        'balet': ' Balet je plesno scensko djelo koje se izvodi uz glazbu.',
                        'baletan': ' Baletan je plesač koji se bavi baletom.',
                        'baletni': ' Baletni je koji se odnosi na balet.',
                        'balista': ' Balista je antičko oružje kojim se izbacuje kamenje i grede, prethodnica topa.',
                        'balkanski': ' Balkanski je koji se odnosi na Balkan i Balkance.',
                        'balkon': ' Balkon je ograđeni izbočeni dio zgrade na koji se izlazi iz prostorije.',
                        'balkončić': ' Balkončić je mali balkon.',
                        'balkonski': ' Balkonski je koji se odnosi na balkon.',
                        'balon': ' Balon je gumena ili plastična opna, ukras ili igračka koja se može ispuniti zrakom, plinom, zrakom, plinom, vodom i slično, napunjena plinom može se uzdizati uvis.',
                        'balončić': ' Balončić je mali balon, mala gumena ili plastična opna, ukras ili igračka koja se može ispuniti zrakom, plinom, vodom i slično, napunjena plinom može se uzdizati uvis.',
                        'baloner': ' Baloner je lagan ogrtač od balonske svile.',
                        'bambus': ' Bambus je biljka tropskih i suptropskih područja s drvenastom stabljikom nalik na trsku.',
                        'bambusov': ' Bambusov je koji pripada bambusu.',
                        'ban': '  Ban je naslov visokoga državnog dostojanstvenika u Hrvatskoj i Bosni',
                        'banana': ' Banana je visoka zeljasta biljka tropskih krajeva nalik na palmu koja ima velike listove i cvjetove skupljene u cvat.',
                        'bananica': ' Bananica je mala banana, mali duguljasti mesnati i hranjivi plod istoimene biljke obavijen debelom žutom korom.',
                        'banatski': ' Banatski je koji se odnosi na Banat i Banaćane.',
                        'bangkoški': ' Bangkoški je koji se odnosi na Bangkok i Bangkočane.',
                        'bangladeški': ' Bangladeški je koji se odnosi na Bangladeš i Bangladešane.',
                        'banica': ' Banica je banova supruga.',
                        'baničin': ' Baničin je koji pripada banici, banovoj supruzi.',
                        'banka': ' Banka je ustanova koja posluje s novcem i vrijednosnicama, u kojoj se novac čuva i posuđuje, ustanova kojoj je glavna djelatnost posredovanje u novčanim i kreditnim poslovima.',
                        'bankomat': ' Bankomat je elektronički uređaj koji s pomoću kartice omogućuje uplatu i isplatu novca s bankovnoga računa.',
                        'banov': ' Banov je koji pripada banu, muškoj osobi s istoimenim naslovom.',
                        'banovinski': ' Banovinski je koji se odnosi na Banovinu i Banovce.',
                        'banski': ' Banski je koji se odnosi na banove.',
                        'banjolučki': ' Banjolučki je koji se odnosi na Banja Luku i Banjolučane. ',
                        'bar': ' Bar ograničuje tvrdnju ili rečenicu i označuje da ono što se njom izriče zadovoljava najmanji zahtjev, najmanje potrebne ili poželjne uvjete za što.',
                        'bar': ' Bar je iznimno dopuštena mjerna jedinica za tlak, sto tisuća paskala.',
                        'baranjski': ' Baranjski je koji se odnosi na Baranju i Baranjce.',
                        'baratati': ' Baratati čime znači upotrebljavati što, služiti se čime.',
                        'barcelonski': ' Barcelonski je koji se odnosi na Barcelonu i Barcelonjane.',
                        'barem': ' Barem ograničuje tvrdnju ili rečenicu i označuje da ono što se njom izriče zadovoljava minimalan zahtjev, minimalne potrebne ili poželjne uvjete za što.',
                        'barij': ' Barij je kemijski element (Ba), srebrnobijela kovina koja je najproširenija u sulfatima.',
                        'barometar': ' Barometar je uređaj za mjerenje atmosferskoga tlaka zraka, mjerenje nadmorske visine te određivanje promjena vremena.',
                        'barski': ' Barski je koji se odnosi na Bar i Barane.',
                        'barski': ' Barski je koji se odnosi na bar, ugostiteljski objekt ili dio ugostiteljskoga objekta u kojemu se poslužuje piće, katkad i jednostavna hladna jela.',
                        'barun': ' Barun je naslov nižega plemića u feudalizmu.',
                        'barunica': ' Barunica je ženska osoba s naslovom baruna.',
                        'baruničin': ' Baruničin je koji pripada barunici.',
                        'barunov': ' Barunov je koji pripada barunu, muškoj osobi s naslovom baruna.',
                        'barunski': ' Barunski je koji se odnosi na barune.',
                        'baskijski': ' Baskijski je koji se odnosi na Baskiju i Baske.',
                        'basna': ' Basna je jednostavna, uglavnom prozna književna vrsta koja obuhvaća djela u kojima su glavni likovi životinje ljudskih osobina.',
                        'baš': ' Baš naglašuje tvrdnju ili izjavu.',
                        'bat': ' Bat je dio zvona koji udaranjem po njegovoj stijenki proizvodi zvuk.',
                        'baterija': ' Baterija je naprava koja daje ili sprema ili čuva električnu energiju, a stavlja se u tranzistore, različite uređaje i dječje igračke koje se tom energijom pokreću.',
                        'baterijski': ' Baterijski je koji se odnosi na baterije.',
                        'bavarski': ' Bavarski je koji se odnosi na Bavarsku i Bavarce.',
                        'baviti se': ' Baviti se čime znači imati što kao predmet svojega zanimanja ili djelovanja.',
                        'baza': ' Baza je polazišni, najbitniji dio čega.',
                        'bazen': ' Bazen je izgrađeni prostor ispunjen vodom.',
                        'bazenčić': ' Bazenčić je mali bazen.',
                        'bazenski': ' Bazenski je koji se odnosi na bazene.',
                        'bazga': ' Bazga je grmolika biljka s crnoljubičastim bobicama.',
                        'bazgin': ' Bazgin je koji pripada bazgi, grmolikoj biljci s crnoljubičastim bobicama.',
                        'bazgov': ' Bazgov je koji pripada bazgi, grmolikoj biljci s crnoljubičastim bobicama.',
                        'bdjeti': ' Bdjeti znači biti budan.',
                        'beba': ' Beba je dijete u prvoj godini života.',
                        'bebin': ' Bebin je koji pripada bebi.',
                        'bečki': ' Bečki je koji se odnosi na Beč i Bečane.',
                        'bedreni': ' Bedreni je koji se odnosi na bedro.',
                        'bedro': ' Bedro je gornji dio ljudske noge, dio noge od koljena do prepona.',
                        'beg': ' Beg je naslov turskoga plemića.',
                        'begonija': ' Begonija je zeljasta i grmolika jednogodišnja ukrasna biljka mesnatih sjajnih listova i crvenih, ružičastih ili bijelih cvjetova.',
                        'begov': ' Begov je koji pripada begu.',
                        'begovica': ' Begovica je begova žena. ',
                        'begovski': ' Begovski je koji se odnosi na begove.',
                        'bekerel': ' Bekerel je mjerna jedinica za aktivnost, jakost radioaktivnoga izvora (Bq).',
                        'bel': ' Bel je mjerna jedinica za jakost zvuka (B).',
                        'beletristički': ' Beletristički je koji se odnosi na beletristiku.',
                        'beletristika': ' Beletristika je književnost koja obuhvaća roman, novelu, pripovijetku, crticu i putopis, koja obuhvaća književna djela kao estetsku kategoriju.',
                        'belgijski': ' Belgijski je koji se odnosi na Belgiju i Belgijce.',
                        'belomanastirski': ' Belomanastirski je koji se odnosi na Beli Manastir i Belomanastirce.',
                        'bengalski': ' Bengalski je koji se odnosi na Bengal i Bengalce.',
                        'benkovački': ' Benkovački je koji se odnosi na Benkovac i Benkovčane.',
                        'beogradski': ' Beogradski je koji se odnosi na Beograd i Beograđane.',
                        'berilij': ' Berilij je kemijski element (Be), siva lagana kovina koja je u spojevima otrovna.',
                        'berlinski': ' Berlinski je koji se odnosi na Berlin i Berlinčane.',
                        'beskonačan': ' Beskonačan je koji nema kraja u prostoru ili u vremenu.',
                        'beskonačno': ' Beskonačno znači bez kraja u prostoru ili u vremenu.',
                        'beskonačnost': ' Beskonačnost je svojstvo onoga čemu nema kraja u prostoru ili u vremenu.',
                        'besmislen': ' Besmislen je koji nema smisla.',
                        'besmisleno': ' Besmisleno je tako da nema smisla, da nema stvarnih izgleda da se postigne cilj ili rezultat.',
                        'besmislenost': ' Besmislenost je svojstvo onoga što je besmisleno.',
                        'besmrtan': ' Besmrtan je koji ne umire, koji živi vječno.',
                        'besmrtno': ' Besmrtno znači tako da ne umire, da traje vječno',
                        'besmrtnost': ' Besmrtnost je osobina onoga koji je besmrtan, koji živi vječno.',
                        'besplatan': ' Besplatan je koji se ne plaća.',
                        'besplatno': ' Besplatno je tako da se ne plaća.',
                        'beton': ' Beton je građevni materijal, smjesa cementa, pijeska, šljunka i vode.',
                        'betonski': ' Betonski je koji je od betona.',
                        'bevanda': ' Bevanda je piće nastalo miješanjem vina i vode.',
                        'bez': ' Bez označuje da se što obavlja u odsutnosti drugih ili da što postoji, odvija se uz nepostojanje čega.',
                        'bezalkoholni': ' Bezalkoholni je koji ne sadržava alkohol.',
                        'bezazlen': ' Bezazlen je koji sve prihvaća s povjerenjem, koji nema loše namjere.',
                        'bezazleno': ' Bezazleno je tako da ulijeva povjerenje, upućuje na nepostojanje loših namjera.',
                        'bezazlenost': ' Bezazlenost je osobina onoga koji je bezazlen, koji sve prihvaća s povjerenjem, koji nema loše namjere.',
                        'bezbrižan': ' Bezbrižan je koji nije opterećen brigama, koji nema briga.',
                        'bezbrižno': ' Bezbrižno je tako da nije opterećeno brigama, da ne odražava čiju opterećenost brigama.',
                        'bezbrižnost': ' Bezbrižnost je stanje onoga koji je bezbrižan, koji nema briga.',
                        'bezizlazan': ' Bezizlazan je za koji ne postoji izlaz ili rješenje.',
                        'bezizlazno': ' Bezizlazno je tako da nema izlaza, ne postoji rješenje.',
                        'bezizlaznost': ' Bezizlaznost je svojstvo onoga što je bezizlazno.',
                        'bezobziran': ' Bezobziran je koji nema obzira prema drugima, koji postupa u svojemu interesu ne mareći za druge.',
                        'bezobzirno': ' Bezobzirno je tako da ne odražava obzir i razumijevanje prema komu.',
                        'bezobzirnost': ' Bezobzirnost je osobina onoga koji je bezobziran ili svojstvo onoga što je bezobzirno.',
                        'bezosjećajan': ' Bezosjećajan je koji nema osjećaja, razumijevanja ili ljubavi prema drugima.',
                        'bezosjećajno': ' Bezosjećajno je tako da odražava da se što radi bez osjećaja ili ljubavi prema kome ili čemu.',
                        'bezosjećajnost': ' Bezosjećanost je osobina onoga koji je bezosjećajan i koji nema ljubavi prema drugima.',
                        'bezvrijedan': ' Bezvrijedan je koji nema nikakvu vrijednost.',
                        'bezvrijedno': ' Bezvrijedno je tako da nema nikakvu vrijednost.',
                        'bezvrijednost': ' Bezvrijednost je svojstvo onoga što nema nikakvu vrijednost.',
                        'bež': ' Bež je koji je boje neobojene vune. ',
                        'bicikl': ' Bicikl je vozilo na nožni pogon s dvama kotačima. ',
                        'biciklić': ' Biciklić je mali bicikl.',
                        'biciklirati': ' Biciklirati znači kretati se s pomoću bicikla, voziti bicikl. ',
                        'biciklist': ' Biciklist je osoba bez obzira na spol ili muška osoba koja vozi bicikl.',
                        'biciklistica': ' Biciklistica je ženska osoba koja vozi bicikl.',
                        'biciklističin': ' Biciklističin je koji pripada biciklistici.',
                        'biciklistički': ' Biciklistički je koji se odnosi na bicikliste i biciklizam.',
                        'biciklistkinja': ' Biciklistkinja je ženska osoba koja vozi bicikl.',
                        'biciklistkinjin': '  Biciklistkinjin je koji pripada biciklistkinji.',
                        'biciklistov': ' Biciklistov je koji pripada biciklistu.',
                        'biciklizam': ' Biciklizam je vožnja bicikla.',
                        'biće': ' Biće je stvarno ili izmišljeno stvorenje.',
                        'bijeda': ' Bijeda je stanje u kojemu se u svemu oskudijeva, u kojemu nedostaju osnovni materijalni preduvjeti za dostojanstven život.',
                        'bijedan': ' Bijedan je koji živi u bijedi i siromaštvu.',
                        'bijedno': ' Bijedno je tako da odražava bijedu, stanje u kojemu se u svemu oskudijeva.',
                        'bijel': ' Bijel je koji je boje snijega ili mlijeka. ',
                        'bijeliti': ' Bijeliti znači bojiti što u bijelo, činiti bijelim.',
                        'bijeljeti': ' Bijeljeti znači postajati bijelim.',
                        'bijes': ' Bijes je stanje izazvano jakim osjećajem nezadovoljstva i ljutnje.',
                        'bik': ' Bik je spolno zreo mužjak goveda koji obično služi za rasplod.',
                        'bilo': ' Bilo označuje neodređenu osobu, predmet, mjesto, vrijeme, način, okolnosti, količinu itd.',
                        'bilježnica': ' Bilježnica je svezak ukoričenih listova koji služi za pisanje ili crtanje.',
                        'bilježničin': ' Bilježničin je koji pripada bilježnici.',
                        'bilježnički': ' Bilježnički je koji se odnosi na bilježnike, muškarce koji su obavljali administrativne poslove u državnome uredu.',
                        'bilježnik': ' Bilježnik je muškarac koji obavlja administrativne poslove u državnome uredu.',
                        'bilježnikov': ' Bilježnikov je koji pripada bilježniku, osobi ili muškarcu koji je obavljao administrativne poslove u državnome uredu.',
                        'biljka': ' Biljke su carstvo eukariotskih višestaničnih organizama s jezgrom i organelima koji se u procesu fotosinteze koriste Sunčevom energijom za proizvodnju hrane.',
                        'biljni': ' Biljni je koji se odnosi na biljke.',
                        'binarni': ' Binarni je koji se odnosi na brojevni sustav koji ima bazu dva.',
                        'biogradski': ' Biogradski je koji se odnosi na Biograd na Moru i Biograđane.',
                        'biografija': ' Biografija je književni ili publicistički tekst u kojemu se iznose podatci o čijemu životu. ',
                        'birati': ' Birati znači izdvajati koga ili što iz skupine s kojim ciljem, praviti izbor.',
                        'biser': ' Biser je okruglo sedefasto zrno koje se oblikuje pod ljušturom biserne školjke, upotrebljava se za izradbu nakita.',
                        'biseran': ' Biseran je koji je poput bisera (obično bojom ili oblikom).',
                        'biserni': ' Biserni je koji je od bisera ili koji je ukrašen biserima.',
                        'biskup': ' Biskup je naslov višega kršćanskog crkvenog poglavara.',
                        'biskupija': ' Biskupija je crkveno područje kojim upravlja biskup.',
                        'biskupijski': ' Biskupijski je koji se odnosi na biskupiju.',
                        'biskupov': ' Biskupov je koji pripada biskupu.',
                        'biskupski': ' Biskupski je koji se odnosi na biskupe.',
                        'bistrički': ' Bistrički je koji se odnosi na Mariju Bistricu i Bistričane. ',
                        'bit': ' Bit je osnovna  jedinica za količinu podataka koja može imati samo jednu od dviju različitih vrijednosti.',
                        'bitan': ' Bitan je koji za što ima iznimnu vrijednost, koji se mora uzeti u obzir. ',
                        'biti': ' Biti je pomoćni glagol koji služi u tvorbi perfekta, pluskvamperfekta, kondicionala i futura II. ',
                        'bitovni': ' Bitovni je koji se odnosi na bit, osnovnu jedinicu za količinu obavijesti. ',
                        'bivši': ' Bivši je koji je prošao, koji više ne postoji.',
                        'bizantski': ' Bizantski je koji se odnosi na Bizant i Bizantince.',
                        'bjelina': ' Bjelina je svojstvo onoga što se ističe bijelom bojom. ',
                        'bjelogorica': ' Bjelogorica je drveće ili grmlje kojemu u hladnijemu dijelu godine obično opada lišće.',
                        'bjelogorični': ' Bjelogorični je koji se odnosi na bjelogoricu.',
                        'bjelokošćanski': ' Bjelokošćanski je koji se odnosi na Bjelokosnu Obalu i Bjelokošćane.',
                        'bjeloruski': ' Bjeloruski je koji se odnosi na Bjelorusiju i Bjeloruse.',
                        'bježati': ' Bježati znači brzo se krećući udaljavati se od koga ili čega kako bi se izbjegle neželjene posljedice.',
                        'blag': ' Blag je koji je lagan i ugodan, koji nije posljedica velike tjelesne snage.',
                        'blagajna': ' Blagajna je mjesto za uplatu i isplatu u trgovini, poduzeću ili ustanovi.',
                        'blagdan': ' Blagdan je dan posvećen kojemu važnom vjerskom događaju.',
                        'blagdanski': ' Blagdanski je koji se odnosi na blagdane.',
                        'blago': ' Blago je  skup vrijednih, obično zlatnih, predmeta, dragulja, nakita i sl..',
                        'blago': ' Blago je tako da ne prouzročuje neugodu, bez velike tjelesne snage.',
                        'blagost': ' Blagost je svojstvo onoga što odražava prisnost i izaziva ugodu.',
                        'blagovaona': ' Blagovaona je prostorija u kojoj se blaguje, jede.',
                        'blagovaonica': ' Blagovaonica je prostorija u kojoj se blaguje, jede.',
                        'blanja': ' Blanja je oruđe za obradu drva struganjem.',
                        'blatan': ' Blatan je koji je uprljan blatom.',
                        'blatni': ' Blatni je koji se odnosi na blato, koji je od blata ili sadržava blato.',
                        'blatno': ' Blatno je uprljano blatom.',
                        'blato': ' Blato je raskvašena, meka i vlažna zemlja, zemlja natopljena vodom.',
                        'blatski': ' Blatski je koji se odnosi na Blato i Blaćane.',
                        'blazinica': ' Blazinica je plosnati komad vate koji se najčešće upotrebljava za skidanje ili nanošenje šminke, pranje lica ili kojega uređaja te kao oblog.',
                        'blijed': ' Blijed je koji je bez prirodnoga rumenila. ',
                        'blijedjeti': ' Blijedjeti znači postajati blijedim, gubiti prirodnu rumenu boju.',
                        'blisko': ' Blisko znači veoma čvrsto, tako da odražava čvrstu vezu.',
                        'bliskost': ' Bliskost je osjećaj ili stanje povezanosti s kim ili čim.',
                        'blitva': ' Blitva je zeljasta vrtna biljka mesnatih listova.',
                        'blizak': ' Blizak je koji je na maloj prostornoj udaljenosti od koga ili čega.',
                        'blizanac': ' Blizanac je muško dijete rođeno u istome porođaju s još jednim djetetom. ',
                        'blizanački': ' Blizanački je koji se odnosi na blizance, mušku djecu ili muško i žensko dijete rođene u istome porođaju.',
                        'blizančev': ' Blizančev je koji se odnosi na blizanca, osobu rođenu u istoimenome horoskopskom znaku.',
                        'blizanka': ' Blizanka je žensko dijete rođeno u istome porođaju s još jednim djetetom.',
                        'blizina': ' Blizina je mala udaljenost od čega. ',
                        'blizu': ' Blizu označuje da se tko ili što nalazi, kreće ili zbiva u blizini koga ili čega.',
                        'blizu': ' Blizu znači na maloj prostornoj udaljenosti od čega.',
                        'blokirati': ' Blokirati znači provesti/provoditi blokadu.',
                        'bluza': ' Bluza je gornji dio ženske odjeće koji se nosi uz suknju ili hlače, svečaniji od majice.',
                        'bljak': ' Bljak je usklik kojim se izriče negodovanje i gađenje. ',
                        'bljedilo': ' Bljedilo je osobina onoga koji je blijed ili onoga što je blijedo, što je bez prirodnoga rumenila.',
                        'bod': ' Bod je dogovorena jedinica za vrednovanje čega.',
                        'bodljika': ' Bodljika je šiljasta izraslina na tijelu životinje.',
                        'bofor': ' Bofor je mjerna jedinica za jačinu i brzinu vjetra u Beaufortovoj ljestvici.',
                        'bog': ' Bog je neformalni pozdrav koji se upotrebljava pri susretu i pri rastanku. ',
                        'bog': ' Bog je nadnaravno nevidljivo i sveto biće u koje vjeruju i koje štuju pripadnici različitih religija.',
                        'bogat': ' Bogat je koji ima mnogo novca, dobara ili drugih vrijednosti.',
                        'bogataš': ' Bogataš je osoba bez obzira na spol ili muška osoba koja je bogata, koji ima mnogo novca i materijalnih vrijednosti.',
                        'bogatašev': ' Bogatašev je koji pripada bogatašu.',
                        'bogatašica': ' Bogatašica je ženska osoba koja je bogata, koja ima mnogo novca i materijalnih vrijednosti.',
                        'bogatašičin': ' Bogatašičin je koji pripada bogatašici.',
                        'bogataški': ' Bogataški je koji se odnosi na bogataše.',
                        'bogato': ' Bogato znači velikom količinom čega.',
                        'bogatstvo': ' Bogatstvo je stanje onoga koji je bogat, koji ima mnogo novca, dobara ili drugih vrijednosti.',
                        'boginje': ' Boginje su virusna zarazna bolest praćena kožnim osipom ili krastama.',
                        'boja': ' Boja je dojam koji na ljudsko oko ostavljaju zrake od kojih se sastoji svjetlost.',
                        'bojati se ': ' Bojati se znači osjećati strah, često od koga ili čega. ',
                        'bojažljiv': ' Bojažljiv je koji lako ili često osjeća strah, koji pokazuje da se boji.',
                        'bojažljivo': ' Bojažljivo je tako da odražava osjećaj straha ili da se tko čega boji.',
                        'bojažljivost': ' Bojažljivost je osobina onoga koji je bojažljiv.',
                        'bojica': ' Bojica je olovka u boji ili kakvo drugo sredstvo za crtanje i slikanje.',
                        'bojiti': ' Bojiti što znači premazivati, prekrivati što bojom.',
                        'bojler': ' Bojler je kućanski uređaj, spremnik za grijanje vode.',
                        'bojnica': ' Bojnica je žena s činom bojnika.',
                        'bojničin': ' Bojničin je koji pripada bojnici.',
                        'bojnički': ' Bojnički je koji se odnosi na bojnike.',
                        'bojnik': ' Bojnik je viši časnički čin u kopnenoj vojsci i ratnome zrakoplovstvu, nadređen nižemu časničkom činu satnika, a podređen višemu časničkom činu pukovnika.',
                        'bojnikov': ' Bojnikov je koji pripada bojniku.',
                        'bok': ' Bok je dio tijela koji se nalazi sa strane.',
                        'bok': ' Bok je neformalni pozdrav koji se upotrebljava pri susretu i pri rastanku. ',
                        'bokeljski': ' Bokeljski je koji se odnosi na Boku kotorsku i Bokelje. ',
                        'boks': ' Boks je predgrada za smještaj robe ili životinja.',
                        'boksač': ' Boksač je osoba bez obzira na spol ili muška osoba koja se bavi boksom.',
                        'boksačev': ' Boksačev je koji pripada boksaču.',
                        'boksačica': ' Boksačica je ženska osoba koja se bavi boksom.',
                        'boksačičin': ' Boksačičin je koji pripada boksačici.',
                        'boksački': ' Boksački je koji se odnosi na boksače i boks.',
                        'boksati': ' Boksati znači baviti se boksom.',
                        'bokserice': ' Bokserice su donje rublje veće širine koje se nosi ispod druge odjeće na golome donjem dijelu tijela otprilike do pola bedara, a navlači se preko nogu.',
                        'bol': ' Bol je tjelesna patnja ili neugodan osjećaj koji nastaje kao posljedica ozljede ili bolesti. ',
                        'bol': ' Bol je osjećaj patnje, najčešće prouzočen kakvom emocionalnom, psihičkom ozljedom.',
                        'bolest': ' Bolest je poremećaj rada organizma, nezdravo stanje organizma.',
                        'bolestan': ' Bolestan je koji nije dobra zdravlja, koji ima kakvu bolest.',
                        'bolivijski': ' Bolivijski je koji se odnosi na Boliviju i Bolivijce.',
                        'bolnica': ' Bolnica je zdravstvena ustanova za boravak i liječenje bolesnika.',
                        'bolnički': ' Bolnički je koji se odnosi na bolnicu.',
                        'bolovati': ' Bolovati znači biti bolestan.',
                        'boljeti': ' Boljeti znači biti uzročnikom bola ili boli.',
                        'bombon': ' Bombon je mali slatkiš koji se može odjednom uzeti u usta.',
                        'bor': ' Borovi su porodica vazdazelenih golosjemenjača četinjača visokih stabala i dugih iglica. ',
                        'bor': ' Bor je kemijski element (B), nekovina, važan za rast biljaka, upotrebljava se u tehnici i medicini.',
                        'boravak': ' Boravak je življenje, prebivanje ili stanovanje na kojemu mjestu. ',
                        'boraviti': ' Boraviti gdje znači živjeti, biti ili provoditi dulje vrijeme na kojemu mjestu.',
                        'borba': ' Borba je veći sukob vojnih jedinica ili vojska, osnovni oblik ratnoga djelovanja. ',
                        'boriti se': ' Boriti se znači voditi borbu protiv koga ili čega.',
                        'borov': ' Borov je koji pripada boru.',
                        'borovnica': ' Borovnica je višegodišnja samonikla grmolika listopadna biljka iz porodice vrijesova.',
                        'bos': ' Bos je koji je golih stopala, koji nema ništa na nogama.',
                        'bosanski': ' Bosanski je koji se odnosi na Bosnu i Bosance. ',
                        'bosiljak': ' Bosiljak je zeljasta grmolika, ukrasna i ljekovita jednogodišnja biljka iz porodice usnača ugodna mirisa.',
                        'bosonog': ' Bosonog je koji je golih stopala, koji nema ništa na nogama.',
                        'Božić': ' Božić je kršćanski blagdan u spomen na rođenje Isusa Krista, koji katolici slave 25. prosinca, a pravoslavci 7. siječnja. ',
                        'božićni': ' Božićni je koji se odnosi na Božić. ',
                        'božji': ' Božji je koji se odnosi na bogove.',
                        'br.': ' Br. je kratica za broj.',
                        'brački': ' Brački je koji se odnosi na Brač i Bračane.',
                        'bračni': ' Bračni je koji se odnosi na brak.',
                        'braća': ' Braća su dvoje ili više muške djece ili djeca različita spola istih roditelja.',
                        'braćin': ' Braćin je koji pripada braći.',
                        'brada': ' Brada je zaobljeni dio donje čeljusti.',
                        'bradat': ' Bradat je onaj tko ima veliku, bujnu bradu.',
                        'brajica': ' Brajica je pismo za slijepe i slabovidne osobe koje se sastoji od izbočenih točkica utisnutih u papir.',
                        'brak': ' Brak je zajednica muškarca i žene koja nastaje vjenčanjem.',
                        'branitelj': ' Branitelj je osoba bez obzira na spol ili muškarac koji sudjeluje u obrani od neprijatelja.',
                        'braniteljev': ' Braniteljev je koji pripada branitelju, osobi bez obzira na spol ili muškarcu koji sudjeluje u obrani od neprijatelja.',
                        'braniteljica': ' Braniteljica je žena koja sudjeluje u obrani od neprijatelja.',
                        'braniteljičin': ' Braniteljičin je koji pripada braniteljici, ženi koja sudjeluje u obrani od neprijatelja.',
                        'braniteljski': ' Braniteljski je koji se odnosi na branitelje, osobe bez obzira na spol ili muškarace koji sudjeluju u obrani od neprijatelja.',
                        'braniti': ' Braniti znači štititi koga ili što od napada, štete ili opasnosti.',
                        'brašno': ' Brašno je prah od samljevena zrnja žitarica.',
                        'brat': ' Brat je muški srodnik drugoj osobi ili drugim osobama s kojima ima zajedničke roditelje.',
                        'brati': ' Brati što znači otkidati plod ili cvijet sa stabljike.',
                        'bratić': ' Bratić je tetin, stričev ili ujakov sin.',
                        'bratićev': ' Bratićev je koji pripada bratiću.',
                        'bratislavski': ' Bratislavski je koji se odnosi na Bratislavu i Bratislavljane.',
                        'bratov': ' Bratov je koji pripada bratu, muškomu srodniku drugoj osobi ili drugim osobama s kojima ima zajedničke roditelje.',
                        'bratski': ' Bratski je koji se odnosi na brata, muškoga srodnika drugoj osobi ili drugim osobama s kojima ima zajedničke roditelje.',
                        'brava': ' Brava je kovinska naprava za zatvaranje vrata ključem.',
                        'bravo': ' Bravo je usklik kojim se izriče odobravanje i podrška.',
                        'brazilski': ' Brazilski je koji se odnosi na Brazil i Brazilce.',
                        'brbljaonica': ' Brbljaonica je virtualno internetsko mjesto na kojemu korisnici mogu neformalno razgovarati razmjenjujući poruke.',
                        'brbljati': ' Brbljati znači govoriti o nevažnim stvarima, isprazno govoriti.',
                        'brbljav': ' Brbljav je koji mnogo govori, najčešće o nevažnim stvarima.',
                        'brbljavac': ' Brbljavac je osoba bez obzira na spol ili muška osoba koja je brbljava.',
                        'brbljavčev': ' Brbljavčev je koji pripada brbljavcu.',
                        'brbljavica': ' Brbljavica je ženska osoba koja je brbljava.',
                        'brbljavičin': ' Brbljavičin je koji pripada brbljavici.',
                        'brbljavost': ' Brbljavost je osobina onoga koji brblja, koji mnogo govori, najčešće nevažne stvari.',
                        'brbot': ' Brbot je šum koji nastaje kad mjehurići zraka izlaze iz tekućine.',
                        'brbotati': ' Brbotati znači proizvoditi brbot.',
                        'brčić': ' Brčić je mali brk.',
                        'brčina': ' Brčina je veliki brk.',
                        'brdo': ' Brdo je prirodna uzvisina od 200 do 500 m nadmorske visine koja može imati više vrhova. ',
                        'brdovit': ' Brdovit je koji je pun brda.',
                        'brecati': ' Brecati znači isprekidano zvoniti.',
                        'brecnuti': ' Brecnuti koga znači prenuti koga.',
                        'breka': ' Breka je isprekidani mukli zvuk.',
                        'brektati': ' Brektati znači proizvoditi breku.',
                        'brencati': ' Brencati znači isprekidano zvoniti.',
                        'brenčati': ' Brenčati znači isprekidano zvoniti.',
                        'breskva': ' Breskva je voćka s ružičastim cvjetovima podrijetlom iz Kine.',
                        'bretonski': ' Bretonski je koji se odnosi na Bretoniju i Bretonce.',
                        'breza': ' Breza je bjelogorično drvo bijele kore i rijetke krošnje.',
                        'brežuljak': ' Brežuljak je mali brijeg.',
                        'briga': ' Briga je osjećaj uznemirenosti ili straha zbog koga ili čega',
                        'brigadir': ' Brigadir je viši časnički čin u kopnenoj vojsci i ratnome zrakoplovstvu, nadređen časničkomu činu pukovnika, a podređen admiralskom činu briganoga generala.',
                        'brigadirka': ' Brigadirka je žena s činom brigadira.',
                        'brigadirkin': ' Brigadirkin je koji pripada brigadirki.',
                        'brigadirov': ' Brigadirov je koji pripada brigadiru.',
                        'brigadirski': ' Brigadirski je koji se odnosi na brigadire.',
                        'brijati (se)': ' Brijati (se) znači uklanjati dlake s kože s pomoću britve ili brijaćega aparata.',
                        'brijeg': ' Brijeg je prirodna uzvisina od 200 do 500 m nadmorske visine, najčešće sa samo jednim vrhom.',
                        'brinuti se': ' Brinuti se oko čega ili zbog čega znači biti u brizi ili zabrinut zbog čega.',
                        'brisač': ' Brisač je naprava na vozilu kojom se briše prednje i stražnje staklo.',
                        'brisati': ' Brisati znači čistiti ili s površine uklanjati prljavštinu, vlagu i sl.',
                        'briselski': ' Briselski je koji se odnosi na Bruxelles i Briselce.',
                        'britanski': ' Britanski je koji se odnosi na Britaniju i Britance.',
                        'britva': ' Britva je veoma oštar nož, često na sklapanje, koji služi za brijanje.',
                        'brižan': ' Brižan je koji je pun brige ili pažnje prema komu ili čemu.',
                        'brižno': ' Brižno je tako da odražava čiju brigu ili pažnju prema komu ili čemu.',
                        'brižnost': ' Brižnost je osobina onoga koji je brižan.',
                        'brk': ' Brkovi su dlake iznad gornje usne.',
                        'brkat': ' Brkat je koji ima velike brkove.',
                        'brklja': ' Brklja je naprava od granja za sušenje trave i djeteline.',
                        'brod': ' Brod je plovilo duže od 12 metara koje prevozi ljude i teret.',
                        'brodić': ' Brodić je mali brod.',
                        'broj': ' Broj je riječ ili znak koji pokazuje od koliko se jedinka sastoji konačni skup ili koje je što po redu.',
                        'brojač': ' Brojač je osoba bez obzira na spol ili muškarac koji broji.',
                        'brojalica': ' Brojalica je dječja pjesma sadržajno povezana s brojevima i brojenjem ili nizanjem.',
                        'brojan': ' Brojan je koji se sastoji od mnogo članova ili elemenata.',
                        'brojati': ' Brojati znači utvrđivati koliko ima članova ili elemenata u skupini.',
                        'brojčanik': ' Brojčanik je uređaj na kojemu se nalaze brojke.',
                        'brojevni': ' Brojevni je koji se odnosi na brojeve. ',
                        'brojilo': ' Brojilo je uređaj za mjerenje potrošnje energije, vode, visine tlaka i sl.',
                        'brojiti': ' Brojiti znači utvrđivati koliko ima članova ili elemenata u skupini.',
                        'brojka': ' Brojka je znak u zapisu broja. ',
                        'brokula': ' Brokula je zeljasto povrće uzgojeno od divljega kupusa.',
                        'brom': ' Brom je kemijski element (Br), tamnosmeđa otrovna tekućina neugodna mirisa, u prirodi se pojavljuje samo u spojevima, a pri sobnoj temperaturi jedina je tekuća nekovina.',
                        'brončan': ' Brončan je koji je boje bronce. ',
                        'brončani': ' Brončani je koji je od bronce.',
                        'brončanost': ' Brončanost je svojstvo onoga što je brončano, što je boje bronce.',
                        'bronhitis': ' Bronhitis je upala dušnica prouzročena virusima i bakterijama.',
                        'bronhoskop': ' Bronhoskop je uređaj za pregled dušnika i dušnica s pomoću posebnih cijevi.',
                        'broš': ' Broš je ženski nakit koji se iglom pričvršćuje na odjeću.',
                        'brr': ' Brr je onomatopejska riječ kojom se  izriče neugoda zbog hladnoće, straha ili gađenja.',
                        'bršljan': ' Bršljan je vazdazelena grmolika biljka penjačica.',
                        'bruh': ' Bruh je bolest koja nastaje pucanjem stijenka potrbušnice.',
                        'brz': ' Brz je koji u kraćemu razdoblju prelazi velik razmak ili veliku udaljenost.',
                        'brzina': ' Brzina je osobina onoga koji je brz ili svojstvo onoga što je brzo.',
                        'brzinomjer': ' Brzinomjer je uređaj za mjerenje brzine.',
                        'brzo': ' Brzo je tako da se u kraćemu razdoblju prelazi velik razmak ili velika udaljenost.',
                        'brzojav': ' Brzojav je kratka poruka koja se prenosi na daljinu s pomoću telegrafa, a dostavlja se korisniku u pisanome obliku.',
                        'brzojavni': ' Brzojavni je koji je u obliku brzojava. ',
                        'brzoplet': ' Brzoplet je koji postupa bez dovoljno razmišljanja.',
                        'brzopleto': ' Brzopleto je tako da odražava da tko postupa bez mnogo razmišljanja.',
                        'brzopletost': ' Brzopletost je osobina onoga koji je brzoplet ili svojstvo onoga što je brzopleto.',
                        'bubanj': ' Bubanj je udaraljkaško glazbalo napravljeno od kože napete na šuplji drveni ili kovinski valjak koje proizvodi zvuk udarom ruku, batića ili palica.',
                        'bubnjar': ' Bubnjar je osoba bez obzira na spol ili muška osoba koja svira bubnjeve.',
                        'bubnjarev': ' Bubnjarev je koji pripada bubnjaru.',
                        'bubnjarica': ' Bubnjarica je ženska osoba koja svira bubnjeve.',
                        'bubnjaričin': ' Bubnjaričin je koji pripada bubnjarici.',
                        'bubnjarov': ' Bubnjarov je koji pripada bubnjaru.',
                        'bubnjarski': ' Bubnjarski je koji se odnosi na bubnjeve i bubnjare.',
                        'bubnjati': ' Bubnjati znači udarati u bubanj ili svirati na bubnju.',
                        'bubnjić': ' Bubnjić je mali bubanj.',
                        'bubreg': ' Bubreg je organ u trbušnoj šupljini koji izlučuje mokraću.',
                        'bubrežni': ' Bubrežni je koji se odnosi na bubreg.',
                        'bučan': ' Bučan je koji stvara buku.',
                        'bučati': ' Bučati znači proizvoditi buku.',
                        'bučiti': ' Bučiti znači stvarati buku.',
                        'buć': ' Buć je onomatopejska riječ kojom se oponaša zvuk pada nekoga tijela u vodu. ',
                        'bućkati': ' Bućkati znači pljuskati ili udarati o vodu.',
                        'bućnuti': ' Pasti u vodu, pljusnuti ili udariti o vodu. ',
                        'budala': ' Budala je osoba bez obzira na spol koja nije razumna, koja se blesavo, ludo ili glupo ponaša.',
                        'budalast': ' Budalast je koji je nalik na budalu, koji ima odlike budale.',
                        'budaletina': ' Budaletina je velika budala.',
                        'budaletinin': ' Budaletinin je koji pripada budaletini.',
                        'budalica': ' Budalica je mala budala.',
                        'budaličin': ' Budaličin je koji pripada budalici.',
                        'budalin': ' Budalin je koji pripada budali.',
                        'budimpeški': ' Budimpeški je koji se odnosi na Budimpeštu i Budimpeštance.',
                        'buditi': ' Buditi koga znači prekidati komu san, dovoditi ga u budno stanje.',
                        'budući': ' Budući je koji će biti ili nastati u budućnosti, koji će se poslije dogoditi.',
                        'budućnost': ' Budućnost je buduće vrijeme, vrijeme koje dolazi.',
                        'budvanski': ' Budvanski je koji se odnosi na Budvu i Budvane. ',
                        'buđenje': ' Buđenje je prelaženje u budno stanje.',
                        'bugarski': ' Bugarski je koji se odnosi na Bugarsku i Bugare.',
                        'bugojanski': ' Bugojanski je koji se odnosi na Bugojno i Bugojance.',
                        'bujski': ' Bujski je koji se odnosi na Buje i Bujane.',
                        'buka': ' Buka je neugodan, uznemirujući, prejak zvuk.',
                        'bukov': ' Bukov je koji pripada bukvi, listopadnomu visokom drvetu koje ima sivkastu koru i koje počinje donositi plod nakon 60 godina.',
                        'bukovički': ' Bukovički je koji se odnosi na Bukovicu i Bukovičane.',
                        'bukovina': ' Bukovina je bukovo drvo kao građa.',
                        'bukureštanski': ' Bukureštanski je koji se odnosi na Bukurešt i Bukureštane.',
                        'bukva': ' Bukve su porodica drvenastih biljaka dvosupnica jednospolnih cvjetova kojima je plod orah, obuhvaća istoimeno drvo, pitomi kesten i hrast.',
                        'bukvin': ' Bukvin je koji pripada bukvi, listopadnomu visokom drvetu koje ima sivkastu koru i koje počinje donositi plod nakon 60 godina.',
                        'bum': ' Bum je onomatopejska riječ kojom se oponaša udarac.',
                        'bumerang': ' Bumerang je drveno oružje u obliku luka kojim su se služila plemena u Australiji, vraća se ako ne pogodi cilj.',
                        'bunda': ' Bunda je krzneni kaput ili kaput s krznom s unutrašnje strane.',
                        'bundeva': ' Bundeva je jednogodišnja biljka velikih žutih cvjetova kojoj se stabljika povija po tlu.',
                        'bundevin': ' Budevin je koji pripada bundevi.',
                        'bundica': ' Bundica je mala bunda.',
                        'bura': ' Bura je snažan, najčešće suh i hladan vjetar pretežno sjeveroistočnoga smjera koji puše na jadranskome primorju s kopna na more.',
                        'buran': ' Buran je koji je nemiran, uzburkan.',
                        'burek': ' Burek je jelo podrijetlom iz Turske koje se radi od razvučenoga tijesta s pečenim mesom ili sirom.',
                        'burno': ' Burno znači nepredvidljivo i s velikim promjenama.',
                        'busovački': ' Busovački je koji se odnosi na Busovaču i Busovčane.',
                        'buzdovan': ' Buzdovan je hladno oružje za udaranje ili borbu izbliza, bat na čijemu je kraju drvena, kamena ili kovinska kugla sa šiljcima.',
                        'car': ' Car je najviši vladarski naslov.',
                        'carev': ' Carev je koji pripada caru.',
                        'carica': ' Carica je žena koja vlada carstvom.',
                        'caričin': ' Caričin je koji pripada carici.',
                        'carina': ' Carina je iznos u novcu koji se prema utvrđenim propisima plaća državi na vrijednost robe koja se prenosi preko granice.',
                        'carstvo': ' Carstvo je država kojoj je na čelu car ili sultan.',
                        'celer': ' Celer je dvogodišnja povrtna zeljasta biljka bijela korijena.',
                        'celerov': ' Celerov je koji pripada celeru, dvogodišnjoj povrtnoj zeljastoj biljci bijela korijena',
                        'centa': ' Centa je mjerna jedinica za masu koja ima sto osnovnih jedinica.',
                        'centar': ' Centar je središnji dio čega.',
                        'centilitar': ' Centilitar je mjerna jedinica za obujam tekućina, stoti dio litre (cL).',
                        'centimetar': ' Centimetar je mjerna jedinica za duljinu, stoti dio metra (cm).',
                        'centrifuga': ' Centrifuga je uređaj za razdvajanje tvari različitih posebnih težina djelovanjem centrifugalne sile.',
                        'cepelin': ' Cepelin je letjelica duguljasta oblika, veliki zračni brod podijeljen na posebne odjeljke koji su ispunjeni plinom lakšim od zraka.',
                        'cesta': ' Cesta je prometnica kojom se kreću vozila.',
                        'cestni': ' Cestni je koji se odnosi na ceste.',
                        'cestovni': ' Cestovni je koji se odnosi na ceste.',
                        'cetinski': ' Cetinski je koji se odnosi na Cetinu i Cetinjane.',
                        'cezij': ' Cezij je kemijski element (Cs), srebrnobijela mekana kovina koja se u prirodi nalazi samo u spojevima.',
                        'cičati': ' Cičati znači glasati se glasom koji podsjeća na ci-ci.',
                        'cigareta': ' Cigareta su sitno rezani osušeni i prerađeni listovi duhana ili kojih drugih biljaka uvijeni u tanak papir u obliku valjka.',
                        'cigaretni': ' Cigaretni je koji se odnosi na cigarete.',
                        'cigla': ' Cigla je četvrtasti blok od pečene gline koji služi za gradnju.',
                        'ciglast': ' Ciglast je koji je bojom ili oblikom sličan cigli. ',
                        'cigleni': ' Cigleni je koji je od cigle. ',
                        'cijediti': ' Cijediti znači istiskivati tekućinu iz čega.',
                        'cijel': ' Cijel je koji ima sve dijelove, koji je potpun, koji nije oštećen',
                        'cijelo': ' Cijelo je cijeli broj.',
                        'cijena': ' Cijena je vrijednost robe izražena u novcu, označuje količinu novca koji je potreban ili koji se može dobiti za neku robu.',
                        'cijeniti': ' Cijeniti koga ili što znači priznavati čiju vrijednost, držati do koga ili čega.',
                        'cijep': ' Cijep je grančica koja se usađuje u drugu biljku kao podlogu kako bi dobila nova svojstva. ',
                        'cijepiti': ' Cijepiti znači dati/davati komu cjepivo i tako ga učiniti/činiti otpornim na kakvu bolest.',
                        'cijepljenje': ' Cijepljenje je davanje cjepiva komu i stvaranje otpornosti na kakvu bolest.',
                        'cijev': ' Cijev je izduženi šuplji valjak koji služi za protok tekućina, zraka i plinova.',
                        'cijevka': ' Cijevka je mala cijev.',
                        'ciju': ' Ciju je onomatopejska riječ kojom se oponaša glasanje ptice. ',
                        'cijukanje': ' Cijukanje je glasanje glasom koji podsjeća na 
                        ',
                        'cijukati': ' Cijukati znači glasati se glasom koji podsjeća na 
                        ',
                        'cijuknuti': ' Cijuknuti znači oglasiti se glasom koji podsjeća na 
                        ',
                        'cikla': ' Cikla je dvogodišnja povrtna biljka tamnocrvena korijena.',
                        'ciklama': ' Ciklama je šumska i ukrasna biljka s otrovnim podzemnim gomoljem.',
                        'ciklograf': ' Ciklograf je uređaj za umnožavnje teksta.',
                        'ciknuti': ' Ciknuti znači vrisnuti u kakvoj jakoj emociji.',
                        'cilik': ' Cilik je visok oštar zvuk.',
                        'cilikati': ' Cilikati znači proizvoditi cilik.',
                        'cilj': ' Cilj je ono u što se gađa, što se želi pogoditi.',
                        'cimati': ' Cimati što ili čime znači micati, ljuljati, klimati što.',
                        'cimer': ' Cimer  je osoba bez obzira na spol ili muška osoba s kojom tko dijeli podstanarsku sobu, sobu u domu, zatvorsku sobu, sobu na poslu i slično. ',
                        'cimerica': ' Cimerica  je ženska osoba s kojom tko dijeli podstanarsku sobu, sobu u domu, zatvorsku sobu, sobu na poslu i slično. ',
                        'cimeričin': ' Cimeričin je koji pripada cimerici.',
                        'cimerov': ' Cimerov je koji pripada cimeru. ',
                        'cimnuti': ' Cimnuti što ili čime znači maknuti što ili povući što.',
                        'cinčani': ' Cinčani je koji je od cinka ili je presvučen cinkom.',
                        'cink': ' Cink je kemijski element (Zn), plavobijela kovina, u prirodi se pojavljuje samo u spojevima.',
                        'cinkati': ' Cinkati znači zvoniti, zveckati.',
                        'cinkov': ' Cinkov je koji pripada cinku.',
                        'ciparski': ' Ciparski je koji se odnosi na Cipar i Ciprane.',
                        'cipela': ' Cipele su obuća, obično od kože, s čvrstim potplatom, zatvorenim prstima i petom.',
                        'cipelica': ' Cipelica je mala cipela.',
                        'cirkus': ' Cirkus je ograđeni kružni prostor pod šatorom u kojemu gledatelji mogu vidjeti različite vještine koje izvode akrobati, klaunovi, mađioničari i dresirane životinje.',
                        'civil': ' Civil je osoba bez obzira na spol koja nije u vojnoj, policijskoj ili svećeničkoj službi.',
                        'civilizacija': ' Civilizacija je duhovna i materijalna kultura društvene zajednice.',
                        'civilni': ' Civilni je koji se odnosi na civile.',
                        'cjedilo': ' Cjedilo je naprava kroz koju se što cijedi kako bi se odvojilo čvrste tvari od tekućih ili s pomoću koje se što pasira.',
                        'cjelina': ' Cjelina je ono što je cijelo ili čitavo, što uključuje sve svoje sastavnice, članove ili dijelove.',
                        'cjelovit': ' Cjelovit je koji što obuhvaća u punome opsegu, u cjelini i bez ostatka.',
                        'cjelovito': ' Cjelovito je tako da što obuhvaća u punome opsegu, u cjelini i bez ostatka.',
                        'cjelovitost': ' Cjelovitost je  svojstvo onoga što obuhvaća što u punome opsegu, u cjelini i bez ostatka. ',
                        'cjepivo': ' Cjepivo je sredstvo koje sadržava mrtve ili oslabljene uzročnike bolesti i kojim se postiže imunost na koju zaraznu bolest.',
                        'cjevčica': ' Cjevčica je mala cijev.',
                        'cmok': ' Cmok je onomatopejska riječ kojom se oponaša zvuk poljupca.',
                        'COVID-19': ' COVID-19 bolest je koju prouzročuje novi soj koronavirusa SARS-CoV-2 (teški akutni respiratorni sindrom, koronavirus 2)',
                        'creški': ' Creški je koji se odnosi na Cres i Crešane.',
                        'crijevo': ' Crijevo je cjevasti organ probavnoga sustava između želudca i zdjelice.',
                        'crikvenički': ' Crikvenički je koji se odnosi na Crikvenicu i Crikveničane.',
                        'crknuti': ' Crknuti znači prestati živjeti (o životinjama i biljkama).',
                        'crkva': ' Crkva je građevina ili prostor u kojemu se obavljaju javni religijski obredi.',
                        'crkveni': ' Crkveni je koji pripada crkvi ili se odnosi na crkvu, građevinu ili prostor u kojemu se obavljaju javni religijski obredi.',
                        'crn': ' Crn je koji je boje mrkoga ugljena.',
                        'crniti': ' Crniti znači bojiti što u crno, činiti crnim.',
                        'crnogorica': ' Crnogorica je drveće ili grmlje koje zadržava lišće cijele godine.',
                        'crnogorični': ' Crnogorični je koji se odnosi na crnogoricu.',
                        'crnogorski': ' Crnogorski je koji se odnosi na Crnu Goru i Crnogorce.',
                        'crnjeti': ' Crnjeti znači postajati tamnim.',
                        'crpka': ' Crpka je naprava ili uređaj kojim se crpi, vadi ili usisava voda, benzin, nafta i sl.',
                        'crta': ' Crta je pisani trag koji ostavlja kakvo sredstvo kojim se može pisati ili crtati ili prikaz takvoga traga na ekranu.',
                        'crtalo': ' Crtalo je vanjski dio računala namijenjen izradi crteža i nacrta.',
                        'crtančica': ' Crtančica je mala crtanka. ',
                        'crtanka': ' Crtanka je bilježnica ili blok s praznim listovima papira za crtanje.',
                        'crtati': ' Crtati što znači praviti crtež.',
                        'crtež': ' Crtež je likovni rad nastao crtanjem s pomoću olovke, tuša ili ugljena.',
                        'crtica': ' Crtica je mala crta. ',
                        'crtični': ' Crtični je koji se sastoji od crtica.',
                        'crv': ' Crv je beskralježnjak cjevastoga i mekanoga tijela bez kostiju, nogu i ticala koji se kreće uvijajući tijelo.',
                        'crven': ' Crven je koji je boje krvi, zrele rajčice ili zrelih jagoda.',
                        'crveniti': ' Crveniti znači bojiti što u crveno, činiti crvenim.',
                        'crvenjeti': ' Crvenjeti znači postajati crvenim.',
                        'cupkati': ' Cupkati znači poskakivati na mjestu.',
                        'cura': ' Cura je mlađa ženska osoba.',
                        'curetak': ' Curetak je djevojčica ili djevojka od milja.',
                        'curica': ' Curica je žensko dijete.',
                        'curičin': ' Curičin je koji pripada curici.',
                        'curin': ' Curin je koji pripada curi, mlađoj ženskoj osobi.',
                        'cvijeće': ' Cvijeće je skup cvjetova, dijelova biljke.',
                        'cvijet': ' Cijet je rasplodni organ kritosjemenjača, dio biljke iz kojega se razvija plod. ',
                        'cvijetak': ' Cvijetak je cvijet od milja.',
                        'cviliti': ' Cviliti znači ispuštati bolan glas (o životinji).',
                        'cviljeti': ' Cviljeti znači ispuštati bolan glas (o životinji).',
                        'cvjećarna': ' Cvjećarna je prodavaonica cvijeća.',
                        'cvjećarnica': ' Cvjećarnica je prodavaonica cvijeća.',
                        'cvjetača': ' Cvjetača je dvogodišnja zeljasta povrtna biljka kupusnjača jestiva cvata.',
                        'cvjetić': ' Cvjetić je mali cvijet.',
                        'cvokotati': ' Cvokotati znači bez voljnoga poticaja udarati donjom vilicom o gornju.',
                        'cvrčak': ' Cvrčak je kukac tamna tijela i prozirnih krila čiji se mužjak glasa cvrčanjem, proizvodi zvuk s pomoću titranja napete kožice na zatku.',
                        'cvrčati': ' Cvrčati znači glasati se glasom koji podsjeća na cvrrr… cvrrr.',
                        'cvrkut': ' Cvrkut je glasanje glasom koji podsjeća na cvr... cvr.',
                        'cvrkutati': ' Cvrkutati znači glasati se glasom koji podsjeća na cvr… cvr.',
                        'čadski': ' Čadski je koji se odnosi na Čad i Čađane.',
                        'čaj': ' Čaj je vazdazelena grmolika ljekovita biljka bijelih ili ružičastih cvjetova',
                        'čak': ' Čak izriče da što nadmašuje očekivano.',
                        'čakovečki': ' Čakovečki je koji se odnosi na Čakovec i Čakovčane.',
                        'čamac': ' Čamac je manje plovilo koje se pokreće veslima ili motorom, služi za prijevoz ljudi i robe na rijekama, jezerima i morima.',
                        'čapljinski': ' Čapljinski je koji se odnosi na Čapljinu i Čapljince.',
                        'čarapa': ' Čarapa je odjevni predmet od vune, pamuka ili umjetnoga vlakna koji se navlači na bosu nogu.',
                        'čaroban': ' Čaroban je koji služi za čaranje, koji ima nadnaravnu moć i s pomoću kojega se stvaraju čuda.',
                        'čarobnica': ' Čarobnica je ženska osoba koja čara, koja ima čarobne moći.',
                        'čarobničin': ' Čarobničin je koji pripada čarobnici.',
                        'čarobnjački': ' Čarobnjački je koji se odnosi na čarobnjake.',
                        'čarobnjak': ' Čarobnjak je osoba bez obzira na spol ili muška osoba koja čara, koja ima čarobne moći.',
                        'čarobnjakov': ' Čarobnjakov je koji pripada čarobnjaku.',
                        'čas': ' Čas je vrijeme koje kratko traje.',
                        'časnica': ' Časnica je žena s činom časnika.',
                        'časničin': ' Časničin je koji pripada časnici.',
                        'časnički': ' Časnički je koji se odnosi na časnike.',
                        'časnik': ' Časnik je odrasla osoba bez obzira na spol ili muškarac na zapovjedničkome položaju u vojsci bez obzira na čin.',
                        'časnikov': ' Časnikov je koji pripada časniku.',
                        'časopis': ' Časopis je periodična novinska publikacija u kojoj se tiskaju različiti članci, slike i oglasi, objavljuje se obično jednom tjedno ili mjesečno.',
                        'čast': ' Čast je pošten odnos prema ljudima i društvu, osjećaj za istinu i pravdu.',
                        'čaša': ' Čaša je staklena, plastična ili papirnata posuda iz koje se pije.',
                        'čavao': ' Čavao je zaoštreni ili zašiljeni tanak i izdužen kovinski predmet kojim se što učvršćuje ili zakiva.',
                        'čečenski': ' Čečenski je koji se odnosi na Čečeniju i Čečene.',
                        'čegrtaljka': ' Čegrtaljka je drvena naprava koja okretanjem proizvodi zvuk.',
                        'čekanje': ' Čekanje je očekivanje da se tko ili što pojavi ili da se što dogodi.',
                        'čekaona': ' Čekaona je prostorija u kojoj se čeka kakva medicinska ili administrativna usluga, prostorija ili natkriven prostor u kojemu se čeka prijevozno sredstvo.',
                        'čekaonica': ' Čekaonica je prostorija u kojoj se čeka kakva medicinska ili administrativna usluga, prostorija ili natkriven prostor u kojemu se čeka prijevozno sredstvo. ',
                        'čekati': ' Čekati znači provoditi vrijeme očekujući da se tko ili što pojavi ili da se što dogodi.',
                        'čekić': ' Čekić je alat s drškom i izduženom glavom koji služi za zabijanje čavala, kovanje, razbijanje čega i sl.',
                        'čekrk': ' Čekrk je uređaj za podizanje tereta namotavanjem konopa na kolo.',
                        'čelik': ' Čelik je tvrda, elastična i čvrsta slitina željeza i ugljika s dodatkom drugih elemenata koja se upotrebljava kao tehničko gradivo u strojarstvu, graditeljstvu i u izradbi predmeta za svakodnevnu uporabu.',
                        'čelo': ' Čelo je dio glave čovjeka i životinja.',
                        'čempres': ' Čempresi su porodica četinjača, mediteranskih stabala ili grmova s vazdazelenim igličastim ili ljuskastim listovima.',
                        'čest': ' Čest je koji dolazi, ponavlja se ili zbiva u kratkim vremenskim razmacima.',
                        'čestica': ' Čestica je dio veće cjeline. ',
                        'čestični': ' Čestični je koji se odnosi na čestice, dijelove veće cjeline. ',
                        'čestit': ' Čestit je koji se odlikuje poštenjem i osjećajem za istinu i pravdu.',
                        'čestitati': ' Čestitati što znači pozdraviti/pozdravljati koga u povodu kakva veselog ili važnog događaja i istodobno mu zaželjeti/željeti mnogo uspjeha, sreće i sl.',
                        'čestitka': ' Čestitka je želja izražena u povodu kakva veseloga ili važnoga dana ili ugodnoga događaja.',
                        'čestito': ' Čestito znači tako da odražava čiji osjećaj za istinu i pravdu.',
                        'čestitost': ' Čestitost je osobina onoga tko je čestit ili svojstvo onoga što je čestito.',
                        'često': ' Često znači u malim vremenskim razmacima.',
                        'čestoća': ' Čestoća je mjera ponavljanja čega.',
                        'češalj': ' Češalj je predmet sa zupcima za uređivanje kose ili životinjske dlake.',
                        'češki': ' Češki je koji se odnosi na Češku i Čehe. ',
                        'češljanje': ' Češljanje je uređivanje češljem. ',
                        'češljaona': ' Češljaona je vrsta frizerskoga salona koji nudi usluge češljanja, održavanja frizure.',
                        'češljaonica': ' Češljaonica je vrsta frizerskoga salona koji nudi usluge češljanja, održavanja frizure.',
                        'češljati': ' Češljati znači uređivati što češljem.',
                        'češnjak': ' Češnjak je zeljasta povrtna biljka iz porodice ljiljana oštra mirisa.',
                        'četiri': ' Četiri je broj koji se obilježuje s 4, za jedan veći od broja tri i za jedan manji od broja pet,',
                        'četiristo': ' Četiristo je broj koji se obilježuje s 400, za jedan veći od broja tristo devedeset devet i za jedan manji od broja četiristo jedan.',
                        'četiristoti': ' Četiristoti je koji je iza tristo devedeset devetoga, a prije četiristo prvoga.',
                        'četka': ' Četka je predmet s oštrim i čvrstim dlakama ili žičanim nitima kojim se što četka, čisti, riba ili pere.',
                        'četkati': ' Četkati znači uređivati, čistiti ili ribati što četkom.',
                        'četkica': ' Četkica je mala četka.',
                        'četrdeset': ' Četrdeset je broj koji se obilježuje s 40, za jedan veći od broja trideset devet i za jedan manji od broja četrdeset jedan.',
                        'četrdesetak': ' Četrdesetak je približno četrdeset, oko četrdeset.',
                        'četrdesetero': ' Četrdesetero je skupina od četrdeset osoba različita spola.',
                        'četrdeseti': ' Četrdeseti je koji je iza trideset devetoga, a prije četrdeset prvoga.',
                        'četrdesetogodišnjak': ' Četrdesetogodišnjak je osoba bez obzira na spol ili muška osoba koja ima četrdeset godina.',
                        'četrdesetogodišnjakinja': ' Četrdesetogodišnjakinja je žena koja ima četrdeset godina.',
                        'četrdesetogodišnji': ' Četrdesetogodišnji je koji ima četrdeset godina.',
                        'četrdesetogodišnjica': ' Četrdesetogodišnjica je dan ili godina u kojoj se navršava četrdeset godina od događaja koji se obilježuje.',
                        'četrdesetorica': ' Četrdesetorica je skupina od četrdeset muških osoba.',
                        'četrnaest': ' Četrnaest je broj koji se obilježuje s 14, za jedan veći od broja trinaest i za jedan manji od broja petnaest.',
                        'četrnaestero': ' Četrnaestero je skupina od četrnaest osoba različita spola.',
                        'četrnaesti': ' Četrnaesti je koji je iza trinaestoga, a prije petnaestoga.',
                        'četveri': ' Četveri je skupina koja se sastoji od četiriju skupova ili parova.',
                        'četvero': ' Četvero je skupina od četiriju osoba različita spola.',
                        'četverodijelan': ' Četverodijelan je koji se sastoji od četiriju dijelova.',
                        'četverodimenzijski': ' Četverodimenzijski je koji se odnosi na četiri dimenzije. ',
                        'četverodimenzionalni': ' Četverodimenzionalni je koji se odnosi na četiri dimenzije. ',
                        'četverogodišnjak': ' Četverodišnjak je dijete bez obzira na spol ili muško dijete koje ima četiri godine.',
                        'četverogodišnjakinja': ' Četverogodišnjakinja je žensko dijete koje ima četiri godine.',
                        'četverogodišnji': ' Četverogodišnji je koji ima četiri godine.',
                        'četverokatni': ' Četverokatni je koji ima četiri kata.',
                        'četverokatnica': ' Četverokatnica je zgrada koja ima četiri kata.',
                        'četverokratnik': ' Četverokratnik je broj koji je umnožak zadanoga broja i broja 4, koji je četiri puta veći od zadanoga broja.',
                        'četverokut': ' Četverokut je geometrijski lik u ravnini omeđen četirima stranicama.',
                        'četveromjesečni': ' Četveromjesečni je koji ima četiri mjeseca.',
                        'četveroredan': ' Četveroredan je koji ima četiri reda čega, koji se sastoji od četiriju redova.',
                        'četverorječan': ' Četverorječan je koji se sastoji od četiriju riječi.',
                        'četverosjed': ' Četverosjed je vozilo predviđeno za četiri osobe ili četiri člana posade.',
                        'četverosoban': ' Četverosoban je koji ima četiri sobe.',
                        'četverostruk': ' Četverostruk je koji ima četiri dijela, koji se ponavlja četiri puta.',
                        'četvorica': ' Četvorica je skupina od četiriju muških osoba.',
                        'četvorka': ' Četvorka je brojka koja označuje broj četiri.',
                        'četvrt': ' Četvrt je četvrti dio cjeline, četvrti dio čega.',
                        'četvrtak': ' Četvrtak je četvrti dan u tjednu, dan između srijede i petka.',
                        'četvrtaš': ' Četvrtaš je učenik (bez obzira na spol ili muškoga spola) četvrtoga razreda osnovne ili srednje škole.',
                        'četvrtašica': ' Četvrtašica je učenica četvrtoga razreda osnovne ili srednje škole.',
                        'četvrti': ' Četvrti je koji je iza trećega, a prije petoga.',
                        'četvrtica': ' Četvrtica je brojka koja označuje broj četiri.',
                        'četvrtina': ' Četvrtina je broj koji pomnožen s četiri daje cijeli broj.',
                        'četvrtinka': ' Četvrtinka je nota koja traje jednu četvrtinu cijele note.',
                        'čeznuti': ' Čeznuti znači osjećati silnu želju za kim ili čim.',
                        'čičak': ' Čičak je dvogodišnja livadna biljka s velikim listovima i cvjetnim glavicama obavijenim bodljikama.',
                        'čičkov': ' Čičkov je koji se odnosi na čičak, biljku.',
                        'čigra': ' Čigra je dječja igračka, vretenasti komad drva koji se zavrti vještim pokretom ruke ili udarcem biča.',
                        'čiji': ' Čiji pita za nepoznatoga posjedovatelja. ',
                        'čijigod': ' Čijigod označuje pripadanje bilo kojemu, svejedno kojemu posjedovatelju.',
                        'čikaški': ' Čikaški je koji se odnosi na Chicago i Čikažane.',
                        'čileanski': ' Čileanski je koji se odnosi na Čile i Čileance.',
                        'čim': ' Čim uvodi komparativ pridjeva ili priloga i naglašuje njegovo značenje.',
                        'čim': ' Čim uvodi vremensku surečenicu u zavisnosloženoj rečenici, izriče da se radnja zavisne surečenice zbiva neposredno prije radnje glavne surečenice.',
                        'čimbenik': ' Čimbenik je onaj koji čini ili tvori što, koji je pokretačka snaga ili jedan od uvjeta koji dovode do kakve pojave ili procesa.',
                        'čin': ' Čin je ono što tko čini, kakva radnja ili djelo.',
                        'činele': ' Činele su udaraljkaško glazbalo koje se sastoji od dviju okruglih bakrenih ploča, udaranjem jedne o drugu proizvodi se zvuk.',
                        'činiti': ' Činiti što znači djelovati s kakvom posljedicom ili rezultatom, postupati na određeni način.',
                        'činiti se': ' Činiti se znači postojati kao dojam o kome ili čemu.',
                        'činjenica': ' Činjenica je podatak za koji postoji dokaz.',
                        'čip': ' Čip je tanka pločica od poluvodičkoga gradiva bez kućišta i bez spojenih izvoda na koju je smješten velik broj povezanih elektroničkih sastavnica.',
                        'čist': ' Čist je koji je bez mrlja, prljavštine ili tragova čega.',
                        'čistač': ' Čistač je odrasla osoba bez obzira na spol ili muškarac koji čisti vanjske prostore ili instalacije ili obavlja grublje poslove unutrašnjega čišćenja.',
                        'čistačev': ' Čistačev je koji pripada čistaču.',
                        'čistačica': ' Čistačica je žena koja čisti stanove, urede, škole, fakultete, odnosno zatvorene prostore. ',
                        'čistačičin': ' Čistačičin je koji pripada čistačici.',
                        'čistački': ' Čistački je koji se odnosi na čistače.',
                        'čistiona': ' Čistiona je mjesto na kojemu se pružaju usluge čišćenja.',
                        'čistionica': ' Čistionica je mjesto na kojemu se pružaju usluge čišćenja.',
                        'čistiti': ' Čistiti znači činiti da što bude bez mrlja, prljavštine ili tragova čega.',
                        'čitač': ' Čitač je osoba bez obzira na spol ili muška osoba koja zna čitati.',
                        'čitanka': ' Čitanka je školska knjiga s odabranim i komentiranim književnim tekstovima.',
                        'čitaona': '  Čitaona je prostorija namijenjena čitanju novina i knjiga, obično u sklopu knjižnice.',
                        'čitaonica': ' Čitaonica je prostorija namijenjena čitanju novina i knjiga, obično u sklopu knjižnice.',
                        'čitati': ' Čitati znači raspoznavati i povezivati slova ili znakove te razumjeti ono što je napisano.',
                        'čitav': ' Čitav je koji ima sve dijelove, koji je potpun, koji nije oštećen.',
                        'čitlučki': ' Čitlučki je koji se odnosi na Čitluk i Čitlučane.',
                        'čizma': ' Čizme su obuća od kože ili gume koja seže do listova, do koljena ili preko njih.',
                        'član': ' Član je osoba bez obzira na spol ili muška osoba koja pripada kakvoj skupini ili zajednici. ',
                        'članak': ' Članak je tekst objavljen u novinama, časopisu ili na mrežnim stranicama.',
                        'članica': ' Članica je ženska osoba koja pripada kakvoj skupini ili zajednici. ',
                        'članičin': ' Članičin je koji pripada članici. ',
                        'članov': ' Članov je koji pripada članu. ',
                        'članski': ' Članski je koji se odnosi na člana.',
                        'čokolada': ' Čokolada je slatkiš od kakaa, šećera i mlijeka.',
                        'čovjek': ' Čovjek je najrazvijenije biće na Zemlji kao skup svojih tjelesnih i duhovnih vrijednosti.',
                        'čučati': ' Čučati znači biti u položaju u kojemu su noge svijene u koljenu, a tijelo opušteno do peta.',
                        'čučnuti': ' Čučnuti znači sviti noge u koljenima i spustiti tijelo do peta.',
                        'čuditi se': ' Čuditi se znači biti u čudu, biti iznenađen čime neočekivanim.',
                        'čudo': ' Čudo je pojava koja se događa iako je u neskladu s prirodnim zakonima.',
                        'čuti': ' Čuti znači osjetom sluha primati i raspoznavati zvukove.',
                        'čuvati': ' Čuvati što znači imati pod nadzorom koga ili što.',
                        'čvor': ' Čvor je mjesto na kojemu se dva dijela konca, užeta, žice i sl. spajaju vezivanjem. ',
                        'čvor': ' Čvor je iznimno dopuštena mjerna jedinica za jačinu i brzinu vjetra (kn, čv).',
                        'čvrst': ' Čvrst je koji se teško može rastaviti ili uništiti.',
                        'čvrsto': ' Čvrsto znači tako da da ne može promijeniti smjer kretanja ili mjesto.',
                        'ćelav': ' Ćelav je koji je bez kose.',
                        'ćelavac': ' Ćelavac je ćelav muškarac.',
                        'ćelavčev': ' Ćelavčev je koji pripada ćelavcu.',
                        'ćelavost': ' Ćelavost je osobina onoga koji je ćelav.',
                        'ćevapčić': ' Ćevapčić je komadić mljevenoga mesa oblikovan u mali valjak koji se peče u tavi ili na roštilju.',
                        'ćilim': ' Ćilim je pokrivač za pod, obično izrađen od vune, lanenih, pamučnih ili svilenih niti.',
                        'ćirilica': ' Ćirilica je pismo kojim se danas pišu kao prvim ili jedinim pismom svi istočnoslavenski jezici, a od južnoslavenskih bugarski, crnogorski, makedonci i srpski. ',
                        'ćirilični': ' Ćirilični je koji se odnosi na ćirilicu. ',
                        'ćud': ' Ćud je način na koji pojedini čovjek ili životinja reagira na vanjske i unutrašnje podražaje.',
                        'ćuk': ' Ćuk je sovovka sivosmeđe boje s dvama uzdignutim čupercima na vrhu glave koja se hrani manjim sisavcima i pticama.',
                        'ćup': ' Ćup je posuda užega grla u kojoj se čuvaju zrnati plodovi, sitni predmeti ili tekućina.',
                        'ćurlikati': ' Ćurlikati znači glasati se ćurlikom.',
                        'ćurliknuti': ' Ćurliknuti znači oglasiti se ćurlikom.',
                        'dablinski': ' Dablinski je koji se odnosi na Dublin i Dablince.',
                        'dag': ' dag je znak za dekagram.',
                        'dah': ' Dah je zrak koji se udahne i izdahne pri disanju. ',
                        'dahija': ' Dahija je naslov turskoga poglavara ili nositelja vlasti.',
                        'dahtati': ' Dahtati znači uvlačiti dah u pluća i ispuštati ga; ubrzano, teško, isprekidano ili čujno disati.',
                        'dakle': ' Dakle uvodi zaključak ili objašnjenje.',
                        'dalaj-lama': ' Dalaj-lama je naslov budističkoga vjerskog i državnog poglavara.',
                        'dalek': ' Dalek je koji je na velikoj prostornoj udaljenosti od čega.',
                        'daleko': ' Daleko znači na velikoj prostornoj udaljenosti od čega.',
                        'dalekopisač': ' Dalekopisač je telegrafski uređaj za odašiljanje i primanje pisanih poruka.',
                        'dalekozor': ' Dalekozor je optička naprava koja povećava sliku udaljenoga predmeta.',
                        'dalija': ' Dalija je ukrasna biljka podrijetlom iz Meksika koja ima gomoljasto korijenje.',
                        'dalmatinski': ' Dalmatinski je koji se odnosi na Dalmaciju i Dalmatince.',
                        'dalton': ' Dalton je mjerna jedinica za masu atoma i molekula (Da).',
                        'daltonist': ' Daltonist je osoba koja boluje od daltonizma.',
                        'daltonistica': ' Daltonistica je ženska osoba koja boluje od daltonizma.',
                        'daltonističin': ' Daltonističin je koji pripada daltonistici.',
                        'daltonizam': ' Daltonizam je poremećaj koji se odražava u neprepoznavanju boja.',
                        'daljnji': ' Daljnji je koji je vremenski udaljen udaljen od čega.',
                        'dama': ' Dama je žena uglađana i otmjena ponašanja.',
                        'damin': ' Damin je koji pripada dami, ženi uglađena ponašanja.',
                        'dan': ' Dan je vrijeme od izlaska do zalaska Sunca.',
                        'danas': ' Danas znači tijekom dana koji traje, u danu koji traje.',
                        'današnji': ' Današnji je koji je od danas.',
                        'današnjica': ' Današnjica je vrijeme koje upravo traje, sadašnje vrijeme.',
                        'današnjost': ' Današnjost je vrijeme koje upravo traje, sadašnje vrijeme.',
                        'danski': ' Danski je koji se odnosi na Dansku i Dance.',
                        'danji': ' Danji je koji se odnosi na dan, vrijeme od izlaska do zalaska Sunca.',
                        'dar': ' Dar je predmet ili novac koji se komu daruje.',
                        'darežljiv': ' Darežljiv je koji rado daruje što drugima, koji voli darivati.',
                        'darežljivo': ' Darežljivo je tako da odražava čiju sklonost darivanju.',
                        'darežljivost': ' Darežljivost je osobina onoga koji je darežljiv.',
                        'darivati': ' Darivati znači prepuštati što komu u vlasništvo, činiti da što mijenja vlasnika bez novčane naknade, prouzročivati da tko što ima.',
                        'darovati': ' Darovati znači prepustiti što komu u vlasništvo, učiniti da što promijeni vlasnika bez novčane naknade, prouzročiti da tko što ima.',
                        'darovit': ' Darovit je koji ima poseban dar za što.',
                        'darovito': ' Darovito znači tako da odražava čiji poseban dar za što.',
                        'darovitost': ' Darovitost je osobina onoga koji je darovit.',
                        'daska': ' Daska je ravan komad drveta ispiljen po dužini trupca koji služi kao građa.',
                        'daščica': ' Daščica je mala daska.',
                        'dati': ' Dati znači prepustiti što komu dobrovoljno, bez naknade.',
                        'dativ': ' Dativ je padež koji odgovara na pitanja 
                        ',
                        'dativni': ' Dativni je koji se odnosi na dativ. ',
                        'datoteka': ' Datoteka je organizirani skup podataka koji se obrađuju kao cjelina.',
                        'datulja': ' Datulja je voćka tropskih i suptropskih krajeva, palma s malim jestivim plodom.',
                        'datum': ' Datum je kalendarska oznaka dana, mjeseca i godine kojega događaja.',
                        'davati': ' Davati znači prepuštati što komu dobrovoljno, bez naknade.',
                        'davni': ' Davni je koji je bio prije mnogo vremena, u dalekoj prošlosti.',
                        'dcl': ' dcl je znak za decilitar.',
                        'debelo': ' Debelo znači u debelome sloju.',
                        'debeo': ' Debeo je koji ima masu veću od normalne, prosječne mase za svoju visinu, dob ili vrstu, koji je pretjerano težak, koji ima mnogo sala.',
                        'deblo': ' Deblo je dio stabla valjkastoga oblika od iznad korijena do prvih grana. ',
                        'debljina': ' Debljina je širina ili dubina, visina ili promjer čega.',
                        'decibel': ' Decibel je mjerna jedinica za jakost zvuka, deseti dio bela (dB).',
                        'decilitar': ' Decilitar je iznimno dopuštena mjerna jedinica za obujam tekućina, deseti dio litre (dl).',
                        'decimetar': ' Decimetar je mjerna jedinica za duljinu, deseti dio metra (dm).',
                        'dečko': ' Dečko je mlađa muška osoba.',
                        'dečkov': ' Dečkov je koji pripada dečku.',
                        'deka': ' Deka je topli vuneni ili sintetički pokrivač.',
                        'dekadski': ' Dekadski je koji se odnosi na brojevni sustav koji ima bazu deset.',
                        'dekagram': ' Dekagram (dag) mjerna je jedinica za masu, deset grama. ',
                        'delhijski': ' Delhijski je koji se odnosi na Delhi i Delhijce.',
                        'delnički': ' Delnički je koji se odnosi na Delnice i Delničane.',
                        'deminutiv': ' Deminutiv je izvedenica koja znači da je ono što je označeno osnovnom riječju umanjeno ili malo.',
                        'deminutivni': ' Deminutivni je koji se odnosi na deminutiv.',
                        'denzimetar': ' Denzimetar je uređaj kojim se mjeri gustoća kiselina i lužina, npr. u akumulatoru.',
                        'derviš': ' Derviš je naslov muškoga pripadnika islamskoga vjerskog reda.',
                        'dervišev': ' Dervišev je koji pripada dervišu.',
                        'deset': ' Deset je broj koji se obilježuje s 10, za jedan veći od broja devet i za jedan manji od broja jedanaest.',
                        'desetak': ' Desetak je približno deset, oko deset.',
                        'desetak': ' Desetak je skupina od oko deset, približno deset članova.',
                        'desetero': ' Desetero je skupina od deset osoba različita spola.',
                        'deseterokratnik': ' Deseterokratnik  je broj koji je umnožak zadanoga broja i broja 10, koji je deset puta veći od zadanoga broja.',
                        'deseterokut': ' Deseterokut je geometrijski lik u ravnini omeđen s deset stranica.',
                        'deseterostruk': ' Deseterostruk je koji ima deset dijelova, koji se ponavlja deset puta.',
                        'deseti': ' Deseti je koji je iza devetoga, a prije jedanaestoga.',
                        'desetica': ' Desetica je brojka koja označuje broj deset.',
                        'desetina': ' Desetina je broj koji pomnožen s deset daje cijeli broj.',
                        'desetka': ' Desetka je brojka koja označuje broj deset.',
                        'desetljeće': ' Desetljeće je razdoblje od deset uzastopnih godina.',
                        'desetnica': ' Desetnica je žena s činom desetnika.',
                        'desetničin': ' Desetničin je koji pripada desetnici.',
                        'desetnički': ' Desetnički je koji se odnosi na desetnike.',
                        'desetnik': ' Desetnik je niži dočasnički čin u svim rodovima vojske, nadređen činu skupnika, a podređen činu narednika.',
                        'desetnikov': ' Desetnikov je koji pripada desetniku.',
                        'desetogodišnjak': ' Desetogodišnjak je dijete bez obzira na spol ili muško dijete koje ima deset godina.',
                        'desetogodišnjakinja': ' Desetogodišnjakinja je žensko dijete koje ima deset godina.',
                        'desetogodišnji': ' Desetogodišnji je koji ima deset godina.',
                        'desetogodišnjica': ' Desetogodišnjica je dan ili godina u kojoj se navršava deset godina od događaja koji se obilježuje.',
                        'desetomjesečni': ' Desetomjesečni je koji ima deset mjeseci.',
                        'desetorica': ' Desetorica je skupina od deset muških osoba.',
                        'desni': ' Desni je koji se nalazi nasuprot strani na kojoj je ljudsko srce.',
                        'desno': ' Desno znači s desne strane.',
                        'despot': ' Despot je vladarski naslov u Bizantskome Carstvu.',
                        'despotov': ' Despotov je koji pripada despotu.',
                        'despotski': ' Despotski je koji se odnosi na despote, okrutan i samovoljan..',
                        'dešnjački': ' Dešnjački je koji se odnosi na dešnjake.',
                        'dešnjak': ' Dešnjak je osoba bez obzira na spol ili muška osoba koja piše desnom rukom ili se njome primarno služi.',
                        'dešnjakinja': ' Dešnjakinja je ženska osoba koja piše desnom rukom ili se njome primarno služi.',
                        'dešnjakinjin': ' Dešnjakinjin je koji pripada dešnjakinji.',
                        'dešnjakov': ' Dešnjakov je koji pripada dešnjaku.',
                        'detalj': ' Detalj je mali dio kakve cjeline.',
                        'deterdžent': ' Deterdžent je sredstvo u tekućemu stanju ili u prahu  za ručno i strojno pranje i čišćenje .',
                        'deva': ' Deve su skupina papkara šupljorožaca pustinjskih i stepskih područja Bliskoga istoka i sjeverne Afrike te Južne Amerike, koji služe za teglenje i jahanje.',
                        'devedeset': ' Devedeset je broj koji se obilježuje s 90, za jedan veći od broja osamdeset devet i za jedan manji od broja devedeset jedan.',
                        'devedesetak': ' Devedesetak je približno devedeset, oko devedeset.',
                        'devedesetero': ' Devedesetero je skupina od devedeset osoba različita spola.',
                        'devedeseti': ' Devedeseti je koji je iza osamdeset devetoga, a prije devedeset prvoga.',
                        'devedesetorica': ' Devedesetorica je skupina od devedeset muških osoba.',
                        'devet': ' Devet je broj koji se obilježuje s 9, za jedan veći od broja osam i za jedan manji od broja deset.',
                        'devetero': ' Devetero je skupina od devet osoba različita spola.',
                        'deveterokratnik': ' Deveterokratnik  je broj koji je umnožak zadanoga broja i broja 9, koji je devet puta veći od zadanoga broja.',
                        'deveterokut': ' Deveterokut je geometrijski lik u ravnini omeđen s devet stranica.',
                        'deveterostruk': ' Deveterostruk je koji ima devet dijelova, koji se ponavlja devet puta.',
                        'deveti': ' Deveti je koji je iza osmoga, a prije desetoga.',
                        'devetica': ' Devetica je brojka koja označuje broj devet.',
                        'devetina': ' Devetina je broj koji pomnožen s devet daje cijeli broj.',
                        'devetka': ' Devetka je brojka koja označuje broj devet.',
                        'devetnaest': ' Devetnaest je broj koji se obilježuje s 19, za jedan veći od broja sedamnaest i za jedan manji od broja devetnaest.',
                        'devetnaestero': ' Devetnaestero je skupina od devetnaest osoba različita spola.',
                        'devetnaesti': ' Devetnaesti je koji je iza osamnaestoga, a prije dvadesetoga.',
                        'devetomjesečni': ' Devetomjesečni je koji ima devet mjeseci.',
                        'devetorica': ' Devetorica je skupina od devet muških osoba.',
                        'devetsto': ' Devetsto je broj koji se obilježuje s 900, za jedan veći od broja osamsto devedeset devet i za jedan manji od broja devetsto jedan.',
                        'devetstoti': ' Devetstoti je koji je iza osamsto devedeset devetoga, a prije devetsto prvoga.',
                        'dezinfekcija': ' Dezinfekcija je uništavanje mikroorganizama na površini tijela ili na predmetima koje se provodi fizičkim ili kemijskim postupcima',
                        'dezinficijens': ' Dezinficijens je dezinfekcijsko sredstvo kojim se uništavaju mikroorganizmi u čovjekovoj okolini.',
                        'dezinficirati': ' Dezinficirati znači obaviti/obavljati dezinfekciju.',
                        'dičiti se': ' Dičiti se kime ili čime znači osjećati zadovoljstvo zbog vlastite ili tuđe vrijednosti, uspjeha, truda i sl.',
                        'difterija': ' Difterija je zarazna bolest dušnika, ždrijela i nosa koja se širi kapljično.',
                        'digitalizacija': ' Digitalizacija je proces pretvarnja određenoga fizičkog medija ili predmeta poput slike, teksta, zvuka, filma, papira ili određenoga trodimenzijskog oblika u digitalni oblik.',
                        'digitalizirati': ' Digitalizirati znači pretvoriti/pretvarati u digitalni oblik.',
                        'digitalni': ' Digitalni je koji se odnosi na elektroničku tehnologiju koja podatake zapisuje kao niz bitova koji predstavljaju određeni objekt ili fizički proces. ',
                        'dignuti': ' Dignuti što znači pomaknuti, premjestiti što s nižega na viši položaj.',
                        'dijabetes': ' Dijabetes je poremećaj metabolizma zbog povišene razine glukoze u krvi pri čemu dolazi do oštećenja različitih organa i dijelova tijela.',
                        'dijagnosticirati': ' Dijagnosticirati znači postaviti/postavljati dijagnozu.',
                        'dijagnoza': ' Dijagnoza je stručno liječničko mišljenje o bolesti ili patološkome stanju koje se donosi na temelju anamneze, pretraga i simptoma.',
                        'dijalog': ' Dijalog je razgovor dviju ili više osoba ili strana usmjeren postizanju dogovora o čemu ili kakva cilja.',
                        'dijaspora': ' Dijaspora je ukupno stanovništvo koje se iselilo iz domovine.',
                        'dijeliti': ' Dijeliti što znači rastavljati cjelinu na više dijelova.',
                        'dijelom': ' Dijelom znači u određenoj mjeri.',
                        'dijeljenje': ' Dijeljenje je rastavljanje cjeline na više dijelova.',
                        'dijeta': ' Dijeta je poseban način prehrane u kojemu se smanjuje unos kalorija ili se izbjegavaju određene namirnice usmjeren smanjivanju tjelesne težine.',
                        'dijete': ' Dijete je čovjek od rođenja do početka sazrijevanja.',
                        'dijetetički': ' Dijetetički je koji se odnosi na dijetetiku.',
                        'dijetetika': ' Dijetetika je znanost o pravilnoj prehrani, proučava načine i svrhovitost provođenja dijete.',
                        'dijetni': ' Dijetni je koji se odnosi na dijetu.',
                        'diktat': ' Diktat je tekst koji tko govori ili čita da bi ga tko drugi zapisao.',
                        'diljem': ' Diljem znači  cijelom površinom.',
                        'dim': ' Dim je veliki broj malih čestica koji nastaje i diže se u zrak kad što gori.',
                        'dimovod': ' Dimovod je cijev za odvod dima.',
                        'dinamičan': ' Dinamničan je koji se intenzivno kreće i/ili mijenja.',
                        'dinamometar': ' Dinamometar je uređaj za mjerenje mehaničkih sila.',
                        'dinja': ' Dinja je jednogodišnja povrtna zeljasta biljka koja se uzgaja u toplim krajevima.',
                        'dio': ' Dio je sastavnica koja pripada cjelini.',
                        'dionica': ' Dionica je vrijednosni papir koji dokazuje vlasništvo nad dijelom imovine koje tvrtke.',
                        'dionički': ' Dionički je koji se odnosi na dionice, vrijednosne papire koji dokazuje vlasništvo nad dijelom imovine koje tvrtke.',
                        'dioptrija': ' Dioptrija je mjerna jedinica za jakost leće (dpt).',
                        'diploma': ' Diploma je svjedodžba o položenome završnom ispitu.',
                        'diplomat': ' Diplomat je odrasla osoba bez obzira na spol ili muškarac koji je u diplomatskoj službi.',
                        'diplomatkinja': ' Diplomatkinja je žena koja je u diplomatskoj službi.',
                        'diplomatov': ' Diplomatov je koji pripada diplomatu.',
                        'direktan': ' Direktan je koji je najkraći ili najjednostavniji.',
                        'direktor': ' Direktor je odrasla osoba bez obzira na spol ili muškarac koji upravlja ustanovom, poduzećem ili važnom jedinicom u organizaciji rada ili djelatnosti.',
                        'direktorica': ' Direktorica je žena koja upravlja ustanovom, poduzećem ili važnom jedinicom u organizaciji rada ili djelatnosti.',
                        'direktoričin': ' Direktoričin je koji pripada direktorici.',
                        'direktorij': ' Direktorij je virtualna lokacija koja u sebi može sadržavati programe, dokumente, poddirektorije te ostale podatkovne datoteke. ',
                        'direktorov': ' Direktorov je koji pripada direktoru.',
                        'direktorski': ' Direktorski je koji se odnosi na direktore.',
                        'dirigentski': ' Dirigentski je koji se odnosi na dirigente.',
                        'dirigirati': ' Dirigirati znači pokretima ruku upravljati izvođenjem glazbenoga djela.',
                        'disati': ' Disati znači primati kisik u organizam i izbacivati ugljikov dioksid.',
                        'disciplina': ' Disciplina je poslušnost i ponašanje prema strogim pravilima.',
                        'disk': ' Disk je okrugla kovinska ploča koju atletičar baca u daljinu.',
                        'disketa': ' Disketa je okrugla, savitljiva magnetna pločica, obično u plastičnome omotu, koja služi za pohranu i prijenos podataka s jednoga osobnog računala na drugo.',
                        'diskoteka': ' Diskoteka je mjesto zabave gdje se sluša glazba koja se izvodi uživo ili pušta s nosača zvuka koji pripremaju disk-džokeji ili uz nju pleše. ',
                        'div': ' Div je biće bez obzira na spol ili muško biće iznimne veličine, snage i moći.',
                        'divan': ' Divan je koji svojom neobičnom ljepotom izaziva divljenje.',
                        'diviti se': ' Diviti se komu ili čemu znači osjećati ili izražavati da se tko ili što smatra iznimno lijepim.',
                        'divkinja': ' Divkinja je žensko biće iznimne veličine, snage i moći.',
                        'divkinjin': ' Divkinjin je koji pripada divkinji.',
                        'divljak': ' Divljak je pripadnik autohtone ljudske skupine nekoga zemljopisnog područja.',
                        'divljakinja': ' Divljakinja je pripadnica autohtone ljudske skupine nekoga zemljopisnog područja.',
                        'divljakuša': ' Divljakuša je ženska osoba koja se divlje, grubo i/ili neuljuđeno ponaša.',
                        'divlji': ' Divlji je koji je, po mišljenju onoga tko ga opisuje, na nižemu stupnju kulture ili civilizacije od njega, odnosno društva kojemu pripada.',
                        'divov': ' Divov je koji pripada divu, biću iznimne veličine, snage i moći.',
                        'divovski': ' Divovski je koji je velik poput diva, koji je iznimno velik.',
                        'dizajn': ' Dizajn je estetsko oblikovanje proizvoda.',
                        'dizajner': ' Dizajner je osoba bez obzira na spol ili muškarac koja estetski oblikuje proizvode.',
                        'dizajnerica': ' Dizajnerica je žena koja estetski oblikuje proizvode.',
                        'dizajneričin': ' Dizajneričin je koji pripada dizajnerici.',
                        'dizajnerski': ' Dizajnerski je koji se odnosi na dizajnere i dizajniranje.',
                        'dizalica': ' Dizalica je stroj ili uređaj za dizanje i premještanje tereta.',
                        'dizalo': ' Dizalo je uređaj za dizanje i spuštanje ljudi i tereta koji se može naći u višekatnicama, na gradilištima, u brodovima i slično.',
                        'dizati': ' Dizati što znači pomicati, premještati što s nižega na viši položaj.',
                        'dižonski': ' Dižonski je koji se odnosi na Dijon i Dižonce.',
                        'djeca': ' Djeca su ljudi od rođenja do početka sazrijevanja.',
                        'dječačić': ' Dječačić je mali dječak, dječak od milja.',
                        'dječačićev': ' Dječačičev je koji pripada dječačiću.',
                        'dječački': ' Dječački je koji se odnosi na dječake.',
                        'dječak': ' Dječak je muško dijete do petnaeste godine.',
                        'dječakov': ' Djačakov je koji pripada dječaku.',
                        'dječji': ' Dječji je koji se odnosi na djecu.',
                        'djed': ' Djed je majčin ili očev otac.',
                        'djedov': ' Djedov je koji pripada djedu.',
                        'djedovina': ' Djedovina je nasljeđe koje je ostalo od daljnjih predaka.',
                        'djelatnost': ' Djelatnost je područje rada, ono čime se tko bavi, što mu je posao.',
                        'djelitelj': ' Djelitelj je broj kojim se dijeli pri operaciji dijeljenja.',
                        'djelo': ' Djelo je čin ili rezultat kakva djelovanja.',
                        'djelomice': ' Djelomice znači u određenoj mjeri.',
                        'djelomično': ' Djelomično znači u određenoj mjeri.',
                        'djelotvoran': ' Djelotvoran je koji ispunjava svoju namjenu, koji postiže cilj svojega djelovanja.',
                        'djelotvorno': ' Djelotvorno je tako da ispunjava svoju namjenu, da postiže cilj svojega djelovanja.',
                        'djelotvornost': ' Djelotvornost je svojstvo onoga što je djelotvorno.',
                        'djelovati': ' Djelovati znači izazivati kakav učinak.',
                        'djeljenik': ' Djeljenik je broj kojim se dijeli pri operaciji dijeljenja.',
                        'djeljiv': ' Djeljiv je koji se može dijeliti na manje sastavnice.',
                        'djeljivost': ' Djeljivost je svojstvo onoga što se može dijeliti na manje sastavnice.',
                        'djetelina': ' Djetelina je rod zeljastih krmnih biljaka iz porodice mahunarki leptirasta cvijeta, obično s tri lista, raste na livadama i pašnjacima.',
                        'djetešce': ' Djetešce je malo dijete, dijete od milja.',
                        'djetinjstvo': ' Djetinjstvo je razdoblje života od rođenja do djevojaštva ili dječaštva, dječje doba.',
                        'djevac': ' Djevac je mladić ili muškarac koji nije imao spolni odnos.',
                        'djevica': ' Djevica je djevojka ili žena koja nije imala spolni odnos.',
                        'djevičanski': ' Djevičanski je koji se odnosi na djevice.',
                        'djevičin': ' Djevičin je koji pripada djevici, djevojci ili ženi koja nije imala spolni odnos.',
                        'djevojački': ' Djevojački je koji se odnosi na djevojke.',
                        'djevojčica': ' Djevojčica je žensko dijete do petnaeste godine.',
                        'djevojčičin': ' Djevojčičin je koji pripada djevojčici. ',
                        'djevojčin': ' Djevojčin je koji pripada djevojci, mlađoj ženskoj osobi.',
                        'djevojka': ' Djevojka je mlađa ženska osoba.',
                        'dlačica': ' Dlačica je mala dlaka.',
                        'dlaka': ' Dlaka je tanka vlas koja raste iz kože.',
                        'dlan': ' Dlan je unutrašnji dio šake do prstiju.',
                        'dlijeto': ' Dlijeto je čvrsto kovinsko šiljasto oruđe kojim se dubi drvo, kamen ili kovina. ',
                        'dnevni': ' Dnevni je koji se odnosi na dan, vrijeme od izlaska do zalaska Sunaca.',
                        'dnevnik': ' Dnevnik je knjiga ili bilježnica u koju se bilježi ono što se svakoga dana događa ili radi.',
                        'dnevno': ' Dnevno znači u jednome danu.',
                        'dno': ' Dno je tvrdo tlo ispod vodene mase.',
                        'doba': ' Doba je vremenski odsječak u kojemu se što zbiva, koji je obilježen društvenim ili prirodnim zbivanjima.',
                        'doba': ' Doba je vremenska jedinica mjere glazbenoga takta.',
                        'dobar': ' Dobar je koji ima pozitivne osobine ili poželjna svojstva.',
                        'dobiti': ' Dobiti što znači primiti bez naknade, doći u posjed čega bez naknade.',
                        'dobivati': ' Dobivati što znači primati što bez naknade, dolaziti u posjed čega bez naknade.',
                        'dobro': ' Dobro je zemlja ili imanje u čijemu vlasništvu.',
                        'dobro': ' Dobro je onako kako treba biti, tako da ispunjava očekivanja.',
                        'dobro': ' Dobro izriče slaganje, suglasnost s čim.',
                        'dobroćudan': ' Dobroćudan je koji ima dobru i blagu narav.',
                        'dobroćudno': ' Dobroćudno je tako da odražava čiju dobru i blagu narav.',
                        'dobroćudnost': ' Dobroćudnost je osobina onoga koji je dobroćudan.',
                        'dočasnica': ' Dočasnica je žena s činom dočasnika.',
                        'dočasničin': ' Dočasničin je koji pripada dočasnici.',
                        'dočasnički': ' Dočasnički je koji se odnosi na dočasnike.',
                        'dočasnik': ' Dočasnik je čin niži od časnika, npr. narednik ili stožerni narednik.',
                        'dočasnikov': ' Dočasnikov je koji pripada dočasniku.',
                        'dočim': ' Dočim povezuje surečenice u nezavisnosloženoj suprotnoj rečenici kojom se izriče izrazita suprotnost: iznevjereno očekivanje ili neostvarena posljedica. ',
                        'doći': ' Doći znači krećući se dospjeti na određeno mjesto.',
                        'dodatak': ' Dodatak je ono što se čemu dodaje.',
                        'dodatan': ' Dodatan je koji se čemu dodaje, koji postoji uz ono što se već ima ili je uobičajeno.',
                        'dodati': ' Dodati komu što znači pružajući predati.',
                        'dodavati': ' Dodavati komu što znači pružajući predavati.',
                        'dodijeliti': ' Dodijeliti znači odlučiti o tome da tko što dobije u vlasništvo, na korištenje ili kao priznanje.',
                        'dodir': ' Dodir je kratak tjelesni doticaj.',
                        'dodjeljivati': ' Dodjeljivati znači odlučivati o tome da tko što dobije u vlasništvo, na korištenje ili kao priznanje.',
                        'događaj': ' Događaj je ono što se dogodilo u određeno vrijeme i na određenome mjestu.',
                        'događanje': ' Događanje je organizirano zbivanje.',
                        'događati se': ' Događati se znači nastajati kao posljedica kakvih okolnosti.',
                        'dogoditi se': ' Dogoditi se znači nastati kao posljedica kakvih okolnosti.',
                        'dogovarati': ' Dogovarati znači nastojati postići dogovor o čemu.',
                        'dogovor': ' Dogovor je slaganje dviju ili više osoba o čemu.',
                        'dogovoriti': ' Dogovoriti znači postići dogovor o čemu.',
                        'doista': ' Doista izriče uvjeravanje, upravo tako, u punoj mjeri. ',
                        'dojam': ' Dojam je doživljaj izazvan izravnim opažanjem.',
                        'dojka': ' Dojka je organ ženskoga tijela na prednjoj strani prsnoga koša koji sadržava mliječnu žlijezdu.',
                        'dok': ' Dok povezuje surečenice u nezavisnosloženoj suprotnoj rečenici kojom se izriče izrazita suprotnost: iznevjereno očekivanje ili neostvarena posljedica.',
                        'dokad': ' Dokad uvodi pitanje o vremenskoj granici, o vremenu u kojemu će što završiti ',
                        'dokada': ' Dokada uvodi pitanje o vremenskoj granici, o vremenu u kojemu će što završiti ',
                        'dokaz': ' Dokaz je podatak do kojega se došlo utvrđivanjem činjenica ili razmišljanjem, a koji opravdava prihvaćanje ili odbacivanje kakva stava, mišljenja ili teorije.',
                        'dokle': ' Dokle uvodi pitanje o vremenskoj granici, o vremenu u kojemu će što završiti.',
                        'dokoljenica': ' Dokoljenica je čarapa koja seže do koljena.',
                        'dokoljenka': ' Dokoljenka je čarapa koja seže do koljena.',
                        'doktor': ' Doktor je odrasla osoba bez obzira na spol ili muškarac koji je završio medicinski fakultet i bavi se liječenjem ljudi. ',
                        'doktorica': ' Doktorica je žena koja je završila medicinski fakultet i bavi se liječenjem ljudi.',
                        'doktoričin': ' Doktoričin je koji pripada doktorici.',
                        'doktorirati': ' Doktorirati znači steći najviši znanstveni stupanj, stupanj doktora znanosti.',
                        'doktorov': ' Doktorov je koji pripada doktoru, osobi ili muškaracu koji je završio medicinski fakultet i bavi se liječenjem ljudi.',
                        'doktorski': ' Doktorski je koji se odnosi na doktore, osobe koje su stekle doktorat iz kojega znanstvenog područja. ',
                        'dokud': ' Dokud uvodi pitanje o mjesnoj granici, koliko daleko.',
                        'dokuda': ' Dokuda uvodi pitanje o mjesnoj granici, koliko daleko.',
                        'dokument': ' Dokument je predmet ili papir koji sadržava podatke koji se mogu upotrebljavati kao dokaz za što.',
                        'dolar': ' Dolar je novčana jedinica koja se upotrebljava u mnogim zemljama poput Sjedinjenih Američkih Država, Kanade, Australije, Novoga Zelanda, Jamajke itd.',
                        'dolazak': ' Dolazak je pristizanje na odredište.',
                        'dolaziti': ' Dolaziti znači krećući se dospijevati na određeno mjesto.',
                        'dolina': ' Dolina je prirodna izdužena udubina s vodenim tokom na dnu, najčešće otvorena u smjeru otjecanja.',
                        'dolje': ' Dolje znači na mjestu ili na mjesto koje je ispod drugoga ili niže od koga ili čega.',
                        'dom': ' Dom je kuća ili zgrada u kojoj se stalno boravi, stanuje.',
                        'doma': ' Doma znači kod kuće',
                        'domaći': ' Domaći je koji je izrađen ili se provodi kod kuće.',
                        'domaćica': ' Domaćica je žena koja je vlasnica doma ili kakva objekta.',
                        'domaćičin': ' Domaćičin je koji pripada domaćici.',
                        'domaćin': ' Domaćin je odrasla osoba bez obzira na spol ili muškarac koji je vlasnik doma ili kakva objekta.',
                        'domaćinov': ' Domaćinov je koji pripada domaćinu, vlasniku doma ili kakva objekta.',
                        'domaćinski': ' Domaćinski je koji se odnosi na domaćine, vlasnike doma ili kakva objekta.',
                        'domišljat': ' Domišljat je koji brzo misli i lako dolazi do kakva rješenja',
                        'domišljato': ' Domišljato je tako da odražava da tko brzo misli i lako dolazi do kakva rješenja.',
                        'domišljatost': ' Domišljatost je osobina onoga koji je domišljat ili svojstvo onoga što je domišljato.',
                        'domovina': ' Domovina je zemlja u kojoj je tko rođen ili iz koje potječe.',
                        'domovnica': ' Domovnica je dokument kojim se potvrđuje da je tko državljanin koje države.',
                        'donijeti': ' Donijeti što znači noseći dopremiti što na određeno mjesto.',
                        'donositi': ' Donositi što znači noseći dopremati što na određeno mjesto.',
                        'donji': ' Donji je koji se nalazi ispod čega ili na nižemu mjestu od čega drugoga.',
                        'donjomiholjački': ' Donjomiholjački je koji se odnosi na Donji Miholjac i Donjomiholjčane.',
                        'dopisnica': ' Dopisnica je pravokutni komad debljega papira namijenjen pisanju kratkih poruka koji se šalje poštom bez omotnice.',
                        'dopodne': ' Dopodne je dio dana od jutra do podneva.',
                        'dopodnevni': ' Dopodnevni je koji se odnosi na dopodne.',
                        'doručak': ' Doručak je jutarnji obrok koji se jede nakon ustajanja ili nakon zajutarka.',
                        'doručkovati': ' Doručkovati znači pojesti/jesti što za jutarnji obrok.',
                        'dosad': ' Dosad znači do ovoga trenutka, od trenutka u kojemu govoritelj govori.',
                        'dosada': ' Dosada je osjećaj praznine zbog nedostatka zanimljivih sadržaja i događaja.',
                        'dosada': ' Dosada znači do ovoga trenutka, od trenutka u kojemu govoritelj govori.',
                        'dosadan': ' Dosadan je koji izaziva dosadu.',
                        'dosaditi': ' Dosaditi komu znači izazvati u komu zasićenost čime.',
                        'dosadno': ' Dosadno je tako da izaziva dosadu.',
                        'dosađivati': ' Dosađivati komu znači narušavati komu mir svojim ponašanjem ili ponavljanjem, izazivati zasićenost čime.',
                        'dosjetljiv': ' Dosjetljiv je koji brzo misli i lako dolazi do kakva rješenja.',
                        'dosjetljivo': ' Dosjetljivo je tako da odražava da tko brzo misli i lako dolazi do kakva rješenja. ',
                        'dosjetljivost': ' Dosjetljivost je osobina onoga koji je dosjetljiv ili svojstvo onoga što dosjetljivo.',
                        'dosljedan': ' Dosljedan je koji ustrajno provodi kakva načela i ne odustaje od njih.',
                        'dosljedno': ' Dosljedno je tako da odražava da tko provodi svoja načela i od njih ne ostupa.',
                        'dosljednost': ' Dosljednost je osobina onoga koji je dosljedan ili svojstvo onoga što je dosljedno.',
                        'dosta': ' Dosta znači u dovoljnoj mjeri, onoliko koliko je potrebno.',
                        'došašće': ' Došašće je četverotjedna priprava za blagdan Božića.',
                        'dotad': ' Dotad znači do toga trenutka, do trenutka koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                        'dotada': ' Dotada znači do toga trenutka, do trenutka koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                        'dotud': ' Dotud znači do te granice, do toga cilja.',
                        'dotuda': ' Dotuda znači do te granice, do toga cilja.',
                        'dovesti': ' Dovesti znači vodeći koga učiniti da dospije na određeno mjesto.',
                        'dovesti': ' Dovesti znači vozeći dopremiti na određeno mjesto.',
                        'doviđenja': ' Doviđenja je pozdrav na odlasku tijekom cijeloga dana osim prije spavanja.',
                        'dovoditi': ' Dovoditi znači vodeći koga činiti da dospije na određeno mjesto.',
                        'dovoljan': ' Dovoljan je onolik koliko je potrebno.',
                        'dovoljno': ' Dovoljno znači u dovoljnoj mjeri, onoliko koliko je potrebno.',
                        'dovoziti': ' Dovoziti znači vozeći dopremati na određeno mjesto.',
                        'dovršavati': ' Dovršavati znači privoditi što kraju.',
                        'dovršiti': ' Dovršiti znači učiniti, obaviti što do kraja.',
                        'doživjeti ': ' Doživjeti znači ostati živ do kakva događaja, zbivanja ili do kojega doba.',
                        'doživljaj': ' Doživljaj je događaj koji ostavlja dubok dojam i koji ostaje u sjećanju.',
                        'doživljavati': ' Doživljavati znači ostajati živ ili trajati do kakva događaja, zbivanja ili do kojega doba.',
                        'drački': ' Drački je koji se odnosi na Drač i Dračane.',
                        'drag': ' Drag je prema kojemu se osjeća naklonost.',
                        'dragoljub': ' Dragoljub je južnoamerička ukrasna biljka žutonarančastoga ili crvenoga cvijeta.',
                        'drama': ' Drama je glavni književni rod, uz liriku i epiku, koji obuhvaća djela pisana u obliku dijaloga, namijenjena izravnomu prikazivanju ljudske zbilje na pozornici.',
                        'dramaljski': ' Dramaljski je koji se odnosi na Dramalj i Dramaljce.',
                        'dramski': ' Dramski je koji se odnosi na dramu.',
                        'drap': ' Drap  je koji je boje pijeska ili svijetle zemlje.',
                        'dražica': ' Dražica je mali organ na ženskome spolovilu.',
                        'dres': ' Dres je službena sportska odjeća.',
                        'drezdenski': ' Drezdenski je koji se odnosi na Drezden i Drezdence.',
                        'drmati': ' Drmati  znači jakim pokretima pomicati u jednome pa u drugome smjeru.',
                        'drmnuti': ' Drmnuti znači jakim pokretom pomaknuti koga ili što.',
                        'drndati': ' Drndati znači tresti se zbog vožnje po neravnoj ili lošoj podlozi. (o vozilu).',
                        'drniški': ' Drniški je koji se odnosi na Drniš i Drnišane.',
                        'drsko': ' Drsko je tako da odražava čiju nepristojnost i bezobzirnost prema drugima.',
                        'drskost': ' Drskost je osobina onoga koji je drzak ili svojstvo onoga što je drsko.',
                        'drugačiji': ' Drugačiji je koji se razlikuje od onoga s kojim se uspoređuje.',
                        'drugaš': ' Drugaš je učenik (bez obzira na spol ili muškoga spola) drugoga razreda osnovne ili srednje škole.',
                        'drugašica': ' Drugašica je učenica drugoga razreda osnovne ili srednje škole.',
                        'drugašičin': ' Drugašičin je koji pripada drugašici.',
                        'drugi': ' Drugi je koji je iza prvoga, a prije trećega.',
                        'drugi': ' Drugi je koji se razlikuje od onoga s kojim se uspoređuje.',
                        'drukčiji': ' Drukčiji je koji se razlikuje od onoga s kojim se uspoređuje.',
                        'društven': ' Društven je koji se voli družiti, biti u društvu.',
                        'društveni': ' Društveni je koji se odnosi na društvo.',
                        'društveno': ' Društveno je tako da se odnosi na društvo.',
                        'društvenost': ' Društvenost je osobina onoga koji je društven.',
                        'društvo': ' Društvo je  velika zajednica ljudi koja u organiziranim odnosima živi u jednome gospodarskom, pravnom i političkom sustavu.',
                        'druženje': ' Druženje je bivanje u društvu s kim.',
                        'družiti se': ' Družiti se znači biti u društvu s kim.',
                        'drvce': ' Drvce je malo drvo, mala višegodišnja biljka s korijenom, deblom i krošnjom.',
                        'drveće': ' Drveće je skup drveta.',
                        'drven': ' Drven je koji je od drva.',
                        'drveni': ' Drveni je koji se odnosi na drvo.',
                        'drvlje': ' Drvlje je skup odsječenih ili otpiljenih dijelova stabla.',
                        'drvo': ' Drvo je višegodišnja biljka s korijenom, deblom i krošnjom.',
                        'drzak': ' Drzak je koji je nepristojan prema drugima, koji nema obzira prema drugima.',
                        'držati': ' Držati znači ne ispuštati ono što se uhvatilo ili što se ima u ruci.',
                        'država': ' Država je političko-pravna međunarodno priznata upravna organizacija s punim ili ograničenim suverenitetom i različitim oblicima vladavine i uređenja.',
                        'državni': ' Državni je koji pripada državi, koji se odnosi na državu.',
                        'dubina': ' Dubina je udaljenost od vodene površine do dna ili koje druge točke ispod nje.',
                        'dubinomjer': ' Dubinomjer je naprava za mjerenje dubine vode.',
                        'dubok': ' Dubok je koji je veće dubine od uobičajene ili prosječne.',
                        'dubrovački': ' Dubrovački je koji se odnosi na Dubrovnik i Dubrovčane.',
                        'dućan': ' Dućan je zatvoreni prostor u kojemu se što prodaje.',
                        'duda': ' Duda je sisaljka kroz koju dijete siše tekuću hranu iz bočice.',
                        'dudaš': ' Dudaš je osoba bez obzira na spol ili muška osoba koja svira dude.',
                        'dudašev': ' Dudašev je koji pripada dudašu.',
                        'dudašica': ' Dudašica je ženska osoba koja svira dude.',
                        'dudašičin': ' Dudašičin je koji pripada dudašici.',
                        'dudaški': ' Dudaški je koji se odnosi na dude i dudaše.',
                        'dude': ' Dude su puhaće narodno glazbalo slično gajdama, koje se sastoji od mijeha i svirale s cijevima.',
                        'dug': ' Dug je koji u prostoru ima velik razmak od jednoga do drugoga kraja.',
                        'dug': ' Dug je novac ili što vrijedno što se mora vratiti.',
                        'duga': ' Duga je niz lukova u bojama spektra koji se pojavljuju kad Sunčeve zrake prolaze kroz kapljice vode.',
                        'dugačak': ' Dugačak je koji u prostoru ima velik razmak od jednoga do drugoga kraja.',
                        'dugme': ' Dugme je mali, obično okrugao predmet na odjeći koji služi za zakopčavanje, spajanje i učvršćivanje.',
                        'dugo': ' Dugo je tako da traje više nego što je potrebno ili uobičajeno.',
                        'dugootočki': ' Dugootočki je koji se odnosi na Dugi otok i Dugootočane.',
                        'dugoratski': ' Dugoratski je koji se odnosi na Dugi Rat i Dugoraćane.',
                        'dugoreški': ' Dugoreški je koji se odnosi na Dugu Resu i Dugorešane.',
                        'dugoselski': ' Dugoselski je koji se odnosi na Dugo Selo i Dugoselce.',
                        'duguljast': ' Duguljast je koji je izdužena oblika, više dug nego širok.',
                        'duh': ' Duh je svojstvo, raspoloženje ili pristup koji obilježuje koju skupinu, djelatnost, prostor ili razdoblje.',
                        'duhan': ' Duhan je jednogodišnja zeljasta uzgojena biljka širokih i dugih listova.',
                        'duhanski': ' Duhanski je koji se odnosi na duhan, jednogodišnju zeljastu biljku. ',
                        'duljina': ' Duljina je prostorna udaljenost između dviju krajnjih točaka.',
                        'dum': ' Dum je onomatopejske riječ kojom se  oponaša udarac, najčešće bubnja.',
                        'dunja': ' Dunja je grmolika voćka azijskoga podrijetla glatke smeđe kore i odozgo zelenih, a odozdo sivih listova.',
                        'duša': ' Duša je netjelesni dio čovjeka koji živi i nakon smrti.',
                        'dušični': ' Dušični je koji sadržava dušik, koji se odnosi na dušik.',
                        'dušik': ' Dušik je kemijski element (N), bezbojni plin bez okusa i mirisa koji se nalazi u zraku i bjelančevinama.',
                        'dušikov': ' Dušikov je koji se odnosi na dušik, koji pripada dušiku.',
                        'dušnik': ' Dušnik je cjevasti dišni organ između grkljana i pluća.',
                        'duž': ' Duž označuje da se što proteže dužinom čega.',
                        'dužan': ' Dužan je onaj koji ima dug. ',
                        'dužd': ' Dužd je naslov muškoga poglavara Mletačke Republike.',
                        'dužina': ' Dužina je udaljenost između dviju krajnjih točaka.',
                        'dužnost': ' Dužnost je ono što tko mora obaviti ili napraviti.',
                        'dva': ' Dva je broj koji se obilježuje s 2, za jedan veći od broja jedan i za jedan manji od broja tri.',
                        'dvadeset': ' Dvadeset je broj koji se obilježuje s 20, za jedan veći od broja devetnaest i za jedan manji od broja dvadeset jedan.',
                        'dvadesetak': ' Dvadesetak je približno dvadeset, oko dvadeset.',
                        'dvadesetero': ' Dvadesetero je skupina od dvadeset osoba različita spola.',
                        'dvadeseti': ' Dvadeseti je koji je iza devetnaestoga, a prije dvadeset prvoga.',
                        'dvadesetogodišnjak': ' Dvadesetogodišnjak je osoba obzira na spol ili muška osoba koja ima dvadeset godina.',
                        'dvadesetogodišnjakinja': ' Dvadesetogodišnjakinja je ženska osoba koje ima dvadeset godina.',
                        'dvadesetogodišnji': ' Dvadesetogodišnji je koji ima dvadeset godina.',
                        'dvadesetogodišnjica': ' Dvadesetogodišnjica je dan ili godina u kojoj se navršava dvadeset godina od događaja koji se obilježuje.',
                        'dvadesetorica': ' Dvadesetorica je skupina od dvadeset muških osoba.',
                        'dvanaest': ' Dvanaest je broj koji se obilježuje s 12, za jedan veći od broja jedanaest i za jedan manji od broja trinaest.',
                        'dvanaestero': ' Dvanaestero je skupina od dvanaest osoba različita spola.',
                        'dvanaesti': ' Dvanaesti je koji je iza jedanaestoga, a prije trinaestoga.',
                        'dvaput': ' Dvaput je u dvije prilike, u dva navrata.',
                        'DVD': ' DVD je pokrata za digitalni videodisk, medij za kvalitetno pohranjivanje digitalnih podataka. ',
                        'dvica': ' Dvica je pogodak u košarci postignut s udaljenosti manje od 6,25 m.',
                        'dvjesto': ' Dvjesto je broj koji se obilježuje s 200, za jedan veći od broja sto devedeset devet i za jedan manji od broja dvjesto jedan.',
                        'dvjestoti': ' Dvjestoti je koji je iza sto devedeset devetoga, a prije dvjesto prvoga.',
                        'dvodijelan': ' Dvodijelan je koji se sastoji od dvaju dijelova.',
                        'dvodimenzijski': ' Dvodimenzijski je koji se odnosi na dvije dimenzije. ',
                        'dvodimenzionalni': ' Dvodimenzionalni je koji se odnosi na dvije dimenzije. ',
                        'dvogodišnjak': ' Dvogodišnjak je dijete koje ima dvije godine.',
                        'dvogodišnjakinja': ' Dvogodišnjakinja je žensko dijete koje ima dvije godine.',
                        'dvogodišnji': ' Dvogodišnji je koji ima dvije godine.',
                        'dvoje': ' Dvoje je skupina od dviju osoba različita spola.',
                        'dvojezičan': ' Dvojezičan je koji se služi dvama jezicima.',
                        'dvoji': ' Dvoji je skupina koja se sastoji od dvaju skupova ili parova.',
                        'dvojica': ' Dvojica je skupina od dviju muških osoba.',
                        'dvojka': ' Dvojka je brojka koja označuje broj dva.',
                        'dvokatni': ' Dvokatni je koji ima dva kata.',
                        'dvokatnica': ' Dvokatnica je zgrada od dva kata.',
                        'dvokratan': ' Dvokratan je koji je u dva dijela.',
                        'dvokratnik': ' Dvokratnik je broj koji je umnožak zadanoga broja i broja 2, koji je dvaput veći od zadanoga broja.',
                        'dvokrevetni': ' Dvokrevetni je koji ima dva kreveta.',
                        'dvoličan': ' Dvoličan je koji nije iskren, koji skriva svoj pravi karakter.',
                        'dvolično': ' Dvolično je tako da odražava čiju neiskrenost i skrivanje pravoga karaktera.',
                        'dvoličnost': ' Dvoličnost je osobina onoga koji je dvoličan ili svojstvo onoga što je dvolično.',
                        'dvomjesečni': ' Dvomjesečni je koji ima dva mjeseca.',
                        'dvorac': ' Dvorac je velika bogato uređena zgrada okružena perivojem, obično mjesto gdje živi vladar ili velikaš.',
                        'dvorana': ' Dvorana je velika prostorija u koju može stati mnogo ljudi i koja služi za priredbe, predavanja, ples, sportske aktivnosti itd.',
                        'dvoranski': ' Dvoranski je koji se odnosi na dvoranu.',
                        'dvoredan': ' Dvoredan je koji ima dva reda čega, koji se sastoji od dvaju redova.',
                        'dvorišni': ' Dvorišni je koji se odnosi na dvorište.',
                        'dvorište': ' Dvorište je ograđeni prostor oko kuće ili zgrade ili između kuća ili zgrada.',
                        'dvorječan': ' Dvorječan je koji se sastoji od dviju riječi.',
                        'dvorski': ' Dvorski je koji se odnosi na dvor.',
                        'dvosjed': ' Dvosjed je vozilo predviđeno za dvije osobe ili dva člana posade.',
                        'dvoslov': ' Dvoslov je znak za jedan glas sastavljen od dvaju slova. ',
                        'dvosoban': '  Dvosoban je koji ima dvije sobe.',
                        'dvostruk': ' Dvostruk je koji ima dva dijela, koji se ponavlja dva puta.',
                        'dvostruko': ' Dvostruko je toliko i još toliko, dva puta.',
                        'dvotjedni': ' Dvotjedni je koji ima dva tjedna.',
                        'dvotočka': ' Dvotočka je pravopisni znak (:) koji označuje stanku, promjenu intonacije ili jačine glasa ispred upravnoga govora ili nabrajanja.',
                        'džamija': ' Džamija je muslimanska bogomolja.',
                        'džem': ' Džem je voće koje je ukuhano sa šećerom i nije protisnuto.',
                        'džemper': ' Džemper je pleteni odjevni predmet za gornji dio tijela koji se najčešće nosi preko košulje ili bluze.',
                        'džep': ' Džep je dio odjeće sličan vrećici našiven na odjeću ili ušiven u nju koji služi za držanje sitnijih priručnih predmeta.',
                        'džeparac': ' Džeparac je novac za sitne potrebe koji najčešće roditelji daju djeci ili ga učenici i studenti zarađuju honorarnim poslovima.',
                        'džepić': ' Džepić je mali džep.',
                        'džez': ' Džez je vrsta glazbe koja se razvila u 20. st. iz sviranja američkih crnaca.',
                        'džip': ' Džip je otvoreni automobil za vožnju po težim ili teško prohodnim putovima.',
                        'džul': ' Džul je mjerna jedinica za energiju, rad i toplinu (J).',
                        'džungla': ' Džungla je močvarna monsunska teško prohodna šuma u tropskim krajevima.',
                        'đak': ' Đak je osoba koja pohađa koju osnovnu ili srednju školu.',
                        'đakovački': ' Đakovački je koji se odnosi na Đakovo i Đakovčane.',
                        'đavao': ' Đavao je nadnaravno biće koje čini zlo.',
                        'đavlov': ' Đavlov je koji pripada đavlu.',
                        'đavolak': ' Đavolak je mali đavao, đavao od milja.',
                        'đavolčev': ' Đavolčev je koji pripada đavolku.',
                        'đavolčić': ' Đavolčić je mali đavao, đavao od milja.',
                        'đavolčićev': ' Đavolčićev je koji pripada đavolčiću.',
                        'đavolica': ' Đavolica je nadnaravno žensko biće ',
                        'đavoličin': ' Đavoličin je koji pripada đavolici.',
                        'đavolov': ' Đavolov je koji pripada đavlu.',
                        'đavolski': ' Đavolski je koji se odnosi na đavla.',
                        'điha': ' Điha je povik kojim se tjera konja da se pokrene ili ubrza ili oponaša kretanje konja. ',
                        'đon': ' Đon je donji dio obuće.',
                        'đumbir': ' Đumbir je tropska zeljasta biljka kopljasta lišća nalik trski.',
                        'đumbirov': ' Đumbirov je koji pripada đumbiru.',
                        'đurđevački': ' Đurđevački je koji se odnosi na Đurđevac i Đurđevčane. ',
                        'đurđica': ' Đurđica je šumska i ukrasna zeljasta biljka iz porodice ljiljana s malim mirisnim bijelim cvjetovima.',
                        'e-adresa': ' E-adresa skup je nasumično odabranih riječi i znakova na koji se prima i s kojega se šalje pošta, sastoji se od korisničkoga imena i imena računala',
                        'eda': ' Eda uvodi zavisnu surečenicu u namjernoj rečenici.',
                        'edinburški': ' Edinburški je koji se odnosi na Edinburgh i Edinburžane.',
                        'egipatski': ' Egipatski je koji se odnosi na Egipat i Egipćane.',
                        'egzotičan': ' Egzotičan je koji je neobičan ili rijedak jer dolazi iz dalekih i nedovoljno poznatih krajeva ili kultura.',
                        'ehinokok': ' Ehinokok je parazitska trakavica koja se razvija u tankome crijevu psa.',
                        'ekipa': ' Ekipa je skupina ljudi odabranih za kakav zajednički pothvat, projekt, igru ili posao.',
                        'ekipni': ' Ekipni je koji se odnosi na ekipu, skupinu ljudi odabranih za kakav zajednički pothvat, igru ili posao.',
                        'ekologija': ' Ekologija je znanost koja proučava suživot svih bića u prirodi, njihovo djelovanje na okoliš i djelovanje okoliša na njih.',
                        'ekološki': ' Ekološki je koji se odnosi na ekologiju i ekologe.',
                        'ekonomija': ' Ekonomija je područje društvene znanosti koje proučava proizvodnju i ponudu, raspodjelu, razmjenu i potrošnju materijalnih dobara i usluga u određenome vremenu, prostoru i društvu.',
                        'ekonomski': ' Ekonomski je koji se odnosi na ekonomiju.',
                        'ekoselo': ' Ekoselo je organizirani prostor u prirodi koji dočarava život na selu i u kojemu se obično može jesti i prespavati.',
                        'ekran': ' Ekran je elektronička ploha na kojoj se prikazuje slika koju je proizveo elektonički uređaj. ',
                        'ekskluzivan': ' Ekskluzivan je koji je jedinstveni nositelj kakvih prava.',
                        'ekskurzija': ' Ekskurzija je organizirano skupno putovanje ili kraći izlet s kakvim osobitim ciljem.',
                        'eksplodirati': ' Eksplodirati znači naglo se rasprsnuti i pritom najčešće što razoriti.',
                        'ekstranet': ' Ekstranet je internet s ograničenim pristupom koji za razliku od intraneta može uključivati i druge mreže za komunikaciju s vanjskim ustanovama i korporacijama.',
                        'ekstravagantan': ' Ekstravagantan je koji se izdvaja od drugih, koji ima posebne osobine ili svojstva.',
                        'ekvadorski': ' Ekvadorski je koji se odnosi na Ekvador i Ekvadorce.',
                        'elegantan': ' Elegantan je koji odražava čiji ukus i profinjenost.',
                        'elektronvolt': ' Elektronvolt je mjerna jedinica za energiju (eV).',
                        'elektroskop': ' Elektroskop je uređaj kojim se ispituje električni naboj kojega tijela.',
                        'element': ' Element je jedan od sastavnih dijelova složene cjeline.',
                        'emisija': ' Emisija je odašiljanje signala, izdavanje ili ispuštanje čega.',
                        'enciklopedija': ' Enciklopedija je djelo koje abecednim redom daje pregled osnovnih znanja iz različitih područja.',
                        'enciklopedijski': ' Enciklopedijski je koji se odnosi na enciklopediju. ',
                        'energija': ' Energija je sposobnost organizma da se kreće, radi i djeluje.',
                        'energijski': ' Energijski je koji se odnosi na energiju. ',
                        'engleski': ' Engleski je koji se odnosi na Englesku i Engleze. ',
                        'enklitika': ' Enklitika je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ ispred sebe i s njom čini jednu naglasnu cjelinu.',
                        'eno': ' Eno skreće pozornost na ono što nije u blizini ni govornika ni sugovornika.',
                        'epidemija': ' Epidemija je naglo širenje zarazne bolesti među stanovnicima određena područja u kratkome razdoblju.',
                        'epidemijski': ' Epidemijski je koji se odnosi na epidemiju.',
                        'epidemiolog': ' Epidemiolog je liječnik koji je specijalizirao epidemiologiju.',
                        'epidemiologija': ' Epidemiologija je medicinska disciplina koja proučava pojavu, širenje i čimbenike bolesti kod ljudi te primjenjuje svoje spoznaje na rješavanje zdravstvenih problema.',
                        'epidemiologinja': ' Epidemiologinja je liječnica koja je specijalizirala epidemiologiju.',
                        'epidemiologinjin': ' Epidemiologinjin je koji pripada epidemiologinji.',
                        'epidemiologov': ' Epidemiologov je koji pripada epidemiologu.',
                        'epidemiološki': ' Epidemiološki je koji se odnosi na epidemiologiju i epidemiologe.',
                        'epigram': ' Epigram je lirska pjesnička književna vrsta koja obuhvaća djela u kojima se sažeto iznosi kakav duhovit ili satiričan sadržaj.',
                        'epika': ' Epika je, uz dramu i liriku, glavni književni rod koji oduhvaća djela koja se temelje na pripovijedanju i prikazivanju velikoga broja likova i događaja.',
                        'epitet': ' Epitet je posebno odabran pridjev kojim pjesnik gradi svoju pjesničku sliku svijeta.',
                        'epizoda': ' Epizoda je razdoblje u kojemu se manifestira neki simptom bolesti ili poremećaja praćeno razdobljem u kojemu toga simptoma nema. ',
                        'epizodni': ' Epizodni je koji se odnosi na epizodu.',
                        'e-poruka': ' E-poruka je poruka koja se šalje ili prima e-poštom.',
                        'epski': ' Epski je koji se odnosi na ep, koji je kao u epu, tematski ili opširnošću.',
                        'eritrejski': ' Eritrejski je koji se odnosi na Eritreju i Eritrejce.',
                        'esej': ' Esej je prozna književna vrsta slobodne tematike i stilistike u kojoj se isprepliću znanstveni i publicistički pristup opisu.',
                        'e-sport': ' E-spot vrsta je natjecanja u kojoj se igrači, najčešće profesionalni, natječu u određenoj videoigri.',
                        'estonski': ' Estonski je koji se odnosi na Estoniju i Estonce.',
                        'esvatinijski': ' Esvatinijski je koji se odnosi na Esvatini i Esvatinijce.',
                        'etanol': ' Etanol je alkohol jaka mirisa i okusa, bezbojna i zapaljiva tekućina koja se dobiva od škroba ili šećera vrenjem s pomoću kvasca te sintezom, u većim količinama na čovjeka djeluje opojno.',
                        'etaža': ' Etaža je dio kuće između poda i stropa ili između dvaju stropova.',
                        'etažni': ' Etažni je koji se sastoji od više etaža.',
                        'etiopski': ' Etiopski je koji se odnosi na Etiopiju i Etiopljane.',
                        'eto': ' Eto skreće pozornost sugovornika na ono što je u njegovoj blizini.',
                        'euro': ' Euro je novčana jedinica u većini zemalja Europske unije.',
                        'europski': ' Europski je koji se odnosi na Europu i Europljane.',
                        'eventualan': ' Eventualan je koji se u određenim uvjetima može dogoditi ili ostvariti.',
                        'evo': ' Evo služi za skretanje pozornosti onoga komu tko govori na ono što je u blizini onoga koji govori.',
                        'fabula': ' Fabula je razvoj i slijed radnje književnoga ili scenskoga djela.',
                        'fagot': ' Fagot je drveno puhaće glazbalo najdubljega registra.',
                        'fagotist': ' Fagotist je osoba bez obzira na spol ili muška osoba koja svira fagot.',
                        'fagotistica': ' Fagotistica je ženska osoba koja svira fagot.',
                        'fagotističin': ' Fagotističin je koji pripada fagotistici.',
                        'fagotistički': ' Fagotistički je koji se odnosi na fagote i fagotiste.',
                        'fagotistov': ' Fagotistov je koji pripada fagotistu.',
                        'faks': ' Faks je uređaj za prenošenje pisanih poruka ili slika u okviru telefonske mreže.',
                        'faktor': ' Faktor je broj koji sudjeluje u računskoj operaciji množenja, broj koji se množi ili broj kojim se množi.',
                        'fakultet': ' Fakultet je visokoškolska ustanova na kojoj se studira neka znanstvena disciplina ili skup srodnih disciplina i na koju se upisuje nakon završene srednje škole.',
                        'fanfara': ' Fanfara je kraća glazbena melodija za limena puhaća glazbala, izvodi se obično tijekom javnih svečanosti, ima funkciju signala, dočaravanja ugođaja rata ili lova.',
                        'farad': ' Farad je mjerna jedinica za električni kapacitet (F).',
                        'faraon': ' Faraon je naslov muškoga vladara u starome Egiptu.',
                        'fasada': ' Fasada je prednja strana zgrade.',
                        'fasadni': ' Fasadni je koji se odnosi na fasadu.',
                        'fauna': ' Fauna je životinjski svijet.',
                        'faza': ' Faza je razvojni stupanj koje pojave, procesa ili postupka.',
                        'fazan': ' Fazani su porodica divljih ptica veličine domaće kokoši koje žive uz polja i rubove šuma, mužjaci su šareni s tamnozelenim vratom i glavom, a ženke smeđe s tamnim pjegama.',
                        'feferon': ' Feferon je jednogodišnja povrtna biljka uspravne razgranate stabljike s mnogo listova i sitnim bijelim, žućkastim ili tamnoljubičastim cvjetovima i ljutim plodovima.',
                        'fen': ' Fen je topao i suh vjetar koji puše niz padine Alpa.',
                        'festival': ' Festival je niz povezanih svečanih priredaba, koncerata, kazališnih ili filmskih predstava.',
                        'fidžijski': ' Fidžijski je koji se odnosi na Fidži i Fidžijce.',
                        'figura': ' Figura je lik izrađen u dvije ili tri dimenzije.',
                        'fiju': ' Fiju je onomatopejska riječ kojom se oponaša zvuk jakoga vjetra ili oštroga predmeta koji leti zrakom.',
                        'fijuk': ' Fijuk je zvuk koji podsjeća na fiju.',
                        'fijukanje': ' Fijukanje je zvuk koji podsjeća na fiju.',
                        'fijukati': ' Fijukati znači ispuštati zvuk koji zvuči kao fiju. ',
                        'fijuknuti': ' Fijuknuti znači ispustiti zvuk koji zvuči kao fiju. ',
                        'filipinski': ' Filipinski je koji se odnosi na Filipine i Filipince.',
                        'filipljanski': ' Filipljanski je koji se odnosi na Sveti Filip i Jakov i Filipljance.',
                        'film': ' Film je tanka savitljiva prozirna vrpca osjetljiva na svjetlost na koju se snimaju slike s pomoću fotografskoga aparata ili kamere.',
                        'financije': ' Financije su novčana sredstva kojima tko raspolaže.',
                        'financijski': ' Financijski je koji se odnosi na financije.',
                        'finski': ' Finski je koji se odnosi na Finsku i Fince.',
                        'firentinski': ' Firentinski je koji se odnosi na Firencu i Firentince.',
                        'fizičar': ' Fizičar je stručnjak koji se bavi fizikom.',
                        'fizičarka': ' Fizičarka je stručnjakinja koja se bavi fizikom.',
                        'flauta': ' Flauta je drveno ili kovinsko puhaće glazbalo najvišega registra.',
                        'flautist': ' Flaustist je osoba bez obzira na spol ili muška osoba koja svira flautu.',
                        'flautistica': ' Flautistica je ženska osoba koja svira flautu.',
                        'flautističin': ' Flautističin je koji pripada flautistici.',
                        'flautistički': ' Flautistički je koji se odnosi na flaute i flautiste.',
                        'flautistov': ' Flautistov je koji pripada flautistu.',
                        'flora': ' Flora je biljni svijet.',
                        'fluor': ' Fluor je kemijski element (F), žutozeleni otrovni plin oštra mirisa, u prirodi se pojavljuje samo u spojevima, a sastojak je zubne cakline.',
                        'fond': ' Fond su novac ili materijalna dobra namijenjeni određenoj svrsi.',
                        'fonologija': ' Fonologija je grana gramatike koja proučava glasove kao razlikovne jezične jedinice',
                        'fonološki': ' Fonološki je koji se odnosi na fonologiju.',
                        'forma': ' Forma je vanjski izgled predmeta ili tijela.',
                        'forum': ' Forum je neizravan oblik elektroničkoga razgovora među korisnicima u kojemu korisnici mogu izreći svoje mišljenje o različitim temama koje je vidiljivo ostalim korisnicima i posjetiteljima foruma.',
                        'fosfor': ' Fosfor je kemijski element (P), nekovina, u prirodi se pojavljuje samo u spojevima, važan je sastojak biljnih i životinjskih stanica',
                        'fotelja': ' Fotelja je udobna sjedalica s naslonom i osloncima za ruke.',
                        'fotoaparat': ' Fotoaparat je uređaj koji služi za dobivanje negativnoga otiska na podlozi osjetljivoj na svjetlo ili za dobivanje gotove fotografije.',
                        'fotografija': ' Fotografija je snimka napravljena fotoaparatom.',
                        'fotokopija': ' Fotokopija je s pomoću posebnoga uređaja izrađen dokument vjeran originalu.',
                        'fotokopiranje': ' Fotokopiranje je izrada fotokopija, preslika, s pomoću posebnoga uređaja.',
                        'fotokopiraona': ' Fotokopiraona je obrtnička radnja ili prostorija u kojoj se izrađuju fotokopije, preslike.',
                        'fotokopiraonica': ' Fotokopiraonica je obrtnička radnja ili prostorija u kojoj se izrađuju fotokopije, preslike.',
                        'fotokopirati': ' Fotokopirati znači izrađivati fotokopije, preslike, s pomoću posebnoga uređaja.',
                        'fragment': ' Fragment je komad koji je lomljenjem odijeljen od veće cjeline.',
                        'fragmentacija': ' Fragmentacija je dijeljenje čega na manje cjeline, dijelove, fragmente, odlomke.',
                        'fragmentaran': ' Fragmentaran je koji je u fragmentima, koji nije cjelovit.',
                        'fragmentarni': ' Fragmentarni je koji se odnosi na fragmente, koji što prikazuje u fragmentima.',
                        'fragmentirati': ' Fragmentirati znači dijeliti što na manje cjeline, dijelove, fragmente, odlomke.',
                        'francuski': ' Francuski je koji se odnosi na Francusku i Francuze. ',
                        'frankfurtski': ' Frankfurtski je koji se odnosi na Frankfurt i Frankfurćane.',
                        'frekvencija': ' Frekvencija je mjera ponavljanja čega. ',
                        'frfljati': ' Frfljati znači govoriti nerazgovijetno i nerazumljivo.',
                        'frizer': ' Frizer je odrasla osoba bez obzira na spol ili muškarac koji se bavi uređivanjem (šišanjem, češljanjem, bojenjem) kose.',
                        'frizerka': ' Frizerka je žena koja se bavi uređivanjem (šišanjem, češljanjem, bojenjem) kose.',
                        'frizerkin': ' Frizerkin je koji pripada frizerki.',
                        'frizerov': ' Frizerov je koji pripada frizeru.',
                        'frizerski': ' Frizerski je koji se odnosi na friziranje i frizere.',
                        'frizura': ' Frizura je način na koji je kosa ošišana, počešljana i uređena.',
                        'frula': ' Frula je narodno drveno puhaće glazbalo, šuplja drvena cijev s rupicama koje se pri sviraju zatvaraju i otvaraju prstima.',
                        'frulaš': ' Frulaš je osoba bez obzira na spol ili muška osoba koja svira frulu.',
                        'frulašev': ' Frulašev je koji pripada frulašu.',
                        'frulašica': ' Frulašica je ženska osoba koja svira frulu.',
                        'frulašičin': ' Frulašičin je koji pripada frulašici.',
                        'frulaški': ' Frulaški je koji se odnosi na frulaše.',
                        'frulica': ' Frulica je mala frula.',
                        'fufljati': ' Fufljati znači govoriti nerazgovijetno i nerazumljivo.',
                        'fuj': ' Fuj je povik kojim se izriče negodovanje i gađenje. ',
                        'fukušimski': ' Fukušimski je koji se odnosi na Fukušimu i Fukušimce.',
                        'funkcija': ' Funkcija je mjesto koje tko ima u društvu ili raspored dužnosti na poslu.',
                        'funkcionirati': ' Funkcionirati znači raditi ili djelovati u skladu sa svojim ciljem, svrhom ili namjenom.',
                        'furlanski': ' Furlanski je koji se odnosi na Furlaniju i Furlance.',
                        'futur': ' Futur je buduće vrijeme.',
                        'futurski': ' Futurski je koji se odnosi na futur.',
                        'gabeoski': ' Gabeoski je koji se odnosi na Gabelu i Gabeljane.',
                        'gaće': ' Gaće su donje rublje koje se nosi na golome donjem dijelu tijela, ispod druge odjeće, a navlači se preko nogu.',
                        'gajdaš': ' Gajdaš je osoba bez obzira na spol ili muška osoba koja svira gajde.',
                        'gajdašev': ' Gajdašev je koji pripada gajdašu.',
                        'gajdašica': ' Gajdašica je ženska osoba koja svira gajde.',
                        'gajdašičin': ' Gajdašičin je koji pripada gajdašici.',
                        'gajdaški': ' Gajdaški je koji se odnosi na gajde i gajdaše.',
                        'gajde': ' Gajde su puhaće narodno glazbalo koje se sastoji od mijeha i svirale s cijevima.',
                        'gakati': ' Gakati znači glasati se glasom koji podsjeća na ga-ga.',
                        'gaknuti': ' Gaknuti znači oglasiti se glasom koji podsjeća na ga-ga.',
                        'gaktati': ' Gaktati znači glasati se glasom koji podsjeća na ga-ga.',
                        'galama': ' Galama je buka koja nastaje kad mnogo ljudi istodobno viče ili glasno govori.',
                        'galapagoški': ' Galapagoški je koji se odnosi na Galapagos i Galapagošane.',
                        'galeb': ' Galeb je ptica močvarica bjelosive boje i snažnoga kljuna koja živi uz more ili slatku vodu.',
                        'galerija': ' Galerija je izdužena natkrivena prostorija koja se nalazi s vanjske strane zgrade ili povezuje dva njezina dijela.',
                        'galicijski': ' Galicijski je koji se odnosi na Galiciju, pokrajinu koja je dijelom Poljske i Ukrajine, i Galicijce.',
                        'galicizam': ' Galicizam je riječ ili sveza francuskoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                        'galilejski': ' Galilejski je koji se odnosi na Galileju i Galilejce.',
                        'galski': ' Galski je koji se odnosi na Galiju i Gale.',
                        'ganski': ' Ganski je koji se odnosi na Ganu i Gance.',
                        'garaža': ' Garaža je zatvoren prostor koji služi za smještaj motornih vozila.',
                        'garešnički': ' Garešnički je koji se odnosi na Garešnicu i Gareščane.',
                        'garsonijera': ' Garsonijera je stan koji sadržava kupaonicu i još jednu prostoriju namijenjenu spavanju, boravku i pripremanju hrane.',
                        'gasiti': ' Gasiti znači činiti da što prestane gorjeti.',
                        'gastroskop': ' Gastroskop je uređaj za pregled želudca s pomoću sonde.',
                        'gaziti': ' Gaziti koga ili što znači gnječiti, uništavati koga ili što prelazeći preko toga.',
                        'gdanjski': ' Gdanjski je koji se odnosi na Gdanjsk i Gdanjščane.',
                        'gdje': ' Gdje uvodi pitanje o mjestu i znači u kojemu mjestu, na kojemu mjestu.',
                        'gdje': ' Gdje uvodi zavisnu surečenicu u objektnoj rečenici.',
                        'gdje': ' Gdje izriče nevjericu.',
                        'gdjekad': ' Gdjekad znači s vremena na vrijeme, neredovito i rijetko, koji put.',
                        'gdjekoji': ' Gdjekoji znači tu i tamo koja, rijetko koja, malo koja osoba ili predmet.',
                        'gdješto': ' Gdješto označuje neimenovani i rijedak predmet ili pojavu, malo što, rijetko što.',
                        'gdješto': ' Gdješto označuje određenu, u pravilu manju mjeru čega.',
                        'gdjetko': ' Gdjetko označuje neimenovanu i rijetku osobu, malo tko, rijetko tko.',
                        'gđa': ' Gđa je kratica za gospođa.',
                        'gđica': ' Gđica je kratica za gospođica.',
                        'gemišt': ' Gemišt je piće nastalo miješanjem bijeloga vina i gazirane mineralne vode.',
                        'generacija': ' Generacija su svi pripadnici neke zajednice koji su iste ili slične dobi.',
                        'generacijski': ' Generacijski je koji se odnosi na generaciju, sve pripadnike neke zajednice koji su iste ili slične dobi.',
                        'general': ' General je najviši vojni čin u kopnenoj vojsci i ratnome zrakoplovstvu.',
                        'generalica': ' Generalica je žena s činom generala.',
                        'generaličin': ' Generaličin je koji pripada generalici.',
                        'generalov': ' Generalov je koji pripada generalu.',
                        'generalski': ' Generalski je koji se odnosi na generale.',
                        'genijalan': ' Genijalan je koji je iznadprosječno pametan i posjeduje iznimne stvaralačke sposobnosi.',
                        'genijalno': ' Genijalno je tako da odražava čiju darovitost i stvaralačku sposobnost.',
                        'genijalnost': ' Genijalnost je osobina onoga koji je genijalan ili svojstvo onoga što je genijalno.',
                        'genitiv': ' Genitiv je padež koji odgovara na pitanja 
                        ',
                        'genitivni': ' Genitivni je koji se odnosi na genitiv. ',
                        'geometrija': ' Geometrija je matematička grana koja proučava likove u ravnini i prostoru i njihove međusobne odnose.',
                        'georgina': ' Georgina je ukrasna biljka podrijetlom iz Meksika koja ima gomoljasto korijenje.',
                        'germanizam': ' Germanizam je riječ ili sveza njemačkoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                        'gibak': ' Gibak je koji se lako giba, koji lako svija i pokreće tijelo.',
                        'gibraltarski': ' Gibraltarski je koji se odnosi na Gibraltar i Gibraltarce.',
                        'giljotina': ' Giljotina je naprava za provedbu smrtne kazne odsijecanjem glave koja je bila u upotrebi u Francuskoj od 1792. do 1981. godine.',
                        'gimnastičar': ' Gimnastičar je osoba ili muškarac koji se bavi gimnastikom.',
                        'gimnastičarev': ' Gimnastičarev je koji pripada gimnastičaru.',
                        'gimnastičarka': ' Gimnastičarka je žena koja se bavi gimnastikom.',
                        'gimnastičarkin': ' Gimnastičarkin je koji pripada gimnastičarki.',
                        'gimnastičarov': ' Gimnastičarov je koji pripada gimnastičaru.',
                        'gimnastički': ' Gimnastički je koji se odnosi na gimnastičare i gimnastiku.',
                        'gimnastika': ' Gimnastika je natjecateljska disciplina koja kombinira motoričke vještine i sposobnosti i uključuje sustav vježba na podu i na napravama.',
                        'gimnazija': ' Gimnazija je srednja škola u kojoj učenici stječu opće obrazovanje i pripremaju se za nastavak školovanja na fakultetu',
                        'gipko': ' Gipko je tako da odražava čiju pokretljivost i savitljivost.',
                        'gipkost': ' Gipkost je osobina onoga koji je gibak.',
                        'gitara': ' Gitara je trzaće žičano glazbalo sa šest žica.',
                        'gitarist': ' Gitarist je osoba bez obzira na spol ili muška osoba koja svira gitaru.',
                        'gitaristica': ' Gitaristica je ženska osoba koja svira gitaru.',
                        'gitarističin': ' Gitarističin je koji pripada gitaristici.',
                        'gitaristički': ' Gitaristički je koji se odnosi na gitariste.',
                        'gitaristov': ' Gitaristov je koji pripada gitaristu.',
                        'gitarski': ' Gitarski je koji se odnosi na gitare.',
                        'gizdav': ' Gizdav je koji je nakićen ili ukrašen.',
                        'gizdavo': ' Gizdavo je tako da pokazuje čiju kićenost ili ukrašenost.',
                        'gizdavost': ' Gizdavost je osobina onoga koji je gizdav ili svojstvo onoga što je gizdavo.',
                        'glačalo': ' Glačalo je kućanski uređaj s veoma glatkom donjom stranom koja zagrijana služi za glačanje tkanine, rublja ili odjeće, klizanjem po tkanini ravna nabore.',
                        'glačati': ' Glačati znači uklanjati nabore s tkanine ili odjeće s pomoću glačala.',
                        'glad': ' Glad je potreba za jelom.',
                        'gladan': ' Gladan je koji osjeća glad, koji ima potrebu za jelom.',
                        'gladno': ' Gladno je tako da odražava čiju potrebu za jelom.',
                        'glagol': ' Glagol je promjenjiva riječ kojom se izriče radnja, stanje i zbivanje i koja se mijenja po licima.',
                        'glagolski': ' Glagolski je koji se odnosi na glagol. ',
                        'glagoljica': ' Glagoljica je najstarije slavensko pismo nastalo polovicom 9. st., koje je poslije 12. stoljeća u stalnoj uporabi samo u Hrvatskoj. ',
                        'glagoljični': ' Glagoljični je koji se odnosi na glagoljicu. ',
                        'glas': ' Glas je zvuk koji nastaje radom govornih organa u grlu.',
                        'glasati': ' Glasati znači davati svoj glas na izborima ili pri kakvu odlučivanju.',
                        'glasati se': ' Glasati se znači javljati se glasom ili zvukom.',
                        'glasnica': ' Glasnica je govorni organ koji proizvodi glas.',
                        'glasovir': ' Glasovir je žičano glazbalo s tipkama.',
                        'glasovirski': ' Gasovirski je koji se odnosi na glasovire.',
                        'glava': ' Glava je gornji dio tijela u kojemu su smješteni mozak i tjelesna osjetila.',
                        'glavni': ' Glavni je koji je u kakvu poretku na prvome mjestu, koji je prvi po važnosti.',
                        'glavobolja': ' Glavobolja je bol u glavi.',
                        'glazba': ' Glazba je umjetnost izražavanja tonovima, glasovima i šumovima, osnovni su joj elementi ritam i melodija, a zapisuje se notama.',
                        'glazbalo': ' Glazbalo je naprava ili uređaj na kojemu se svira, odnosno glazbeni instrument.',
                        'glazbeni': ' Glazbeni je koji se odnosi na glazbu.',
                        'gle': ' Gle je usklik kojim se  skreće čija pozornost na nešto.',
                        'gledalište': ' Gledalište je prostor na otvorenome ili u dvorani u kojemu su smješteni gledatelji.',
                        'gledatelj': ' Gledatelj je osoba bez obzira na spol ili muška osoba koja gleda kakav program ili promatra kakav događaj.',
                        'gledateljev': ' Gledateljev je koji pripada gledatelju.',
                        'gledateljica': ' Gledateljica je ženska osoba koja gleda kakav program ili promatra kakav događaj.',
                        'gledateljičin': ' Gledateljičin je koji pripada gledateljici.',
                        'gledateljski': ' Gledateljski je koji se odnosi na gledatelje.',
                        'gledati': ' Gledati znači primati podražaje osjetilom vida.',
                        'glede': ' Glede označuje da se što uzima kao polazište ili okolnost.',
                        'gležnjača': ' Gležnjače su obuća, obično od kože koja seže do gležnja.',
                        'glinski': ' Glinski je koji se odnosi na Glinu i Glinjane.',
                        'gliser': ' Gliser je plovilo kojemu oblik trupa i jak motor omogućuju brzo kretanje vodom koje nalikuje klizanju.',
                        'glista': ' Glista je oblenjak koji živi kao nametnik u čovjeku i životinjama.',
                        'glog': ' Glog je jednodomna drvenasta, grmolika i trnovita biljka bijelih okruglih cvjetova i crvenih bobičastih plodova.',
                        'gluh': ' Gluh je koji ne čuje dobro ili uopće ne čuje.',
                        'gluhonijem': ' Gluhonijem je koji je gluh i nijem.',
                        'gluhoslijep': ' Gluhoslijep je koji je gluh i sljep.',
                        'glumac': ' Glumac je osoba bez obzira na spol ili muška osoba koja glumi, tumači koju ulogu u kazalištu, na filmu ili televiziji.',
                        'glumački': ' Glumački je koji se odnosi na glumce i glumu.',
                        'glumčev': ' Glumčev je koji pripada glumcu.',
                        'glumica': ' Glumica je ženska osoba koja glumi, tumači koju ulogu u kazalištu, na filmu ili televiziji.',
                        'glumičin': ' Glumičin je koji pripada glumici.',
                        'glup': ' Glup je koji koji sporo i teško shvaća, koji se ne odlikuje velikom inteligencijom ili mogućnošću prosudbe.',
                        'glupo': ' Glupo je tako da ne pokazuje veliku inteligenciju ili mogućnost prosudbe.',
                        'glupost': ' Glupost je nerazuman ili besmislen postupak ili način izražavanja.',
                        'gljiva': ' Gljive su carstvo eukariotskih višestaničnih organizama s jezgrom i organelima koji se hrane heterotrofno, a razmnožavaju spolno i nespolno, imaju osobine i biljaka i životinja.',
                        'gmaz': ' Gmazovi su razred prvih kopnenih kralježnjaka koji imaju tvrdu kožu prekrivenu ljuskama, nestalnu tjelesnu temperaturu, dišu plućima, kreću se gmižući, polažu jaja ili rađaju žive mlade.',
                        'gnijezdo': ' Gnijezdo je nastamba koju ptice grade od slame, lišća ili trave, u koju polažu jaja i u kojoj podižu mlade.',
                        'god': ' God označuje neodređenu osobu, predmet, mjesto, vrijeme, način, okolnosti, količinu itd.',
                        'god.': ' God. je kratica za godinu.',
                        'godina': ' Godina je razdoblje od dvanaest mjeseci, vrijeme u kojmu Zemlja obiđe oko Sunca, traje od 1. siječnja do 31. prosinca.',
                        'godišnji': ' Godišnji je koji se odnosi na godinu. ',
                        'godišnjica': ' Dan na koji se u prošlosti dogodio koji događaj. ',
                        'gojzerica': ' Gojzerice su okovane cipele koje nose skijaši i planinari.',
                        'gol': ' Gol je koji nema na sebi odjeću.',
                        'gol': ' Gol je konstrukcija koja se sastoji od dvaju kovinskih stupova, prečke i mreže, dio sportskoga igrališta za određeni sport.',
                        'golub': ' Golub je ptica male glave i kratkoga vrata, obično sivoplave boje, često živi u gradovima.',
                        'gomolj': ' Gomolj je zadebljali podzemni dio stabljike bogat hranjivim tvarima koji služi za razmnožavanje i kao spremište hrane.',
                        'gora': ' Gora je prirodna uzvisina od 500 do 1000 m nadmorske visine obrasla šumom.',
                        'gorak': ' Gorak je koji ima neugodan okus, u kojemu nema šećera.',
                        'goranski': ' Goranski je koji se odnosi na Gorski kotar i Gorane.',
                        'gore': ' Gore znači na mjestu ili na mjesto koje je iznad drugoga ili više od koga ili čega.',
                        'goriti': ' Goriti znači biti zahvaćen plamenom.',
                        'gorivo': ' Gorivo je tvar koja izgaranjem oslobađa energiju potrebnu za grijanje ili pogon strojeva, npr. drvo, ugljen, benzin.',
                        'gorjeti': ' Gorjeti znači biti zahvaćen plamenom.',
                        'gornji': ' Gornji je koji se nalazi iznad čega ili na višemu mjestu od čega drugoga.',
                        'gospa': ' Gospa je naslov kojim se oslovljava odrasla ili udana žena.',
                        'gospićki': ' Gospićki je koji se odnosi na Gospić i Gospićane.',
                        'gospoda': ' Gospoda su skupina muškaraca.',
                        'gospodar': ' Gospodar je muška osoba ili osoba bez obzira na spol koja vlada, zapovijeda, drži u vlasništvu ili pod nadzorom ljude, predmete, imovinu i sl.',
                        'gospodarev': ' Gospodarev je koji pripada gospodaru, osobi koja vlada, zapovijeda, drži u vlasništvu ili pod nadzorom ljude, predmete, imovinu i sl.',
                        'gospodarica': ' Gospodarica je ženska osoba koja vlada, zapovijeda, drži u vlasništvu ili pod nadzorom ljude, predmete, imovinu i sl.',
                        'gospodaričin': ' Gospodaričin je koji pripada gospodarici, ženskoj osobi koja vlada, zapovijeda, drži u vlasništvu ili pod nadzorom ljude, predmete, imovinu i sl.',
                        'gospodariti': ' Gospodariti čime znači biti gospodar, vladati, zapovijedati, upravljati, držati u vlasti ili pod nadzorom.',
                        'gospodarov': ' Gospodarov je koji pripada gospodaru, osobi koja vlada, zapovijeda, drži u vlasništvu ili pod nadzorom ljude, predmete, imovinu i sl.',
                        'gospodarski': ' Gospodarski je koji se odnosi na gospodarstvo.',
                        'gospodarstvo': ' Gospodarstvo je zemljišni posjed.',
                        'gospodin': ' Gospodin je odrastao muškarac.',
                        'gospođa': ' Gospođa je odrasla žena.',
                        'gospođica': ' Gospođica je mlada žena.',
                        'gost': ' Gost je osoba koja posjećuje koga ili što.',
                        'gostiona': ' Gostiona je ugostiteljski objekt u kojemu se gostima nudi pripremljena hrana, u pravilu jednostavnija i karakteristična za područje na kojemu se nalazi.',
                        'gostionica': ' Gostionica je ugostiteljski objekt u kojemu se gostima nudi pripremljena hrana, u pravilu jednostavnija i karakteristična za područje na kojemu se nalazi.',
                        'gošća': ' Gošća je žena koja posjećuje koga ili što.',
                        'gotov': ' Gotov je koji je dovršio kakvu obvezu ili zadaću i može početi raditi što drugo ili krenuti kamo.',
                        'gotovo': ' Gotovo znači da malo nedostaje da se što dogodi.',
                        'govedina': ' Govedina je goveđe meso. ',
                        'govedo': ' Goveda su skupina velikih i tromih papkara iz porodice šupljorožaca.',
                        'govedski': ' Govedski je koji se odnosi na goveda.',
                        'goveđi': ' Goveđi je koji se odnosi na govedinu.',
                        'govor': ' Govor je sposobnost artikuliranja slogova, riječi i rečenica te komunikacije s pomoću njih.',
                        'govorenje': ' Govorenje je sposobnost artikuliranja slogova, riječi i rečenica te komunikacije s pomoću njih.',
                        'govoriti': ' Govoriti znači izražavati ili priopćivati što govorom.',
                        'govorni': ' Govorni je koji se odnosi na govor, sposobnost artikuliranja slogova, riječi i rečenica te komunikacije s pomoću njih.',
                        'govornica': ' Govornica je žena koja govori ili drži govor.',
                        'govornica': ' Govornica je mjesto s kojega se drži govor.',
                        'govornički': ' Govornički je koji se odnosi na govornike.',
                        'govornik': ' Govornik je osoba koja govori ili drži govor.',
                        'gozba': ' Gozba je bogat, obilan svečani obrok priređen u čiju čast ili u povodu kakva važnog događaja.',
                        'grabilica': ' Grabilica je oruđe ili stroj za grabljenje.',
                        'grablje': ' Grablje su oruđe sa zupcima za skupljanje pokošene trave i uvela lišća ili ravnanje zemlje.',
                        'gračački': ' Gračački je koji se odnosi na Gračac i Gračane.',
                        'grački': ' Grački je koji se odnosi na Graz i Gračane.',
                        'grad': ' Grad je gusto izgrađeno veće naselje u kojemu većina zaposlenoga stanovništva radi u nepoljoprivrednim djelatnostima te pruža usluge i stanovništvu širega prostora.',
                        'grad': ' Grad je mjerna jedinica za kut (ᵒ).',
                        'gradacija': ' Gradacija je figura koja nastaje izborom riječi, slika ili misli kojim se postiže postupno pojačavanje ili slabljenje početne predodžbe ili misli.',
                        'gradački': ' Gradački je koji se odnosi na Gradac i Gračane.',
                        'gradilište': ' Gradilište je zemljište na kojemu se što gradi ili koje je predviđeno za gradnju.',
                        'gradišćanski': ' Gradišćanski je koji se odnosi na Gradišće i Gradišćance.',
                        'graditi': ' Graditi znači stvarati građevinu kopanjem i postavljanjem temelja, zidanjem te, ovisno o vrsti građevine, stavljanjem pod krov.',
                        'gradivo': ' Gradivo je ono od čega je što napravljeno.',
                        'gradnja': ' Gradnja je djelatnost u kojoj se što gradi, proces u kojemu se što gradi.',
                        'gradonačelnik': ' Gradonačelnik je osoba na čelu gradske uprave, osoba koja upravlja gradom.',
                        'gradski': ' Gradski je koji se odnosi na grad.',
                        'građanin': ' Građanin je osoba bez obzira na spol ili muška osoba koja živi u gradu, stanovnik grada.',
                        'građevina': ' Građevina je objekt s temeljima, zidovima i krovom.',
                        'grafoskop': ' Grafoskop je uređaj koji na zid, platno ili ploču projicira sliku s prozirne folije.',
                        'grah': ' Grah je jednogodišnja zeljasta povrtnica iz porodice leptirnjača čiji je plod mahuna.',
                        'graknuti': ' Graknuti znači oglasiti se glasom koji podsjeća na grak-grak.',
                        'graktati': ' Graktati znači glasati se glasom koji podsjeća na grak-grak.',
                        'gram': ' Gram je mjerna jedinica za masu, tisućiti dio kilograma (g).',
                        'gramatički': ' Gramatički je koji se odnosi na gramatiku, sustav pravila. ',
                        'gramatika': ' Gramatika je jezikoslovna grana koja utvrđuje i/ili propisuje pravila na fonološkoj, morfološkoj, tvorbenoj i sintaktičkoj razini. ',
                        'gramofon': ' Gramofon je uređaj koji omogućuje slušanje zvukova snimljenih na posebnoj vrsti ploča.',
                        'gramziv': ' Gramziv je koji pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                        'gramzivo': ' Gramzivo je tako da odražava da tko pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                        'gramzivost': ' Gramzivost je osobina onoga koji je gramziv ili svojstvo onoga što je gramzivo.',
                        'grana': ' Grana je dio stabla koji raste iz debla ili stabljike grma.',
                        'granica': ' Granica je crta ili pojas koji razdvajaju države, područja, posjede, imanja i sl.',
                        'grašak': ' Grašak je jednogodišnja zeljasta povrtna biljka iz porodice leptirnjača čiji je plod mahuna.',
                        'grb': ' Grb je simbol plemićkih i vladarskih porodica, gradova, pokrajina i država naslikan obično u obliku štita.',
                        'grčki': ' Grčki je koji se odnosi na Grčku i Grke.',
                        'greda': ' Greda je dugačak konstrukcijski element od drva, čelika ili betona koji povezuje ili nosi težinu građevine ili kojega njezina dijela.',
                        'grejp': ' Grejp je vazdazelena suptropska voćka velika okruglasta žutoga ili narančastoga ploda.',
                        'grenlandski': ' Grenlandski je koji se odnosi na Grenland i Grenlanđane.',
                        'grepsti': ' Grepsti što znači strugati noktima, pandžama ili čime oštrim, skidati što s površine kakva predmeta.',
                        'grgljati': ' Grgljati znači ispirati usta i grlo zabačene glave kao da se izgovara 
                        ',
                        'grgoljiti': ' Grgoljiti znači proizvoditi ugodan šum vode koja teče ili valova.',
                        'grijač': ' Grijač je uređaj ili dio uređaja za zagrijavanje.',
                        'grijalica': ' Grijalica je uređaj za zagrijavanje zatvorenih prostorija.',
                        'grijati': ' Grijati znači zračiti iz sebe toplinu.',
                        'grijeh': ' Grijeh je čin suprotan moralnoj ili vjerskoj normi.',
                        'gripa': ' Gripa je zarazna virusna bolest dišnih putova.',
                        'grliti': ' Grliti koga znači obujmljivati rukama i iskazivati nježnost.',
                        'grlo': ' Grlo je prednja strana vrata.',
                        'grm': ' Grm je  drvenasta niska biljka bez debla s više stabljika koje oblikuju granje.',
                        'grmljavina': ' Grmljavina je prirodna pojava, nevrijeme koje prati munja i prodoran zvuk ili prasak groma.',
                        'grob': ' Grob je jama u koju se polaže lijes i humak nad njom.',
                        'groblje': ' Groblje je uređeni prostor na kojemu se nalaze grobovi.',
                        'grof': ' Grof je najviši muški plemićki naslov.',
                        'groktati': ' Groktati znači glasati se glasom koji podsjeća na gro-gro.',
                        'grom': ' Grom je naglo širenje zraka zagrijanoga munjom praćeno bljeskom, praskom i tutnjavom.',
                        'gromobran': ' Gromobran je naprava za zaštitu od udara groma.',
                        'groteska': ' Groteska je prikaz osobe, predmeta ili situacije u komičnome, izobličenome, neprirodnome smislu.',
                        'grozd': ' Grozd je cvat vinove loze koji se sastoji od sitnih plodova, bobica na peteljci.',
                        'grožđe': ' Grožđe je plod vinove loze, sočne bobice koje rastu na peteljci.',
                        'grub': ' Grub je koji koji provodi nasilje ili je sklon nasilničkomu ponašanju.',
                        'grubišnopoljski': ' Grubišnopoljski je koji se odnosi na Grubišno Polje i Grubišnopoljčane.',
                        'grubo': ' Grubo je tako da ne odražava blagost ili brižnost, bez razumijevanja i suosjećanja.',
                        'grubost': ' Grubost je osobina onoga koji je grub, koji je sklon nasilničkomu ponašanju ili svojstvo onoga što odražava sklonost nasilničkomu ponašanju.',
                        'grudnjak': ' Grudnjak je žensko donje rublje koje prekriva grudi.',
                        'grudski': ' Grudski je koji se odnosi na Grude i Gruđane.',
                        'grupa': ' Grupa je veći ili manji skup ljudi, predmeta ili pojava.',
                        'gruzijski': ' Gruzijski je koji se odnosi na Gruziju i Gruzijce.',
                        'guba': ' Guba je zarazna kožna bolest koja prouzročuje propadanje tkiva.',
                        'gubiti': ' Gubiti znači ostajati bez koga ili čega.',
                        'gugutati': ' Gugutati znači glasati se glasom koji podsjeća na gu-gu.',
                        'gujavica': ' Gujavica je maločetinaš dvospolac tijela sastavljenoga od velikoga broja kolutića koji živi u tlu, hrani se mrtvom organskom tvari i prozračuje tlo.',
                        'gukati': ' Gukati znači glasati se glasom koji podsjeća na gu-gu.',
                        'gulaš': ' Gulaš jelo od kuhanoga mesa, krumpira ili tjestenine i začina.',
                        'guma': ' Guma je elastična tvar koja služi za proizvodnju mnogih predmeta.',
                        'gumica': ' Gumica je mali komad gume kojim se briše trag olovke na papiru.',
                        'gunđati': ' Gunđati znači govoriti što nerazgovijetno i ispod glasa.',
                        'gurati': ' Gurati znači upirući pomicati s jednoga mjesta na drugo.',
                        'gusar': ' Gusar je pripadnik skupine pomorskih pljačkaša koji napadaju i pljačkaju brodove.',
                        'gusjenica': ' Gusjenica je ličinka leptira i nekih drugih kukaca, razvojni stupanj preobrazbe tijekom kojega se ličinka neprestano hrani, često mladim lišćem.',
                        'gusji': ' Gusji je koji se odnosi na guske.',
                        'guska': ' Guska je ptica močvarica duga vrata koja se uzgaja i kao domaća životinja, pripada porodici pataka.',
                        'gust': ' Gust je koji je sastavljen od velike količine zbijenih dijelova ili čestica.',
                        'gusto': ' Gusto znači tako da je razmak među dijelovima ili česticama malen.',
                        'gustoća': ' Gustoća je kvocijent mase i obujma.',
                        'gušavost': ' Gušavost je bolest štitnjače u obliku izrasline ili otekline na vratu koja nastaje kao posljedica njezina nepravilna rada.',
                        'guščetina': ' Guščetina je guščje meso.',
                        'guščji': ' Guščji je koji se odnosi na guske.',
                        'gušter': ' Gušteri su skupina ljuskaša koji najčešće žive na tlu, na niskim stijenama ili na drveću, uglavnom imaju dva para nogu i dug rep.',
                        'gutati': ' Gutati znači pokretima jezika, vilice i mišića potiskivati zalogaje ili gutljaje kroz jednjak u želudac.',
                        'gužva': ' Gužva je mnoštvo ljudi, vozila ili predmeta na malome prostoru.',
                        'gvatemalski ': ' Gvatemalski je koji se odnosi na Gvatemalu i Gvatemalce.',
                        'gvinejski': ' Gvinejski je koji se odnosi na Gvineju i Gvinejce.',
                        'habit': ' Habit je odjeća katoličkih svećenika, redovnika i redovnica.',
                        'haiku': ' Haiku je stalni oblik u japanskoj poeziji, trostih sa stihovima od pet, sedam i ponovno pet slogova.',
                        'haitski': ' Haitski je koji se odnosi na Haiti i Haićane.',
                        'hajde': ' Hajde je usklik kojim se potiče koga na kretanje ili na djelovanje. ',
                        'halo': ' Usklikom 
                        ',
                        'halja': ' Halja je haljina širokoga kroja.',
                        'haljina': ' Haljina je jednodijelni ženski odjevni predmet koji prekriva trup, a djelomično i noge.',
                        'hamburger': ' Hamburger je sendvič napravljen od okrugloga peciva koji u sebi sadržava mljeveno meso.',
                        'hamburški': ' Hamburški je koji se odnosi na Hamburg i Hamburžane.',
                        'Hanuka': ' Hanuka je židovski osmodnevni blagdan koji se slavi sredinom prosinca.',
                        'hardver': ' Hardver su svi fizički dijelovi računala.',
                        'harfa': ' Harfa je trzaće žičano glazbalo sa žicama nejednake duljine koje su napete unutar trokutastoga okvira i povezane pedalama.',
                        'harfist': ' Harfist je osoba bez obzira na spol ili muška osoba koja svira harfu.',
                        'harfistica': ' Harfistica je ženska osoba koja svira harfu.',
                        'harfističin': ' Harfističin je koji pripada harfistici.',
                        'harfistički': ' Harfistički je koji se odnosi na harfe i harfiste.',
                        'harfistov': ' Harfistov je koji pripada harfistu.',
                        'harmonika': ' Harmonika je glazbalo s tipkama i mijehom koje se drži na prsima.',
                        'harmonikaš': ' Harmonikaš je osoba bez obzira na spol ili muška osoba koja svira harmoniku.',
                        'harmonikašev': ' Harmonikašev je koji pripada harmonikašu.',
                        'harmonikašica': ' Harmonikašica je ženska osoba koja svira harmoniku.',
                        'harmonikašičin': ' Harmonikašičin je koji pripada harmonikašici.',
                        'harmonikaški': ' Harmonikaški je koji se odnosi na harmonike i harmonikaše.',
                        'haški': ' Haški je koji se odnosi na Haag i Hažane.',
                        'hej': '
                        ',
                        'heksadekadski': ' Heksadekadski je koji se odnosi na brojevni sustav koji ima bazu šesnaest.',
                        'heksametar': ' Heksametar je stih od šest stopa, najpoznatiji stih antičke književnosti.',
                        'hektar': ' Hektar je iznimno dopuštena mjerna jedinica za površinu zemljišta, deset tisuća kvadratnih metara ili sto ara (ha).',
                        'hektolitar': ' Hektolitar je iznimno dopuštena mjerna jedinica za obujam tekućina, sto litara (hl).',
                        'hektopaskal': ' Hektopaskal je mjerna jedinica za tlak, sto paskala (hPa).',
                        'helij': ' Helij je kemijski element (He), bezbojni plemeniti plin bez okusa i mirisa, najlakši od plinova, u većim ga količinama ima na Suncu i na nekim zvijezdama, upotrebljava se za punjenje zračnih balona.',
                        'helikopter': ' Helikopter je letjelica bez krila s propelerom koji joj omogućuje da se uzdiže uspravno u zrak, leti na mjestu i u željenome smjeru.',
                        'hemofilija': ' Hemofilija je nasljedna bolest koju prenose žene, a obolijevaju muškarci, koja se očituje u nemogućnosti zgrušavanja krvi.',
                        'henri': ' Henri je mjerna jedinica za samoindukciju (H).',
                        'herc': ' Herc je mjerna jedinica za frekvenciju (Hz).',
                        'herceg': ' Herceg je naslov muškoga vladara odmah iza kralja srednjovjekovnoj Hrvatskoj.',
                        'hercegnovljanski': ' Hercegnovljanski je koji se odnosi na Herceg-Novi i Hercegnovljane. ',
                        'hercegovački': ' Hercegovački je koji se odnosi na Hercegovinu i Hercegovce.',
                        'herpes': ' Herpes je zarazna virusna bolest u obliku mjehurića na mjestu gdje sluz prelazi u kožu.',
                        'hidrofor': ' Hidrofor je električni uređaj za crpljenje vode iz zdenca.',
                        'hidrogliser': ' Hidrogliser je plovilo s krilima na podvodnome dijelu trupa, koja omogućuju da se trup pri određenoj brzini izdigne iznad površine vode',
                        'himna': ' Himna je u staroj grčkoj književnosti svečana pjesma u slavu bogova i heroja, danas time nazivamo i svaku pjesmu povećenu nekome ili nečemu što se smatra vrijednim najvećeg poštovanja i divljenja.',
                        'hiperbola': ' Hiperbola je pjesnička figura preuveličavanja, pretjerivanja u opisu likova, predmeta ili radnje.',
                        'hiperveza': ' Hiperveza je sličica, riječi ili izraz u dokumentu na internetu koje taj dokument povezuju s kojim drugim dokumentom na internetu.',
                        'hirošimski': ' Hirošimski je koji se odnosi na Hirošimu i Hirošimljane.',
                        'hitan': ' Hitan je koji treba dati ili dostaviti u najkraćemu roku.',
                        'hitar': ' Hitar je koji odražava spretnost i brzinu u kretanju ili djelovanju.',
                        'hitno': ' Hitno je tako da se mora obaviti u najkražemu roku, što prije.',
                        'hitro': ' Hitro je tako da odražava spretnost i brzinu u kretanju ili djelovanju.',
                        'hitrost': ' Hitrost je osobina onoga koji je hitar ili svojstvo onoga što je hitro.',
                        'hlače': ' Hlače su odjevni predmet koji pokriva tijelo ispod pasa i ima nogavice.',
                        'hlad': ' Hlad je mjesto u sjeni, prostor zaklonjen od izravne Sunčeve svjetlosti.',
                        'hladan': ' Hladan je koji koji ima nisku temperaturu, koji izaziva osjet hladnoće.',
                        'hladiti': ' Hladiti znači činiti što hladnim ili hladnijim.',
                        'hladno': ' Hladno je pri niskoj temperaturi.',
                        'hladnoća': ' Hladnoća je stanje prouzročeno niskim temperaturama zraka.',
                        'hladnjak': ' Hladnjak je izolirani ormar s uređajem za hlađenje i čuvanje namirnica, pića, lijekova te za proizvodnju leda za kućnu uporabu.',
                        'hladovina': ' Hladovina je mjesto u sjeni, prostor zaklonjen od izravne Sunčeve svjetlosti.',
                        'hlebinski': ' Hlebinski je koji se odnosi na Hlebine i Hlebince.',
                        'hobi': ' Hobi je aktivnost kojom se tko iz zadovoljstva bavi u slobodno vrijeme.',
                        'hobotnica': ' Hobotnica je jestivi glavonožac koji ima osam krakova i živi na morskome dnu.',
                        'hodalica': ' Hodalica je ortopedsko pomagalo za hodanje.',
                        'hodati': ' Hodati znači kretati se se tako da jedna noga uvijek bude na tlu.',
                        'hodnik': ' Hodnik je prolaz u zatvorenome prostoru iz kojega se ulazi u druge prostorije.',
                        'hodža': ' Hodža je naslov muslimanskoga vjerskog službenika.',
                        'hongkonški': ' Hongkonški je koji se odnosi na Hong Kong i Hongkonžane.',
                        'hotel': ' Hotel je ugostiteljski objekt za privremeni dnevni i noćni boravak gostiju.',
                        'hrabar': ' Hrabar je koji ne osjeća strah, koji se ne boji upustiti u što.',
                        'hrabro': ' Hrabro je tako da odražava čiju hrabrost.',
                        'hrabrost': ' Hrabrost je osobina onoga koji je hrabar.',
                        'hrana': ' Hrana su sve tvari koje živi organizam, čovjek, životinja ili biljka unose u sebe da dobiju energiju i održe se na životu.',
                        'hraniti': ' Hraniti znači davati komu hranu.',
                        'hrast': ' Hrastovi su rod visokih listopadnih bjelogoričnih stabala iz porodice bukava, plod im je žir.',
                        'hrastov': ' Hrastov je koji pripada hrastu.',
                        'hrastovina': ' Hrastovina je hrastovo drvo kao građa.',
                        'hrčak': ' Hrčak je glodavac zdepasta tijela i kratka dlakava repa.',
                        'hren': ' Hren je zeljasta višegodišnja biljka oštra i ljuta okusa.',
                        'hrid': ' Hrid je istaknuta stijena iznad morske razine.',
                        'hripati': ' Hripati znači glasno i teško disati proizvodeći šum iz pluća i bronhija.',
                        'hripavac': ' Hripavac je zarazna dječja bolest koja se očituje grčevitim i glasnim kašljem, a prenosi se kapljično.',
                        'hroptati': ' Hroptati znači glasno, teško disati zbog zdravstvenih problema ili fizičkoga napora.',
                        'hrpa': ' Hrpa je sipka tvar nagomilana na jednome mjestu ili mnogo istovrsnih predmeta nabacanih ili složenih u stožasti oblik.',
                        'hrskati': ' Hrskati što znači jesti što lomljivo i pritom proizvoditi zvuk.',
                        'hrvatački': ' Hrvatački je koji se odnosi na Hrvace i Hrvatačane.',
                        'hrvatski': ' Hrvatski je koji se odnosi na Hrvatsku i Hrvate.',
                        'hrzati': ' Hrzati znači glasati se glasom koji podsjeća na hrr-hrr.',
                        'htjeti': ' Htjeti je pomoćni glagol koji u nenaglašenome obliku sudjeluje u tvorbi futura I.',
                        'hučati': ' Hučati znači proizvoditi huku.',
                        'hučiti': ' Hučiti znači proizvoditi huku.',
                        'hujati': ' Hujati znači proizvoditi huku.',
                        'hujiti': ' Hujiti znači proizvoditi huku.',
                        'huka': ' Huka je jak šum koji nastaje pri brzome gibanju zraka.',
                        'hukati': ' Hukati znači proizvoditi huku.',
                        'huknuti': ' Huknuti znači oglasiti se glasom koji podsjeća na 
                        ',
                        'huktati': ' Huktati znači proizvoditi huku.',
                        'hulahopke': ' Hulahopke su čarape koje prekrivaju cijelu nogu i završavaju gaćicama.',
                        'humor': ' Humor je smisao i sposobnost da se uoči smiješna strana kojega događaja, postupka, situacije i sl.',
                        'humoreska': ' Humoreska je vrsta novele ili kratke priče, jednostavne obrade s humorom koji prevladava na svim razinama oblikovanja.',
                        'humorističan': ' Humorističan je koji je prožet humorom.',
                        'hungarizam': ' Hungarizam je riječ ili sveza mađarskoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                        'hunjavica': ' Hunjavica je virusna upala nosne i ždrijelne sluznice.',
                        'hura': ' Hura je povik kojim se izriče oduševljenje i radost.',
                        'hutovski': ' Hutovski je koji se odnosi na Hutovo i Hutovce.',
                        'hvala': ' Hvala je pristojan izraz zahvalnosti.',
                        'hvalisav': ' Hvalisav je koji voli isticati sama sebe, svoje sposobnosti i zasluge.',
                        'hvalisavo': ' Hvalisavo je tako da odražava isticanje sama sebe, čijih sposobnosti i zasluga.',
                        'hvalisavost': ' Hvalisavost je osobina onoga koji je hvalisav ili svojstvo onoga što je hvalisavo.',
                        'hvalospjev': ' Hvalospjev je lirska pjesnička književna vrsta koja obuhvaća svečane pjesme kojima se slavi ili veliča koja osoba, božanstvo, priroda i sl.',
                        'hvarski': ' Hvarski je koji se odnosi na Hvar i Hvarane.',
                        'hvat': ' Hvat je mjerna jedinica za duljinu.',
                        'hvataljka': ' Hvataljka je naprava kojom se što hvata.',
                        'iako': ' Iako uvodi zavisnu surečenicu u stvarnoj dopusnoj rečenici. ',
                        'ičiji': ' Ičiji označuje pripadanje barem jednomu nepoznatom posjedovatelju.',
                        'ići': ' Ići znači kretati se kamo ili kuda.',
                        'idealist': ' Idealist je osoba bez obzira na spol ili muška osoba koja vjeruje u ideale.',
                        'idealistica': ' Idealistica je ženska osoba koja vjeruje u ideale.',
                        'idealističin': ' Idealističin je koji pripada idealistici.',
                        'idealistički': ' Idealistički je koji se odnosi na idealizam, vjerovanje u ideale, i idealiste, osobe koje vjeruju u ideale.',
                        'idealistov': ' Idealistov je koji pripada idealistu.',
                        'idealizam': ' Idealizam je vjerovanje u ideale.',
                        'ideja': ' Ideja je misao, plan ili naum do kojega se dolazi razmišljanjem.',
                        'idući': ' Idući je koji dolazi, slijedi za ovim.',
                        'igla': ' Igla je tanka mala kovinska šipka s oštrim vrhom na jednome, a malom rupom na drugome kraju u koju se uvlači konac.',
                        'ignorirati': ' Ignorirati znači ne pridavati komu ili čemu nikakvu pozornost, ponašati se kao da koga ili čega nema.',
                        'igra': ' Igra je aktivnost u kojoj se vrijeme provodi u zabavi.',
                        'igrač': ' Igrač je osoba bez obzira na spol ili muška osoba koja što igra ili sudjeluje u kakvoj igri.',
                        'igračev': ' Igračev je koji pripada igraču.',
                        'igračica': ' Igračica je ženska osoba koja što igra ili sudjeluje u kakvoj igri.',
                        'igračičin': ' Igračičin je koji pripada igračici.',
                        'igračka': ' Igračka je predmet namijenjen igri ili predmet kojim se tko igra.',
                        'igrački': ' Igrački je koji se odnosi na igrače.',
                        'igralište': ' Igralište je otvoreni prostor za sportsku igru.',
                        'igraonica': ' Igraonica je zatvoren prostor u kojemu se organizira zabava i igra za djecu.',
                        'igrati': ' Igrati znači sudjelovati u igri.',
                        'igrifikacija': ' Igrifikacija je proces ubacivanja igara ili različitih elemenata igara u svakodnevne djelatnosti kako bi ih se učinilo zabavnijima, a njihovo izvođenje lakšim.',
                        'ijedan': ' Ijedan označuje uključivanje barem jednoga predmeta ili osobe.',
                        'ikad(a)': ' Ikad(a) znači u bilo koje neodređeno vrijeme, bilo kad, ma kad.',
                        'ikakav': ' Ikakav označuje uključivanje barem jednoga predmeta ili osobe bez obzira na svojstva ili osobine, bilo kakav.',
                        'ikoji': ' Ikoji označuje uključivanje barem jednoga predmeta ili osobe, bilo koji.',
                        'ikona': ' Ikona je sakralna slika u kršćanstvu.',
                        'ili': ' Ili povezuje riječi i označuje mogućnost izbora.',
                        'iločki': ' Iločki je koji se odnosi na Ilok i Iločane.',
                        'iluzija': ' Iluzija je obmana osjetila, netočno zapažanje.',
                        'iluzionist': ' Iluzionist je muška osoba ili osoba bez obzira na spol koja s pomoću trikova izvodi različite vještine koje se čine nevjerojatnima.',
                        'iluzionistica': ' Iluzionistica je ženska osoba koja s pomoću trikova izvodi različite vještine koje se čine nevjerojatnima.',
                        'iluzionističin': ' Iluzionističin je koji pripada iluzionistici.',
                        'imam': ' Imam je muslimanski vjerski službenik koji predvodi skupne molitve.',
                        'imati': ' Imati što znači biti vlasnikom kakve imovine ili vrijednosti.',
                        'ime': ' Ime je riječ  ili  sveza  kojom  se  imenuje  pojedinačno  biće,  stvar,  pojava  ili zemljopisno područje.',
                        'imendan': ' Imendan je dan u godini kad se slavi krsno ime čovjeka dobiveno prema kojemu svetcu.',
                        'imenica': ' Imenica je promjenjiva riječ kojom se označuju bića, stvari ili pojave, mijenja se po padežima i brojevima, a ima svoj rod.',
                        'imenički': ' Imenički je koji se odnosi na imenice.',
                        'imenik': ' Imenik je popis imena po kakvu, obično abecednome redu, uz koja se nalaze i drugi podatci, npr. adresa i sl.',
                        'imenski': ' Imenski je koji se odnosi na imena.',
                        'imotski': ' Imotski je koji se odnosi na Imotski i Imoćane.',
                        'imperativ': ' Imperativ je glagolski način kojim se izriče zapovijed, poticaj ili molba. ',
                        'imperativni': ' Imperativni je koji se odnosi na imperativ, zapovjedni način. ',
                        'imperfekt': ' Imperfekt je prošlo nesvršeno glagolsko vrijeme.',
                        'imperfektni': ' Imperfektni je koji se odnosi na imperfekt. ',
                        'inače': ' Inače uvodi dodatnu obavijest.',
                        'indijski': ' Indijski je koji se odnosi na Indiju i Indijce.',
                        'indirektan': ' Indirektan je koji je duži ili složeniji, koji okoliša, zaobilazi.',
                        'indonezijski': ' Indonezijski je koji se odnosi na Indoneziju i Indonezijce.',
                        'induktor': ' Induktor je uređaj ili dio stroja koji stvara struju visokoga napona.',
                        'infekcija': ' Infekcija je prodor, naseljavanje i umnožavanje mikroorganizama u tkivima, na tkivnim površinama ili u tjelesnim prostorima višega organizma.',
                        'infinitiv': ' Infinitiv je neodređeni glagolski oblik u kojemu se glagoli obično navodi u rječniku i s pomoću kojega se oblikuje futur I. ',
                        'infinitivni': ' Infinitivni je koji se odnosi na infinitiv.',
                        'infodemija': ' informacijsko preobilje koje se u prvome redu odnosi na širenje lažnih vijesti na internetu ili na društvenim mrežama.',
                        'informacija': ' Informacija je skup podataka koji imaju određeno značenje.',
                        'informatičar': ' Informatičar je odrasla osoba bez obzira na spol ili muškarac koji je završio studij informatike te se bavi određenom granom informatike.',
                        'informatičarev': ' Informatičarev je koji pripada informatičaru.',
                        'informatičarka': ' Informatičarka je žena koja je završila studij informatike te se bavi određenom granom informatike.',
                        'informatičarov': ' Informatičarov je koji pripada informatičaru.',
                        'informatički': ' Informatički je koji se odnosi na informatiku.',
                        'informatika': ' Informatika je znanost koja se bavi proučavanjem rada s podatcima na računalima kako bi se oni mogli brže i djelotvornije obraditi.',
                        'informirati': ' Informirati znači prenijeti/prenositi komu kakvu vijest ili obavijest.',
                        'inicijal': ' Inicijal je početno slovo imena ili prezimena ',
                        'inkubacija': ' Inkubacija je vrijeme od trenutka zaraze virusom do prvih znakova bolesti.',
                        'inkubator': ' Inkubator je uređaj sa zatvorenim prostorom u koji se automatski dovodi kisik, a odvodi ugljikov dioksid i u kojemu se održava stalna temperatura i vlažnost; služi za njegovanje nedonoščadi, umjetno izvaljivanje peradi ili čuvanje bakterijskih kultura.',
                        'inozemstvo': ' Inozemstvo su tuđe ili strane zemlje.',
                        'instalirati': ' Instalirati znači postaviti/postavljati kakav uređaj ili dio stroja na odgovarajuće mjesto i pripremiti ga za uporabu.',
                        'institucija': ' Institucija je organizirano državno tijelo koje se bavi javnim poslovima.',
                        'instrument': ' Instrument je pribor za rad u laboratoriju, ambulanti ili bolnici.',
                        'instrumental': ' Instrumental je padež koji odgovara na pitanja 
                        ',
                        'instrumentalni': ' Instrumentalni je koji se odnosi na instrumental (padež). ',
                        'interes': ' Interes je zamisao o onome što treba učiniti kako bi se postigao određeni cilj.',
                        'interesantan': ' Interesantan je koji izaziva zanimanje.',
                        'interesirati': ' Interesirati znači biti predmetom čijega interesa i želje da se što dozna, nauči, bolje upozna ili sudjeluje u čemu.',
                        'internet': ' Internet je svjetska računalna mreža, računalna mreža kojom se povezuju korisnici računala diljem svijeta.',
                        'internetski': ' Internetski je koji se odnosi na internet.',
                        'interpretacija': ' Interpretacija je razumijevanje i tumačenje čega.',
                        'intervju': ' Intervju je razgovor novinara s kojom javnom, poznatom ili važnom osobom radi objavljivanja u medijima.',
                        'intranet': ' Intranet je privatna područna mreža koja osim interneta sadržava i privatni mrežni poslužnik te poseban sigurnosni sustav kako bi svojim korisnicima omogućila sigurnu razmjenu podataka.',
                        'invalid': ' Invalid je osoba bez obzira na spol ili muška osoba koja je trajno bolesna ili ima tjelesni nedostatak.',
                        'invalidan': ' Invalidan je koji je trajno, potpuno ili djelomično nesposoban za kakav rad zbog bolesti ili tjelesnoga nedostatka',
                        'invaliditet': ' Invaliditet je stanje onoga koji ima trajnu bolest ili trajni tjelesni nedostatak.',
                        'invalidnost': ' Invalidnost je stanje onoga koji ima trajnu bolest ili trajni tjelesni nedostatak.',
                        'invalidov': ' Invalidov je koji pripada invalidu.',
                        'invalidski': ' Invalidski je koji se odnosi na invalide. ',
                        'invalitkinja': ' Invalitkinja je ženska osoba koja je trajno bolesna ili ima tjelesni nedostatak.',
                        'invalitkinjin': ' Invalitkinjin je koji pripada invalitkinji.',
                        'invokacija': ' Invokacija je pjesnička figura ili posebni književni postupak kojim pjesnik na početku djela priziva muze ili božanstvo tražeći nadahnuće za pisanje djela.',
                        'inženjer': ' Inženjer je osoba ili muškarac koji je završio tehnički ili prirodoslovni studij i koji projektira građevinske, tehničke, strojne ili proizvodne konstrukcije i njima upravlja / obavlja nadzor nad njima (Treba li uz zanimanja koja to imaju dodavati kratice ing., prof. i sl.?)',
                        'inženjerka': ' Inženjerka je žena koja je završila tehnički ili prirodoslovni studij i koja projektira građevinske, tehničke, strojne ili proizvodne konstrukcije i njima upravlja / obavlja nadzor nad njima ',
                        'inženjerkin': ' Inženjerkin je koji pripada inženjerki. ',
                        'inženjerov': ' Inženjerov je koji pripada inženjeru.',
                        'inženjerski': ' Inženjerski je koji se odnosi na inženjere.',
                        'injekcija': ' Injekcija je ljekoviti pripravak koji se ubrizgava u tijelo s pomoću štrcaljke sa šupljom iglom.',
                        'ipak': ' Ipak označuje da što jest ili se zbiva unatoč čemu.',
                        'irački': ' Irački je koji se odnosi na Irak i Iračane.',
                        'iranski': ' Iranski je koji se odnosi na Iran i Irance.',
                        'iris': ' Iris je zelena gomoljasta biljka trajnica sabljastih listova i obično ljubičastih cvjetova.',
                        'irski': ' Irski je koji se odnosi na Irsku i Irce.',
                        'iseljenica': ' Iseljenica je žena koja se iselila iz koje države.',
                        'iseljeničin': ' Iseljeničin je koji pripada iseljenici.',
                        'iseljenički': ' Iseljenički je koji se odnosi na iseljenike.',
                        'iseljenik': ' Iseljenik je osoba koja se iselila iz koje države.',
                        'iseljenikov': ' Iseljenikov je koji pripada iseljeniku',
                        'iskaz': ' Iskaz je službeno svjedočenje o čemu.',
                        'iskaznica': ' Iskaznica je osobna isprava kojom se potvrđuje identitet, članstvo ili pripadnost.',
                        'isključiti': ' Isključiti znači zaustaviti rad kakva uređaja ili instalacije s pomoću sklopke, zaustaviti dotok energije ili staviti što izvan pogona.',
                        'isključivo': ' Isključivo znači tako da je ograničeno samo na ono što se navodi, da se isključuje svako drugo vrijeme, način, kvaliteta itd.',
                        'iskoristiti': ' Iskoristiti znači izvući iz čega vrijednost ili korist.',
                        'iskra': ' Iskra je sitna užarena čestica koja iskače iz čega što gori.',
                        'iskren': ' Iskren je koji govori i pokazuje ono što misli ili osjeća.',
                        'iskreno': ' Iskreno je tako da odražava ono što tko misli ili osjeća.',
                        'iskrenost': ' Iskrenost je osobina onoga koji je iskren ili svojstvo onoga što je iskreno.',
                        'iskustvo': ' Iskustvo je skup znanja, navika ili vještina koje se stječu životom i radom.',
                        'i sl.': ' I sl. kratica je za i slično.',
                        'islandski': ' Islandski je koji se odnosi na Island i Islanđane.',
                        'ispeći': ' Ispeći što znači pripremiti jelo pečenjem.',
                        'ispit': ' Ispit je provjera znanja i sposobnosti.',
                        'ispod': ' Ispod označuje da se tko ili što nalazi ili kreće s donje strane ili na donjoj strani čega.',
                        'isprava': ' Isprava je dokument kojim se što potvrđuje ili dokazuje.',
                        'ispravak': ' Ispravak je promjena kojom se ispravlja pogreška.',
                        'ispravan': ' Ispravan je koji nije u kvaru, koji radi kako treba.',
                        'ispraviti': ' Ispraviti znači popraviti ili ukloniti pogreške.',
                        'ispravljati': ' Ispravljati znači popravljati ili uklanjati pogreške.',
                        'ispravno': ' Ispravno znači tako da odražava da što nije u kvaru, da radi kako treba.',
                        'ispravnost': ' Ispravnost je svojstvo onoga što nije u kvaru, što radi kako treba.',
                        'ispred': ' Ispred označuje da tko ili što dospijeva s prednje strane koga ili čega.',
                        'ispričati': ' Ispričati znači izreći kakvu priču, reći sve što se zna o čemu, opisati što u cijelosti.',
                        'ispričavati': ' Ispričavati znači opravdavati čiji pogrešan postupak.',
                        'ispričnica': ' Ispričnica je pismena potvrda kojom roditelj ili liječnik opravdava izostanak djeteta iz škole.',
                        'isprika': ' Isprika je izjava kojom se izražava žaljenje zbog kakva lošega postupka ili propusta.',
                        'istaknuti': ' Istaknuti znači dati čemu posebnu važnost, usmjeriti čiju pozornost na što.',
                        'istanbulski ': ' Istanbulski je koji se odnosi na Istanbul i Istanbulčane.',
                        'istarski': ' Istarski je koji se odnosi na Istru i Istrane.',
                        'isti': ' Isti je koji je baš taj, a ne koji drugi.',
                        'isticati': ' Isticati znači davati čemu posebnu važnost, usmjeravati čiju pozornost na što.',
                        'istina': ' Istina je ono što odgovara stvarnosti, činjenicama i iskustvu, što nije izmišljeno.',
                        'istinit': ' Istinit je koji je u skladu s istinom, koji odgovara činjenicama i stvarnomu iskustvu',
                        'istinito': ' Istinito znači tako da odražava istinu i ne sadržava pogrešku, tako da odgovara činjenicama i starnomu iskustvu.',
                        'istinitost': ' Istinitost je svojstvo onoga što je istinito.',
                        'isto': ' Isto znači tako da ne odražava različitost',
                        'istočni': ' Istočni je koji se odnosi na istok.',
                        'istok': ' Istok je jedna od četiriju glavnih strana svijeta na kojoj izlazi Sunce (I).',
                        'istraživanje': ' Istraživanje je sustavno provjeravanje ili prikupljanje činjenica o onome što je slabo poznato ili nepoznato.',
                        'išta': ' Išta označuje barem nešto, bilo što, ma što, što god.',
                        'itd.': ' Kratica itd. znači '
                        i tako dalje '.',
                        'itko': ' Itko označuje uključivanje barem jedne osobe, bilo koga, ma koga, koga god.',
                        'ivančica': ' Ivančica je trajna zeljasta livadna biljka koja se uzgaja i kao ukrasna biljka.',
                        'ivanečki': ' Ivanečki je koji se odnosi na Ivanec i Ivančane.',
                        'ivanićgradski': ' Ivanićgradski je koji se odnosi na Ivanić-Grad i Ivanićane.',
                        'iza': ' Iza označuje da tko ili što dospijeva sa stražnje strane koga ili čega.',
                        'izabirati': ' Izabirati znači izdvajati koga ili što iz skupine s kojim ciljem, praviti izbor.',
                        'izabrati': ' Izabrati znači izdvojiti koga ili što iz skupine s kojim ciljem, napraviti izbor.',
                        'izbor': ' Izbor je ono iz čega se može izabirati, što je ponuđeno za biranje.',
                        'izbornički': ' Izbornički je koji se odnosi na izbornike.',
                        'izbornik': ' Izbornik je odrasla osoba bez obzira na spol ili muškarac koji trenira koju reprezentaciju.',
                        'izbornikov': ' Izbornikov je koji pripada izborniku, odrasloj osobi bez obzira na spol ili muškarcu koji trenira koju reprezentaciju.',
                        'izdajica': ' Izdajica je osoba bez obzira na spol ili muška osoba koja je prešla u neprijateljske redove.',
                        'izdajičin': ' Izdajičin je koji pripada izdajici, osobi bez obzira na spol ili muškoj osobi koja je prešla u neprijateljske redovi ili koja je iznevjerila koga ili što, koja se nije držala dogovora ili nije ispunila obećanje.',
                        'izdajnica': ' Izdajnica je ženska osoba koja je prešla u neprijateljske redove.',
                        'izdajničin': ' Izdajničin je koji pripada izdajnici.',
                        'izdajnički': ' Izdajnički je koji se odnosi na izdajnike, osobe bez obzira na spol ili muške osobe koje su prešle u neprijateljske redove.',
                        'izdajnik': ' Izdajnik je osoba bez obzira na spol ili muška osoba koja je prešla u neprijateljske redove.',
                        'izdajnikov': ' Izdajnikov je koji pripada izdajniku.',
                        'izdanje': ' Izdanje je ukupna količina objavljenih primjeraka koje knjige.',
                        'izdržljiv': ' Izdržljiv je koji može mnogo izdržati, koji tjelesno ili psihički podnosi kakav napor ili teško stanje (o čovjeku).',
                        'izdržljivo': ' Izdržljivo je tako da odražava da tko tjelesno ili psihički podnosi kakav napor ili teško stanje.',
                        'izdržljivost': ' Izdržljivost je osobina onoga koji je izdržljiv.',
                        'izgled': ' Izgled je ono što se izvana vidi, vanjski lik ili oblik.',
                        'izgledati': ' Izgledati znači biti onakvim kakvo jest po svojoj vanjštini.',
                        'izgovor': ' Izgovor je način na koji se oblikuju i izgovaraju glasovi i riječi.',
                        'izgradnja': ' Izgradnja je podizanje građevina.',
                        'izgubiti': ' Izgubiti znači ostati bez koga ili čega.',
                        'izići': ' Izići iz čega znači napustiti koji zatvoreni prostor ili ograđeno mjesto.',
                        'izići': ' Izaći iz čega znači napustiti koji zatvoreni prostor ili ograđeno mjesto.',
                        'izjava': ' Izjava je službena obavijest za javnost.',
                        'izjaviti': ' Izjaviti znači iskazati svoje mišljenje o čemu.',
                        'izlaz': ' Izlaz je prolaz kroz koji se može izići iz kojega prostora ili područja.',
                        'izlaziti': ' Izlaziti iz čega znači napuštati koji zatvoreni prostor ili ograđeno mjesto.',
                        'izlet': ' Izlet je kraći odlazak kamo radi odmora i zabave.',
                        'izložba': ' Izložba je javno prikazivanje umjetničkih djela ili različitih odabranih predmeta, biljaka i životinja.',
                        'između': ' Između označuje da se tko ili što nalazi ili kreće u prostoru koji se proteže od jednoga do drugoga predmeta ili osobe.',
                        'izmisliti': ' Izmisiti znači stvoriti maštom nešto čega nema.',
                        'izmišljati': ' Izmišljati znači stvarati maštom nešto čega nema.',
                        'iznad': ' Iznad označuje da se tko ili što nalazi ili kreće s gornje strane ili na gornjoj strani čega.',
                        'iznajmiti': ' Iznajmiti znači dati što u najam, na korištenje na određeno vrijeme uz naknadu.',
                        'iznajmljivati': ' Iznajmljivati znači davati što u najam, davati što na korištenje na određeno vrijeme uz naknadu.',
                        'iznenada': ' Iznenada je kad se ne očekuje, bez nagovještaja.',
                        'iznenaditi': ' Iznenaditi koga znači zateći koga nespremnim.',
                        'iznenađenje': ' Iznenađenje je neočekivani događaj ili doživljaj.',
                        'iznenađivati': ' Iznenađivati znači zatjecati koga nespremnim.',
                        'iznimka': ' Iznimka je ono što se izdvaja od pravila, od čega uobičajenoga.',
                        'iznos': ' Iznos je utvrđena količina novca.',
                        'iznositi': ' Iznositi znači noseći otpremati što iz zatvorenoga mjesta.',
                        'iznositi': ' Iznositi znači noseći pohabati kakav odjevni predmet ili obuću i učiniti neprikladnim za uporabu.',
                        'izolacija': ' Izolacija je izdvajanje zaraženih bolesnika iz okoline i boravak u izdvojenome bolničkom prostoru radi sprečavanja širenja zaraze',
                        'izolator': ' Izolator je tvar male ili veoma male vodljivosti.',
                        'izostanak': ' Izostanak je nedolazak na dogovoreno mjesto ili mjesto na kojemu bi tko morao biti.',
                        'izostavnik': ' Izostavnik je pravopisni znak (’ i ') koji se piše umjesto izostavljenoga slova.
                    ',
                    'izrada': ' Izrada je način na koji se što izrađuje ili proizvodi.',
                    'izraelski': ' Izraelski je koji se odnosi na Izrael i Izraelce.',
                    'izražajan': ' Izražajan je koji pokazuje čije misli ili osjećaje.',
                    'izražajno': ' Izražajno je tako da odražava isticanje kakvih obilježja.',
                    'izražajnost': ' Izražajnost je svojstvo onoga što je izražajno, koji se ističe svojim obilježjima.',
                    'izreka': ' Izreka je rečenica ili ustaljena veza riječi u kojoj je sažeto životno iskustvo ili mudrost.',
                    'izroniti': ' Izroniti što znači roneći izvaditi i iznijeti na površinu.',
                    'izumiti': ' Izumiti što znači stvoriti nov proizvod.',
                    'izuti': ' Izuti znači skinuti s nogu.',
                    'izuvati': ' Izuvati znači skidati s nogu (o obući ili čarapama).',
                    'izvan': ' Izvan označuje da se tko ili što ne nalazi u granicama čega.',
                    'izvijestiti': ' Izvijestiti znači podnijeti izvješće.',
                    'izvješćivati': ' Izvješćivati znači podnositi izvješće.',
                    'izvještavati': ' Izvješćivati znači podnositi izvješće.',
                    'izvor': ' Izvor je mjesto na kojemu tekućica izbija iz zemlje na površinu.',
                    'izvrsno': ' Izvrsno je tako da je izrazito dobro ili kvalitetno.',
                    'izvrstan': ' Izvrstan je koji je iznimno dobar ili kvalitetan.',
                    'izvući': ' Izvući znači vukući uzeti koga ili što iz čega.',
                    'jablan': ' Jablan je veoma visoko listopadno drvo uske stožaste ili valjkaste krošnje.',
                    'jabuka': ' Jabuka je voćka široke krošnje i bijelih ili ružičastih cvjetova.',
                    'jačanje': ' Jačanje je činjenje koga ili čega jačim.',
                    'jačati': ' Jačati znači činiti koga ili što jačim.',
                    'jačina': ' Jačina je osobina onoga koji je jak ili svojstvo onoga što je jako.',
                    'jadan': ' Jadan je koji je u velikome jadu ili u teškome stanju.',
                    'jadno': ' Jadno je tako da odražava da je tko je u velikome jadu ili u teškome stanju.',
                    'jaglac': ' Jaglac je trajna zeljasta biljka šumskih i travnatih područja koja raste u malim grmovima.',
                    'jagoda': ' Jagoda je niska zeljasta samonikla biljka ili uzgojena biljka iz porodice ruža.',
                    'jahati': ' Jahati znači kretati se sjedeći na leđima jahaće životinje.',
                    'jahta': ' Jahta je manji luksuzni brod za krstarenje.',
                    'jajački': ' Jajački je koji se odnosi na Jajce i Jajačane.',
                    'jaje': ' Jaje je ženska nepokretna spolna stanica u mnogostaničnih životinja i čovjeka.',
                    'jajnik': ' Jajnik je ženska spolna žlijezda u kojoj se razvijaju spolne stanice i spolni hormoni.',
                    'jajovod': ' Jajovod je cjevasti ženski spolni organ između jajnika i maternice kroz koji prolazi jajna stanica.',
                    'jak': ' Jak je koji ima veliku tjelesnu snagu.',
                    'jakna': ' Jakna je kraći kaput.',
                    'jako': ' Jako znači tako da odražava veliku tjelesnu snagu.',
                    'jakost': ' Jakost  je stanje onoga koji je izdržljiv, koji ima dovoljno  tjelesne snage i dobro se osjeća.',
                    'jamajački': ' Jamajački je koji se odnosi na Jamajku i Jamajčane.',
                    'janje': ' Janje je mlado ovce.',
                    'janjeći': ' Janjeći je koji se odnosi na janjad.',
                    'janjetina': ' Janjetina je janjeće meso.',
                    'janjevački': ' Janjevački je koji se odnosi na Janjevo i Janjevce.',
                    'janjinski': ' Janjinski je koji se odnosi na Janjinu i Janjince.',
                    'janjiti': ' Janjiti znači donositi mlado na svijet (o ovci).',
                    'jao': ' Jao je usklik kojim se  izriče  jadikovanje, žalost, bol, tjeskoba i strah.',
                    'japanka': ' Japanka je stanovnica ili državljanka Japana.',
                    'japanski': ' Japanski je koji se odnosi na Japan i Japance.',
                    'jarac': ' Jarac je mužjak koze.',
                    'jard': ' Jard je angloamerička osnovna mjerna jedinica za duljinu, 0,9144 metara (yd).',
                    'jare': ' Jare je mlado koze.',
                    'jareći': ' Jareći je koji se odnosi na jarad.',
                    'jaretina': ' Jaretina je jareće meso.',
                    'jarić': ' Jarić je mlado koze.',
                    'jasan': ' Jasan je kojemu su obrisi dobro vidljivi, u kojemu se razabiru pojedinosti, koji se dobro vidi.',
                    'jaslice': ' Jaslice su male jasle.',
                    'jasmin': ' Jasmin je grm iz porodice maslina koji se uzgaja kao ukrasna ili ljekovita biljka.',
                    'jasno': ' Jasno je tako da su obrisi dobro vidljivi, da se razabiru pojedinosti, da se dobro vidi.',
                    'jastrebarski': ' Jastrebarski je koji se odnosi na Jastrebarsko i Jastrebarščane.',
                    'jastučnica': ' Jastučnica je navlaka za jastuk.',
                    'jastuk': ' Jastuk je ispunjena vreća na kojoj počiva glava za vrijeme spavanja ili odmora ili koja služi za sjedenje, naslanjanje ili kao podloga za noge.',
                    'jat': ' jat je glas koji je nekad postojao u slavenskim jezicima, a u suvremenome hrvatskom standardnom jeziku odražava se kao 
                    ',
                    'jato': ' Jato je veća trajna ili povremena zajednica životinja iste vrste koje lete, plove ili plivaju.',
                    'javiti': ' Javiti što znači prenijeti komu kakvu vijest ili obavijest.',
                    'javljati': ' Javljati znači prenositi komu kakvu vijest ili obavijest.',
                    'javni': ' Javni je koji je poznat i svima dostupan, koji nije skriven.',
                    'javnobilježnički': ' Javnobilježnički je koji se odnosi na javne bilježnike i javne bilježnice.',
                    'javnost': ' Javnost je svojstvo onoga što je javno.',
                    'javnozdravstveni': ' Javnozdravstveni je koji se odnosi na javno zdravstvo.',
                    'jecati': ' Jecati znači isprekidano i grčevito plakati.',
                    'ječati': ' Ječati znači ispuštati nejasne glasove.',
                    'jedan': ' Jedan je broj koji se obilježuje s 1, za jedan manji od broja dva.',
                    'jedan': ' Jedan označuje što neodređeno, obično poznato onomu koji govori.',
                    'jedanaest': ' Jedanaest je broj koji se obilježuje s 11, za jedan veći od broja deset i za jedan manji od broja dvanaest. ',
                    'jedanaesterac': ' Jedanaesterac je stih od jedanaest slogova.',
                    'jedanaestero': ' Jedanaestero je skupina od jedanaest osoba različita spola.',
                    'jedanaesti': ' Jedanaesti je koji je iza desetoga, a prije dvanaestoga.',
                    'jedanput': ' Jedanput znači u jednoj prilici, jedan put.',
                    'jedinac': ' Jedinac je jedini sin u roditelja.',
                    'jedini': ' Jedini je koji je samo jedan, uz koji ne postoji drugi.',
                    'jedinica': ' Jedinica je brojka koja označuje broj jedan.',
                    'jediničin': ' Jediničin je koji pripada jedinici, jedinoj kćeri u roditelja.',
                    'jedino': ' Jedino izriče da se jedan član ili manji dio članova prema određenim svojstvima izuzima iz skupa istovrsnih članova.',
                    'jednačenje': ' Jednačenje je postupak po kojemu se što izjednačuje po kojemu svojstvu.',
                    'jednak': ' Jednak je koji se ne razlikuje od onoga s kojim se uspoređuje.',
                    'jednako': ' Jednako znači tako da ne odražava različitost.',
                    'jednakost': ' Jednakost je svojstvo onoga što je jednako.',
                    'jedni': ' Jedni označuje jedan skup ili par.',
                    'jednina': ' Jednina je gramatički broj promjenjive riječi kojim se označuje da se govori o jednome primjerku onoga što označuje ta riječ.',
                    'jedninski': ' Jedninski je koji se odnosi na jedninu. ',
                    'jednodijelan': ' Jednodijelan je koji je u jednome dijelu.',
                    'jednodimenzijski': ' Jednodimenzijski je koji se odnosi na jednu dimenziju. ',
                    'jednodimenzionalni': ' Jednodimenzionalan je koji se odnosi na jednu dimenziju. ',
                    'jednogodišnjak': ' Jednogodišnjak je dijete koje ima jednu godinu.',
                    'jednogodišnjakinja': ' Jednogodišnjakinja je žensko dijete koje ima jednu godinu.',
                    'jednogodišnji': ' Jednogodišnji je koji ima jednu godinu.',
                    'jednojezičan': ' Jednojezičan je koji se služi jednim jezikom.',
                    'jednokatni': ' Jednokatni je koji ima jedan kat.',
                    'jednokatnica': ' Jednokatnica je stambeni objekt koji ima prizemlje i jedan kat..',
                    'jednokratan': ' Jednokratan je koji je u jednome dijelu.',
                    'jednokrevetni': ' Jednokrevetni je koji ima samo jedan krevet.',
                    'jednom': ' Jednom znači u proteklom, prošlom vremenu.',
                    'jednomjesečni': ' Jednomjesečni je koji ima jedan mjesec.',
                    'jednoredan': ' Jednoredan je koji ima jedan red čega, koji se sastoji od jednoga reda.',
                    'jednorječan': ' Jednorječan je koji se sastoji od jedne riječi.',
                    'jednosjed': ' Jednosjed je vozilo predviđeno za jednu osobu ili jednoga člana posade',
                    'jednoslov': ' Jednoslov je znak za jedan glas sastavljen od jednoga slova. ',
                    'jednosoban': ' Jednosoban je koji ima jednu sobu.',
                    'jednostavan': ' Jednostavan je koji se lako razumijeva ili rješava, koji nije teško napraviti.',
                    'jednostavno': ' Jednostavno je tako da se može lako razumijeti ili shvatiti i ne zahtijeva velik trud ili napor.',
                    'jednostavnost': ' Jednostavnost je osobina onoga koji je jednostavan, koji je skroman i prirodan u komunikaciji s drugima.',
                    'jedn-o-stih': ' Jednostih je pjesma koja se sastoji od jednoga stiha.',
                    'jednostruk': ' Jednostruk je koji ima samo jedan dio.',
                    'jednotjedni': ' Jednotjedni je koji ima jedan tjedan.',
                    'jedrenje': ' Jedrenje je plovidba s pomoću jedara, plovidba na jedra.',
                    'jedrilica': ' Jedrilica je čamac ili brodica koji plovi pomoću jedara.',
                    'jeftin': ' Jeftin je koji ima nisku cijenu, koji ne stoji mnogo novca.',
                    'jeknuti': ' Jeknuti znači ispustiti nejasan glas.',
                    'jela': ' Jele su skupina visokih i tankih stabala iz porodice borova koja rastu u umjereno hladnim područjima, plod im je valjkasti češer koji raste uvis na igličastoj grani.',
                    'jelen': ' Jeleni su porodica životinja iz skupine dvopapkara, šumski preživači čiji mužjaci imaju razgranato rogovlje koje svake godine ponovno raste.',
                    'jelo': ' Jelo je ono što se jede, priređena hrana.',
                    'jelovnik': ' Jelovnik je izbor jela.',
                    'jer': ' Jer uvodi uzročnu surečenicu u zavisnoloženoj rečenici.',
                    'jeruzalemski': ' Jeruzalemski je koji se odnosi na Jeruzalem i Jeruzalemce.',
                    'jesen': ' Jesen je godišnje doba koje na sjevernoj hemisferi počinje 23. rujna i traje do 21. prosinca.',
                    'jesenski': ' Jesenski je koji se odnosi na jesen.',
                    'jesenji': ' Jesenji je koji se odnosi na jesen.',
                    'jesti': ' Jesti što znači uzimati hranu, žvakati je i gutati.',
                    'jetra': ' Jetra je najveća žlijezda smještena u trbušnoj šupljini koja ima glavnu ulogu u izmjeni i preradi tvari.',
                    'jezero': ' Jezero je udubina na površini kopna ispunjena vodom bez izravne veze s morem.',
                    'jezgra': ' Jezgra je središnji dio koje cjeline.',
                    'jezičac': ' Jezičac je mali jezik, mali mišićni organ u ustima. ',
                    'jezičak': ' Jezičak je mali jezik, mali mišićni organ u ustima. ',
                    'jezičast': ' Jezičast je koji je nalik na jezik.',
                    'jezičav': ' Jezičav je koji je brbljav i oštar na jeziku.',
                    'jezičavost': ' Jezičavost je osobina onoga tko je jezičav.',
                    'jezični': ' Jezični je koji se odnosi na jezik, pokretljivi mišićni organ u ustima.',
                    'jezik': ' Jezik je pokretljivi mišićni organ u ustima koji služi za određivanje okusa i opipa, žvakanje, sisanje i gutanje hrane.',
                    'jezikoslovac': ' Jezikoslovac je stručnjak koji se bavi jezikoslovljem.',
                    'jezikoslovka': ' Jezikoslovka je stručnjakinja koja se bavi jezikoslovljem.',
                    'jezikoslovkin': ' Jezikoslovkin je koji pripada jezikoslovki.',
                    'jezikoslovlje': ' Jezikoslovlje je opća znanost o jeziku, proučavanje jezičnih pojava u najširemu smislu.',
                    'jezikoslovni': ' Jezikoslovni je koji se odnosi na jezikoslovlje.',
                    'jež': ' Jež je kukcožder zbijena tijela i gustih bodljika na leđnoj strani koje su preoblikovane dlake, hrani se kukcima, gujavicama i drugim malim životinjama te plodovima i ptičjim jajima, kad je ugrožen sklupča se u bodljikavu kuglu.',
                    'ježinac': ' Ježinci su razred morskih beskralježnjaka bodljikaša koji imaju okruglo tijelo s gornje strane prekriveno bodljikama, a s donje se nalazi mišićni sustav i usta te ljepljivi vrškovi s pomoću kojih se hvataju za podlogu.',
                    'jod': ' Jod je kemijski element (I), u obliku tamnoljubičastih ljusaka ili pločica kovinskoga sjaja koji se nalazi u sekretu štitnjače, u morskoj vodi i morskim travama',
                    'jogurt': ' Jogurt je mlijeko ukiseljeno na poseban način',
                    'joj': ' Joj je usklik kojim se  izriče  jadikovanje, žalost, bol, tjeskoba i strah.',
                    'jojoba': ' Jojoba je zimzeleni grm čije su prirodno stanište pustinjska područja Meksika, Arizone i južne Kalifornije.',
                    'jojobin': ' Jojobin je koji se dobiva od jojobe.',
                    'jordanski': ' Jordanski je koji se odnosi na Jordan i Jordance.',
                    'jorgan': ' Poplun je debeo pokrivač, najčešće ispunjen perjem, vatom ili vunom.',
                    'jorgovan': ' Jorgovan je grmolika listopadna ukrasna biljka iz porodice maslina dvospolnih grozdastih velikih mirisnih cvjetova.',
                    'josipdolski': ' Josipdolski je koji se odnosi na Josipdol i Josipdolce.',
                    'još': ' Još izriče da se što dodaje, dopunjuje.',
                    'jotacija': ' Jotacija je glasovna promjena u kojoj se nenepčani (nepalatalni) suglasnici 
                    ',
                    'jučer': ' Jučer znači tijekom prethodnoga dana, u prethodnome danu.',
                    'jučerašnji': ' Jučerašnji je koji je od jučer.',
                    'judejski': ' Judejski je koji se odnosi na Judeju i Judejce.',
                    'jug': ' Jug je jedna od četiriju glavnih strana svijeta usmjerena prema južnome nebeskom polu (J).',
                    'jugo': ' Jugo je vlažan i topao vjetar pretežno jugoistočnoga smjera koji puše na jadranskome primorju s mora na kopno.',
                    'jugoistočni': ' Jugoistočni je koji se odnosi na jugoistok.',
                    'jugoistok': ' Jugoistok je sporedna strana svijeta između juga i istoka (JI).',
                    'jugozapad': ' Jugozapad je sporedna strana svijeta između juga i zapada (JZ).',
                    'jugozapadni': ' Jugozapadni je koji se odnosi na jugozapad.',
                    'juha': ' Juha je tekuće jelo koje se pripravlja kuhanjem mesa, ribe ili povrća uz dodatak začina.',
                    'junački': ' Junački je koji se odnosi na junake.',
                    'junak': ' Junak je osoba bez obzira na spol ili muška osoba koja se odlikuje hrabrošću, smjelošću.',
                    'junakinja': ' Junakinja je ženska osoba koja se odlikuje hrabrošću, smjelošću.',
                    'junakinjin': ' Junakinjin je koji pripada ženskoj osobi koja se odlikuje hrabrošću, smjelošću.',
                    'junakov': ' Junakov je koji pripada muškoj osobi koja se odlikuje hrabrošću, smjelošću.',
                    'june': ' June je mlado govedo od oko godine dana.',
                    'juneći': ' Juneći je koji se odnosi na junad.',
                    'junetina': ' Junetina je juneće meso.',
                    'jupi': ' Usklikom 
                    ',
                    'Jupiter': ' Jupiter je u rimskoj mitologiji vrhovni bog italskih naroda.',
                    'jutarnji': ' Jutarnji je koji se odnosi na jutro.',
                    'jutro': ' Jutro je prvi dio dana, vrijeme od svitanja do podneva.',
                    'jutro': ' Jutro je mjerna jedinica za površinu zemljišta (5745) metara.',
                    'jutros': ' Jutros je protekloga ili ovoga jutra.',
                    'južni': ' Južni je koji se odnosi na jug.',
                    'južnoafrički': ' Južnoafrički je koji se odnosi na Južnoafričku Republiku i Južnoafrikance.',
                    'južnoamerički': ' Južnoamerički je koji se odnosi na Južnu Ameriku i Južnoamerikance.',
                    'k(a)': ' K(a) označuje da tko ili što ima kakav cilj.',
                    'kabanica': ' Kabanica je nepromočivi ogrtač, plašt koji štiti od kiše i vjetra.',
                    'kabao': ' Kabao je drvena ili kovinska posuda za vodu.',
                    'kabel': ' Kabel je izolirani vod koji služi za prijenos i raspodijelu električne energije ili telekomunikacijsih signala.',
                    'kabelski': ' Kabelski je koji se odnosi na kabel, koji se prenosi s pomoću kabela. ',
                    'kabina': ' Kabina je manja prostorija različitih namjena, može biti zasebna ili odvojeni dio većega prostora.',
                    'kabulski': ' Kabulski je koji se odnosi na Kabul i Kabuljane.',
                    'kaciga': ' Kaciga je štitnik koji štiti glavu od udaraca, padova, eksplozija, metaka i sl.',
                    'kad': ' Kad uvodi pitanje o vremenu, u koje vrijeme.',
                    'kada': ' Kada je veliko korito za kupanje.',
                    'kada': ' Kada uvodi pitanje o vremenu, u koje vrijeme.',
                    'kadet': ' Kadet je polaznik vojne škole za dočasnike i časnike.',
                    'kadetkinja': ' Kadetkinja je polaznica vojne škole za dočasnike i časnike.',
                    'kadetkinjin': ' Kadetkinjin je koji pripada kadetkinji.',
                    'kadetov': ' Kadetov je koji pripada kadetu.',
                    'kadgod': ' Kadgod znači s vremena na vrijeme, neredovito i rijetko, koji put.',
                    'kadifica': ' Kadifica je jednogodišnja grmolika ukrasna biljka američkoga ili afričkoga podrijetla.',
                    'kafić': ' Kafić je ugostiteljski objekt, mjesto na kojemu se poslužuje kava i piće.',
                    'kairski': ' Kairski je koji se odnosi na Kairo i Kairce.',
                    'kajati se': ' Kajati se osjećati ili izražavati žaljenje zbog lošega djela ili propusta.',
                    'kakao': ' Kakao je smeđi prah koji se dobiva od sjemenka ploda kakaovca i služi u proizvodnji čokolade.',
                    'kakav': ' Kakav pita za svojstvo ili kakvoću koga ili čega.',
                    'kakavgod': ' Kakavgod znači koji je neodređenih osobina, svejedno kojih osobina.',
                    'kaki': ' Kaki je koji je boje pijeska ili svijetle zemlje.',
                    'kako': ' Što izriče začuđenost ili divljenje visokim stupnjem pozitivne značajke.',
                    'kako': ' Kako uvodi zavisnu surečenicu u subjektnoj rečenici.',
                    'kako': ' Kako uvodi pitanje o načinu, na koji način.',
                    'kalcij': ' Kalcij je kemijski element (Ca), srebrnobijela kovina, u prirodi se pojavljuje samo u spojevima, a sastojak je živih organizama (posebno kosti i zuba), nekih stijena i vapna.',
                    'kalendar': ' Kalendar je sustav prema kojemu se vrijeme dijeli u odsječke.',
                    'kalifornijski': ' Kalifornijski je koji se odnosi na Kaliforniju i Kalifornijce.',
                    'kaligram': ' Kaligram je pjesma u kojoj su stihovi raspoređeni u obliku geometrijskih likova, životinja, predmeta i sl.',
                    'kalij': ' Kalij je kemijski element (K), srebrnobijela je mekana kovina, u prirodi se pojavljuje samo u spojevima, nalazi se u stijenama i sastojak je živih organizama.',
                    'kalkulator': ' Kalkulator je mali elektronički uređaj kojim se izvode temeljne računske operacije.',
                    'kalkutski': ' Kalkutski je koji se odnosi na Calcuttu i Kalkućane.',
                    'kalorija': ' Kalorija je mjerna jedinica za toplinsku energiju koju tijelo crpi iz hrane.',
                    'kaljača': ' Kaljače su gumena obuća koja se navlači preko kožnate obuće da bi je očuvala od blata.',
                    'kambodžanski': ' Kambodžanski je koji se odnosi na Kambodžu i Kambodžane.',
                    'kamen': ' Kamen je pojedinačna stijena ili dio stijene.',
                    'kamenje': ' Kamenje je skup kamena.',
                    'kamera': ' Kamera je uređaj za snimanje fotografija i filmova.',
                    'kamerunski': ' Kamerunski je koji se odnosi na Kamerun i Kamerunce.',
                    'kamilica': ' Kamilica je jednogodišnja zeljasta livadna ljekovita biljka iz porodice glavočika malih bijelih cvatova ugodna mirisa.',
                    'kamion': ' Kamion je motorno vozilo za cestovni prijevoz većih tereta.',
                    'kamo': ' Kamo uvodi pitanje o cilju kretanja.',
                    'kan': ' Kan je naslov mongolskih i turkijskih vladara.',
                    'kanadski': ' Kanadski je koji se odnosi na Kanadu i Kanađane.',
                    'kanalizacija': ' Kanalizacija je sustav međusobno povezanih odvodnih kanala i cijevi kojima otječu otpadne vode i druge tekućine.',
                    'kanalizacijski': ' Kanalizacijski je koji se odnosi na kanalizaciju.',
                    'kandela': ' Kandela je mjerna jedinica za jakost izvora svjetlosti (cdxx).',
                    'kandidat': ' Kandidat je osoba bez obzira na spol ili muška osoba koja se natječe ili predlaže za kakav položaj, određeno zvanje i slično.',
                    'kandidatkinja': ' Kandidatkinja je ženska osoba koja se natječe ili predlaže za kakav položaj, određeno zvanje i slično.',
                    'kanta': ' Kanta je veća i dublja posuda, najčešće limena ili plastična.',
                    'kantina': ' Kantina je prostor u školama, tvornicama, ustanovama i sl. u kojemu se poslužuje jednostavno jelo i piće.',
                    'kao': ' Kao uvodi usporedbu s drugim predmetom ili drugom pojavom.',
                    'kap': ' Kap je veoma mala količina tekućine izdužena okruglasta oblika.',
                    'kapa': ' Kapa je odjevni predmet kojim se pokriva glava, pokrivalo za glavu.',
                    'kapaljka': ' Kapaljka je staklena cjevčica s gumenim dijelom na jednome kraju koja služi za precizno uzimanje kapljica.',
                    'kapavac': ' Kapavac je zarazna spolna bolest koja se očituje gnojnom upalom mokraćne cijevi, maternice i jajnika.',
                    'kapetan': ' Kapetan je časnički čin u kopnenoj vojsci, civilnome i vojnome zrakoplovstvu te u civilnoj i vojnoj mornarici.',
                    'kapetanica': ' Kapetanica je žena s činom kapetana.',
                    'kapetaničin': ' Kapetaničin je koji pripada kapetanici.',
                    'kapetanov': ' Kapetanov je koji pripada kapetanu.',
                    'kapetanski': ' Kapetanski je koji se odnosi na kapetane, odrasle osobe bez obzira na spol ili muškarce koji imaju časnički čin kapetana u kopnenoj vojsci, civilnome i vojnome zrakoplovstvu te u civilnoj i vojnoj mornarici.',
                    'kapuljača': ' Kapuljača je dio odjevnoga predmeta koji pokriva vrat i glavu, ali ne i lice.',
                    'kaput': ' Kaput je odjevni predmet s dugim rukavima koji se oblači iznad druge odjeće.',
                    'karakteristika': ' Karakteristika je  ono što je komu ili čemu svojstveno, ono po čemu se tko ili što ističe ili prepoznaje.',
                    'karakterizacija': ' Karakterizacija je postupak oblikovanja i tumačenja književnog lika ili kakva lika u scenskoj izvedbi.',
                    'karanfil': ' Karanfil je jednogodišnja ili višegodišnja zeljasta biljka ugodna mirisa i raznobojnih cvatova.',
                    'karantena': ' Karantena je prisilno, zakonski ili službeno izdvajanje potencijalno zaraženih osoba iz okoline ili čitavih naselja kako bi se spriječilo širenje zarazne bolesti.',
                    'karaševski': ' Karaševski je koji se odnosi na Karaševo i Karaševce.',
                    'karat': ' Karat je mjerna jedinica za količinu zlata u slitini.',
                    'karcinom': ' Karcinom je zloćudni tumor, bolest koja nastaje nekontroliranim bujanjem stanica.',
                    'kardinal': ' Kardinal je naslov najviše muške crkvene osobe nakon pape.',
                    'karijera': ' Karijera je uspješno napredovanje u kojoj službi, poslu ili djelatnosti.',
                    'karika': ' Karika je obruč koji je sastavni dio lanca.',
                    'karlovački': ' Karlovački je koji se odnosi na Karlovac i Karlovčane.',
                    'karneval': ' Karneval je pučka svečanost s povorkama maškara, kostimiranim zabavama i plesovima pod maskama, obično se održava u razdoblju od Sveta tri kralja od početka Korizme.',
                    'karta': ' Karta je pojednostavnjeni i umanjeni prikaz Zemlje ili njezina dijela na ravnoj plohi.',
                    'kartica': ' Kartica je mala karta.',
                    'kasa': ' Kasa je ormar ili metalna kutija u kojoj se čuva novac, vrijednosni papiri i sl.',
                    'kasnije': ' Kasnije je komparativ priloga 
                    ',
                    'kasniti': ' Kasniti znači dolaziti poslije očekivanoga ili dogovorenoga vremena, dolaziti sa zakašnjenjem.',
                    'kasno': ' Kasno je nakon određenoga ili uobičajenoga vremena.',
                    'kastanjete': ' Kastanjete su udaraljkaško glazbalo napravljeno od drvenih izdubljenih pločica koje proizvode zvuk udaranjem jedne o drugu.',
                    'kaša': ' Kaša je rjeđe jelo od kuhanoga brašna ili povrća.',
                    'kašalj': ' Kašalj je naglo izbacivanje zraka iz pluća izazvano nadražajem ili upalom organa za disanje.',
                    'kašljati': ' Kašljati znači zbog nadražaja sluznice naglo i glasno izbacivati zrak iz pluća.',
                    'kaštelanski': ' Kaštelanski je koji se odnosi na Kaštela i Kaštelane.',
                    'kat': ' Kat je dio kuće između poda i stropa ili između dvaju stropova.',
                    'katalonski': ' Katalonski je koji se odnosi na Kataloniju i Katalonce.',
                    'katapult': ' Katapult je oružje kojim se izbacuju velike strijele',
                    'katarski': ' Katarski je koji se odnosi na Katar i Katarce.',
                    'katarza': ' Katarza je oslobađajući osjećaj koji u gledateljima izaziva scenski prizor u antičkoj drami.',
                    'katastrofa': ' Katastrofa je iznenadna nesreća s mnogo ljudskih žrtava i/ili velikom štetom.',
                    'katedrala': ' Katedrala je središnja crkva biskupije ili nadbiskupije, stolna crkva.',
                    'kategorija': ' Kategorija je razred pojmova ili vrijednosti.',
                    'katni': ' Katni je koji se odnosi na kat.',
                    'katnica': ' Katnica je kuća koja ima jedan ili više katova.',
                    'katolički': ' Katolički je koji se odnosi na katolike i katoličanstvo.',
                    'katolik': ' Katolik je osoba bez obzira na spol ili muška osoba katoličke vjere.',
                    'katolikinja': ' Katolikinja je ženska osoba katoličke vjere.',
                    'katolikov': ' Katolikov je koji pripada katoliku.',
                    'katolkinja': ' Katolkinja je ženska osoba katoličke vjere.',
                    'katolkinjin': ' Katolkinjin je koji pripada katolkinji.',
                    'kauč': ' Kauč je ležaljka s niskim naslonom koja se obično može rasklapati, a služi za sjedenje i za spavanje.',
                    'kava': ' Kava je zimzelena tropska grmolika biljka u čijim se kožastim plodovima bobičastoga izgleda obično razvijaju dvije svijetlozelene sjemenke.',
                    'kavana': ' Kavana je ugostiteljski objekt u kojemu se poslužuju kava i ostala pića.',
                    'kavez': ' Kavez je prostor ograđen rešetkama u kojemu se drže životinje.',
                    'kavkaski': ' Kavkaski je koji se odnosi na Kavkaz i Kavkažane.',
                    'kazahstanski': ' Kazahstanski je koji se odnosi na Kazahstan i Kazahstance.',
                    'kazališni': ' Kazališni je koji se odnosi na kazalište.',
                    'kazalište': ' Kazalište je mjesto, kuća ili otvoreni prostor na kojemu se izvode predstave.',
                    'kazaljka': ' Kazaljka je pokretna mala poluga na mjernome instrumentu koja se kreće od oznake do oznake i tako pokazuje mjerenu vrijednost.',
                    'kazati': ' Kazati znači izraziti ili priopćiti što govoreći.',
                    'kazetofon': ' Kazetofon je električni uređaj koji služi za snimanje i slušanje zvuka na kazetama.',
                    'kazna': ' Kazna je mjera izrečena komu zbog kakva aprekršaja ili zločina.',
                    'kazniona': ' Kazniona je zgrada ili kompleks zgrada u kojima zatvorenici izdržavaju zatvorsku kaznu. ',
                    'kaznionica': ' Kaznionica je zgrada ili kompleks zgrada u kojima zatvorenici izdržavaju zatvorsku kaznu. ',
                    'kazniti': ' Kazniti znači izreći i provesti kaznu.',
                    'kažiprst': ' Kažiprst je drugi prst na ljudskoj ruci koji se nalazi između palca i srednjaka i kojim se što pokazuje.',
                    'kažnjavati': ' Kažnjavati znači izricati i provoditi kaznu.',
                    'kćer': ' Kćer je žensko dijete u odnosu na roditelje.',
                    'kćerin': ' Kćerin je koji pripada kćeri.',
                    'kćerinski': ' Kćerinski je onaj koji ima kćer (o osjećaju ili čemu apstraktnom).',
                    'kćerka': ' Kćerka je žensko dijete u odnosu na roditelje.',
                    'kćerkin': ' Kćerkin je koji pripada kćerki.',
                    'kći': ' Kći je žensko dijete u odnosu na roditelje.',
                    'keks': ' Keks je sitan suhi kolač.',
                    'kelvin': ' Kelvin je mjerna jedinica za termodinamičku temperaturu (K).',
                    'kelj': ' Kelj je dvogodišnja kupusnjača smežurana lišća i mekane glavice.',
                    'kembrički': ' Kembrički je koji se odnosi na Cambridge i Kembridžane.',
                    'kemija': ' Kemija je prirodna znanost koja proučava sastav tvari, njihova svojstva i njihove promjene.',
                    'kenijski': ' Kenijski je koji se odnosi na Keniju i Kenijce.',
                    'kesten': ' Kesten je listopadno ukrasno drvo perzijskoga podrijetla s bodljikavim zelenim tobolcem u kojemu se najčešće nalaze dva nejestiva okruglasta smeđa sjajna ploda s bijelom točkom.',
                    '
                    ' : '
                    ',
                    'kijevski': ' Kijevski je koji se odnosi na Kijev i Kijevljane. ',
                    'kijivski': ' Kijivski je koji se odnosi na Kijiv i Kijivljane. ',
                    'kikiriki': ' Kikiriki je suptropska i tropska jednogodišnja biljka uljarica iz porodice mahunarka.',
                    'kila': ' Kila je bolest koja nastaje pucanjem stijenka potrbušnice.',
                    'kilogram': ' Kilogram je osnovna mjerna jedinica za masu (kg).',
                    'kilometar': ' Kilometar je mjerna jedinica za duljinu, tisuću metara (km).',
                    'kilovat': ' Kilovat je mjerna jedinica za snagu, tisuću vata (kW).',
                    'kilovatsat': ' Kilovatsat je mjerna jedinica za utrošenu energiju ili obavljeni rad (kWh).',
                    'kim': ' Kim je dvogodišnja zeljasta biljka iz porodice štitarka koja raste po livadama čitave Europe.',
                    'kinematograf': ' Kinematograf je zgrada ili dvorana namijenjena prikazivanju filmova.',
                    'kinematografija': ' Kinematografija je djelatnost proizvodnje, distribucije i prikazivanja filmova. ',
                    'kinematografski': ' Kinematografski je koji se odnosi na kinematografe i kinematografiju.',
                    'kineski ': ' Kineski je koji se odnosi na Kinu i Kineze.',
                    'kino': ' Kino je zgrada ili dvorana namijenjena prikazivanju filmova.',
                    'kinodvorana': ' Kinodvorana je dvorana namijenjena prikazivanju filmova.',
                    'kinoprojekcija': ' Kinoprojekcija je projekcija filma s pomoću optičkoga aparata u kinu. ',
                    'kinoprojektor': ' Kinoprojektor  je projektor namijenjen prikazivanju filmova u kinu.',
                    'kiosk': ' Kiosk je kućica za prodavanje sitne robe, hrane, pića i novina.',
                    'kip': ' Kip je trodimenzijsko likovno djelo u čvrstome gradivu (kamenu, kovini, drvu, glini itd.) stvoreno klesanjem, rezanjem, modeliranjem ili lijevanjem.',
                    'kipar': ' Kipar je osoba ili muškarac koji izrađuje kipove.',
                    'kiparev': ' Kiparev je koji pripada kiparu.',
                    'kiparica': ' Kiparica je žena koja izrađuje kipove.',
                    'kiparičin': ' Kiparičin je koji pripada kiparici.',
                    'kiparov': ' Kiparov je koji pripada kiparu. ',
                    'kiparski': ' Kiparski je koji se odnosi na kipare i kiparstvo.',
                    'kirgistanski': ' Kirgistanski je koji se odnosi na Kirgistan i Kirgistance.',
                    'kiseljački': ' Kiseljački je koji se odnosi na Kiseljak i Kiseljačane.',
                    'kiseo': ' Kiseo je koji ima okus kao limun ili ocat.',
                    'kisik': ' Kisik je kemijski element (O), pojavljuje se kao bezbojni plin bez mirisa i okusa, najrasprostranjeniji je element u Zemljinoj kori, ima ga koliko i svih ostalih elemenata zajedno, sastojak je zraka, vode, stijena i ljudskoga tijela, nuždan je za disnje i gorenje.',
                    'kist': ' Kist je četkica za slikanje, bojenje ili ličenje koja se sastoji od dlaka različite debljine pričvršćenih na kovinski ili drveni vrh drška.',
                    'kiša': ' Kiša je oborina u obliku vodenih kapi promjera većega od pola milimetra.',
                    'kišiti': ' Kišiti znači padati iz oblaka u obliku vodenih kapi.',
                    'kišobran': ' Kišobran je naprava od nepromočive tkanine učvršćene na kovinske šipke koja se s pomoću dugačkoga drška nosi iznad glave kao zaštita od kiše.',
                    'kitica': ' Kitica je skupina stihova međusobno povezanih određenim metrom, ritmom i sadržajem.',
                    'kivi': ' biljka',
                    'kjotski': ' Kjotski je koji se odnosi na Kjoto i Kjoćane.',
                    'kladiona': ' Kladiona je mjesto na kojemu se kladi za novac.',
                    'kladionica': ' Kladionica je mjesto na kojemu se kladi za novac.',
                    'kladiti se': ' Kladiti se znači dogovoriti okladu.',
                    'klapa': ' Klapa je naprava kojom se označuje početak snimanja novoga filmskog kadra.',
                    'klarinet': ' Klarinet je drveno puhaće glazbalo po registru dublje od oboe, a više od fagota.',
                    'klarinetist': ' Klarinetist je osoba bez obzira na spol ili muška osoba koja svira klarinet.',
                    'klarinetistica': ' Klarinetistica je ženska osoba koja svira klarinet.',
                    'klarinetističin': ' Klarinetističin je koji pripada klarinetistici.',
                    'klarinetistički': ' Klarinetistički je koji se odnosi n klarinete i klarinetiste.',
                    'klarinetistov': ' Klarinetistov je koji pripada klarinetistu.',
                    'klatno': ' Klatno je tijelo koje se njiše oko čvrste točke.',
                    'klaun': ' Klaun je smiješno obučena i našminkana osoba bez obzira na spol ili muška osoba koja u cirkusu zabavlja publiku.',
                    'klavir': ' Klavir je žičano glazbalo s tipkama.',
                    'klavirist': ' Klavirist je osoba bez obzira na spol ili muška osoba koja svira klavir.',
                    'klaviristica': ' Klaviristica je ženska osoba koja svira klavir.',
                    'klavirističin': ' Klavirističin je koji pripada klaviristici.',
                    'klaviristički': ' Klaviristički je koji se odnosi na klaviriste.',
                    'klaviristov': ' Klaviristov je koji pripada klaviristu.',
                    'klavirski': ' Klavirski je koji se odnosi na klavire.',
                    'klečati': ' Klečati znači oslanjati se na koljena svinutih potkoljenica i uspravna tijela.',
                    'kleka': ' Kleka je vazdazelena mediteranska grmolika biljka bodljikavih iglica iz porodice čempresa s okruglastim tamnoljubičastim plodovima.',
                    'klepet': ' Klepet je zvuk udarca jednoga tvrdog predmeta o drugi ili po zraku.',
                    'klepetati': ' Klepetati čime znači činiti da što proizvodi klepet.',
                    'kliconoša': ' Kliconoša je osoba ili životinja koja u sebi nosi određeni mikroorganizam koji prouzročuje bolest, ali nema znakova bolesti.',
                    'kliconoštvo': ' Kliconoštvo je stanje kliconoše.',
                    'kliješta': ' Kliješta su ručni alat u obliku dviju ukrštenih poluga kojima se što vadi, hvata, siječe ili kida.',
                    'klik': ' Klik je onomatopejska riječ kojom se oponaša glasanje nekih ptica nepjevica i zvuk nekih naprava i strojeva. ',
                    'klikati': ' Klikati znači više puta izvoditi pritisak i opuštanje tipke na mišu. ',
                    'kliknuti': ' Kliknuti znači veselo uzviknuti.',
                    'kliktati': ' Kliktati znači oglašavati se kliktajem.',
                    'klima': ' Klima je skup atmosferskih i meteoroloških čimbenika i pojava koji u određenome razdoblju čine prosječno stanje atmosfere nad kojim dijelom Zemljine površine.',
                    'klin': ' Klin je zašiljeni duguljasti željezni ili drveni predmet koji služi da se njime što pričvrsti ili na njega što objesi.',
                    'klinika': ' Klinika je specijalistička bolnica u kojoj se uz liječenje bolesnika obično obavlja visokoškolska nastava iz medicine i znanstvenoistraživački rad ili odjel takve bolnice.',
                    'klip': ' Klip je dio kukuruza s malim žutim plodovima u obliku bobica.',
                    'kliški': ' Kliški je koji se odnosi na Klis i Klišane.',
                    'klitika': ' Klitika  je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ ispred ili iza sebe i s njom čini jednu naglasnu cjelinu.',
                    'klizalište': ' Klizalište je uređena ledena površina za klizanje.',
                    'klizaljka': ' Klizaljka je cipela s kovinskim dijelom na potplatu za sklizanje na ledu.',
                    'klizati': ' Klizati znači znati se kretati po ledu ili po skliskoj površini.',
                    'klokot': ' Klokot je šum koji stvara voda koja izvire ključajući, teče preko kamenja ili iz slavine.',
                    'klokotati': ' Klokotati znači proizvoditi klokot.',
                    'klompa': ' Klompe su obuća s debelim, obično drvenim potplatom i zatvorenim prstima.',
                    'kloparati': ' Kloparati znači proizvoditi klopot.',
                    'klopka': ' Klopka je naprava za hvatanje životinja koja sklapanjem priklješćuje dio tijela.',
                    'klopot': ' Klopot je isprekidan zvuk koji nastaje udaranjem jednoga tvrdog predmeta o drugi, npr. drva o drvo ili željeza o kamen.',
                    'klopotati': ' Klopotati znači proizvoditi klopot.',
                    'klor': ' Klor je kemijski element (Cl), u čistome stanju veoma je otrovan žutozeleni plin, u prirodi se pojavljuje samo u spojevima, a sastojak je kuhinjske soli.',
                    'kloštarski': ' Kloštarski je koji se odnosi na Kloštar-Ivanić i Kloštrance.',
                    'klub': ' Klub je sportsko društvo.',
                    'klupa': ' Klupa je dulja sjedalica za više osoba.',
                    'klupko': ' Klupko je smotak konca, konopca, pređe ili vune namotan u obliku kugle ili lopte.',
                    'kljucati': ' Kljucati što znači uzimati hranu kljunom.',
                    'kljucnuti': ' Kljucnuti znači uzeti hranu kljunom.',
                    'ključ': ' Ključ je nazubljeni kovinski predmet kojim se otvara ili zatvara brava.',
                    'kljun': ' Kljun je izbočene čeljusti ptica i nekih drugih kralježnjaka koje se sastoje od kostiju i rožnate vanjske prevlake.',
                    'knez': ' Knez je naslov visokoga muškog feudalnog dostojanstvenika koji je po važnosti odmah do kralja i cara.',
                    'kninski': ' Kninski je koji se odnosi na Knin i Kninjane.',
                    'knjiga': ' Knjiga je skup listova s tekstovima ili slikama koji čine sadržajnu cjelinu i povezani su koricama.',
                    'knjižara': ' Knjižara je trgovina u kojoj se prodaju knjige.',
                    'književnica': ' Književnica je žena koja piše književna djela.',
                    'književničin': ' Književničin je koji pripada književnici.',
                    'književnik': ' Književnik je odrasla osoba obzira na spol ili muškarac koji piše književna djela.',
                    'književnost': ' Književnost je umjetnost riječi.',
                    'knjižnica': ' Knjižnica je mjesto na kojemu se čuvaju, čitaju i posuđuju knjige.',
                    'knjižničar': ' Knjižničar je osoba ili muškarac koji radi u knjižnici.',
                    'knjižničarev': ' Knjižničarev je koji pripada knjižničaru.',
                    'knjižničarka': ' Knjižničarka je žena koja radi u knjižnici.',
                    'knjižničarkin': ' Knjižničarkin je koji pripada knjižničarki.',
                    'knjižničarov': ' Knjižničarov je koji pripada knjižničaru.',
                    'knjižničarski': ' Knjižničarski je koji se odnosi na knjižničare i knjižničarstvo.',
                    'knjižničarstvo': ' Knjižničarstvo je djelatnost vođenja knjižnice, djelatnost kojom se bavi knjižničar.',
                    'kobalt': ' Kobalt je kemijski element (Co), srebrnobijela kovina koja staklo ili keramiku boji u plavo.',
                    'kobasica': ' Kobasica je mesni prehrambeni proizvod, crijevo ispunjeno začinjenim sjeckanim mesom.',
                    'kobila': ' Kobila je ženka konja.',
                    'kocka': ' Kocka je pravilno geometrijsko tijelo omeđeno sa šest sukladnih kvadrata.',
                    'kockast': ' Kockast je koji je nalik kocki ili kvadru.',
                    'kockica': ' Kockicka je mala kocka.',
                    'kočijaš': ' Kočijaš je osoba bez obzira na spol ili muškarac koji upravlja kočijom.',
                    'kočnica': ' Kočnica je naprava kojom se usporava ili zaustavlja kretanje vozila.',
                    'kod': ' Kod je sustav znakova oblikovan za prijenos informacija.',
                    'kod': ' Kod označuje da se tko ili što nalazi, kreće ili zbiva u blizini koga ili čega.',
                    'kodni': ' Kodni je koji se odnosi na kod. ',
                    'kofer': ' Kofer je četvrtasti predmet koji služi za spremanje i prijenos stvari.',
                    'kojekakav': ' Kojekakav je koji se odlikuje različitim svojstavima, raznolikošću.',
                    'koješta': ' Koješta označuje skup raznovrsnih neimenovanih predmeta ili pojava.',
                    'koji': ' Koji uvodi pitanje o nepoznatome u skupini od dvaju ili više članova.',
                    'kokodak': ' Kokodak je onomatopejska riječ kojom se oponaša glasanje kokoši.',
                    'kokodakanje': ' Kokodakanje je glasanje glasom koji podsjeća na  kokodak.',
                    'kokodakati': ' Kokodakati znači glasati se glasom koji podsjeća na kokodak. ',
                    'kokodaknuti': ' Kokodaknuti znači oglasiti se glasom koji podsjeća na kokodak. ',
                    'kokos': ' Kokos je visoka tropska palma velika okrugla smeđega ploda.',
                    'kokoš': ' Kokoši su skupina ptica iz porodice fazana koja se uzgaja radi dobivanja jaja i mesa. ',
                    'kola': ' Kola su prijevozno sredstvo obično s četiri kotača koje vuku zaprežne životinje.',
                    'kolač': ' Kolač je slastica koja se najčešće sastoji od pečenoga tijesta s različitim dodatcima.',
                    'kolapsologija': ' Kolapsologija je pokret koji upozorava na moguću propast (kolaps) društava te proučava uzroke i posljedice urušavanja civilizacija.',
                    'kolaž': ' Kolaž je likovna tehnika u kojoj se na plohu lijepe komadi papira, novina, tkanina, kože, ilustracija ili fotografija.',
                    'kolega': ' Kolega je osoba bez obzira na spol ili muška osoba koja ide u školu ili radi s kim ili ima istu struku kao tko.',
                    'kolegica': ' Kolegica je ženska osoba koja ide u školu ili radi s kim ili ima istu struku kao tko.',
                    'kolektor': ' Kolektor je kontejner koji služi za odlaganje otpada.',
                    'kolera': ' Kolera je crijevna zarazna bolest prouzročena bakterijama, širi se hranom i vodom.',
                    'kolica': ' Kolica su naprava koja se gura ili pokreće rukom ili jednostavnim mehanizmom, s jednim, dva, tri ili četiri kotača, a služi za prijevoz tereta, djece, bolesnika i sl.',
                    'količina': ' Količina je broj ili obujam čega što se može izbrojiti ili izmjeriti.',
                    'količnik': ' Količnik je rezultat dijeljenja dvaju brojeva.',
                    'kolijevka': ' Kolijevka je krevetić za dojenče koji se može ljuljati.',
                    'koliko': ' Koliko uvodi pitanje o količini.',
                    'kolnik': ' Kolnik je dio ulice namijenjen kretanju vozila.',
                    'kolo': ' Kolo je skupni narodni ples u kojemu plesači oblikuju krug ili polukrug koji se izvodi uz pjesmu i glazbu.',
                    'kolodvor': ' Kolodvor je mjesto odakle polaze i kamo dolaze vlakovi ili autobusi.',
                    'kolovoz': ' Kolovoz je osmi mjesec u kalendarskoj godini, mjesec između srpnja i rujna.',
                    'kolumbijski': ' Kolumbijski je koji se odnosi na Kolumbiju i Kolumbijce.',
                    'kolutati': ' Kolutati znači izvoditi kružne pokrete, kružiti.',
                    'koljeno': ' Koljeno je nožni zglob koji povezuje bedrenu i potkoljeničnu kost.',
                    'komad': ' Komad je samostalni, odvojeni ili otrgnuti dio koje cjeline.',
                    'komandant': ' Komandant je viši časnički čin u kopnenoj vojsci i ratnoj mornarici.',
                    'komandantica': ' Komandantica je žena s činom komandanta.',
                    'komandantičin': ' Komandantičin je koji pripada komandantici.',
                    'komandantov': ' Komandantov je koji pripada komandantu.',
                    'komandantski': ' Komandantski je koji se odnosi na komandante.',
                    'kombi': ' Kombi je automobil veći od osobnoga, a manji od kamiona, predviđen za prijevoz više putnika ili tereta.',
                    'kombinacija': ' Kombinacija je veza različitih pojmova, osoba, predmeta itd. ',
                    'komedija': ' Komedija je dramska književna vrsta koja izborom likova, tematikom i izražajnim sredstvima upućuje na veselo raspoloženje i smijeh, a načelno je sretnog završetka.',
                    'komentar': ' Komentar je izrečeno mišljenje o čemu.',
                    'komentirati': ' Komentirati znači izreći/izricati svoje mišljenje o čemu.',
                    'komiški': ' Komiški je koji se odnosi na Komižu i Komižane.',
                    'komoda': ' Komoda je nizak ormar s ladicama i/ili pretincima.',
                    'komodor': ' Komodor je najniži admiralski vojni čin u ratnoj mornarici, nadređen časničkom činu kapetana bojnoga broda, a podređen admiralskom činu kontraadmirala.',
                    'komorbiditet': ' Komorbiditet je istodobna pojava dviju ili više bolesti.',
                    'kompanija': ' Kompanija je gospodarska jedinica ili radna organizacija koja se bavi proizvodnjom ili pružanjem usluga.',
                    'komparativ': ' Komparativ je drugi stupanj u stupnjevanju pridjeva i priloga kojim se u usporedbi izriče veći stupanj koje osobine ili svojstva.',
                    'kompas': ' Kompas je naprava čija magnetna igla pokazuje sjever te se s pomoću nje određuju strane svijeta, služi za snalaženje u prirodi, na moru i sl.',
                    'kompilator': ' Kompilator je osoba bez obzira na spol ili muška osoba koja sastavlja tekst ili kakvo drugo djelo od dijelova drugih djela',
                    'kompjuter': ' Kompjuter je elektronički uređaj koji prima, obrađuje i sprema različite podatke.',
                    'kompjuterski': ' Kompjuterski je koji se odnosi na računala i računalstvo. ',
                    'kompresor': ' Kompresor je uređaj za stlačivanje, zbijanje (zraka, plinova itd.), služi za opskrbu strojeva, aparata, pogona i sl. komprimiranim zrakom te kao procesni stroju rashladnim uređajima i sl.',
                    'komunikacija': ' Komunikacija je prenošenje i primanje poruka, obavijesti od pošiljatelja od primanja različitim načinima ili sredstvima. ',
                    'komunikacijski': ' Komunikacijski je koji se odnosi na komunikaciju.',
                    'komunikativan': ' Komunikativan je koji lako uspostavlja kontakt s drugima ili s kojim se lako uspostavlja kontakt.',
                    'komunikativnost': ' Komunikativnost je osobina onoga koji je komunikativan.',
                    'konac': ' Konac je nit pamuka, svile i sl., služi za šivanje ili spajanje čega.',
                    'konac': ' Konac je ono čime što završava, posljednji dio čega, točka u kojoj što završava.',
                    'konačan': ' Konačan je koji ima kraj, koji nastaje kao krajnji rezultat ili krajnja posljedica kakva procesa.',
                    'konačno': ' Konačno je tako da odražava da se nešto ostvarilo ili dogodilo nakon dugoga čekanja ili trajanja kakva postupka.',
                    'konačnost': ' Konačnost je svojstvo onoga što je konačno, onoga što nastaje kao krajnji rezultat ili krajnja posljedica kakva procesa.',
                    'konavoski': ' Konavoski je koji se odnosi na Konavle i Konavljane.',
                    'koncert': ' Koncert je javna izvedba glazbenoga djela pred publikom.',
                    'kondenzator': ' Kondenzator je uređaj za kondenzaciju pare ili plina.',
                    'kondicional': ' Kondicional je pogodbeni način. ',
                    'kondicionalni': ' Kondicionalni je koji se odnosi na kondicional.',
                    'konferencija': ' Konferencija je važniji sastanak na kojemu je mnogo sudionika.',
                    'kongoanski': ' Kongoanski je koji se odnosi na Kongo i Kongoance.',
                    'konobar': ' Konobar je osoba bez obzira na spol ili muškarac koji  u kafiću ili restoranu poslužuje goste pićem i jelom ili samo pićem. ',
                    'konobarev': ' Konobarev je koji pripada konobaru. ',
                    'konobarica': ' Konobarica  je žena koja u kafiću ili restoranu poslužuje goste pićem i jelom ili samo pićem.',
                    'konobaričin': ' Konobaričin je koji pripada konobarici. ',
                    'konobarov': ' Konobarov je koji pripada konobaru. ',
                    'konobarski': ' Konobarski je koji se odnosi na konobare. ',
                    'kontinent': ' Kontinent je velika kopnena masa okružena morima i oceanima.',
                    'kontraadmiral': ' Kontraadmiral je admiralski vojni čin, nadređen činu komodora, a podređen činu kontraadmirala.',
                    'kontrabas': ' Kontrabas je gudaće žičano glazbalo najdubljega registra.',
                    'kontrabasist': ' Kontrabasist je osoba bez obzira na spol ili muška osoba koja svira kontrabas.',
                    'kontrabasistica': ' Kontrabasistica je ženska osoba koja svira kontrabas.',
                    'kontrabasističin': ' Kontrabasističin je koji pripada kontrabasistici.',
                    'kontrabasistički': ' Kontrabasistički je koji se odnosi na kontrabas i kontrabasiste.',
                    'kontrabasistov': ' Konrtabasistov je koji pripada kontrabasistu.',
                    'kontrola': ' Kontrola je utvrđivanje kakvoće ili svojstava čega.',
                    'konj': ' Konji su porodica krupnih kopitara s velikom glavom i dugim nogama, gustoga i najčešće kratkoga krzna koji na vratu, tjemenu i repu imaju dugu dlaku, obuhvaća domaće konje, divlje konje, magarce i zebre.',
                    'konjak': ' Konjak je žestoko alakoholno piće nastalo destilacijom vina iz pokrajine Cognac u Francuskoj.',
                    'kopačka': ' Kopačke su posebna sportska obuća s kožnatim ili plastičnim čepovima na potplati',
                    'kopati': ' Kopati znači motikom, lopatom ili kakvim drugim oruđem praviti udubljenje u zemlji, pregrtati, razgrtati ili uklanjati zemlju ili vaditi što iz nje.',
                    'kopenhaški': ' Kopenhaški je koji se odnosi na Kopenhagen i Kopenhažane.',
                    'koplje': ' Koplje je motka s kovinskim šiljkom koja služi za borbu s neprijateljem, za lov ili za bacanje u sportu.',
                    'kopnica': ' Kopnica je zarazna virusna bolest koja dovodi do teškog poremećaja imunološkoga sustava, prenosi se spolnim činom i krvlju.',
                    'kopno': ' Kopno je dio Zemlje koji nije pokriven vodom.',
                    'kopriva': ' Kopriva je samonikla jestiva zeljasta biljka čiji su srcoliki listovi i stabljika prekriveni žarnicama koje pri dodiru izlučuju mravlju kiselinu i na koži prouzročuju osjećaj peckanja, crvenilo i mjehure.',
                    'koprivnički': ' Koprivnički je koji se odnosi na Koprivnicu i Koprivničane.',
                    'kora': ' Kora je vanjski odvojivi sloj ili omotač čega.',
                    'koraba': ' Koraba je dvogodišnja kupusnjača nastala križanjem kupusa i repe.',
                    'korak': ' Korak je pokret pri hodanju ili plesu u kojemu se jedna noga diže s tla i spušta na koje drugo mjesto.',
                    'korčulanski': ' Korčulanski je koji se odnosi na Korčulu i Korčulane.',
                    'korejski': ' Korejski je koji se odnosi na Koreju i Korejce.',
                    'korica': ' Korica je mala kora.',
                    'korice': ' Korice su vanjske, zaštitne strane knjige, bilježnice ili čega drugog uvezanog.',
                    'korijen': ' Korijen je vegetativni organ, dio biljke, obično podzemni, kojim se biljka hrani, upija vodu i pričvršćuje za tlo.',
                    'korijenje': ' Korijenje je skup korijena, vegetativnih organa, dijelova biljke, obično podzemnih, kojima se biljka hrani, upija vodu i pričvršćuje za tlo.',
                    'korisnica': ' Korisnica je ženska osoba koja se čime koristi, koja što upotrebljava.',
                    'korisničin': ' Korisničin je koji pripada korisnici.',
                    'korisnički': ' Korisnički je koji se odnosi na korisnike.',
                    'korisnik': ' Korisnik je osoba bez obzira na spol ili muška osoba koja se čime koristi, koja što upotrebljava.',
                    'korisnikov': ' Korisnikov je koji pripada korisniku.',
                    'korist': ' Korist je pozitivna posljedica kakva djelovanja ili nastojanja.',
                    'koristiti': ' Koristiti znači biti dobrim ili prikladnim za što.',
                    'korištenje': ' Korištenje je upotreba ili primjena čega radi kakve svrhe ili potrebe.',
                    'korito': ' Korito je dugačka posuda najčešće namijenjena za pranje rublja ili hranjenje nekih domaćih životinja.',
                    'korizma': ' Korizma je razdoblje kršćanske pripreme za Uskrs koje traje od Pepelnice do Velikoga četvrtka.',
                    'kormilo': ' Kormilo je naprava kojom se određuje smjer kretanja plovila.',
                    'kornjača': ' Kornjače su red životinja iz razreda gmazova koje imaju čvrst oklop u koji se uvlače pred opasnošću, nemaju zube, a žive na kopnu te u slatkovodnim ili morskim staništima.',
                    'korona': ' Korona je bolest je koju prouzročuje novi soj koronavirusa SARS-CoV-2 (teški akutni respiratorni sindrom, koronavirus 2).',
                    'koronabolnica': ' Koronabolnica bolnica je predviđena za smještaj i liječenje zaraženih koronavirusom.',
                    'koronafobija': ' Koronafobija strah je od kornavirusa i bolesti COVID-19.',
                    'koronahumor': ' Koronahumor humor je povezan s koronavirusom ili s bolešću COVID-19.',
                    'koronaš': ' Koronaš je osoba bez obzira na spol ili muška osoba koja je zaražena koronavirusom.',
                    'koronašev': ' Koronašev je koji pripada koronašu. ',
                    'koronašica': ' Koronašica je ženska osoba oboljela od bolesti COVID-19.',
                    'koronašičin': ' Koronašičin je koji pripada koronašici.',
                    'koronavirus': ' Koronavirus jedan je od sojeva virusa iz istoimene porodice koji prouzročuje koronavirusnu bolest, tj. COVID-19.',
                    'korov': ' Korov je samonikla štetna biljka u usjevu i nasadu.',
                    'kos': ' Kos je koji nije ni vodoravan ni uspravan.',
                    'kosa': ' Kosa su dlake na ljudskoj glavi.',
                    'kosa': ' Kosa je oruđe koje se sastoji od savijena dugačka oštra noža učvršćena na dugi držak s dvjema ručkama kojim se kosi trava, djetelina, žito i sl.',
                    'kosina': ' Kosina je kosa površina čega.',
                    'kositar': ' Kositar je kemijski element (Sn), srebrnobijela meka kovina koja je sastojak mnogih slitina, a u prirodi se nalazi samo u spojevima.',
                    'kosovski': ' Kosovski je koji se odnosi na Kosovo i Kosovljane.',
                    'kost': ' Kost je tvrdo potporno tkivo od kojega se sastoji ljudski ili životinjski kostur.',
                    'kostarikanski': ' Kostarikanski je koji se odnosi na Kostariku i Kostarikance.',
                    'kostim': ' Kostim je odjeća u kojoj nastupaju glumci ili sudionici maskenbala.',
                    'kostur': ' Kostur je skup svih kosti, koštani sustav koji oblikuje i učvršćuje tijelo kralježnjaka.',
                    'koš': ' Koš je posuda za odlaganje smeća.',
                    'košara': ' Košara je pleteni, rešetkast ili šupljikav spremnik za odlaganje i ručno prenošenje čega.',
                    'košarica': ' Košarica je mala košara.',
                    'košarka': ' Košarka je sportska igra dviju momčadi u kojoj je cilj ubaciti što više lopta u koš protivničke momčadi.',
                    'košarkaš': ' Košarkaš je osoba bez obzira na spol ili muška osoba koja igra košarku.',
                    'košarkašica': ' Košarkašica je ženska osoba koja igra košarku.',
                    'koštati': ' Koštati znači imati cijenu po kojoj se koja roba ili usluga može prodati ili kupiti.',
                    'košulja': ' Košulja je odjevni predmet koji se oblači na gornji dio tijela, obično ima ovratnik i dugmad za kopčanje.',
                    'košuta': ' Košuta je ženka jelena.',
                    'kotač': ' Kotač je naprava u obliku kruga koja se okreće na osovini i omogućuje kretanje vozila, rad stroja i sl.',
                    'kotiti': ' Kotiti znači donositi mlado na svijet (o sisavcima).',
                    'kotoripski': ' Kotoripski je koji se odnosi na Kotoribu i Kotoripčane.',
                    'kotorski': ' Kotorski je koji se odnosi na Kotor i Kotorane. ',
                    'koturaljka': ' Koturaljka je cipela s kotačima. ',
                    'kovač': ' Kovač je obrtnik koji kuje, obrađuje željezo i tako izrađuje različite predmete.',
                    'kovčeg': ' Kovčeg je četvrtast predmet s tvrdim, čvrstim stranama, koji služi za spremanje i prijenos stvari.',
                    'kovidiot': ' Kovidiot je osoba koja ne vodi brigu o osobama oko sebe, koja se ne ponaša u skladu s uputama za suzbijanje koronavirusa, koja nepotrebno gomila namirnice ili zaštitnu opremu',
                    'kovina': ' Kovina je član skupine tvari koje imaju mnoga zajednička svojstva (dobru vodljivost topline i električne struje, većinom čvrsto stanje na sobnoj temperaturi).',
                    'kovitlati': ' Kovitlati što znači vrtjeti u krugu.',
                    'kovrčav': ' Kovrčav je koji ima kovrče.',
                    'kovrčavost': ' Kovrčavost je svojstvo onoga što je kovrčavo.',
                    'koza': ' Koza je papkar iz porodice šupljorožaca koji se uzgaja i kao domaća životinja radi dobivanja mlijeka i mesa.',
                    'kozica': ' Kozica je mala koza.',
                    'kozle': ' Kozle je mlado koze.',
                    'kozleći': ' Kozleći je koji se odnosi na kozlad. ',
                    'kozletina': ' Kozletina je kozleće meso.',
                    'kozlić': ' Kozlić je mlado koze.',
                    'kozmetičar': ' Kozmetičar je odrasla osoba bez obzira na spol ili muškarac kojemu je zanimanje njega lica i tijela.',
                    'kozmetičarev': ' Kozmetičarev je koji pripada kozmetičaru.',
                    'kozmetičarka': ' Kozmetičarka je žena kojoj je zanimanje njega lica i tijela.',
                    'kozmetičarkin': ' Kozmetičarkin je koji pripada kozmetičarki.',
                    'kozmetičarov': ' Kozmetičarov je  koji pripada kozmetičaru.',
                    'kozmetičarski': ' Kozmetičarski je koji se odnosi na kozmetičare, odrasle osobe bez obzira na spol. ',
                    'kozmetički': ' Kozmetički je koji se odnosi na kozmetiku.',
                    'koža': ' Koža je najveći tjelesni organ koji s vanjske strane pokriva i štiti tijelo te prima i prenosi podržaje.',
                    'krađa': ' Krađa je kažnjivo djelo koje nastaje kad se bez dopuštenja uzme, prisvoji ono što pripada drugomu.',
                    'kraj': ' Kraj je posljednji dio čega, točka u kojoj što završava.',
                    'kraj': ' Kraj označuje da se tko ili što nalazi, kreće ili zbiva u blizini koga ili čega.',
                    'krajnik': ' Krajnik je parni organ u grlu u obliku dvaju malih ispupčenja koji štiti organizam od zaraze.',
                    'krakovski': ' Krakovski je koji se odnosi na Krakov i Krakovljane.',
                    'kralj': ' Kralj je najviši nasljedni naslov muškoga vladara u nekim zemljama.',
                    'kraljevstvo': ' Kraljevstvo je država kojom vlada kralj.',
                    'kralježnica': ' Kralježnica je gibljiv koštani stup sastavljen od međusobno povezanih kralježaka u kojemu je smještena leđna moždina.',
                    'kraljica': ' Kraljica je nasljedni naslov ženske vladarice u nekim zemljama.',
                    'kranjski': ' Kranjski je koji se odnosi na Kranjsku i Kranjce.',
                    'krapinski': ' Krapinski je koji se odnosi na Krapinu i Krapince.',
                    'krasan': ' Krasan je koji svojom pojavom ili ljepotom izaziva divljenje.',
                    'krasno': ' Krasno je tako da pojavom ili ljepotom izaziva divljenje.',
                    'krastavac': ' Krastavac je jednogodišnja povrtna biljka penjačica.',
                    'krasti': ' Krasti znači kriomice ili silom prisvajati što tuđe.',
                    'kratak': ' Kratak je koji u prostoru ima mali razmak od jednoga do drugoga kraja.',
                    'kratica': ' Kratica je skraćena riječ ili više riječi u pisanju; u pravilu se piše malim slovima i ne sklanja se.',
                    'krava': ' Krava je spolno zrela ženka goveda.',
                    'kravata': ' Kravata je dio odjeće koji se veže posebnom petljom oko vrata, ispod ovratnika košulje.',
                    'kravetina': ' Kravetina je vrlo neugodna ili glupa žena.',
                    'krc': ' Krc je onomatopejska riječ kojom se oponaša zvuk lomljenja čega. ',
                    'krckati': ' Krckati znači lomiti što u sitne dijelove. ',
                    'krcnuti': ' Krcnuti znači  razbiti se, slomiti se ili pokvariti se uz tihi zvuk koji podsjeća na 
                    ',
                    'krčati': ' Krčati znači proizvoditi mukle zvukove u praznome želudcu i crijevima.',
                    'krčki': ' Krčki je koji se odnosi na Krk i Krčane.',
                    'kreda': ' Kreda je pisaljka kojom se piše na školskoj ploči.',
                    'kredit': ' Kredit je novac koji se daje ili uzima uz obvezu da u određenome roku bude vraćeno, obično uz kamate.',
                    'kreketati': ' Glasati se glasom koji podsjeća na kre-kre.',
                    'krenuti': ' Krenuti znači početi se kretati ili ići.',
                    'krepati': ' Krepati znači prestati živjeti (o životinjama i biljkama).',
                    'kreševski': ' Kreševski je koji se odnosi na Kreševo i Kreševljake.',
                    'kreštati': ' Kreštati znači glasati se oštrim, prodornim, hrapavim glasom.',
                    'kretati': ' Kretati znači pomicati se s kojega mjesta u određenome smjeru.',
                    'kretski': ' Kretski je koji se odnosi na Kretu i Krećane.',
                    'krevet': ' Krevet je dio namještaja na kojemu se leži, spava ili odmara.',
                    'kriještati': ' Kriještati znači glasati se oštrim, prodornim, hrapavim glasom.',
                    'krik': ' Krik je jak oštar uzvik koji je izraz bola, straha, velike radosti, želje da se izazove pažnja i sl. . ',
                    'krilo': ' Krilo je organ za letenje u ptica i mnogih kukaca.',
                    'krimski': ' Krimski je koji se odnosi na Krim i Krimljane.',
                    'kriti': ' Kriti znači činiti da se što ne vidi ili ne dozna.',
                    'kriv': ' Kriv je koji nije ravan, koji je svinut onako kako ne bi trebalo.',
                    'krivoputski': ' Krivoputski je koji se odnosi na Krivi Put i Krivopućane.',
                    'kriza': ' Kriza je posebno teško stanje u razvoju koga ili čega, očituje se zastojem ili negativnim obratom u odnosu na dotadašnji tijek.',
                    'križ': ' Križ je kršćanski simbol koji se sastoji od dvaju krakova postavljenih pod pravim kutom.',
                    'križaljka': ' Križaljka je zagonetka u obliku mreže praznih kvadratića koji se ispunjaju slovima da bi se dobile tražene riječi u vodoravnome i uspravnome nizu.',
                    'križevački': ' Križevački je koji se odnosi na Križevce i Križevčane.',
                    'križić': ' Križić je mali križ.',
                    'krkljati': ' Krkljati znači ispuštati mukle, neartikulirane zvukove iz grla i pluća.',
                    'krletka': ' Krletka je kućica od žice ili pruća u kojoj se drže ptice ili male životinje.',
                    'krmača': ' Krmača je ženka svinje.',
                    'krojač': ' Krojač je osoba bez obzira na spol ili muškarac koji kroji i šije odjeću.',
                    'krojačev': ' Krojačev je koji pripada krojaču.',
                    'krojačica': ' Krojačica je žena koja kroji i šije odjeću.',
                    'krojačičin': ' Krojačičin je koji pripada krojačici.',
                    'krojački': ' Krojački je koji se odnosi na krojenje i krojače.',
                    'krojiti': ' Krojiti što znači oblikovati i rezati dijelove tkanine ili kože kako bi se od njih sašila odjeća ili napravila obuća.',
                    'krokodil': ' Krokodili su red tropskih grabežljivaca iz razreda gmazova maslinaste, sive, smeđe ili crne boje, široka spljoštena tijela, mišićava repa te snažne izdužene glave s očima i nozdrvama na njezinu vrhu, kad su im usta zatvorena, vide se zubi obiju čeljusti.',
                    'krom': ' Krom je kemijski element (Cr), sjajna srebrna tvrda kovina, u prirodi se pojavljuje samo u spojevima, a upotrebljava se kao zaštitna prevlaka.',
                    'krošnja': ' Krošnja je dio drveta iznad debla.',
                    'krotak': ' Krotak je koji je blage i popustljive naravi (o čovjeku).',
                    'krotko': ' Krotko je tako da odražava čiju blagu i popustljivu narav.',
                    'krotkost': ' Krotkost je osobina onoga koji je krotak.',
                    'krov': ' Krov je gornji, zaštitni dio zgrade, automobila i dr.',
                    'krovni': ' Krovni je koji se odnosi na krovili pripada krovu.',
                    'kroz(a)': ' Kroz označuje da tko ili što prolazi unutrašnjim dijelom s jednoga na drugi kraj čega.',
                    'krpa': ' Krpa je ostatak, otpadak od iskorištene tkanine.',
                    'krpelj': ' Krpelj je nametnik iz skupine grinja žute ili smeđe boje koji siše krv čovjeka i životinja i može prenositi zarazne bolesti.',
                    'krstionica': ' Krstionica je zdenac sa svetom vodom u koju se uranja osoba koja se krsti. ',
                    'krstiti': ' Krstiti znači obaviti/obavljati sakrament krštenja.',
                    'kršćanin': ' Kršćanin je osoba bez obzira na spol ili muška osoba kršćanske vjere.',
                    'kršćaninov': ' Kršćaninov je koji pripada kršćaninu.',
                    'kršćanka': ' Kršćanka je ženska osoba kršćanske vjere.',
                    'kršćankin': ' Kršćanskin je koji pripada kršćanki.',
                    'kršćanski': ' Kršćanski je koji se odnosi na kršćane i kršćanstvo.',
                    'krtica': ' Krtica je mali kukcožder zbijena tijela prekrivena crnim krznom, kratka vrata, malih i kožom prekrivenih očiju, izduljene njuške s rilom te kratkih udova s pet prsta živi pod zemljom, a hrani se kukcima, kolutićavcima i drugim malim životinjama koje žive u tlu.',
                    'krug': ' Krug je dio ravnine omeđen kružnicom.',
                    'kruh': ' Kruh je hrana dobivena od brašna žitarica pripravljenoga s kvascem i pečena u pećnici ili krušnoj peći.',
                    'kruliti': ' Kruliti znači proizvoditi mukle zvukove u praznome želudcu i crijevima.',
                    'kruljiti': ' Kruljiti znači proizvoditi mukle zvukove u praznome želudcu i crijevima.',
                    'krumpir': ' Krumpir je zeljasta trajnica podrijetlom iz Južne Amerike.',
                    'kruna': ' Kruna je ukras od srebra, zlata i dragoga kamenja koji vladari nose na glavi kao simbol kraljevske i carske vlasti.',
                    'kruška': ' Kruška je voćka s trbušastim plodovima.',
                    'krut': ' Krut je koji se teško svija ili oblikuje.',
                    'kruto': ' Kruto je tako da se ne može svinuti ili opustiti.',
                    'krutost': ' Krutost je svojstvo kakva tijela da pokazuje otpornost na kakvo svijanje ili lomljenje.',
                    'kružić': ' Kružić je mali krug.',
                    'kružiti': ' Kružiti znači kretati se u krugu, kao da se opisuje kružnica.',
                    'kružni': ' Kružni je koji je nalik na krug ili kružnicu.',
                    'kružnica': ' Kružnica je skup svih točaka u ravnini koje su jednako udaljene od središta',
                    'krv': ' Krv je crvena tjelesna tekućina koja kroz žile prenosi stanicama kisik i hranu, a odnosi otpadne tvari.',
                    'krzno': ' Krzno je koža nekih životinja pokrivena gustom dlakom.',
                    'ksilofon': ' Ksilofon je udaraljkaško glazbalo koje se sastoji od niza drvenih pločica različite duljine.',
                    'ksilofonist': ' Ksilofonist je obez obzira na spol ili muška osoba koja svira ksilofon.',
                    'ksilofonistica': ' Ksilofonistica je ženska osoba koja svira ksilofon.',
                    'ksilofonističin': ' Ksilofonističin je koji pripada ksilofonistici.',
                    'ksilofonistov': ' Ksilofonistov je koji pripada ksilofonistu.',
                    'ksilofonski': ' Ksilofosnksi je koji se odnosi na ksilofon.',
                    'kubanski': ' Kubanski je koji se odnosi na Kubu i Kubance.',
                    'kucati': ' Kucati znači lagano udarati u pravilnim vremenskim razmacima.',
                    'kuća': ' Kuća je građevina namijenjena stanovanju.',
                    'kućanica': ' Kućanica je žena koja nije zaposlena i bavi se kućanskim poslovima i brigom o obitelji.',
                    'kućaničin': ' Kućaničin je koji pripada kućanici.',
                    'kućica': ' Kućica je mala kuća.',
                    'kućni': ' Kućni je koji se odnosi na kuću.',
                    'kud': ' Kud uvodi pitanje o smjeru kretanja, kojim putom?',
                    'kuda': ' Kuda uvodi pitanje o smjeru kretanja, kojim putom. ',
                    'kuga': ' Kuga je smrtonosna zarazna bolest koja se preko buha s glodavaca prenosi na čovjeka.',
                    'kugla': ' Kugla je geometrijsko tijelo, dio prostora omeđen sferom.',
                    'kuglast': ' Kuglast je koji je nalik kugli.',
                    'kuglica': ' Kuglica je mala kugla.',
                    'kuhalo': ' Kuhalo je manji plinski ili strujni uređaj za kuhanje.',
                    'kuhar': ' Kuhar je odrasla osoba bez obzira na spol ili muškarac kojem je kuhanje zanimanje.',
                    'kuharev': ' Kuharev je koji pripada kuharu.',
                    'kuharica': ' Kuharica je žena kojoj je kuhanje zanimanje.',
                    'kuharičin': ' Kuharičin je koji pripada kuharici, ženi kojoj je kuhanje zanimanje.',
                    'kuharov': ' Kuharov je koji pripada kuharu.',
                    'kuharski': ' Kuharski je koji se odnosi na kuhare.',
                    'kuhati': ' Kuhati što znači pripremati hranu na vatri ili na štednjaku u posudi s proključalom vodom.',
                    'kuhinja': ' Kuhinja je prostorija namijenjena pripremi i kuhanju jela.',
                    'kuhinjski': ' Kuhinjski je koji se odnosi na kuhinju.',
                    'kukac': ' Kukci su najbrojnija skupina životinja, razred uzdušnjaka s trima parovima člankovitih nogu, krilima za letenje, sastavljenim očima i stražnjim ili pokrovnim krilima.',
                    'kukurijek': ' Kukurijek je višegodišnja otrovna šumska biljka iz porodice žabnjaka, rana proljetnica s modrozelenim listovima i zeljastom stabljikom.',
                    'kukurijekanje': ' Kukurijekanje je glasanje glasom koji podsjeća na kukuriku. ',
                    'kukurijekati': ' Kukurijekati znači glasati se glasom koji podsjeća na kukuriku. ',
                    'kukurijeknuti': ' Kukurijeknuti znači oglasiti se glasom koji podsjeća na kukuriku. ',
                    'kukurikanje': ' Kukurikanje je glasanje glasom koji podsjeća na kukuriku. ',
                    'kukurikati': ' Kukurikati znači glasati se glasom koji podsjeća na kukuriku. ',
                    'kukuriknuti': ' Kukuriknuti znači oglasiti se koji podsjeća na kukuriku. ',
                    'kukuriku': ' Kukuriku je onomatopejska riječ kojom se oponaša glasanje pijetla. ',
                    'kukuruz': ' Kukuruz je žitarica visoke snažne zelene stabljike.',
                    'kula': ' Kula je uzdignuta građevina okrugla ili četvrtasta oblika koja stoji samostalno ili kao dio tvrđave, dvorca ili gradskih zidina, obično služi za obranu.',
                    'kulminacija': ' Kulminacija je postizanje kakva vrhunca, dosezanje gornje granice čega.',
                    'kulon': ' Kulon je mjerna jedinica za električni naboj (C).',
                    'kultura': ' Kultura je ukupnost djelatnosti, običaja, ideja i vjerovanja određenoga društva ili razdoblja.',
                    'kulturan': ' Kulturan je koji ima visok stupanj kulture.',
                    'kulturni': ' Kulturni je koji se odnosi na kulturu.',
                    'kulturno': ' Kulturno znači tako da odražava čiju obrazovanost i/ili pristojnost.',
                    'kum': ' Kum je svjedok pri sakramentu.',
                    'kuma': ' Kuma je svjedokinja pri sakramentu.',
                    'kumče': ' Kumče je osoba u odnosu na osobu koja joj je kum ili kuma na krštenju ili krizmi.',
                    'kumica': ' Kumica je kuma,  svjedokinja pri sakramentu od milja.',
                    'kumin': ' Kumin je koji pripada kumi.',
                    'kumin': ' Kumin je dvogodišnja zeljasta biljka iz porodice štitarka koja raste po livadama čitave Europe.',
                    'kumov': ' Kumov je koji pripada kumu.',
                    'kuna': ' Kune su porodica zvijeri, krznaša iz reda mesoždera dugoga i vitkoga tijela (kune, lasica, tvor, jazavac i vidra).',
                    'kuneći': ' Kuneći je koji se odnosi na kuniće.',
                    'kunić': ' Kunić je sisavac sličan zecu koji se uzgaja radi dobivanja mesa i krzna.',
                    'kunićevina': ' Kunićevina je kuneće meso.',
                    'kupac': ' Kupac je osoba ili muškarac koji kupuje.',
                    'kupaona': ' Kupaona je prostorija namijenjena održavanju osobne higijene. ',
                    'kupaonica': ' Kupaonica je prostorija namijenjena održavanju osobne higijene.',
                    'kupaonički': ' Kupaonički je koji se odnosi na kupaonicu.',
                    'kupaonski': ' Kupaonski je koji se odnosi na kupaonu.',
                    'kupati (se)': ' Kupati znači prati koga u kadi ili posudi punoj vode.',
                    'kupčev': ' Kupčev je koji pripada kupcu.',
                    'kupina': ' Kupina je grmolika samonikla bodljikava biljka.',
                    'kupiti': ' Kupiti što znači ustupiti što komu za novac.',
                    'kupiti': ' Kupiti znači uzimati s različitih mjesta.',
                    'kupovati': ' Kupovati znači ustupati što komu za novac.',
                    'kupovina': ' Kupovina je davanje novca u zamjenu za kakvu stvar ili nematerijalno dobro.',
                    'kupreški': ' Kupreški je koji se odnosi na Kupres i Kuprešake.',
                    'kupus': ' Kupus je dvogodišnja povrtna zeljasta biljka kupusnjača čvrstih lisnatih glavica iz porodice krstašica.',
                    'Kurban-bajram': ' Kurban-bajram najveći je muslimanski blagdan.',
                    'kurdski': ' Kurdski je koji se odnosi na Kurdistan i Kurde.',
                    'kursor': ' Kursor je simbol na zaslonu koji označuje mjesto na kojemu se može utipkati znak ili odabrati određene opcije rada.',
                    'kut': ' Kut je dio ravnine omeđen dvama polupravcima s istom krajnjom točkom.',
                    'kutija': ' Kutija je predmet čvrstih strana, obično u obliku kvadra ili kocke, koji služi za prijenos, čuvanje i odlaganje različitih stvari.',
                    'kutinski': ' Kutinski je koji se odnosi na Kutinu i Kutinjane.',
                    'kutomjer': ' Kutomjer je naprava za mjerenje kutova.',
                    'kuvajtski': ' Kuvajtski je koji se odnosi na Kuvajt i Kuvajćane.',
                    'kvadar': ' Kvadar je geometrijsko tijelo omeđeno sa šest pravokutnika.',
                    'kvadrat': ' Kvadrat je pravokutnik kojemu su stranice jednake duljine.',
                    'kvadratičan': ' Kvadratičan je koji je nalik kvadratu.',
                    'kvadratić': ' Kvadratić je mali kvadrat.',
                    'kvadratni': ' Kvadratni je koji se odnosi na kvadrate.',
                    'kvaka': ' Kvaka je ručka uz bravu kojom se otvaraju i zatvaraju vrata. ',
                    'kvaliteta': ' Kvaliteta je dobro ili loše svojstvo ili osobina kojega predmeta, pojave, rada, osobe.',
                    'kvalitetan': ' Kvalitetan je koji je dobre kvalitete.',
                    'kvar': ' Kvar je smetnja zbog koje mehanizam ne može raditi.',
                    'kvariti': ' Kvariti što znači činiti što lošijim, mijenjati na lošije, činiti da što nije onako kako bi trebalo biti.',
                    'kviz': ' Kviz je društvena igra ispitivanja znanja i vještina iz različitih područja.',
                    'kvocati': ' Kvocati znači glasati se glasom koji podsjeća na kvo-kvo.',
                    'kvocijent': ' Kvocijent je rezultat dijeljenja dvaju brojeva.',
                    'labinski': ' Labinski je koji se odnosi na Labin i Labinjane.',
                    'ladica': ' Ladica je dio kakva namještaja (npr. stola, ormara) u obliku kutije koja se uvlači i izvlači, služi za čuvanje i odlaganje različitih predmeta.',
                    'ladičar': ' Ladičar je nizak ormar s ladicama.',
                    'lađa': ' Lađa je plovilo duže od 12 metara koje prevozi ljude i teret.',
                    'lagan': ' Lagan je koji je male težine.',
                    'lagano': ' Lagano znači tako da ne zahtijeva veći napor. ',
                    'lagati': ' Lagati znači govoriti nešto što nije istina.',
                    'lak': ' Lak je koji je male težine u odnosu na što drugo.',
                    'lak': ' Lak je otopina koja se nanosi na predmete i površine radi zaštite i postizanja sjaja.',
                    'lakat': ' Lakat je ručni zglob koji povezuje nadlakticu s podlakticom ',
                    'lako': ' Lako znači tako da odražava da je što male težine.',
                    'lakom': ' Lakom je koji pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                    'lakomo': ' Lakomo je tako da odražava da tko pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                    'lakomost': ' Lakomost je osobina onoga koji je lakom ili svojstvo onoga što je lakomo.',
                    'lakovjeran': ' Lakovjeran je koji lako vjeruje komu ili čemu.',
                    'lakovjerno': ' Lakovjerno je tako da odražava da tko lako vjeruje komu ili čemu.',
                    'lakovjernost': ' Lakovjernost je osobina onoga koji je lakovjeran.',
                    'lakrdija': ' Lakrdija je komedija sa sirovim šalama i nepristojnim sadržajem.',
                    'laktometar': ' Laktometar je uređaj za određivanje kakvoće mlijeka.',
                    'lamatati': ' Lamatati znači brzo mahati, mlatiti.',
                    'lamati': ' Lamati znači brzo mahati, mlatiti rukama ili krilima.',
                    'lampa': ' Lampa je naprava za osvjetljivanje.',
                    'lanac': ' Lanac je niz spojenih kovinskih prstenova.',
                    'lančić': ' Lančić je nakit koji se nosi oko vrata, a izgledom podsjeća na mali lanac.',
                    'lane': ' Lane je mlado košute ili srne.',
                    'laringoskop': ' Laringoskop je optički uređaj za pregled grla i grkljana.',
                    'larva': ' Larva je  razvojni stadij kukaca, nezrela i neovisna životinja koja izgleda potpuno drukčije od odraslih jedinka, ima noge i ticala.',
                    'lastavica': ' Lastavica je mala ptica selica dugih, uskih krila i repa koji se račva u dva kraka; gnijezdo zida od blata pod strehama i u stajama.',
                    'lastovski': ' Lastovski je koji se odnosi na Lastovo i Lastovce.',
                    'latica': ' Latica je cvjetni listić, dio cvjetnoga vjenčića različitih oblika i boja, listić cvjetne krunice.',
                    'latinica ': ' Latinica je pismo kojim su pisali stari Rimljani te velik broj pisama koja su se iz njega razvila  prilagodbom drukčijemu glasovnom sustavu, pa  njome danas  pišu svi germanski i romanski jezici,  mađarski, finski, turski i mnogi drugi jezici.',
                    'latinični': ' Latinični je koji se odnosi na latinicu. ',
                    'lav': ' Lav je zvijer iz porodice mačaka žućkastosmeđega krzna čiji mužjak ima dugu grivu.',
                    'lavanda': ' Lavanda je sredozemni zeleni polugrm, trajnica iz porodice usnača, dlakava lišća i modroljubičastih mirisnih cvjetova, koja se uzgaja za proizvodnju mirisnoga ulja.',
                    'lavež': ' Lavež je glasanje psa.',
                    'lavica': ' Lavica je ženka lava.',
                    'lavičin': ' Lavičin je koji pripada lavici, ženki lava.',
                    'lavić': ' Lavić je mali lav.',
                    'lavićev': ' Lavićev je koji pripada laviću.',
                    'lavina': ' Lavina je velika količina snijega, leda, zemlje i kamenja koja iznenada i brzo sklizi niz planinske padine.',
                    'lavlji': ' Lavlji je koji se odnosi na lavove.',
                    'lavov': ' Lavov je koji pripada lavu, zviijeri iz porodice mačaka žućkastosmeđega krzna čiji mužjak ima dugu grivu.',
                    'lavovski': ' Lavovski je koji je kao u lava, koji zadivljuje snagom ili veličinom.',
                    'laž': ' Laž je tvrdnja koja ne odgovara stvarnosti, koja nije istinita.',
                    'leća': ' Leća je jednogodišnja zeljasta mahunarka.',
                    'leća': ' Leća je prozirni očni organ kroz koji se projicira vidna slika.',
                    'leći': ' Leći znači zauzeti vodoravan položaj, ispružiti tijelo.',
                    'led': ' Led je voda u čvrstome stanju, smrznuta, zaleđena voda.',
                    'ledenjak': ' Ledenjak je pokretna ledena masa koja se s planinskih područja spušta u niže dijelove.',
                    'ledomat': ' Ledomat je uređaj za proizvodnju leda.',
                    'leđa': ' Leđa su stražnji dio ljudskoga trupa između vrata i slabina kroz koji prolazi kralježnica.',
                    'legenda': ' Legenda je jednostavna epska književna vrsta u kojoj se miješaju zbiljski i fantastični motivi, predaja u kojoj se veliča život neke osobe, svetca ili kakvog događaja.',
                    'lekcija': ' Lekcija je nastavna jedinica koju učitelj ili nastavnik predaje ili obrađuje s učenicima ili dio gradiva u udžbeniku koji treba naučiti.',
                    'lektira': ' Lektira je ono što se čita.',
                    'lepetati': ' Lepetati znači šumno mahati krilima ili rukama.',
                    'lepeza': ' Lepeza je predmet koji se drži u ruci i kojim se maše radi rashlađivanja.',
                    'leptir': ' Leptiri su red s najvećim brojem vrsta u razredu kukaca s dvama parovima krila na kojima su male ljuske i s usnim organima u obliku rila za lizanje i sisanje.',
                    'let': ' Let je kretanje zrakom s pomoću krila, motora, balona i sl.',
                    'letalan': ' Letalan je koji ima smrtni ishod.',
                    'letalitet': ' Letalitet je odnos broja umrlih prema broju oboljelih od neke bolesti izražen u postotcima',
                    'letjelica': ' Letjelica je zračno prijevozno sredstvo.',
                    'letjeti': ' Letjeti znači kretati se zrakom s pomoću krila ili kakva uređaja.',
                    'letonski': ' Letonski je koji se odnosi na Letoniju i Letonce.',
                    'leukemija': ' Leukemija je zloćudna bolest matičnih stanica krvotoka prouzročena naglim i nanadziranim porastom leukocita.',
                    'ležaljka': ' Ležaljka je sjedalica koja se može sklopiti i prenositi, namijenjena je udobnomu sjedenju ili ležanju.',
                    'ležati': ' Ležati znači nalaziti se u vodoravnome položaju.',
                    'libanonski': ' Libanonski je koji se odnosi na Libanon i Libanonce.',
                    'libijski': ' Libijski je koji se odnosi na Libiju i Libijce.',
                    'libreto': ' Libreto je dramski tekst napisan za glazbenu i scensku izvedbu.',
                    'lice': ' Lice je prednja strana glave od brade do obrva.',
                    'ličinka': ' Ličinka je razvojni stadij kukaca, nezrela i neovisna životinja koja izgleda potpuno drukčije od odraslih jedinka, ima noge i ticala.',
                    'lički': ' Lički je koji se odnosi na Liku i Ličane.',
                    'lift': ' Lift je uređaj za dizanje i spuštanje ljudi i tereta koji se može naći u višekatnicama, na gradilištima, u brodovima i slično.',
                    'liga': ' Liga je udruga osnovana radi postizanja određenih zajedničkih ciljeva.',
                    'lignja': ' Lignja je morski grabežljivac glavonožac vretenasta tijela s osam krakova i dva lovna kraka koji su duži od ostalih, a raspoređeni su oko usnoga otvora.',
                    'liječiti': ' Liječiti što znači liječenjem otklanjati bolest.',
                    'liječnica': ' Liječnica je žena koja je završila medicinski fakultet i bavi se liječenjem ljudi.',
                    'liječničin': ' Liječničin je koji pripada liječnici.',
                    'liječnički': ' Liječnički je koji se odnosi na liječnike.',
                    'liječnik': ' Liječnik je odrasla osoba bez obzira na spol ili muškarac koji je završio medicinski fakultet i bavi se liječenjem ljudi.',
                    'liječnikov': ' Liječnikov je koji pripada liječniku.',
                    'lijegati': ' Lijegati znači  zauzimati vodoravan položaj, ispružati tijelo.',
                    'lijek': ' Lijek je tvar ili proizvod kojim se bolest liječi ili se uklanjaju njezini simptomi.',
                    'lijen': ' Lijen je koji ne voli ili ne želi raditi ili biti aktivan.',
                    'lijeno': ' Lijeno je tako da odražava čiju lijenost, da je usporen ili neaktivan.',
                    'lijenost': ' Lijenost je osobina onoga tko je lijen, tko ništa ne radi ili nije aktivan.',
                    'lijep': ' Lijep je koji je ugodan oku, koji je skladna izgleda.',
                    'lijepiti': ' Lijepiti što znači spajati dvije površine ljepilom ili kakvom ljepljivom tvari.',
                    'lijepo': ' Lijepo je tako da odražava sklad, da je ugodno oku.',
                    'lijerica': ' Lijerica je hrvatsko gudaće narodno glazbalo s trima žicama.',
                    'lijeričar': ' Lijeričar je osoba bez obzira na spol ili muška osoba koja svira lijericu.',
                    'lijeričarev': ' Lijeričarev je koji pripada lijeričaru.',
                    'lijeričarka': ' Lijeričarka je glazbenica koja svira lijericu.',
                    'lijeričarov': ' Lijeričarov je koji pripada lijeričaru.',
                    'lijeričarski': ' Lijeričarski je koji se odnosi na lijerice i lijeričare.',
                    'lijes': ' Lijes je sanduk, obično od drva, u koji se polaže pokojnikovo tijelo.',
                    'lijeska': ' Lijeska je listopadni drvenasti grm koji se uzgaja radi ploda s jestivom jezgrom.',
                    'lijevati': ' Lijevati što znači puštati da što teče u mlazu.',
                    'lijevi': ' Lijevi je koji se nalazi na strani na kojoj je ljudsko srce.',
                    'lijevo': ' Lijevo je  s lijeve strane.',
                    'lijonski': ' Lijonski je koji se odnosi na Lyon i Lijonce.',
                    'lik': ' Lik su crte koje oblikuju tijelo ili oblik u kojemu se što pojavljuje.',
                    'limenka': ' Limenka je posuda od lima.',
                    'limun': ' Limun je vazdazelena suptropska voćka okruglasta žuta ploda.',
                    'limunada': ' Limunada je osvježavajuće piće od limunova soka.',
                    'limunika': ' Limunika je vazdazelena suptropska voćka velika okruglasta žutoga ili narančastoga ploda.',
                    'lingvist': ' Lingvist je stručnjak koji se bavi lingvistikom.',
                    'lingvistica': ' Lingvistica je stručnjakinja koja se bavi lingvistikom.',
                    'lingvističin': ' Lingvističin je koji pripada lingvistici.',
                    'lingvistički': ' Lingvistički je koji se odnosi na lingviste i lingvistiku.',
                    'lingvistika': ' Lingvistika je opća znanost o jeziku, proučavanje jezičnih pojava u najširemu smislu.',
                    'lingvistov': ' Lingvistov je koji pripada lingvistu.',
                    'linija': ' Linija je pisani trag koji ostavlja kakvo sredstvo kojim se može pisati ili crtati ili prikaz takvoga traga na ekranu.',
                    'lipa': ' Lipa je listopadno drvo bujne krošnje koje cvate žutim cvatom jaka, slatkasta mirisa.',
                    'lipanj': ' Lipanj je šesti mjesec u kalendarskoj godini, mjesec izmađu svibnja i srpnja.',
                    'lipsati': ' Lipsati znači prestati živjeti (obično o konju ili govedu).',
                    'lira': ' Lira je antičko trzaće glazbalo slično gitari.',
                    'lirika': ' Lirika je, uz dramu i epiku, glavni književni rod koji obuhvaća djela koja u zgusnutoj, kratkoj formi izražava pjesnikova opažanja, misli i osjećaje.',
                    'lirski': ' Lirski je koji se donosi na liriku.',
                    'lisabonski': ' Lisabonski je koji se odnosi na Lisabon i Lisabonce.',
                    'lisac': ' Lisac je mužjak lisice.',
                    'lisica': ' Lisica je grabežljiva zvijer iz porodice pasa crvenkastosmeđe boje sa svijetlim trbuhom, duga i kitnjasta repa.',
                    'lisice': ' Lisice su par obruča kojima se vezuju ruke uhićenika.',
                    'lisičji': ' Lisičji je koji se odnosi na lisice.',
                    'liska': ' Liska je ptica močvarica crna perja s lisom na čelu, dobro pliva, a slabije leti.',
                    'lisnat': ' Lisnat je koji ima mnogo lišća ili listova. ',
                    'lisni': ' Lisni je koji se odnosi na list.',
                    'lisnica': ' Lisnica je novčanik s više pretinaca.',
                    'list': ' List je dio biljke, tanka plosnata izraslina na stabljici, najčešće zelene boje, koja fotosintezom biljku opskrbljuje hranom.',
                    'lista': ' Lista su sva imena ili nazivi čega napisani određenim redoslijedom.',
                    'listak': ' Listak je mali list, mala tanka plosnata izraslina na stabljici, najčešće zelene boje, koja fotosintezom biljku opskrbljuje hranom.',
                    'listati': ' Listati znači okretati listove.',
                    'listić': ' Listić je mali list, mala tanka plosnata izraslina na stabljici, najčešće zelene boje, koja fotosintezom biljku opskrbljuje hranom.',
                    'listina': ' Listina je stari dokument pisan rukom koji ima povijesnu vrijednost.',
                    'listonoša': ' Listonoša je odrasla osoba bez obzira na spol koja raznosi poštanske pošiljke.',
                    'listopad': ' Listopad je deseti mjesec u kalendarskoj godini, mjesec između rujna i studenoga.',
                    'listopadni': ' Listopadni je kojemu opada lišće, koji u određeno doba godine gubi lišće',
                    'listopadski': ' Listopadski je koji se odnosi na listopad.',
                    'lišaj': ' Lišaj je simbiotska zajednica gljiva i alga koja djeluje kao jedinstveni organizam.',
                    'lišavanje': ' ⁮Lišavanje je oduzimanje, uskraćivanje komu kakva prava, nečega što mu pripada, ostavljanje koga bez čega.',
                    'lišavati (se)': ' Lišavati (se) čega znači oduzimati, uskraćivati komu kakva prava, nečega što mu pripada, ostavljati koga bez čega.',
                    'lišce': ' Lišce je malo lice, lice od milja.',
                    'lišće': ' Lišće je skup listova,  tankih plosnatih izraslina na stabljici, najčešće zelene boje, koje fotosintezom biljku opskrbljuju hranom.',
                    'lišenost': ' Lišenost je stanje onoga koji je čega lišen, komu su oduzeta, uskraćena kakva prava, nešto što mu pripada, koji je ostavljen bez čega.',
                    'lišiti (se)': ' Lišiti (se) čega znači oduzeti, uskratiti komu kakva prava, nešto što mu pripada, ostaviti koga bez čega.',
                    'litanije': ' Litanije su molitve u kršćanskoj liturgiji koje su ili ispovjedne ili usmjerene nalaženju izlaza u teškim vremenima.',
                    'litavski': ' Litavski je koji se odnosi na Litvu i Litavce.',
                    'literarni': ' Literarni je koji se odnosi na literaturu, umjetnost riječi.',
                    'literatura': ' Literatura su su umjetnička djela oblikovana riječima, ukupnost pisanih umjetničkih djela.',
                    'liti': ' Liti što znači puštati da što teče u mlazu.',
                    'litica': ' Litica je visoka, strma i gola stijena.',
                    'litij': ' Litij je kemijski element (Li), meka srebrnobijela kovina, najlakša poznata kovina, u prirodi se pojavljuje u spojevima (mineralima), upotrebljava se u proizvodnji baterija, kao raketno gorivo i u medicini. ',
                    'litijev': ' Litijev je koji pripada litiju.',
                    'litografija': ' Litografija je tehnika uzimanja otiska s ravne površine kamena u koju je urezan crtež',
                    'litosfera': ' Litosfera je stjenoviti kameni Zemljin ovoj koji tvore Zemljina kora i njezin gornji plašt, vanjski tvrdi kameniti sloj Zemlje kojis eđže do dubine od 200 m.',
                    'litosferni': ' Litosferni je koji se odnosi na litosferu.',
                    'litra': ' Litra je iznimno dopuštena mjerna jedinica za obujam tekućina (l, L).',
                    'litraža': ' Litraža je obujam posude ili spremnika za tekućinu izražen u litrama.',
                    'litreni': ' Litreni je koji ima obujam od jednoga kubnoga decimetra, u koji može stati jedna litra tekućine.',
                    'liturgija': ' Liturgija je čin služenja Bogu, služba Božja, u obliku misnoga slavlja.',
                    'liturgijski': ' Liturgijski je koji se odnosi na liturgiju.',
                    'liturgika': ' Liturgika je o bogoslužju.',
                    'livada': ' Livada je zemljište obraslo travom.',
                    'livadni': ' Livadni je koji se odnosi na livadu.',
                    'livanjski': ' Livanjski je koji se odnosi na Livno i Livnjake.',
                    'livreja': ' Livreja je posebna vrsta uniforme kakvu npr. imaju vratari u hotelima.',
                    'lizalica': ' Lizalica je slatkiš na štapiću koji se liže.',
                    'lizanje': ' Lizanje je proces ili čin u kojemu se što liže.',
                    'lizati': ' Lizati što znači prelaziti jezikom preko čega.',
                    'lizing': ' Lizing je najam opreme, automobila i sl. s mogućnošću otkupa nakon ugovorenog razdoblja.',
                    'liznuti': ' Liznuti što znači prijeći jezikom preko čega.',
                    'loj': ' Loj je masnoća u tkivu i oko tkiva nekih životinja.',
                    'lokalan': ' Lokalni je koji se odnosi na određeno mjesto ili područje.',
                    'lokativ': ' Lokativ je padež koji odgovara na pitanja 
                    ',
                    'lokativni': ' Lokativni je koji se odnosi na lokativ. ',
                    'lokomotiva': ' Lokomotiva je stroj na kotačima koji se sam kreće i služi za vuču vagona po tračnicama.',
                    'lonac': ' Lonac je duboka okrugla posuda za kuhanje.',
                    'lončić': ' Lončić je mali lonac, duboka posuda za kuhanje manjega promjera.',
                    'londonski': ' Londonski je koji se odnosi na London i Londončane/Londonce.',
                    'lopata': ' Lopata je ručno oruđe s dugom drškom i donjim kovinskim dijelom koje služi za kopanje i premještanje zemlje, pijeska i sl.',
                    'lopoč': ' Lopoč je trajna vodena biljka velikih listova i raznobojnih cvjetova koji plutaju na vodi.',
                    'lopov': ' Lopov je osoba ili muškarac koji krade.',
                    'lopovski': ' Lopovski je koji se odnosi na lopova.',
                    'lopta': ' Lopta je predmet koji služi za igru, obično u obliku gumene ili plastične kugle.',
                    'loš': ' Loš je koji ima negativne osobine ili neželjena svojstva.',
                    'loše': ' Loše je onako kako ne treba biti, tako da ne ispunjava očekivanja. ',
                    'lošinjski': ' Lošinjski je koji se odnosi na Lošinj i Lošinjane.',
                    'lov': ' Lov je hvatanje i ubijanje životinja u prirodi radi hrane ili sporta.',
                    'lovac': ' Lovac je odrasla osoba ili muškarac koji se bavi lovom, koji ide u lov.',
                    'lovački': ' Lovački je koji se odnosi na lovce, odrasle osobe ili muškarce koji se bave lovom, koji idu u lov.',
                    'lovčev': ' Lovčev je koji pripada lovcu, odrasloj osobi ili muškarcu koji se bavi lovom, koji ide u lov.',
                    'loviti': ' Loviti koga znači ići u lov, hvatati i ubijati životinje prirodi zbog hrane ili sporta.',
                    'lovkinja': ' Lovkinja je žena koja se bavi lovom, koja ide u lov.',
                    'lovkinjin': ' Lovkinjin je koji pripada lovkinji.',
                    'lovrećki': ' Lovrećki je koji se odnosi na Lovreć i Lovrećane.',
                    'lozinka': ' Lozinka je brojčana i/ili slovna oznaka koja se dodjeljuje komu kako bi se sačuvala tajnosti ili se prepoznalo koga.',
                    'lubenica': ' Lubenica je jednogodišnja zeljasta biljka s velikim zelenim okruglim plodom.',
                    'lud': ' Lud je koji je psihički bolestan, koji je poremećena uma.',
                    'ludbreški': ' Ludbreški je koji se odnosi na Ludbreg i Ludbrežane.',
                    'ludo': ' Ludo je tako da odražava da je tko pretjeruje u čemu ili odstupa od kakva pravila ili očekivanja.',
                    'ludost': ' Ludost je nepromišljen ili nerazborit postupak.',
                    'luk': ' Luk je savitljivi prut napregnut tetivom s pomoću kojega se odapinje strijela.',
                    'luk': ' Luk je višegodišnja zeljasta povrtnica s podzemnom stabljikom u obliku lukovice.',
                    'luka': ' Luka je zaštićeni dio obale uređen za pristajanje brodova.',
                    'lukav': ' Lukav je koji potajno, prikrivajući misli i osjećaje, radi što s namjerom da prevari ili nadmudri koga.',
                    'lukavo': ' Lukavo je tako da odražava da tko potajno radi što s namjerom da prevari ili nadmudri koga.',
                    'lukavost': ' Lukavost je osobina onoga koji je lukav ili svojstvo onoga što je lukavo.',
                    'lukovica': ' Lukovica je podzemna stabljika obavijena mesnatim listovima koja biljci služi kao spremište hrane.',
                    'luksemburški': ' Luksemburški je koji se odnosi na Luksemburg i Luksemburžane, stanovnike Luksemburga.',
                    'lunapark': ' Lunapark je zabavni park u kojemu se nalaze vrtuljci, autići, streljana, kuća straha i drugi zabavni sadržaji.',
                    'lupati': ' Lupati znači pritiskati što na što tako da ostavi trag.',
                    'luster': ' Luster je viseća svjetiljka s jednom ili više svijeća ili svjetiljki rasvjetne ili dekorativne funkcije. ',
                    'lutak': ' Lutak je dječja igračka lika dječaka ili muškarca.',
                    'lutati': ' Lutati znači  kretati se u različitim smjerovima i ne nalaziti pravi put.',
                    'lutka': '  Lutka je igračka ljudskoga lika.',
                    'luzitanizam': ' Luzitanizam je riječ ili sveza portugalskoga  podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                    'ljekarna': ' Ljekarna je mjesto na kojemu se pripremaju i prodaju lijekovi, pripravci i sredstva  za zaštitu zdravlja. ',
                    'ljekarnica': ' Ljekarnica je žena koja je završila farmaceutski fakultet i radi u ljekarni.',
                    'ljekarničin': ' Ljekarničin je koji pripada ljekarnici.',
                    'ljekarnički': ' Ljekarnički je koji se odnosi na ljekarnike.',
                    'ljekarnik': ' Ljekarnik je osoba ili muškarac koji je završio farmaceutski fakultet i radi u ljekarni.',
                    'ljekarnikov': ' Ljekarnikov je koji pripada ljekarniku.',
                    'ljepilo': ' Ljepilo je tvar koja lijepi i služi za lijepljenje.',
                    'ljepota': ' Ljepota je svojstvo onoga koji je lijep ili onoga što je lijepo, dojam ili osjećaj lijepoga koji u nama izaziva nešto čemu se divimo zbog izgleda, sadržaja ili duhovnih vrijednosti.',
                    'ljestve': ' Ljestve su naprava za penjanje i spuštanje koja se sastoji od dvaju usporednih jednako dugačkih komada drva, čelika ili konopca spojenih prečkama.',
                    'lješnjak': ' Lješnjak je listopadni drvenasti grm koji se uzgaja radi ploda s jestivom jezgrom.',
                    'ljetni': ' Ljetni je koji se odnosi na ljeto.',
                    'ljeto': ' Ljeto je godišnje doba koje na sjevernoj hemisferi počinje 21. lipnja i traje do 23. rujna.',
                    'ljetovalište': ' Ljetovalište je mjesto u kojemu se provode ljetni praznici.',
                    'ljetovati': ' Ljetovati znači provoditi ljetni odmor izvan stalnoga mjesta boravka.',
                    'ljevak': ' Ljevak je osoba obzira na spol ili muška osoba koja piše lijevom rukom ili se njome primarno služi.',
                    'ljevakinja': ' Ljevakinja je ženskan osoba koja piše lijevom rukom ili koja se njome primarno služi.',
                    'ljevakinjin': ' Ljevakinjin je koji pripada ljevakinji.',
                    'ljevakov': ' Ljevakov je koji pripada ljevaku',
                    'ljevaonica': ' Ljevaonica je radionica ili tvornica u kojoj se tale kovine i od njih lijevanjem izrađuju različiti kovinski predmeti.',
                    'ljiljan': ' Ljiljani su porodica trajnih zeljastih samoniklih ili ukrasnih biljaka jednosupnica s podzemnom lukovicom.',
                    'ljubak': ' Ljubak je koji svojim izgledom ili ponašanjem lijep i privlačan drugima.',
                    'ljubav': ' Ljubav je snažan osjećaj naklonosti, privrženosti i pozitivne energije.',
                    'ljubazan': ' Ljubazan je koji je pristojan i ugodan u komunikaciji s ljudima.',
                    'ljubazno': ' Ljubazno je tako da odražava pristojnost i ugodnost u komunikaciji.',
                    'ljubaznost': ' Ljubaznost je osobina onoga koji je ljubazan ili svojstvo onoga što je ljubazno.',
                    'ljubica': ' Ljubica je zeljasta proljetnica mirisnih cvjetova.',
                    'ljubičast': ' Ljubičast  je koji je boje ljubice.',
                    'ljubimac': ' Ljubimac je osoba ili muškarac koji uživa čiju naklonost ili ljubav, koji je posebno voljen i kojemu se posvećuje posebna pažnja.',
                    'ljubimčev': ' Ljubimčev je koji pripada ljubimcu, osobi ili muškarcu koji uživa čiju naklonost ili ljubav, koji je posebno voljen i kojemu se posvećuje posebna pažnja.',
                    'ljubimica': ' Ljubimica je ženska osoba koja uživa čiju naklonost ili ljubav, koja je posebno voljena i kojoj se posvećuje posebna pažnja.',
                    'ljubimičin': ' Ljubimičin je koji pripada ljubimici.',
                    'ljubiti': ' Ljubiti koga znači dodirom usana izražavati ljubav, prijateljstvo, nježnost, pozdrav, poštovanje ili naklonost. ',
                    'ljubljanski': ' Ljubljanski je koji se odnosi na Ljubljanu i Ljubljančane.',
                    'ljubuški': ' Ljubuški je koji se odnosi na Ljubuški i Ljubušake.',
                    'ljudski': ' Ljudski je koji se odnosi na ljude.',
                    'ljuljačka': ' Ljuljačka je naprava za dječju zabavu, sjedalo koje visi i njiše se pokretanjem tijela prema naprijed i prema natrag.',
                    'ljuljati': ' Ljuljati koga ili što znači laganim pokretima ravnomjerno pomicati koga ili što naprijed i natrag ili lijevo i desno.',
                    'ljupko': ' Ljupko je tako da odražava čiju ljepotu i privlačnost.',
                    'ljupkost': ' Ljupkost je osobina onoga koji je ljubak ili svojstvo onoga što je ljupko.',
                    'ljuska': ' Ljuska je tvrdi i lomljivi vanjski omotač nekih biljnih plodova i jaja u životinja.',
                    'ljuskar': ' Ljuskari su podrazred malih slatkovodnih i morskih rakova kojima je tijelo pokriveno dvjema vapnenim ljuskama.',
                    'ljuskast': ' Ljuskast je koji je prekriven ljuskama, rožnatim pločicama. ',
                    'ljuskaš': ' Ljuskaši su red  gmazova koji uključuje tri podrazreda: guštere, zmije i prstenaše.',
                    'ljuskav': ' Ljuskav je koji je prekriven ljuskama, rožnatim pločicama. ',
                    'ljut': ' Ljut je koji je pun ljutnje.',
                    'ljutina': '  Ljutina je svojstvo onoga što je ljuto, što snažno nadražuje osjetila.',
                    'ljutit': ' Ljutit je koji je pun ljutnje.',
                    'ljutiti': ' Ljutiti koga znači izazivati čiju ljutnju.',
                    'ljutito': ' Ljutito je tako da odražava da je tko ljutit.',
                    'ljutitost': ' Ljutitost je osobina onoga koji je ljutit ili svojstvo onoga što je ljutito.',
                    'ljutnja': ' Ljutnja je stanje izazvano osjećajem nezadovoljstva.',
                    'ljuto': ' Ljuto znači tako da je puno ljutnje, s izraženim osjećajem nezadovoljstva.',
                    'maciti se': ' Maciti se znači donositi mlado na svijet (o mački).',
                    'mač': ' Mač je hladno ručno oružje koje na dršku ima pričvršćenu dugačku oštircu s dvjema oštrim plohama.',
                    'mačak': ' Mačak je mužjak mačke.',
                    'mače': ' Mače je mladunče mačke.',
                    'mačić': ' Mačić je mladunče mačke.',
                    'mačka': ' Mačka je domaća životinja gipka tijela i mekana krzna.',
                    'mačkica': ' Mačkica je mladunče mačke.',
                    'maćeha': ' Maćeha je očeva žena njegovoj djeci iz prethodnih brakova.',
                    'maćehin': ' Maćehin je koji pripada maćehi.',
                    'maćehinski': ' Maćehinski je koji se odnosi na maćehe.',
                    'maćuhica': ' Maćuhica je dvogodišnja uzgojena ukrasna biljka.',
                    'mada': ' Mada uvodi stvarnu dopusnu surečenicu u zavisnosloženoj rečenici. ',
                    'madagaskarski': ' Madagaskarski je koji se odnosi na Madagaskar i Madagaskarce.',
                    'madrac': ' Madrac je mekani uložak za krevet s oprugama ili punjen pjenom na kojemu se leži.',
                    'madridski': ' Madridski je koji se odnosi na Madrid i Madriđane.',
                    'mađarski': ' Mađarski je koji se odnosi na Mađarsku i Mađare.',
                    'mađioničar': ' Mađioničar je muška osoba ili osoba bez obzira na spol koja s pomoću trikova izvodi različite vještine koje se čine nevjerojatnima.',
                    'mađioničarev': ' Mađioničarev je koji pripada mađioničaru.',
                    'mađioničarka': ' Mađioničarka je žena koja s pomoću trikova izvodi različite vještine koje se čine nevjerojatnima.',
                    'mađioničarkin': ' Mađioničarkin je koji pripada mađioničarki.',
                    'mađioničarov': ' Mađioničarov je koji pripada mađioničaru.',
                    'mađioničarski': ' Mađioničarski je koji se odnosi na mađioničare.',
                    'maestral': ' Maestral je jednolični jugozapadni, zapadni ili sjeverozapadni vjetar na Jadranu koji puše u toplome dijelu godine s hladnijega mora na toplije kopno.',
                    'maestro': ' Maestro je naslov istaknutoga skladatelja, glazbenika ili dirigenta.',
                    'magarac': ' Magarac je domaća životinja iz porodice konja dugih ušiju, siva, smeđa, crna ili crvenkasta krzna koja se obično uzgaja za nošenje tereta.',
                    'magla': ' Magla su vodene kapljice ili kristalići leda koji lebde u zraku i smanjuju vidljivost u prizemnome sloju atmosfere na manje od jedan kilometar.',
                    'maglajski': ' Maglajski je koji se odnosi na Maglaj i Maglajlije.',
                    'magleni': ' Magleni je koji se odnosi na maglu. ',
                    'magnet': ' Magnet je trajno magnetizirani predmet, obično u obliku štapa ili potkove, koji magnetskom silom snažno privlači predmete od željeza, ima sjeverni i južni pol.',
                    'magnetofon': ' Magnetofon je uređaj za snimanje glasova i zvukova na magnetsku vrpcu i slušanje snimke s takve vrpce.',
                    'magnezij': ' Magnezij je kemijski element (Mg), srebrnobijela lagana kovina, u prirodi se pojavljuje samo u spojevima, a sastojak je stijena, klorofila, krvi, kosti i mlijeka.',
                    'magnolija': ' Magnolija je drvenasta ukrasna grmolika biljka koja cvjeta u rano proljeće.',
                    'maharadža': ' Maharadža je muški vladarski naslov u Indiji.',
                    'mahati': ' Mahati znači praviti jake i brze pokrete čime.',
                    'mahnuti': ' Mahnuti znači napraviti jak i brz pokret čime.',
                    'mahovina': ' Mahovine su skupina najjednostavnijih stablašica koje rastu na vlažnome staništu, na stijenama i na kori drveća u sjenovitoj sjevernoj strani šume, a samo iznimno u vodi.',
                    'mahuna': ' Mahuna je plod mahunarke nastao od jednoga plodnog lista duguljasta ili okrugla oblika u kojoj su sjemenke.',
                    'majčin': ' Majčin je koji pripada majci.',
                    'majčinski': ' Majčinski je koji se odnosi na majke, roditelje ženskoga spola.',
                    'majica': ' Majica je komad odjeće koji se oblači preko glave i nosi umjesto košulje.',
                    'majka': ' Majka je roditelj ženskoga spola.',
                    'majmun': ' Majmuni su skupina sisavaca plodvaša iz reda primata sploštena prsnog koša, relativno velika mozga i čovjekolika lica, koja mogu uspravno sjediti i povremeno uspravno stajati i hodati, a žive u šumama tropskih područja i na stijenama Gibraltara.',
                    'major': ' Major je viši časnički čin u jugoslavenskoj vojsci (i drugim vojskama), podređen činu potpukovnika.',
                    'majorica': ' Majorica je žena s činom majora.',
                    'majoričin': ' Majoričin je koji pripada majorici.',
                    'majorov': ' Majorov je koji pripada majoru.',
                    'majorski': ' Majorski je koji se odnosi na majore.',
                    'mak': ' Makovi su porodica dvosupnica podrijetlom sa Srednjega istoka s plodom koji ej višestruko pregrađena glavica s mnogo sjemenka.',
                    'makar': ' Makar uvodi stvarnu dopusnu surečenicu u zavisnosloženoj rečenici. ',
                    'makar': ' Makar ograničuje tvrdnju ili rečenicu i označuje da ono što se njom izriče zadovoljava minimalan zahtjev, minimalne potrebne ili poželjne uvjete za što.',
                    'makarski': ' Makarski je koji se odnosi na Makarsku i Makarane.',
                    'maknuti': ' Maknuti znači promijeniti mjesto čemu, ukloniti što.',
                    'malezijski': ' Malezijski je koji se odnosi na Maleziju i Malezijce.',
                    'mali': ' Mali je koji nema veliku veličinu, težinu ili količinu.',
                    'malijski': ' Malijski je koji se odnosi na Mali i Malijce.',
                    'malina': ' Malina je trajan grm s lišćem koje ima dugačku peteljku, pravilne bijele cvjetiće i okruglu stabljiku obraslu bodljikama.',
                    'malinin': ' Malinin je koji se odnosi na malinu.',
                    'malinov': ' Malinov je koji pripada malini, koji je dio maline.',
                    'malo': ' Malo je tako da odražava malu količinu ili mjeru.',
                    'malteški': ' Malteški je koji se odnosi na Maltu i Maltežane.',
                    'malj': ' Malj je drveno ili kovinsko oruđe s drškom i velikom glavom u obliku valjka. ',
                    'mama': ' Mama je majka od milja.',
                    'mamac': ' Mamac je hrana ili umjetno sredstvo kojim se mami životinja.',
                    'mamin': ' Mamin je koji pripada mami.',
                    'mana': ' Mana je tjelesni ili funkcionalni nedostatak ili odstupanje od normalnih značajka.',
                    'mandarina': ' Mandarina je vazdazelena sredozemna voćka okruglasta slatka i kisela ploda.',
                    'mandolina': ' Mandolina je trzaće žičano glazbalo kruškasta oblika s četirima parovima žica.',
                    'mandolinist': ' Mandolinist je osoba bez obzira na spol ili muška osoba koja svira mandolinu. ',
                    'mandolinistica': ' Mandolinistica je ženska osoba koja svira mandolinu.',
                    'mandolinističin': ' Mandolinističin je koji pripada mandolinistici.',
                    'mandolinistički': ' Mandolinistički je koji se odnosi na mandoliniste.',
                    'mandolinistov': ' Mandolinistov je koji pripada mandolinistu.',
                    'mandolinski': ' Mandolinski je koji se odnosi na mandoline.',
                    'mangan': ' Mangan je kemijski element (Mn), sivobijela tvrda kovina, u prirodi se samostalno pojavljuje samo u meteoritima, a potreban je za život biljaka i životinja.',
                    'manje': ' Manje je znak (–) koji označuje oduzimanje.',
                    'mapa': ' Mapa je virtualna lokacija koja u sebi može sadržavati programe, dokumente, podmape te ostale podatkovne datoteke. ',
                    'marama': ' Marama je četvrtast komad tkanine ili platna koji se nosi preko glave, oko vrata ili preko ramena.',
                    'maramica': ' Maramica je mala marama.',
                    'marelica': ' Marelica je bjelogorična voćka s okruglastim žutonarančastim plodovima.',
                    'marijabistrički': ' Marijabistrički je koji se odnosi na Mariju Bistricu i Bistričane.',
                    'marioneta': ' Marioneta je lutka savitljivih udova kojima se upravlja žicom ili koncem.',
                    'marka': ' Marka je poštanska naljepnica s naznačenom novčanom vrijednošću koja se stavlja na poštanske pošiljke kao potvrda da su plaćeni troškovi slanja.',
                    'markiz': ' Markiz je muški plemićki naslov koji je u hijerarhiji između vojvode i grofa.',
                    'marljiv': ' Marljiv je koji se trudi i mnogo radi.',
                    'marljivo': ' Marljivo je tako da odražava čiji trud i radišnost.',
                    'marljivost': ' Marljivost je osobina onoga koji je marljiv, koji želi raditi.',
                    'marokanski': ' Marokanski je koji se odnosi na Maroko i Marokance.',
                    'Mars': ' Mars je u rimskoj mitologiji najprije bog plodnosti, polja, šuma i proljeća, zatim bog rata.',
                    'maršal': ' Maršal je najviši čin u nekim vojskama, čin iznad generalskoga.',
                    'maršalov': ' Maršalov je koji pripada maršalu.',
                    'maršalski': ' Maršalski je koji se odnosi na maršale.',
                    'maska': ' Maska je predmet koji skriva lice tako da se ne može prepoznati osoba.',
                    'maskenbal': ' Maskenbal je bal pod maskama, krabulji ples.',
                    'maslac': ' Maslac je mliječni proizvod koji se dobiva tučenjem slatkoga vrhnja.',
                    'maslačak': ' Maslačak je višegodišnja samonikla zeljasta biljka nazubljenih listova koja raste po livadama.',
                    'maslina': ' Masline su porodica biljaka, grmova ili stabala parnih listova.',
                    'maslinast': ' Maslinast  je koji je boje masline, koji je između sive i zelene boje.',
                    'maslinin': ' Maslinin je koji pripada maslini, koji je dio masline. ',
                    'maslinov': ' Maslinov je koji pripada maslini, koji je dio masline.',
                    'masno': ' Masno znači pretjerano i tako da donosi veliku dobit.',
                    'masnoća': ' Masnoća je tvar koja obiluje mastima, masna tvar ili masno tkivo.',
                    'mast': ' Mast je namirnica koja se dobiva otapanjem masnoga životinjskog tkiva.',
                    'mastan': ' Mastan je koji ima mnogo masti.',
                    'mašta': ' Mašta je sposobnost stvaranja predodžaba.',
                    'maštati': ' Maštati znači prepuštati se mašti u budnome stanju, zamišljati ono što želimo da nam se ostvari.',
                    'matematičar': ' Matematičar je stručnjak koji se bavi matematikom.',
                    'matematičarev': ' Matematičarev je koji pripada matematičaru.',
                    'matematičarka': ' Matematičarka je stručnjakinja koji se bavi matematikom.',
                    'matematičarkin': ' Matematičarkin je koji pripada matematičarki.',
                    'matematičarov': ' Matematičarov je koji pripada matematičaru.',
                    'matematičarski': ' Matematičarski je koji se odnosi na matematičare.',
                    'matematika': ' Matematika je znanost koja se bavi proučavanjem brojeva i prostornih odnosa.',
                    'materijal': ' Materijal je prirodna ili prerađena tvar od koje se što proizvodi.',
                    'materijalist': ' Materijalist je osoba bez obzira na spol ili muškarac koji najviše cijeni materijalne vrijednosti.',
                    'materijalistica': ' Materijalistica je žena koji najviše cijeni materijalne vrijednosti.',
                    'materijalističin': ' Materijalističin je koji pripada materijalistici.',
                    'materijalistički': ' Materijalistički je koji se odnosi na materijalizam, filozofski smjer, i idealiste, pristaše toga smjera.',
                    'materijalistov': ' Materijalistov je koji pripada materijalistu.',
                    'materijalizam': ' Materijalizam je filozofski smjer koji za polazište u tumačenju svijeta i života uzima materiju.',
                    'maternica': ' Maternica je ženski spolni organ u kojemu se razvijaju zametak i plod.',
                    'matura': ' Matura su niiz ispita koji se polažu na kraju završnoga razreda srednje škole.',
                    'maturant': ' Maturant je osoba bez obzira na spol ili muška osoba koja pohađa završni razred srednje škole.',
                    'maturantica': ' Maturantica je ženska osoba koja pohađa završni razred srednje škole.',
                    'maturantičin': ' Maturantičin je koji pripada maturantici. ',
                    'maturantov': ' Maturantov je koji pripada maturantu. ',
                    'maturantski': ' Maturantski je koji se odnosi na maturante. ',
                    'med': ' Med je sladak gusti sok koji pčele proizvode od cvjetnoga soka i medne rose koju skupljaju na cvjetovima.',
                    'medalja': ' Medalja je kovinska pločica kružnog oblika s reljefnim prikazom koje osobe ili događaja, dodjeljuje se kao znak počasti ili nagrada za hrabrost za uspjeh na kojemu natjecanju ili u radu, za hrabrost u ratu i sl.',
                    'medenjak': ' Medenjak je kolač od tijesta s medom.',
                    'medij': ' Medij je sredstvo i način prenošenja podataka i sporazumijevanja među ljudima.',
                    'medvjed': ' Medvjedi su porodica najvećih sisavaca iz skupine zvijeri crne, smeđe ili bijele boje, snažne građe, jakih nogu i kratka repa.',
                    'medvjedić': ' Medvjedić je mlado medvjeda.',
                    'međimurski': ' Međimurski je koji se odnosi na Međimurje i Međimurce.',
                    'među': ' Među označuje da tko ili što dospijeva tamo gdje je više predmeta ili osoba.',
                    'međunarodni': ' Međunarodni je koji se odnosi na više naroda ili država, koji je zajednički najmanje dvama narodima ili dvjema državama.',
                    'međuspremnik': ' Međuspremnik je privremena memorija za brzu i razmjerno kratkotrajnu pohranu podataka koja središnjem procesoru omogućuje rukovanje podatcima prije njihova prijenosa u uređaje.',
                    'međutim': ' Međutim označuje da što treba učinit bez obzira na okolnosti.',
                    'megafon': ' Megafon je naprava u obliku lijevka za pojačavanje zvuka.',
                    'megavat': ' Megavat je mjerna jedinica za snagu, milijun vata (MW).',
                    'megavolt': ' Megavolt je mjerna jedinica za električni napon, milijun volta (MV).',
                    'mehaničar': ' Mehaničar je obrtnik koji popravlja strojeve.',
                    'mehaničarev': ' Mehaničarev je koji pripada mehaničaru.',
                    'mehaničarka': ' Mehaničarka je obrtnica koja popravlja strojeve.',
                    'mehaničarkin': ' Mehaničarkin je koji pripada mehaničarki.',
                    'mehaničarov': ' Mehaničarov je koji pripada mehaničaru.',
                    'mehaničarski': ' Mehaničarski je koji se odnosi na mehaničare.',
                    'meketati': ' Meketati znači glasati se glasom koji podsjeća na 
                    ',
                    'meksički': ' Meksički je koji se odnosi na Meksiko i Meksikance.',
                    'melodija': ' Melodija je cjelovita glazbena misao, ritmički slijed tonova i stanka.',
                    'melodika': ' Melodika je manje puhaće glazbalo s klavijaturom.',
                    'melodrama': ' Melodrama je dramska književna vrsta s naglašenom scenografijom koja ujedinjuje književni tekst, glazbu i baletne scene.',
                    'memorija': ' Memorija je prihvaćanje i zadržavanje novih sadržaja ili spoznaja.',
                    'memorijski': ' Memorijski je koji se odnosi na memoriju, prihvaćanje i zadržavanje novih sadržaja ili spoznaja. ',
                    'menadžer': ' Menadžer je osoba bez obzira na spol ili muškarac koji je odgovoran za financijsko poslovanje koje tvrtke ili ustanove.',
                    'menadžerica': ' Menadžerica je žena koja je odgovorna za financijsko poslovanje koje tvrtke ili ustanove.',
                    'menadžeričin': ' Menadžeričin je koji pripada menadžerici.',
                    'menadžerov': ' Menadžerov je koji pripada menadžeru.',
                    'menadžerski': ' Menadžerski je koji se odnosi na menadžere.',
                    'Merkur': ' Merkur je u rimskoj mitologiji bog trgovaca.',
                    'mesar': ' Mesar je obrtnik koji obrađuje i prodaje meso.',
                    'mesarev': ' Mesarev je koji pripada mesaru.',
                    'mesarica': ' Mesarica je obrtnica koji obrađuje i prodaje meso.',
                    'mesaričin': ' Mesaričin je koji pripada mesarici.',
                    'mesarov': ' Mesarov je koji pripada mesaru.',
                    'mesarski': ' Mesarski je koji se odnosi na mesare.',
                    'meso': ' Meso je mišićno tkivo čovjeka i nekih životinja između kože i kostiju.',
                    'metal': ' Metal je član skupine tvari koje imaju mnoga zajednička svojstva (dobru vodljivost topline i električne struje, većinom čvrsto stanje na sobnoj temperaturi).',
                    'metanol': ' Metanol je najjednostavniji alkohol, bezbojna otrovna tekućina  koja se upotrebljava u kemijskoj industriji.',
                    'metar': ' Metar je osnovna mjerna jedinica za duljinu (m).',
                    'metkovski': ' Metkovski je koji se odnosi na Metković i Metkovce.',
                    'metla': ' Metla je pomagalo kojim se skuplja smeće s poda ili koje druge površine po kojoj se hoda, snop grančica ili vlakana pričvršćenih na dugački držak.',
                    'metoda': ' Metoda je način rada, smišljeni plan kako bi se što ostvarilo.',
                    'metrika': ' Metrika je antičko učenje o versifikaciji, zasnovano na pravilnom rasporedu izmjene dugih i kratkih slogova.',
                    'metronom': ' Metronom je naprava s pomoću koje se precizno određuje glazbeni tempo.',
                    'metropolit': ' Metropolit je naslov biskupa koji upravlja metropolijom.',
                    'mic': ' Mc je povik kojim se  doziva koga, najčešće mačke. ',
                    'micati': ' Micati znači mijenjati čemu mjesto ili uklanjati što.',
                    'mijau': ' Mijau je onomatopejska riječ kojim se oponaša glasanje mačke. ',
                    'mijaukanje': ' Mijaukanje je glasanje glasom koji podsjeća na mijau. ',
                    'mijaukati': ' Mijaukati znači glasati se glasom koji podsjeća na mijau. ',
                    'mijauknuti': ' Mijauknuti znači oglasiti se glasom koji podsjeća na 
                    ',
                    'mijeh': ' Mijeh je čitava životinjska koža, obično od kozlića, prerađena i vezana s jedne strane, služi za držanje i prenošenje tekućina.',
                    'mijenjati': ' Mijenjati znači činiti što drukčijim.',
                    'miješalica': ' Miješalica je naprava ili stroj za miješanje.',
                    'miješati': ' Miješati znači žlicom ili miješalicom kružiti u posudi ispunjenoj čime.',
                    'mikrofon': ' Mikrofon je uređaj koji zvučne valove ptretvara u elektromagnetske, upotrebljava se za pojačavanje, snimanje i prenošenje zvuka.',
                    'mikrometar': ' Mikrometar je mjerna jedinica za duljinu, milijunti dio metra (µm).',
                    'mikroprocesor': ' Mikroprocesor je sastavnica silikonskoga čipa koja izvršava naredbe i zadatke koji se odnose na računalnu obradu podataka.',
                    'mikroprocesorski': ' Mikroprocesorski je koji se odnosi na mikroprocesore.',
                    'mikroskop': ' Mikroskop je optički uređaj za promatranje vrlo sitnih predmeta ili živih bića koja se ne mogu vidjeti golim okom.',
                    'milijarda': ' Milijarda je skupina od milijardu članova.',
                    'milijarditi': ' Milijarditi je koji je iza devetsto devedeset devet milijuna devetsto devedeset devet tisuća devetsto devedeset devetoga, a prije milijardu prvoga.',
                    'milijardu': ' Milijardu je broj koji se obilježuje s 1 000 000 000, za jedan veći od broja devetsto devedeset devet milijuna devetsto devedeset devet tisuća devetsto devedeset devet i za jedan manji od broja milijardu jedan.',
                    'milijun': ' Milijun je broj koji se obilježuje s 1 000 000, za jedan veći od broja devetsto devedeset devet tisuća devetsto devedeset devet i za jedan manji od broja milijun jedan.',
                    'milijun': ' Milijun je skupina od milijun članova.',
                    'milijunti': ' Milijunti je koji je iza devetsto devedeset devet tisuća devetsto devedeset devetoga, a prije milijun prvoga.',
                    'milimetar': ' Milimetar je mjerna jedinica za duljinu, tisućiti dio metra (mm).',
                    'milivat': ' Milivat je mjerna jedinica za snagu, tisućiti dio vata (mW).',
                    'milivolt': ' Milivolt je mjerna jedinica za električni napon, tisućiti dio volta (mV).',
                    'milosrdan': ' Milosrdan je koji je pun milosrđa ili samilosti prema drugima.',
                    'milosrdno': ' Milosrdno je tako da odražava čije milosrđe ili samilost prema drugima.',
                    'milosrdnost': ' Milosrdnost je osobina onoga koji je milosrdan ili svojstvo onoga što je milosrdno.',
                    'milja': ' Milja je angloamerička mjerna jedinica za duljinu, 1609,344 metra.',
                    'mimo': ' Mimo označuje da tko ili što prolazi pokraj koga ili čega.',
                    'mimoza': ' Mimoza je grmolika biljka iz porodice leptirnjača s listovima osjetljivima na dodir raširena u tropskim i suptropskim krajevima.',
                    'min': ' min je oznaka za minutu.',
                    'mina': ' Mina je eksplozivna naprava koja se upotrebljava pri građevnim radovima ili u ratu.',
                    'mina': ' Mina je uložak za tehničku ili kemijsku olovku.',
                    'mineral': ' Mineral je element ili anorganski kemijski spoj koji je sastavni dio stijene.',
                    'minhenski': ' Minhenski je koji se odnosi na München i Minhence.',
                    'miniračunalo': ' Miniračunalo je računalo malih dimenzija koje ima svojstva i mogućnosti koja imaju i velika računala.',
                    'ministar': ' Ministar je osoba ili muškarac koji je na čelu kojega ministarstva.',
                    'ministarski': ' Ministarski je koji se odnosi na ministre.',
                    'ministarstvo': ' Ministarstvo je dio vlade neke zemlje koji vodi bridu o dijelu državnih poslova. ',
                    'ministrica': ' Ministrica je žena koja je na čelu kojega ministarstva. ',
                    'ministričin': ' Ministričin je koji pripada ministrici.',
                    'ministrov': ' Ministrov je koji pripada ministru. ',
                    'minobacač': ' Minobacač je vatreno oružje s kratkom, najčešće glatkom, cijevi namijenjeno ispaljivanju metaka.',
                    'minus': ' Minus je znak (–) koji označuje oduzimanje.',
                    'minuta': ' Minuta je mjerna jedinica za vrijeme, šezdeset sekunda (min).',
                    'mio': ' Mio je prema kojemu se osjeća naklonost.',
                    'mir': ' Mir je stanje smirenosti i spokoja.',
                    'miran': ' Miran je koji se ne kreće ili ne miče.',
                    'miris': ' Miris je osjetilo koje omogućuje sposobnost primanja i razlikovanja mirisa s pomoću nosa.',
                    'mirisati': ' Mirisati znači širiti oko sebe miris, obično ugodan.',
                    'miroljubiv': ' Miroljubiv je koji nije sklon sukobima i želi mir.',
                    'miroljubivo': ' Miroljubivo je tako da odražava čiju želju za mirom i nesklonost sukobima.',
                    'miroljubivost': ' Miroljubivost je osobina onoga koji je miroljubiv ili svojstvo onoga što je miroljubivo.',
                    'misao': ' Misao je rezultat razmišljanja, ideja koje se tko dosjeti.',
                    'misliti': ' Misliti znači razmišljati, oblikovati misli.',
                    'miš': ' Miševi su rod malih glodavaca šiljaste njuške i duga repa koji imaju siva ili smeđa leđa, a na trbušnoj strani svjetlije sivo, smeđe ili bijelo krzno.',
                    'mišić': ' Mišić je organ koji pokreće tijelo jer se može stezati i opuštati pod utjecajem živčanih podražaja.',
                    'mišljenje': ' Mišljenje je jasno izrečeno gledište o čemu.',
                    'mišolovka': ' Mišolovka je naprava za hvatanje miševa.',
                    'mit': ' Mit je jednostavna epska književna vrsta, fantastična predaja o bogovima, nadnaravnim junacima ili nadnaravnim događajima.',
                    'mjanmarski': ' Mjanmarski je koji se odnosi na Mjanmar i Mjanmarce.',
                    'mjehur': ' Mjehur je opna u kojoj se nakupljaju tjelesne tekućine.',
                    'mjenjač': ' Mjenjač je odrasla osoba bez obzira na spol ili muškarac koji radi u mjenjačnici, koji prima jednu valutu i izdaje drugu prema službenome tečaju.',
                    'mjenjačica': ' Mjenjačica je žena koja radi u mjenjačnici, koji prima jednu valutu i izdaje drugu prema službenome tečaju.',
                    'mjenjačičin': ' Mjenjačičin je koji pripada mjenjačici.',
                    'mjenjačnica': ' Mjenjačnica je mjesto na kojemu se jedna valuta mijenja za drugu.',
                    'mjera': ' Mjera je dogovorena jedinica sustava za mjerenje veličine, količine ili stupnja.',
                    'mjeriti': ' Mjeriti znači utvrđivati koju fizičku veličinu (težinu, visinu, površinu itd.) s pomoću mjerila ili mjernih instrumenata.',
                    'mjesec': ' Mjesec je dvanaesti dio kalendarske godine koji traje od 28 do 31 dan.',
                    'mjesečina': ' Mjesečina je svjetlost koju noću širi Mjesec.',
                    'mjesečno': ' Mjesečno znači svakoga mjeseca.',
                    'mjesto': ' Mjesto je prostor na kojemu se tko ili što nalazi, na koje se što može smjestiti, na kojemu se što događa.',
                    'mlad': ' Mlad je koji ima malo godina.',
                    'mladić': ' Mladić je mlađa muška osoba.',
                    'mladićev': ' Mladićev je koji pripada mladiću, mladu muškarcu koji se nije oženio ili mladu muškarcu koji je  nevjenčanoj ljubavnoj vezi s djevojkom.',
                    'mladićki': ' Mladićki je koji se odnosi na mladiće.',
                    'mlado': ' Mlado je tako da odražava mladost.',
                    'mladost': ' Mladost je osobina onoga koji ima malo godina.',
                    'mladunče': ' Mladunče je mlada, nedorasla životinja.',
                    'mlat': ' Mlat je oruđe kojim se pri vršidbi ručno mlati žito, komad drveta na užetu.',
                    'mliječni': ' Mliječni je koji se odnosi na mlijeko ili u kojemu ima mlijeka.',
                    'mlijeko': ' Mlijeko je hranjiva bijela tekućina koju luče mliječne žlijezde ženka sisavaca i koja služi za prehranu mladunčadi i dojenčadi.',
                    'mlinac': ' Mlinac je mali kućanski uređaj za mljevenje kave, maka, oraha i sl.',
                    'mljac': ' Mljac je onomatopejska riječ kojom se oponaša žvakanje hrane i izriče uživanje u hrani.',
                    'mljackati': ' Mljackati znači proizvoditi glasan i neugodan zvuk pri jelu.',
                    'mljacnuti': ' Mljacnuti znači proizvesti glasan i neugodan zvuk ustima najčešće pri jelu. ',
                    'mljekara': ' Mljekara je mjesto na kojemu se prerađuje mlijeko i proizvode mliječni proizvodi.',
                    'mljekarnica': ' Mljekarnica je prodavaonica mlijeka i mliječnih proizvoda.',
                    'mljetski': ' Mljetski je koji se odnosi na Mljet i Mljećane.',
                    'mnogi': ' Mnogi se odnosi na veliki dio kojega skupa.',
                    'mnogo': ' Mnogo odražava veliku količinu ili mjeru.',
                    'mnogokut': ' Mnogokut je geometrijski lik u ravnini omeđen s više stranica.',
                    'množenik': ' Množenik je jedan od faktora u računskoj operaciji množenja, broj koji se množi.',
                    'množenje': ' Množenje je računska operacija u kojoj se jedan broj ponovljeno pribraja sam sebi onoliko puta koliko to određuje drugi broj.',
                    'množina': ' Množina je gramatički broj promjenjive riječi kojim se označuje da se govori o više primjeraka onoga što označuje ta riječ.',
                    'množinski': ' Množinski je koji se odnosi na množinu. ',
                    'množitelj': ' Množitelj je jedan od faktora u računskoj operaciji množenja, broj kojim se množi.',
                    'množiti': ' Množiti znači izvoditi računsku operaciju množenja.',
                    'mobitel': ' Mobitel je bežični prijenosni telefon.',
                    'moćan': ' Moćan je koji ima veliku tjelesnu snagu.',
                    'moći': ' Moći znači imati snagu, sposobnost, uvjete što učiniti ili izdržati.',
                    'moćno': ' Moćno znači tako da izaziva snažan dojam.',
                    'moda': ' Moda je određen način života, odijevanja ili ponašanja svojstven određenomu razdoblju, društvu ili skupini ljudi.',
                    'modar': ' Modar je koji je intenzivne plave boje, koji je boje vedra neba.',
                    'model': ' Model je uzorak prema kojemu se izrađuju ostali proizvodi.',
                    'modem': ' Modem je elektronički uređaj koji služi za prijenos podataka između udaljenih računala s pomoću telefonske veze pretvarajući digitalni niz bitova u analogni signal i obratno.',
                    'modemski': ' Modemski je koji se odnosi na modem',
                    'moderan': ' Moderan je koji je u modi, koji je u skladu s modom.',
                    'moderna': ' Moderna je razdoblje u hrvatskoj književnosti otprilike između 1890. i Prvoga svjetskog rata, sklono esteticizmu, raznolikosti žanrova.',
                    'moderno': ' Moderno znači tako da je u skladu s onim što je u modi.',
                    'modni': ' Modni je koji se odnosi na modu.',
                    'moguć': ' Moguć je koji može biti ili se može ostvariti.',
                    'mogućnost': ' Mogućnost je ono što je moguće, što se može dogoditi ili ostvariti.',
                    'moj': ' Moj je koji pripada govoritelju.',
                    'mokar': ' Mokar je koji je natopljen vodom ili kojom drugom tekućinom.',
                    'mokasinka': ' Mokasinke su lagana obuća sjevernoameričkih Indijanaca.',
                    'mokro': ' Mokro znači kao da je natopljeno vodom.',
                    'molba': ' Molba je na pristojan način izražena želja ili zahtjev upućen komu.',
                    'moldavski': ' Moldavski je koji se odnosi na Moldaviju i Moldavce.',
                    'moliški': ' Moliški je koji se odnosi na Molize i Moližane.',
                    'moliti': ' Moliti znači obraćati se komu s kakvom molbom.',
                    'molitva': ' Molitva su riječi ili tekst koji vjernici izgovaraju naglas ili u sebi obraćajući se Bogu ili svetcima.',
                    'momački': ' Momački je koji se odnosi na momke.',
                    'momak': ' Momak je mlađa muška osoba.',
                    'momčad': ' Momčad je skupina sportaša koji igraju u kolektivnome sportu na istoj strani protiv druge skupine sportaša. ',
                    'momčadski': ' Momčadski je koji se odnosi na momčad, skupinu sportaša koji igraju u kolektivnome sportu na istoj strani  protiv druge skupine sportaša. ',
                    'momkov': ' Momkov je koji pripada momku, mladu muškarcu koji se nije oženio ili mladu muškarcu koji je  nevjenčanoj ljubavnoj vezi s djevojkom.',
                    'mongolski': ' Mongolski je koji se odnosi na Mongoliju i Mongole.',
                    'monitor': ' Monitor je elektronički uređaj koji služi za prikaz slike na računalu.',
                    'monodrama': ' Monodrama je dramska književna vrsta s jednim likom.',
                    'monolog': ' Monolog je govor jednog lika upućen čitateljima ili publici.',
                    'mononukleoza': ' Mononukleoza je virusna zarazna bolest koja se širi kapljičnim putem i dodirom, a obilježena je općom slabošću, vrućicom, grloboljom te povećanjem limfnih čvorova, jetre i slezene.',
                    'monostrofa': ' Monostrofa je pjesma od jedne strofe.',
                    'morati': ' Morati znači biti obvezan, dužan ili prisiljen činiti što.',
                    'more': ' More je najveći obujam slane vode na Zemlji, jedinstvena cjelina koja povezuje kontinente ili njihove velike dijelove.',
                    'morfologija': ' Morfologija je grana gramatike koja proučava oblike riječi. ',
                    'morfološki': ' Morfološki je koji se odnosi na morfologiju, granu gramatike. ',
                    'mornar': ' Mornar je član brodske posade.',
                    'mornarev': ' Mornarev je koji pripada mornaru, članu brodske posade.',
                    'mornarica': ' Mornarica je brodovlje jedne države s brodskim posadama, pomorskim ustanovama i pripadajućim kopnenim osobljem. ',
                    'mornaričin': ' Mornaričin je koji pripada mornarici, brodovlju jedne države s brodskim posadama, pomorskim ustanovama i pripadajućim kopnenim osobljem.',
                    'mornarički': ' Mornarički je koji se odnosi na mornaricu, brodovlje jedne države s brodskim posadama, pomorskim ustanovama i pripadajućim kopnenim osobljem.',
                    'mornarov': ' Mornarov je koji pripada mornaru, članu brodske posade.',
                    'mornarski': ' Mornarski je koji se odnosi na mornare.',
                    'morski': ' Morski je koji se odnosi na more.',
                    'moskovski': ' Moskovski je koji se odnosi na Moskvu i Moskovljane.',
                    'most': ' Most je građevina koja služi za prijelaz ljudi i prijenos tereta preko rijeke, morskoga tjesnaca, provalije ili kakve druge zapreke.',
                    'mostarski': ' Mostarski je koji se odnosi na Mostar i Mostarce.',
                    'motika': ' Motika je oruđe za kopanje, prekapanje i usitnjavanje zemlje.',
                    'motiv': ' Motiv je najmanja sastavna jedinica književnog djela sa samostalnim značenjem.',
                    'motivacija': ' Motivacija je obrazloženje motiva u književnom djelu.',
                    'motocikl': ' Motocikl je motorno vozilo s dvama kotačima.',
                    'motor': ' Motor je uređaj koji pokreće strojeve, vozila i sl.',
                    'mozak': ' Mozak je glavni organ živčanoga sustava čovjeka i kralježnjaka smješten u lubanji.',
                    'mozambički': ' Mozambički je koji se odnosi na Mozambik i Mozambičane.',
                    'mrak': ' Mrak je stanje bez svjetla.',
                    'mrav': ' Mrav je sitan zadružni kukac opnokrilac koji gradi mravinjake.',
                    'mrdati': ' Mrdati znači micati dijelovima tijela.',
                    'mrdnuti': ' Mrdnuti znači učiniti kretnu dijelom tijela.',
                    'mreža': ' Mreža je pletena naprava u kojoj niti koje je tvore između sebe ostavljaju rupičaste otvore koji se zovu oka.',
                    'mrkva': ' Mrkva je dvogodišnja povrtna zeljasta biljka iz porodice štitarka narančastoga ili žutoga korijena koja u drugoj godini razvija razgrananu cvjetnu stabljiku.',
                    'mrmljati': ' Mrmljati znači govoriti tiho, nerazumljivo.',
                    'mrmoriti': ' Mrmoriti znači proizvoditi mrmor, žamoriti.',
                    'mršav': ' Mršav je koji je lakši od normalne, prosječne težine.',
                    'mršavo': ' Mršavo je tako da odražava da je tko ispod prosječne, normalne tjelesne težine.',
                    'mršavost': ' Mršavost je stanje onoga koji je lakši od prosječne tjelesne težine.',
                    'mrtav': ' Mrtav je koji ne živi, koji je umro, koji više nema životne funkcije.',
                    'mrtvac': ' Mrtvac je osoba bez obzira na spol koja više nije živa. ',
                    'mrziti': ' Mrziti koga ili što znači osjećati snažnu odbojnost i neprijateljstvo prema komu ili čemu.',
                    'mržnja': ' Mržnja je osjećaj krajnje odbojnosti i neprijateljstva prema komu ili čemu, snažna želja da se komu dogodi zlo ili nagon da se čini zlo.',
                    'mucati': ' Mucati znači govoriti isprekidano ili ponavljajući slogove.',
                    'mučiti': ' Mučiti znači činiti da tko trpi muke, prisiljavati koga na što, nanositi komu bol ili mu činiti zlo.',
                    'mudar': ' Mudar je koji pokazuje zrelo razmišljanje utemeljno na znanju i iskustvu.',
                    'mudro': ' Mudro je tako da odražava čije zrelo razmišljanje utemeljeno na znanju i iskustvu.',
                    'mudrost': ' Mudrost je osobina onoga koji je mudar ili svojstvo onoga što je mudro.',
                    'muha': ' Muha je kukac iz reda dvokrilaca dlakava zdepasta tijela smećkaste ili crne boje i s usnim organima prilagođenim za upijanje tekućine ili sisanje krvi.',
                    'muka': ' Muka je snaga potrebna da se svlada koja poteškoća, zapreka ili da se obavi koji zadatak.',
                    'mukanje': ' Mukanje je glasanje glasom koji podsjeća na  
                    ',
                    'mukati': ' Mukati znači glasati se glasom koji podsjeća na  
                    ',
                    'muknuti': ' Muknuti znači oglasiti se glasom koji podsjeća na 
                    ',
                    'mumljati': ' Mumljati znači nerazgovijetno govoriti.',
                    'munja': ' Munja je svjetlosna pojava, električna iskra koja nastaje u olujnim oblacima.',
                    'musliman': ' Musliman je osoba bez obzira na spol ili muška osoba islamske vjere.',
                    'muslimanka': ' Muslimanka je ženska osoba islamske vjere.',
                    'muškarac': ' Muškarac je odrastao čovjek muškoga spola.',
                    'muškarčev': ' Muškarčev je koji pripada muškarcu.',
                    'muški': ' Muški je koji se odnosi na muškarce.',
                    'muškobanjast': ' Muškobanjast je koji suprotno očekivanjima ima osobine koje se tradicionalno pripisuju muškarcima.',
                    'mušmula': ' Mušmula je listopadno drvo ili grm koji ima okrugle plodove.',
                    'muzej': ' Muzej je zgrada u kojoj se čuvaju, izlažu i proučavaju vrijedni predmeti materijalne kulture.',
                    'muzički': ' Muzički je kojis e odnosi na muziku.',
                    'muzika': ' Muzika je umjetnost izražavanja tonovima, glasovima i šumovima, osnovni su joj elementi ritam i melodija, a zapisuje se notama.',
                    'muž': ' Muž je oženjen muškarac u odnosu na ženu s kojom je u braku.',
                    'mužev': ' Mužev je koji pripada mužu.',
                    'muževan': ' Muževan je koji je svojstven mužu, zrelomu muškarcu.',
                    'mužjak': ' Mužjak je odrasla životinja muškoga spola.',
                    'nacionalni': ' Nacionalni je koji se odnosi na naciju.',
                    'nacrtati': ' Nacrtati znači prikazati što crtajući, načiniti crtež.',
                    'način': ' Način je skup postupaka svojstvenih pojedincu ili skupini.',
                    'naći': ' Naći znači tražeći ili slučajno otkriti što izgubljeno ili zaboravljeno.',
                    'nada': ' Nada je očekivanje, želja i vjera da će se što dogoditi.',
                    'nad(a)': ' Nad označuje da tko ili što dospijeva s gornje strane čega.',
                    'nadati se': ' Nadati se znači imati nadu, očekivati da će se ostvariti što željeno.',
                    'nadbiskup': ' Nadbiskup je naslov kršćanskoga crkvenog poglavara koji upravlja nadbiskupijom.',
                    'nadimak': ' Nadimak je ime koje zamjenjuje pravo ime ili se upotrebljava uz njega, stječe se u užemu društvu zahvaljujući kakvoj osobini.',
                    'nadmadrac': ' Nadmadrac je pokrivalo za madrac koje se stavlja na madrac radi zaštite i udobnosti.',
                    'nadnarednica': ' Nadnarednica je žena s činom nadnarednika.',
                    'nadnaredničin': ' Nadnaredničin je koji pripada nadnarednici.',
                    'nadnarednički': ' Nadnarednički je koji se odnosi na nadnarednike.',
                    'nadnarednik': ' Nadnarednik je viši dočasnički čin u svim rodovima vojske, nadređen nižemu dočasničkom činu narednika, a podređen činu stožernoga narednika.',
                    'nadnarednikov': ' Nadnarednikov je koji pripada nadnaredniku.',
                    'nadnevak': ' Nadnevak je kalendarska oznaka dana, mjeseca i godine kojega događaja.',
                    'nadohvat': ' Nadohvat označuje da se tko ili što nalazi, kreće ili zbiva u izravnoj blizini koga ili čega, kao da se može dohvatiti rukom.',
                    'nadomak': ' Nadohvat označuje da se tko ili što nalazi, kreće ili zbiva u izravnoj blizini koga ili čega.',
                    'nadstolnjak': ' Nadstolnjak je pokrivalo za stol koje se stavlja na stolnjak.',
                    'nadvojvoda': ' Nadvojvoda ja naslov muških pripadnika dinastije Habsburg.',
                    'naglas': ' Naglas je tako da se izrekne, da se može čuti.',
                    'naglasiti': ' Naglasiti znači obilježiti riječ naglaskom.',
                    'nagrada': ' Nagrada je priznanje koje se komu daje za kakav uspjeh ili postignuće.',
                    'naime': ' Naime uvodi dodatno objašnjenje.',
                    'naivan': ' Naivan je koji lako vjeruje komu ili čemu.',
                    'naivno': ' Naivno je tako da odražava da tko lako vjeruje komu ili jednostavno razmišlja ili prosuđuje',
                    'naivnost': ' Naivnost je osobina onoga koji je naivan ili svojstvo onoga što je naivno.',
                    'najaviti': ' Najaviti znači obavijestiti o kojemu budućem događaju.',
                    'najesti se': ' Najesti se znači pojesti čega u dovoljnoj ili velikoj mjeri.',
                    'najlonka': ' Najlonka je čarapa izrađena od najlonske niti.',
                    'nakit': ' Nakit su predmeti kojima se tko ukrašava ili kojim ukrašava koga.',
                    'nakon': ' Nakon označuje da što slijedi za čim.',
                    'nalaziti': ' Nalaziti znači tražeći otkriti što novo ili nepoznato.',
                    'nalikovati': ' Nalikovati znači podsjećati izgledom na koga ili što, biti poput koga ili čega.',
                    'nametljiv': ' Nametljiv je koji se nameće, koji pretjerano nastoji oko čega.',
                    'nametljivo': ' Nametljivo je tako da odražava čije pretjerano nastojanje oko čega.',
                    'nametljivost': ' Nametljivost je osobina onoga koji je nametljiv.',
                    'namirnica': ' Namirnica je jestivi proizvod, proizvod koji se može jesti ili piti ili upotrijebiti pri pripremi hrane.',
                    'namjeravati': ' Namjeravati znači imati namjeru što učiniti.',
                    'namjesnik': ' Namjesnik je onaj koji vlada ili upravlja u čije ime. ',
                    'namještaj': ' Namještaj su pokretni predmeti kojima je opremljen stan ili radne prostorije.',
                    'nanometar': ' Nanometar je mjerna jedinica za duljinu, milijarditi dio metra (nm).',
                    'nanoračunalo': ' Nanoračunalo je računalo kod kojeg se integrirani krugovi mogu vidjeti samo s pomoću mikroskopa.',
                    'naočale': ' Naočale su pomagalo s optičkim staklima koje omogućuje da se bolje vidi.',
                    'naopačke': ' Naopačke je tako da je postavljeno na stranu suprotnu onoj na koju bi trebalo biti postavljeno.',
                    'naopako': ' Naopako je je tako da je postavljeno na stranu suprotnu onoj na koju bi trebalo biti postavljeno.',
                    'napa': ' Napa je električna sprava koja spostavlja iznad štednjaka i usisava mirise i paru od kuhanja.',
                    'napad': ' Napad je agresivan čin kojemu je cilj uništenje ili povreda čijega fizičkog ili psihičkog integriteta.',
                    'napadati': ' Napadati znači fizički ili riječima ugrožavati koga ili što.',
                    'napadati': ' Napadati znači pasti u većoj količini i zadržati se na kojemu mjestu.',
                    'napamet': ' Napamet je pamteći od riječi do riječi.',
                    'napasti': ' Napasti znači izički ili riječima ugroziti koga ili što.',
                    'napet': ' Napet je koji je čvrsto zategnut.',
                    'napeto': ' Napeto je tako da održava čiji nemir ili čiju neizvjesnost.',
                    'napetost': ' Napetost je stanje onoga što je čvrsto zategnuto.',
                    'napisati': ' Napisati znači zabilježiti što slovima, brojkama ili kakvim drugim znakovima.',
                    'napokon': ' Napokon znači nakon duga vremena, nakon duga čekanja.',
                    'napose': ' Napose naglašava da se što izdvaja od ostaloga. ',
                    'naprava': ' Naprava je predmet koji olakšava ili omogućuje što, a koji radi po jednostavnim mehaničkim načelima.',
                    'napraviti': ' Napraviti što znači stvoriti što, dati čemu oblik.',
                    'naprijed': ' Naprijed je u smjeru kretanja.',
                    'naranča': ' Naranča je vazdazelena suptropska voćka okrugla slatkokisela ploda.',
                    'narančast': ' Narančast je koji je boje mrkve, zrele naranče ili marelice.',
                    'naravno': ' Naravno izriče da je što posve u skladu s očekivanim, pojačava tvrdnju ili izjavu.',
                    'naredba': ' Naredba je zahtjev određenoga korisnika koji računalo mora izvršiti',
                    'narednica': ' Narednica je žena s činom narednika.',
                    'naredničin': ' Naredničin je koji pripada narednici.',
                    'narednički': ' Narednički je koji se odnosi na narednike.',
                    'narednik': ' Narednik je niži dočasnički čin u svim rodovima vojske, nadređen činu desetnika, a podređen višemu dočasničkom činu nadnarednika.',
                    'narednikov': ' Narednikov je koji pripada naredniku.',
                    'naročito': ' Naročito naglašava da se što izdvaja od ostaloga. ',
                    'narod': ' Narod je šira zajednica ljudi povezanih zajedničkom poviješću, tradicijom, vjerskom pripadnošću, jezikom i kulturom.',
                    'naručiti': ' Naručiti znači zatražiti da se što dobije, proda, pošalje, posluži ili obavi.',
                    'naručivati': ' Naručivati znači tražiti da se što dobije, proda, pošalje, posluži ili obavi.',
                    'narudžba': ' Narudžba je zahtjev kojim se što naručuje.',
                    'narukvica': ' Narukvica je nakit koji se nosi oko zgloba ruke.',
                    'naselje': ' Naselje je mjesto u kojemu živi veći broj ljudi.',
                    'nasilan': ' Nasilan je koji provodi nasilje ili je sklon nasilničkomu ponašanju.',
                    'nasilno': ' Nasilno je tako da odražava čiju sklonost nasilničkomu ponašanju.',
                    'nasilnost': ' Nasilnost je osobina onoga koji je nasilan, koji je sklon nasilničkomu ponašanju ili svojstvo onoga što odražava sklonost nasilničkomu ponašanju.',
                    'nasilu': ' Nasilu je uz primjenju sile, s pomoću sile.',
                    'nasilje': ' Nasilje je uporaba sile usmjerena protiv čije volje ili prava.',
                    'naslonjač': ' Naslonjač je udobna sjedalica s naslonom i osloncima za ruke.',
                    'naslov': ' Naslov je riječ kojom se što imenuje ili označuje.',
                    'nasmijati (se)': ' Nasmijati koga znači potaknuti koga na smijeh, izazvati smijeh.',
                    'nasred': ' Nasred označuje da se tko ili što nalazi na sredini čega.',
                    'nasrtljiv': ' Nasrtljiv je koji u postizanju cilja prelazi uobičajene granice.',
                    'nasrtljivo': ' Nasrtljivo je tako da odražava  da tko u postizanju cilja prelazi uobičajene granice.',
                    'nasrtljivost': ' Nasrtljivost je osobina onoga koji u postizanju cilja prelazi uobičajene granice.',
                    'nastati': ' Nastati znači početi postojati, biti na početku.',
                    'nastava': ' Nastava je izlaganje gradiva u okviru školskoga, nastavnoga programa, organizirana izobrazba u kojoj učenici uče znanja, vještine i stječu navike te razvijaju tjelesne i psihičke sposobnosti.',
                    'nastavak': ' Nastavak je dodatak ili dio kojim se što nastavlja ili produžuje.',
                    'nastaviti': ' Nastaviti znači ponovno početi nakon prekida.',
                    'nastavljati': ' Nastavljati znači ponovno započinjati nakon prekida.',
                    'nastavnica': ' Nastavnica je žena koja vodi nastavu u srednjoj školi ili na fakultetu.',
                    'nastavničin': ' Nastavničin je koji pripada nastavnici, ženi koja  vodi nastavu u srednjoj školi ili na fakultetu. ',
                    'nastavnički': ' Nastavnički je koji se odnosi na nastavnike, odrasle osobe bez obzira na dob  ili muškarce koji vode nastavu u srednjoj školi ili na fakultetu.',
                    'nastavnik': ' Nastavnik je odrasla osoba bez obzira na spol ili muškarac koji izvodi nastavu u srednjoj školi ili na fakultetu.',
                    'nastavnikov': ' Nastavnikov je koji pripada nastavniku, odrasloj osobi bez obzira na spol ili muškarcu koji vodi nastavu u srednjoj školi ili na fakultetu. ',
                    'nastup': ' Nastup je izlazak pred publiku ili pred javnost.',
                    'nasuprot': ' Nasuprot označuje da se tko ili što nalazi ili kreće na suprotnoj strani čega.',
                    'naš': ' Naš je koji pripada govoritelju i još komu (sugovoritelju ili kojoj drugoj osobi). ',
                    'našički': ' Našički je koji se odnosi na Našice i Našičane.',
                    'našminkati': ' Našminkati koga znači staviti komu šminku na lice.',
                    'natikača': ' Natikače su obuća koja ima otvorenu petu i natiče se na stopalo.',
                    'natjecanje': ' Natjecanje je sudjelovanje u igrama i djelatnostima radi pobjede ili postizanja boljega položaja.',
                    'natjecatelj': ' Natjecatelj je osoba ili muškarac koji sudjeluje u natjecanju, koji se natječe.',
                    'natjecateljev': ' Natjecateljev je koji pripada natjecatelju.',
                    'natjecateljica': ' Natjecateljica je žena koja sudjeluje u natjecanju, koja se natječe.',
                    'natjecateljičin': ' Natjecateljičin je koji pripada natjecateljici.',
                    'natjecateljski': ' Natjecateljski je koji se odnosi na natjecatelje.',
                    'natjecati se': ' Natjecati se znači sudjelovati u kakvoj igri ili djelatnosti radi pobjede ili postizanja boljega položaja.',
                    'natječaj': ' Natječaj je postupak kojim se otvara mogućnost dodjele čega izborom između kandidata.',
                    'natkoljenka': ' Natkoljenka je čarapa koja seže iznad koljena.',
                    'natporučnica': ' Natporučnica je žena s činom natporučnika.',
                    'natporučničin': ' Natporučničin je koji pripada natporučnici.',
                    'natporučnički': ' Natporučnički je koji se odnosi na natporučnike.',
                    'natporučnik': ' Natporučnik je niži časnički čin u kopnenoj vojsci i ratnome zrakoplovstvu, nadređen činu poručnika, a podređen činu satnika.',
                    'natporučnikov': ' Natporučnikov je koji pripada natporučniku.',
                    'natrag': ' Natrag označuje suprotni smjer od smjera kretanja.',
                    'natrij': ' Natrij je kemijski element (Na), veoma meka, srebrnobijela kovina, u prirodi se pojavljuje samo u spojevima, nalazi se u moru i stijenama, a sastojak je kuhinjske soli.',
                    'naučiti': ' Naučiti znači učeći doznati, steći znanje, vještinu ili iskustvo.',
                    'naušnica': ' Naušnica je nakit koji se nosi na uhu.',
                    'navečer': ' Navečer je tijekom večeri.',
                    'navijač': ' Navijač je osoba bez obzira na spol ili muška osoba koja navija za koju osobu, koji klub i sl.',
                    'navijačev': ' Navijačev je koji pripada navijaču.',
                    'navijačica': ' Navijačica je žena koja navija za koju osobu, koji klub i sl.',
                    'navijačičin': ' Navijačičin je koji pripada navijačici.',
                    'navijački': ' Navijački je koji se odnosi na navijače.',
                    'navijati': ' Navijati znači okretati oprugu oko osovine kako bi se pokrenuo uređaj.',
                    'navika': ' Navika je stalan, uobičajen način čijega ponašanja, trajna, ustaljena sklonost da se u određenim zgodama postupa uvijek na isti način.',
                    'navlastito': ' Navlastito naglašava da se što izdvaja od ostaloga. ',
                    'navoditi': ' Navoditi znači nagovarati koga da učini što, usmjeravati koga prema čemu.',
                    'navoditi': ' Navoditi znači donositi kakvu izjavu, podatak ili čiji tuđi tekst u svojemu tekstu ili govoru.',
                    'navodnik': ' Navodnik je pravopisni znak („ ”) kojim se označuje početak ili kraj teksta koji se navodi doslovno ili kojemu se daje drugo značenje ili kojim se označuje da se riječ ispred i iza koje stoji uzima u prenesenome značenju, da ne pripada standardnomu jeziku ili da je riječ o imenu',
                    'navodno': ' Navodno uvodi ograđivanje od tvrdnje koja se iznosi, upućuje na to da ona nije provjerena.',
                    'nazdravlje': ' Nazdravlje je izraz kojim se pri nazdravljanju izriče želja za dobrim zdravljem. ',
                    'naziv': ' Naziv je oznaka pojma određenoga u kojemu znanstvenom području s pomoću jezičnog izraza.',
                    'nazivati': ' Nazivati znači imenom ili nazivom označivati koga ili što.',
                    'nazivlje': ' Nazivlje je sustav naziva određene struke. ',
                    'nazivoslovlje': ' Nazivoslovlje je znanost koja proučava nazivlje. ',
                    'nazvati': ' Nazvati znači imenom ili nazivom označiti koga ili što.',
                    'nažalost': ' Nažalost znači stjecajem nesretnih okolnosti.',
                    'nebo': ' Nebo je atmosfera i svemirski prostor koji se sa Zemlje vidi kao svod.',
                    'neboder': ' Neboder je visoka zgrada s mnogo katova.',
                    'nečiji': ' Nečiji je koji pripada neimenovanomu, neodređenomu posjedovatelju.',
                    'nećak': ' Nećak je bratov ili sestrin sin.',
                    'nećakinja': ' Nećakinja je bratova ili sestrina kći.',
                    'nećakinjin': ' Nećakinjin je koji pripada nećakinji.',
                    'nećakov': ' Nećakov je koji pripada nećaku.',
                    'nedaleko': ' Nedaleko označuje da se što nalazi na udaljenosti koja nije velika.',
                    'nedavno': ' Nedavno označuje da se što dogodilo prije kratkoga vremena, u bližoj prošlosti.',
                    'nedjelja': ' Nedjelja je sedmi dan u tjednu, dan između subote i ponedjeljka.',
                    'nedjeljiv': ' Nedjeljiv je koji se ne može dijeliti.',
                    'nedjeljivo': ' Nedjeljivo je tako da odražava da se što ne može dijeliti na manje dijelove.',
                    'nedjeljivost': ' Nedjeljivost je svojstvo onoga što je nedjeljivo.',
                    'nedjeljni': ' Nedjeljni je koji se odnosi na nedjelju.',
                    'nedostajati': ' Nedostajati znači nemati dosta čega, oskudijevati u čemu.',
                    'nedostatak': ' Nedostatak je nepostojanje čega u dovoljnoj količini.',
                    'nedostižan': ' Nedostižan je koji se ne može dostići, shvatiti ili ostvariti.',
                    'nedostižno': ' Nedostižno je tako da odražava da se tko ili što ne može dostići, shvatiti ili ostvariti.',
                    'nedostižnost': ' Nedostižnost je svojstvo onoga što je nedostižno.',
                    'nedovoljan': ' Nedovoljan je koji je manji od onoga što je potrebno.',
                    'negativ': ' Negativ je filmska vrpca ili fotografija na kojoj su odnosi svijetlih i tamnih dijelova obrnuti od onoga kakvi su u stvarnosti.',
                    'negativan': ' Negativan je koji odbija ili odriče te je suprotan onomu što se očekuje ili traži.',
                    'negdje': ' Negdje označuje neodređeno mjesto, bilo koje mjesto.',
                    'nego': ' Nego u nezavisnosloženoj suprotnoj rečenici povezuje surečenice koje ne mogu zamijeniti mjesta i od kojih je jedna jesna, a druga niječna.',
                    'nego': ' Nego uvodi kakvu usporedbu (uz komparativ pridjeva ili priloga ili pridjev 
                    ',
                    'negoli': ' Negoli uvodi poredbenu surečenicu u zavisnoloženoj rečenici (uz obvezatan komparativ u glavnoj surečenici)',
                    'negoli': ' Negoli uvodi kakvu usporedbu (uz komparativ pridjeva ili priloga ili pridjev 
                    ',
                    'neka': ' Neka uvodi imperativ za 3. lice jednine i množine.',
                    'nekad(a)': ' Nekad znači u proteklim, prošlim vremenima.',
                    'nekakav': ' Nekakav je koji je neodređenih osobina, svejedno kojih osobina.',
                    'nekako': ' Nakako znači na neodređeni način.',
                    'nekamo': ' Nekamo znači na neodređeni cilj, prema neodređenome cilju.',
                    'neki': ' Neki označuje što neodređeno.',
                    'nekoliko': ' Nekoliko označuje neodređenu, manju količinu.',
                    'nektarina': ' Nektarina je vazdazelena voćka, križanac između breskve i šljive.',
                    'nemati': ' Nemati što/čega znači ne biti vlasnikom kakve imovine ili vrijednosti.',
                    'nemilosrdan': ' Nemilosrdan je koji nema milosrđa prema kome.',
                    'nemilosrdno': ' Nemilosrdno je tako da odražava čiji nedostatak milosrđa.',
                    'nemilosrdnost': ' Nemilosrdnost je osobina onoga koji je nemilosrdan ili svojstvo onoga što je nemilosrdno.',
                    'nenaglasnica': ' Nenaglasnica  je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ ispred ili iza sebe i s njom čini jednu naglasnu cjelinu.',
                    'neodgojen': ' Neodgojen je koji nema dobar odgoj.',
                    'neodgojeno': ' Neodgojeno je tako da odražava da tko nema dobar odgoj.',
                    'neodgojenost': ' Neodgojenost je osobina onoga koji je neodgojen.',
                    'neodgovoran': ' Neodgovoran je koji se ne ponaša odgovorno i savjesno.',
                    'neodgovorno': ' Neodgovorno je tako da odražava čiji nedostatak odgovornosti i savjesti.',
                    'neodgovornost': ' Neodgovornost je osobina onoga koji je neodgovoran ili svojstvo onoga što je neodgovorno.',
                    'neodlučan': ' Neodlučan je koji teško donosi odluke jer nije dovoljno siguran u sebe.',
                    'neodlučno': ' Neodlučan je koji odražava čiju nesigurnost i nemogućnost donošenja odluke.',
                    'neodlučnost': ' Neodlučnost je osobina onoga koji je neodlučan ili svojstvo onoga što je neodlučno.',
                    'neon': ' Neon je kemijski element (Ne), bezbojni plemeniti plin bez mirisa koji se upotrebljava za punjenje rasvjetnih cijevi.',
                    'neovisan': ' Neovisan je koji materijalno, djelatno ili ideološki ne ovisi o kome ili čemu drugom, koji je samostalan ili slobodan.',
                    'neovisno': ' Neovisno je tako da odražava da se materijalno, djelatno ili ideološki ne ovisi o kome ili čemu drugom.',
                    'neovisnost': ' Neovisnost je osobina onoga koji je neovisan ili svojstvo onoga što je neovisno.',
                    'neozbiljan': ' Neozbiljan je koji se ne ponaša odgovorno, u kojega se ne može pouzdati.',
                    'neozbiljno': ' Neozbiljno je tako da odražava površnosti i neusredotočenost na ono što je bitno i ozbiljno.',
                    'neozbiljnost': ' Neozbiljnost je osobina onoga koji je neozbiljan ili svojstvo onoga što je neozbiljno.',
                    'nepalski': ' Nepalski je koji se odnosi na Nepal i Nepalce.',
                    'neparan': ' Neparan je koji nije u paru.',
                    'nepismen': ' Nepismen je koji ne zna pisati i čitati.',
                    'nepismeno': ' Nepismeno je tako da odražava da što nije usklađeno s gramatikom i pravopisom.',
                    'nepismenost': ' Nepismenost je osobina onoga koji ne zna čitati i pisati.',
                    'neplivač': ' Neplivač je osoba ili muškarac koji ne pliva, koji ne zna plivati.',
                    'neplivačev': ' Neplivačev je koji pripada neplivaču.',
                    'neplivačica': ' Neplivačica je žena koja ne pliva, koja ne zna plivati.',
                    'neplivačičin': ' Neplivačičin je koji pripada neplivačici.',
                    'neplodan': ' Neplodan je koji ne daje plod ili ga daje malo.',
                    'neplodno': ' Neplodno je tako da odražava da je što bez rezultata ili bez učinka.',
                    'neplodnost': ' Neplodnost je svojstvo onoga što ne daje plod ili ga daje malo.',
                    'nepobitan': ' Nepobitan je koji se ne može oboriti, poreći ili pobiti.',
                    'nepobitno': ' Nepobitno je tako da se ne može oboriti, poreći ili pobiti.',
                    'nepobitnost': ' Nepobitnost je svojstvo onoga što je nepobitno.',
                    'nepobjediv': ' Nepobjediv je koji se ne može pobijediti.',
                    'nepobjedivo': ' Nepobjedivo je tako da odražava se tko ne može pobijediti.',
                    'nepobjedivost': ' Nepobjedivost je osobina onoga koji je nepobjediv ili svojstvo onoga što je nepobjedivo.',
                    'neposredan': ' Neposredan je koji djeluje ili se ostvaruje bez posrednika.',
                    'neposredno': ' Neposredno je tako da se ostvaruje ili djeluje bez posrednika.',
                    'neposrednost': ' Neposrednost je osobina onoga koji je otovren i prstupačan u komunikaciji.',
                    'nepravilan': ' Nepravilan je koji je onakav kakav ne treba biti, koji odstupa od onoga što se smatra poželjnim ili normalnim.',
                    'nepromjenjiv': ' Nepromjenjiv je koji se ne mijenja ili se ne može promijeniti',
                    'nepromjenjivo': ' Nepromjenjivo je tako da odražava nemogućnost promjene.',
                    'nepromjenjivost': ' Nepromjenjivost je svojstvo onoga što se ne mijenja ili se ne može promijeniti.',
                    'neproziran': ' Neproziran je kroz koji se ne vidi, kroz koji ne prolazi svjetlost.',
                    'neprozirno': ' Neprozirno je tako da se ne prozire što je iza.',
                    'neprozirnost': ' Neprozirnost je svojstvo onoga kroza što se ne vidi zbog nedovoljno svjetlosti.',
                    'Neptun': ' Neptun je u rimskoj mitologiji bog kopnenih voda, poslije i bog mora.',
                    'nepušač': ' Nepušač je osoba ili muškarac koji ne puši.',
                    'nepušačev': ' Nepušačev je koji pripada nepušaču.',
                    'nepušačica': ' Nepušačica je žena koja ne puši.',
                    'nepušačičin': ' Nepušačičin je koji pripada nepušačici.',
                    'nepušački': ' Nepušački je koji se odnosi na nepušače.',
                    'neretvanski': ' Neretvanski je koji se odnosi na Neretvansku krajinu i Neretvane.',
                    'nesiguran': ' Nesiguran je koji nije dobro i pouzdano ovladao čime, koji nema iskustva u čemu.',
                    'nesigurno': ' Nesigurno je tako da odražava da tko nije ovladao čime.',
                    'nesigurnost': ' Nesigurnost je osobina onoga koji nije dovoljno ovladao čime.',
                    'nespreman': ' Nespreman je koji nije pripremljen za što.',
                    'nespremno': ' Nespremno je tako da odražava čiju nepripremljenost za što.',
                    'nespremnost': ' Nespremnost je osobina onoga koji je nespreman ili svojstvo onoga što je nespremno.',
                    'nespretan': ' Nespretan je koji teže usklađuje tjelesne pokrete.',
                    'nespretno': ' Nespretno je tako da odražava neusklađenost u tjelesnim pokretima.',
                    'nespretnost': ' Nespretnost je osobina onoga koji je neusklađen u tjelesnim pokretima.',
                    'nesreća': ' Nesreća je tragičan događaj u kojemu nastaje materijalna šteta i ljudske žrtve.',
                    'nestašan': ' Nestašan je koji zaigran i živahan.',
                    'nestašno': ' Nestašno je tako da odražava čiju živahnost i zaigranost.',
                    'nestašnost': ' Nestašnost je osobina onoga koji je živahan  i zaigran.',
                    'nesvijest': ' Nesvijest je stanje potpunoga gubitka svijesti iz koje bolesnika nije moguće probuditi nikakvim podražajima.',
                    'nesvjesnost': ' Nesvjesnost je nedostatak spoznaja o sebi i svijetu oko sebe, sposobnosti mišljenja, prosuđivanja, zaključivanja i odlučivanja.',
                    'nešto': ' Nešto označuje neodređeni predmet ili pojavu.',
                    'nešto': ' Nešto označuje određenu, u pravilu manju mjeru čega.',
                    'netko': ' Netko označuje neimenovanu osobu, bilo koga, ma koga.',
                    'neugodan': ' Neugodan je koji izaziva neugodu ili nezadovoljstvo.',
                    'neugodno': ' Neugodno je tako da izaziva neugodu ili nezadovoljstvo.',
                    'neugodnost': ' Neugodnost je osobina onoga koji je neugodan ili svojstvo onoga što je neugodno.',
                    'neuhvatljiv': ' Neuhvatljiv je koji se ne može uhvatiti.',
                    'neuhvatljivo': ' Neuhvatljivo je tako da se ne može dostići, shvatiti ili ostvariti.',
                    'neuhvatljivost': ' Neuhvatljivost je osobina onoga koji se ne može uhvatiti ili svojstvo onoga što se ne može uhvatiti.',
                    'neumjeren': ' Neumjeren je koji nema mjere u čemu, koji u čemu pretjeruje.',
                    'neumjereno': ' Neumjereno je tako da odražava da tko nema mjere u čemu, da u čemu pretjeruje.',
                    'neumjerenost': ' Neumjerenost je osobina onoga koji je neumjeren u čemu ili svojstvo onoga što je neumjereno.',
                    'neumoran': ' Neumoran je koji predano i neprekidno radi i ne odustaje od čega.',
                    'neumorno': ' Neumorno je tako da odražava čiju predanost čemu i neodustajanje oda čega.',
                    'neumornost': ' Neumornost je osobina onoga koji je neumoran ili svojstvo onoga što je neumorno. ',
                    'neumski': ' Neumski je koji se odnosi na Neum i Neumljane.',
                    'neuništiv': ' Neuništiv je koji se ne može uništiti.',
                    'neuništivo': ' Neuništivo je tako da odražava da se tko ili što ne može uništiti.',
                    'neuništivost': ' Neuništivost je osobina onoga koji je neuništiv ili svojstvo onoga što je neuništivo.',
                    'neuredan': ' Neuredan je koji ne pazi na red i ne brine se o njemu.',
                    'neuredno': ' Neuredno je tako da odražava čiju nesklonost da pazi na red i brine se o njemu.',
                    'neurednost': ' Neurednost je osobina onoga koji je neuredan ili svojstvo onoga što je neuredno.',
                    'neustrašiv': ' Neustrašiv je koji ne osjeća strah, koji se ne boji upustiti u što.',
                    'neustrašivo': ' Neustrašivo je tako da odražava nepostojanje straha ili smjelost da se upusti u što.',
                    'neustrašivost': ' Neustrašivost je osobina onoga koji je neustrašiv.',
                    'nevin': ' Nevin je koji nije počinio ništa loše, koji nije ništa skrivio.',
                    'nevino': ' Nevino je tako da odražava da nije počinjeno ništa loše, da se ništa nije skrivilo.',
                    'nevinost': ' Nevinost je osobina koji nije počinio ništa loše, koji nije ništa skrivio.',
                    'nevodič': ' Nevodič je tvar koja pruža velik otpor provođenju električne struje.',
                    'nevolja': ' Nevolja je velika neprilika.',
                    'nevozač': ' Nevozač je odrasla osoba bez obzira na spol ili muškarac koji ne zna upravljati vozilom.',
                    'nevozačev': ' Nevozačev je koji pripada nevozaču.',
                    'nevozačica': ' Nevozačica je žena koja ne zna upravljati vozilom.',
                    'nevozačičin': ' Nevozačičin je koji pripada nevozačici.',
                    'nevozački': ' Nevozački je koji se odnosi na nevozače.',
                    'nevrijeme': ' Nevrijeme je jak atmosferski poremećaj praćen sijevanjem, grmljavinom, pljuskovima i snažnim udarima vjetra.',
                    'nezahvalan': ' Nazahvalan je koji nije zahvalan komu za što, koji ne cijeni kako učinjeno dobro.',
                    'nezahvalno': ' Nezahvalno je tako da odražava da se što teže podnosi, da nije ugodno.',
                    'nezahvalnost': ' Nazahvalnost je osobina onoga koji nije zahvalan komu za što, koji ne cijeni kako učinjeno dobro.',
                    'nezaposlen': ' Nezaposlen je koji nema posao, koji ne radi i ne dobiva plaću.',
                    'nezaposlenost': ' Nezaposlenost je stanje onoga koji je nezaposlen.',
                    'nezgoda': ' Nezgoda je događaj s lošim posljedicama.',
                    'ničiji': ' Ničiji je koji ne pripada nijednomu posjedovatelju.',
                    'nigerijski': ' Nigerijski je koji se odnosi na Nigeriju i Nigerijce.',
                    'nigerski': ' Nigerski je koji se odnosi na Niger i Nigerce.',
                    'nijedan': ' Nijedan označuje potpuno isključivanje.',
                    'nijekati': ' Nijekati znači tvrditi da se što nije dogodilo, da ne postoji, da nije točno ili da što ne treba činiti.',
                    'nijem': ' Nijem je koji nema dar govora, koji ne može govoriti.',
                    'nijemo': ' Nijemo znači tako da se šuti, bez riječi.',
                    'nikad': ' Nikad znači ni u koje vrijeme.',
                    'nikakav': ' Nikakav označuje potpuno isključivanje.',
                    'nikako': ' Nikako znači ni na koji način, ni u kojemu slučaju.',
                    'nikal': ' Nikal je kemijski element (Ni), tvrda bijela kovina srebrnoga sjaja, sastojak je nekih slitina, a upotrebljava se za bojenje stakla i keramike.',
                    'nikoji': ' Nikoji označuje potpuno isključivanje.',
                    'nisko': ' Nisko znači na maloj visini ili na malu visinu.',
                    'ništa': ' Ništa označuje isključivanje svake stvari i/ili pojave.',
                    'ništica': ' Ništica je broj koji označuje da u danome skupu nema članova.',
                    'nit': ' Nit je veoma tanka žica ili što drugo nalik koncu.',
                    'niti': ' Niti izriče da nije ispunjeno najmanje očekivanje',
                    'niti': ' Niti povezuje surečenice u nezavisnosloženoj sastavnoj rečenici.',
                    'nitko': ' Nitko označuje isključivanje svake osobe.',
                    'niz': ' Niz je više osoba, predmeta ili pojava koji se nalaze jedan pokraj drugoga ili slijede jedan za drugim.',
                    'niz(a)': ' Niz(a) označuje da se tko ili što kreće s više točke prema nižoj.',
                    'nizak': ' Nizak je koji je malen rastom.',
                    'nizozemski': ' Nizozemski je koji se odnosi na Nizozemsku i Nizozemce.',
                    'nižekratnik': ' Nižekratnik  je broj koji je umnožak zadanoga broja i nekoga cijelog negativnog broja, koji je cijeli broj puta manji od zadanoga broja.',
                    'noć': ' Noć je razdoblje od zalaska do izlaska Sunca.',
                    'noćni': ' Noćni je koji se odnosi na noć.',
                    'noga': ' Noga je donji ud koji služi za kretanje i stajanje.',
                    'nogomet': ' Nogomet je natjecateljska sportska igra dviju momčadi u kojoj se lopta udara nogom i glavom, a cilj je postići što više pogodaka u protivničku mrežu.',
                    'nogometaš': ' Nogometaš je osoba ili muškarac koji se profesionalno ili amaterski bavi nogometom.',
                    'nogometašev': ' Nogometašev je koji pripada nogometašu.',
                    'nogometašica': ' Nogometašica je žena koja se profesionalno ili amaterski bavi nogometom.',
                    'nogometašičin': ' Nogometašičin je koji pripada nogometašici.',
                    'nogometaški': ' Nogometaški je koji se odnosi na nogometaše.',
                    'nogometni': ' Nogometni je koji se odnosi na nogomet.',
                    'noj': ' Noj je najveća živuća ptica iz skupine nojevka duga gola vrata s malom glavom i kratkim krilima prekrivenim mekim perjem koja živi u Africi.',
                    'nokat': ' Nokat je rožnato tkivo na vrhovima prsta ruku i nogu čovjeka i majmuna.',
                    'nominativ': ' Nominativ je padež koji odgovara na pitanja 
                    ',
                    'nominativni': ' Nominativni je koji se odnosi na nominativ. ',
                    'normalan': ' Normalan je koji je uobičajen ili redovit.',
                    'normalno': ' Normalno je tako da je uobičajeno ili redovito.',
                    'norveški': ' Norveški je koji se odnosi na Norvešku i Norvežane.',
                    'nos': ' Nos je početni dio dišnoga sustava smješten na licu.',
                    'nosač': ' Nosač je osoba bez obzira na spol ili muška osoba kojoj je posao da nosi kakav teret.',
                    'nosila': ' Nosila su naprava za ručno nošenje bolesnika.',
                    'nositi': ' Nositi što znači premještati kakav teret.',
                    'nošnja': ' Nošnja je odjeća i obuća uobičajena za koje područje ili društvenu zajednicu.',
                    'nota': ' Nota je pisani znak za glazbeni ton.',
                    'nov': ' Nov je koji je tek napravljen ili kupljen.',
                    'novac': ' Novac je sredstvo za plaćanje, kovanice i novčanice kojima se što plaća.',
                    'novčanica': ' Novčanica je papirnati komad novca određene vrijednosti.',
                    'novčanik': ' Novčanik je torbica s pregradama u kojoj se nosi novac.',
                    'novela': ' Novela je prozna književna vrsta duža od crtice, a kraća od pripovijetke, koja obuhvaća djela u kojima se najčešće opisuje samo jedan događaj i ima nekoliko likova, a radnja se odvija u ograničenome vremenu i na ograničenome prostoru.',
                    'novina': ' Novina je nova pojava.',
                    'novinar': ' Novinar je osoba ili muškarac koji piše ili priprema tekstove za novine, radio ili televiziju.',
                    'novinarev': ' Novinarev je koji pripada novinaru.',
                    'novinarka': ' Novinarka je žena koja piše ili priprema tekstove za novine, radio ili televiziju.',
                    'novinarkin': ' Novinarkin je koji pripada novinarki.',
                    'novinarov': ' Novinarov je koji pripada novinaru.',
                    'novinarski': ' Novinarski je koji se odnosi na novinare i novinarstvo.',
                    'novine': ' Novine su redovito tiskano glasilo. ',
                    'novinski': ' Novinski je koji se odnosi na novine.',
                    'novljanski': ' Novljanski je koji se odnosi na Novsku i Novljane.',
                    'novo': ' Novo je tako da odražava da je što tek nastalo ili se tek pojavilo i nije poznato otprije.',
                    'novogradiški': ' Novogradiški je koji se odnosi na Novu Gradišku i Novogradiščane.',
                    'novorođenče': ' Novorođenče je dijete koje se tek rodilo, dijete u prvome mjesecu života.',
                    'novost': ' Novost je nova pojava.',
                    'novozelandski': ' Novozelandski je koji se odnosi na Novi Zeland i Novozelanđane.',
                    'nož': ' Nož je oštar kovinski predmet koji se upotrebljava za rezanje i kao hladno oružje.',
                    'npr.': ' Npr. je kratica od 
                    ',
                    'nuditi': ' Nuditi što znači davati komu mogućnost, predlagati mu da što prihvati, odbije ili razmisli o prijedlogu.',
                    'nula': ' Nula je broj koji označuje da u danome skupu nema članova.',
                    'nuncij': ' Nuncij je visoki muški izaslanik  pape i Svete Stolice pri nekoj vladi.',
                    'nja': ' Nja je onomatopejska riječ kojom se oponaša glasanje magarca. ',
                    'njakanje': ' Njakanje je glasanje glasom koji podsjeća na 
                    ',
                    'njakati': ' Njakati znači glasati se glasom koji podsjeća na 
                    ',
                    'njaknuti': ' Njaknuti znači oglasiti se glasom koji podsjeća na 
                    ',
                    'njegov': ' Njegov je koji pripada muškoj osobi, životinji ili predmetu koji je označen imenicom muškoga roda, negovornoj osobi.',
                    'njegovati': ' Njegovati znači brinuti se o kome ili čemu.',
                    'njemački': ' Njemački je koji se odnosi na Njemačku i Nijemce.',
                    'njezin': ' Njezin je koji pripada ženskoj osobi, životinji ili predmetu koji je označen imenicom ženskoga roda, negovornoj osobi.',
                    'nježan': ' Nježan je koji ima blag i brižan odnos prema komu.',
                    'nježno': ' Nježno je tako da odražava blagost i brižnost, s razumijevanjem i suosjećanjem.',
                    'nježnost': ' Nježnost je osobina onoga koji je blag i brižan.',
                    'njihaljka': ' Njihaljka je naprava za dječju zabavu, sjedalo koje visi i njiše se pokretanjem tijela prema naprijed i prema natrag.',
                    'njihati': ' Njihati koga ili što znači laganim pokretima ravnomjerno pomicati koga ili što naprijed i natrag ili lijevo i desno.',
                    'njihov': ' Njihov je koji pripada muškim osobama, životinjama ili predmetima označenim imenicama muškoga roda o kojima se govori ili piše, negovornim osobama.',
                    'njisak': ' Njisak je jednokratno prodorno oglašavanje konja.',
                    'njištati': ' Njištati znači glasati se njiskom.',
                    'njiva': ' Njiva je zemlja koja se ore i redovito obrađuje.',
                    'njuh': ' Njuh je osjetilo koje omogućuje sposobnost primanja i razlikovanja mirisa s pomoću nosa.',
                    'njujorški': ' Njujorški je koji se odnosi na New York i Njujorčane.',
                    'njuška': ' Njuška je prednji dio glave nekih životinja na kojemu se nalaze nozdrve, usta te gornja i donja čeljust.',
                    'njutn': ' Njutn je mjerna jedinica za silu (N).',
                    'njutnmetar': ' Njutnmetar je mjerna jedinica za moment sile (Nm).',
                    'obala': ' Obala je pojas kopna uz more, rijeku ili jezero.',
                    'obao': ' Obao je koji nema oštrih rubova, izbočina, udubina ili bridova na svojoj površini, koji je blagih linija.',
                    'obaveza': ' Obaveza je ono što tko mora obaviti ili napraviti ',
                    'obavezan': ' Obavezan je koji se temelji na obavezi, koji mora biti.',
                    'obavezno': ' Obavezno znači tako da se temelji na obavezi.',
                    'obavijest': ' Obavijest je skup podataka koji imaju određeno značenje.',
                    'običan': ' Običan je koji je kao i drugi, koji nema posebne osobine ili svojstva.',
                    'obično': ' Obično znači isto kao i drugi, bez posebnih osobina ili svojstava.',
                    'obići': ' Obići znači hodajući ili vozeći proći sa svih strana oko čega, napraviti krug oko čega.',
                    'obilazak': ' Obilazak je kretanje s namjerom da se što razgleda, da se s čim upozna ili da se što obavi.',
                    'obilovati': ' Obilovati čime znači imati čega u obilju, biti bogat čime.',
                    'obilje': ' Obilje je stanje onoga koji je bogat, koji ima mnogo novca, dobara ili drugih vrijednosti.',
                    'obilježavati': ' Obilježavati znači činiti što prepoznatljivim ili jedinstvenim.',
                    'obilježiti': ' Obilježiti znači učiniti što prepoznatljivim ili jedinstvenim.',
                    'obitelj': ' Obitelj je zajednica najbližih srodnika koji zajedno žive, temeljna ljudska zajednica.',
                    'obiteljski': ' Obiteljski je koji se odnosi na obitelj.',
                    'objasniti': ' Objasniti znači učiniti da što komu postane jasno i razumljivo.',
                    'objašnjavati': ' Objašnjavati znači činiti da što komu postane jasno i razumljivo.',
                    'objaviti': ' Objaviti znači dati u javnost kakvu novost.',
                    'objed': ' Objed je glavni dnevni obrok koji se jede ili sredinom dana ili nakon posla.',
                    'objekt': ' Objekt je samostalni rečenični dio kojim se izriče predmet radnje. ',
                    'objektni': ' Objektni je koji se odnosi na objekt, samostalni rečenični dio.',
                    'objesiti': ' Objesiti znači postaviti što u viseći položaj.',
                    'oblačan': ' Oblačan je koji je pun oblaka.',
                    'oblačiti': ' Oblačiti znači stavljati na koga odjevni predmet.',
                    'oblačiti se': ' Oblačiti se znači postajati oblačnim, prekrivati se oblacima.',
                    'oblačni': ' Oblačni je koji se odnosi na oblak, veliku nakupinu zgusnute vodene pare i malih kristala leda koja se oblikuje u atmosferi i vidi kao bijela ili siva gomila ili sloj koji lebdi u zraku.',
                    'oblak': ' Oblak je velika nakupina zgusnute vodene pare i malih kristala leda koja se oblikuje u atmosferi i vidi kao bijela ili siva gomila ili sloj koji lebdi u zraku.',
                    'oblik': ' Oblik je vanjski izgled predmeta ili tijela.',
                    'oblikoslovlje': ' Oblikoslovlje je grana gramatike koja proučava oblike riječi. ',
                    'oblikoslovni': ' Oblikoslovni je koji se odnosi na oblikoslovlje.',
                    'oblo': ' Oblo je tako da nema oštrih rubova, izbočina, udubina ili bridova na svojoj površini, koji je blagih linija.',
                    'obljetnica': ' Dan na koji se u prošlosti dogodio koji događaj. ',
                    'obljetnički': ' Obljetnički je koji se odnosi na obljetnicu. ',
                    'oboa': ' Oboa je drveno puhaće glazbalo po registru dublje od flaute, a više od klarineta.',
                    'oboist': ' Oboist je osoba bez obzira na spol ili muška osoba koja svira obou.',
                    'oboistica': ' Oboistica je ženska osoba koja svira obou.',
                    'oboističin': ' Oboističin je koji pripada oboistici.',
                    'oboistički': ' Oboistički je koji se odnosi na oboe i oboiste.',
                    'oboistov': ' Oboistov je koji pripada oboistu.',
                    'obojiti': ' Obojiti znači premazati što bojom.',
                    'oborina': ' Oborina je voda u tekućemu ili čvrstomu stanju koja iz oblaka pada na površinu Zemlje ili nastaje na Zemlji kondenzacijom ili sublimacijom vodene pare uz tlo.',
                    'obožavati': ' Obožavati koga znači osjećati veliku ljubav prema komu ili čemu.',
                    'obrana': ' Obrana je djelovanje kojemu je cilj zaštititi od napada i otkloniti opasnost.',
                    'obraz': ' Obraz je strana ljudskoga lica, dio lica između nosa i uha.',
                    'obrazlagati': ' Obrazlagati znači navoditi razloge, činjenice i dr. za koji postupak, radnju, odluku i sl.',
                    'obrazložiti': ' Obrazložiti znači navesti razloge, činjenice i dr. za koji postupak, radnju, odluku i sl.',
                    'obrazovanje': ' Obrazovanje je stjecanje znanja u školskim ustanovama.',
                    'obrijati': ' Obrijati znači ukloniti dlake s kože s pomoću britve ili brijaćega aparata:',
                    'obrok': ' Obrok je hrana koju jedna osoba pojede za zajutrak, doručak, objed ili večeru.',
                    'obrt': ' Obrt je gospodarska djelatnost koja se bavi proizvodnjom, prometom ili uslugama.',
                    'obrtnica': ' Obrtnica je žena koja je završila obrtničku školu i stekla pravo da se bavi obrtom.',
                    'obrtnica': ' Obrtnica je isprava kojom se dopušta otvaranje obrta.',
                    'obrtničin': ' Obrtničin je koji pripada obrtnici.',
                    'obrtnički': ' Obrtnički je koji se odnosi na obrtnike.',
                    'obrtnik': ' Obrtnik je osoba koja je završila obrtničku školu i stekla pravo da se bavi obrtom.',
                    'obrtnikov': ' Obrtnikov je koji pripada obrtniku.',
                    'obrva': ' Obrva je nakupina dlaka u obliku luka iznad gornjega ruba očne šupljine.',
                    'obuća': ' Obuća je odjevni predmet koji se obuva, navlači na stopala, npr. cipele, čizme, papuče.',
                    'obući': ' Obući znači staviti na koga (o odjevnome predmetu).',
                    'obujam': ' Obujam je omeđeni prostor koji zauzima koje tijelo, količina prostora izražena u kubnim mjerama.',
                    'obuti': ' Obuti znači staviti na noge (o obući ili čarapama).',
                    'obuvati': ' Obuvati znači stavljati na noge (o obući ili čarapama).',
                    'obveza': ' Obveza je ono što tko mora obaviti ili napraviti.',
                    'obvezan': ' Obvezan je koji se temelji na obvezi, koji mora biti.',
                    'obvezno': ' Obvezno je tako da se temelji na obvezi.',
                    'obzir': ' Obzir je razumijevanje za druge, nastojanje da se nikoga ne povrijedi.',
                    'obziran': ' Obziran je koji ima obzira i razumijevanja prema komu.',
                    'obzirno': ' Obzirno je tako da odražava obzir i razumijevanje prema komu.',
                    'obzirnost': ' Obzirnost je osobina onoga koji je obziran ili svojstvo onoga što je obzirno.',
                    'ocat': ' Ocat je kiselina s vodom koja služi kao začin za salatu ili za konzerviranje hrane.',
                    'ocean': ' Ocean je prostrano more među kontinentima.',
                    'ocjena': ' Ocjena je mišljenje o kome ili čemu.',
                    'očekivati': ' Očekivati znači vjerovati da će tko ili što prispjeti ili doći.',
                    'očev': ' Očev je koji pripada ocu, roditelju muškoga spola.',
                    'očinski': ' Očinski je koji se odnosi na očeve.',
                    'očit': ' Očit je koji se jasno vidi, koji se ne mora dokazivati.',
                    'očito': ' Očito je tako da se jasno vidi, da se ne mora dokazivati.',
                    'očuh': ' Očuh je majčin muž njezinoj djeci iz prethodnih brakova.',
                    'očuhov': ' Očuhov je koji pripada očuhu.',
                    'oda': ' Oda je lirska pjesnička vrsta u kojoj se na svečan način, s radošću i divljenjem slavi kakva osoba ili važan događaj.',
                    'odabirati': ' Odabirati znači izdvajati koga ili što iz skupine s kojim ciljem, praviti izbor.',
                    'odabrati': ' Odabrati znači izdvojiti koga ili što iz skupine s kojim ciljem, napraviti izbor.',
                    'odakle': ' Odakle uvodi pitanje o mjestu od kojega je započelo kretanje.',
                    'odan': ' Odan je koji je vjeran komu ili čemu, koji uvijek slijedi koga ili što neovisno o okolnostima',
                    'odano': ' Odano je tako da odražava vjernost komu ili čemu neovisno o okolnostima.',
                    'odanost': ' Odanost je osobina onoga koji je odan.',
                    'odašiljač': ' Odašiljač je uređaj kojim se odašilju signali, emitira televizijski i radijski program.',
                    'odbojan': ' Odbojan je koji svoji izgledom ili ponašanjem odbija druge od sebe.',
                    'odbojka': ' Odbojka je natjecateljska sportska igra dviju momčadi u kojoj se lopta prebacuje preko mreže u protivničko polje.',
                    'odbojkaš': ' Odbojkaš je osoba ili muškarac koji se profesionalno ili amaterski bavi odbojkom.',
                    'odbojkašev': ' Odbojkašev je koji pripada odbojkašu.',
                    'odbojkašica': ' Odbojkašica je žena koja se profesionalno ili amaterski bavi odbojkom.',
                    'odbojkašičin': ' Odbojkašičin je koji pripada odbojkašici.',
                    'odbojkaški': ' Odbojkaški je koji se odnosi na odbojkaše i odbojku.',
                    'odbojno': ' Odbojno je tako da odražava da tko svojim izgledom ili ponašanjem odbija druge od sebe.',
                    'odbojnost': ' Odbojnost je stanje ili osjećaj onoga kojemu je tko odbojan ili kojemu je što odbojno.',
                    'odbolovati': ' Odbolovati znači prestati biti bolestan.',
                    'odbor': ' Odbor je tijelo koje čini skupina izabranih ili imenovanih osoba koje obavljaju određene zadatke, donose, provode ili potvrđuju odluke.',
                    'odgoj': ' Odgoj je djelovanje na djecu i mlade kojim ih se uči pristojnomu ponašanju i korisnim navikama te razvijaju njihove sposobnosti i izgrađuje njihova osobnost.',
                    'odgojitelj': ' Odgojitelj je osoba ili muškarac koji se bavi odgojem djece.',
                    'odgojiteljev': ' Odgojiteljev je koji pripada odgojitelju.',
                    'odgojiteljica': ' Odgojiteljica je žena koja se bavi odgojem djece.',
                    'odgojiteljičin': ' Odgojiteljičin je koji pripada odgojiteljici.',
                    'odgojiteljski': ' Odgojiteljski je koji se odnosi na odgojitelje.',
                    'odgovarati': ' Odgovarati znači izricati odgovor na postavljeno pitanje.',
                    'odgovor': ' Odgovor je pismeni ili usmeni iskaz koji se daje na postavljeno pitanje.',
                    'odgovoran': ' Odgovoran je koji se ponaša savjesno i s razumijevanjem prema komu ili čemu.',
                    'odgovoriti': ' Odgovoriti znači izreći odgovor na postavljeno pitanje.',
                    'odgovorno': ' Odgovorno je tako da odražava čije savjesno i razumno ponašanje.',
                    'odgovornost': ' Odgovornost je osobina onoga koji je odgovoran ili svojstvo onoga što je odgovorno.',
                    'odijelo': ' Odijelo je odjeća koja je sastoji od kratkoga kaputa i hlača, obično od istoga materijala.',
                    'odijevati': ' Odijevati znači stavljati na koga (o odjevnome predmetu).',
                    'odjeća': ' Odjeća je ono što se odijeva, čime se pokriva tijelo.',
                    'odjekivati': ' Odjekivati znači oglašavati se poput jeke.',
                    'odjeknuti': ' Odjeknuti znači oglasiti se poput jeke.',
                    'odjel': ' Odjel je dio veće radne cjeline koji se bavi određenom djelatnošću.',
                    'odjenuti': ' Odjenuti znači staviti na koga (o odjevnome predmetu).',
                    'odlagati': ' Odlagati što znači stavljati što privremeno na stranu, spremati na neko vrijeme dok ponovno ne bude upotrijebljeno.',
                    'odlazak': ' Odlazak je napuštanje odredišta.',
                    'odlaziti': ' Odlaziti znači krećući se napuštati određeno mjesto.',
                    'odličan': ' Odličan je koji je iznimno dobar ili kvalitetan.',
                    'odlično': ' Odlično je tako da je iznimno dobro ili kvalitetno.',
                    'odlomak': ' Odlomak je dio teksta ili kakva umjetničkog djela.',
                    'odložiti': ' Odložiti što znači staviti što privremeno na stranu, spremiti na neko vrijeme dok ponovno ne bude upotrijebljeno.',
                    'odlučan': ' Odlučan je koji lako donosi odluke i siguran je u svoje postupke.',
                    'odlučiti': ' Odlučiti znači donijeti odluku.',
                    'odlučivati': ' Odlučivati znači donositi odluku.',
                    'odlučno': ' Odlučno je tako da odražava da tko lako donosi odluke i da je siguran u svoje postupke.',
                    'odlučnost': ' Odlučnost je osobina onoga koji je odlučan ili svojstvo onoga što je odlučno.',
                    'odluka': ' Odluka je čvrsta namjera da se što učini.',
                    'odmah': ' Odmah je istoga trenutka, u onome trenutku u kojemu govoritelj govori.',
                    'odmaralište': ' Odmaralište je uređeni prostor za odmor ljudi iz istoga poduzeća, školske i vrtićke djece i sl.',
                    'odmarati': ' Odmarati znači činiti koga ili što odmornim.',
                    'odmor': ' Odmor je prekid rada ili aktivnosti kako bi se nadoknadila utrošena energije.',
                    'odmoriti': ' Odmoriti koga ili što znači učiniti odmornim.',
                    'odnos': ' Odnos je položaj dviju ili više stvari jedne prema drugoj, omjer među njima i njihova međusobna ovisnost.',
                    'odnositi': ' Odnositi što znači noseći otpremati što s određenoga mjesta.',
                    'odnosno': ' Odnosno uvodi dodatno pojašnjenje.',
                    'odojak': ' Odojak je mlado svinje koje sisa namijenjeno prehrani.',
                    'odora': ' Odora je odjeća po kojoj se prepoznaje pripadnost vojnoj postrojbi, javnoj službi ili organizaciji.',
                    'odrastao': ' Odrastao je koji više ne raste, koji je zreo.',
                    'odredište': ' Odredište je mjesto na koje se dolazi, koje je cilj kakvoga kretanje.',
                    'odrediti': ' Odrediti što znači točno utvrditi kakve uvjete ili okolnosti na temelju kojih će se što napraviti.',
                    'određen': ' Određen je koji je poznat i točno utvrđen.',
                    'određivati': ' Određivati što znači točno utvrđivati kakve uvjete ili okolnosti na temelju kojih će se što napraviti.',
                    'odrezak': ' Odrezak je tanko rezan komad mesa koji se prži ili peče.',
                    'održati': ' Održati znači produljiti postojanje čemu.',
                    'održavanje': ' Održavanje je produljivanje postojanja čega.',
                    'održavati': ' Održavati znači produljivati postojanje čemu.',
                    'odsad': ' Odasad znači od ovoga trenutka, od trenutka u kojemu govoritelj govori.',
                    'odsada': ' Odsada od ovoga trenutka, od trenutka u kojemu govoritelj govori.',
                    'oduševljen': ' Oduševljen je koji osjeća iznimno pozitivnu reakciju na koga ili što.',
                    'oduševljeno': ' Oduševljeno je tako da odražava iznimno pozitivnu reakciju na koga ili što.',
                    'oduševljenost': ' Oduševljenost je stanje onoga koji je oduševljen.',
                    'oduvijek': ' Oduvijek je otkad se pamti ili od početka čega.',
                    'oduzeti': ' Oduzeti znači uzeti što komu protiv njegove volje.',
                    'oduzimanje': ' Oduzimanje je uzimanje čega komu protiv njegove volje.',
                    'oduzimati': ' Oduzimati znači uzimati što komu protiv njegove volje.',
                    'odvajati': ' Odvajati znači dijeliti dio od cjeline ili iz skupine.',
                    'odvesti': ' Odvesti znači vodeći koga napustiti određeno mjesto.',
                    'odvoditi': ' Odvoditi znači vodeći koga napuštati određeno mjesto.',
                    'odvojiti': ' Odvojiti znači odijeliti dio od cjeline ili iz skupine.',
                    'odzvanjati': ' Odzvanjati znači oglašivati se zvonom (o vremenu).',
                    'odzvoniti': ' Odzvoniti znači oglasiti se zvonom (o vremenu).',
                    'oficir': ' Oficir je viši vojni čin u jugoslavenskoj vojsci (i drugim vojskama).',
                    'oficirka': ' Oficirka je žena s činom oficira.',
                    'oficirkin': ' Oficirkin je koji pripada oficirki.',
                    'oficirov': ' Oficirov je koji pripada oficiru.',
                    'oficirski': ' Oficirski je koji se odnosi na oficire.',
                    'oglas': ' Oglas je javna obavijest namijenjena većemu broju ljudi.',
                    'ogled': ' Ogled je prozna književna vrsta slobodne tematike i stilistike u kojoj se isprepliću znanstveni i publicistički pristup opisu.',
                    'ogledalo': ' Ogledalo je staklo zatamnjeno sa stražnje strane koje pravilno odbija svjetlosne zrake i vjerno odražava likove.',
                    'ograda': ' Ograda je prepreka podignuta oko čega radi zaštite.',
                    'ogrjev': ' Ogrjev je gradivo koje služi za loženje, npr. drvo ili ugljen.',
                    'ogrlica': ' Ogrlica je nakit koji se nosi oko vrata.',
                    'ogrtač': ' Ogrtač je dio odjeće koji pokriva tijelo, nosi se preko druge odjeće, najčešće radi zaštite od hladnoće.',
                    'ogulinski': ' Ogulinski je koji se odnosi na Ogulin i Ogulince.',
                    'ohladiti': ' Ohladiti znači učiniti što hladnim ili hladnijim.',
                    'ohol': ' Ohol je koji sebi pridaje veliku važnost u odnosu na druge.',
                    'oholo': ' Oholo je tako da odražava čiji osjećaj velike važnosti u odnosu na druge.',
                    'oholost': ' Oholost je osobina onoga koji je ohol.',
                    'ojanjiti': ' Ojanjiti znači donijeti mlado na svijet (o ovci).',
                    'ojariti': ' Ojariti znači donijeti mlado na svijet (o kozi).',
                    'oker': ' Oker je koji je boje sijena ili svijetle zemlje, koji je zagasite žute boje, koji je između blijedožute i smeđe boje.',
                    'oklop': ' Oklop je zaštitna odjeća kojom su se ratnici štitili od ranjavanja hladnim oružjem.',
                    'oko': ' Oko je organ vida smješten u šupljini na prednjemu dijelu glave.',
                    'oko': ' Oko označuje da se tko ili što nalazi ili kreće tako da je što u središtu kretanja.',
                    'oko': ' Oko uvodi okvirnu vrijednost ili vrijeme.',
                    'okoliš': ' Okoliš je uži okolni prostor.',
                    'okolo': ' Okolo je na području koje se prostire oko kojega središta.',
                    'okomit': ' Okomit je koji se pruža ravno prema gore.',
                    'okomito': ' Okomito je tako da se pruža ravno prema gore.',
                    'okomitost': ' Okomitost je svojstvo onoga što se pruža ravno prema gore.',
                    'okoristiti se': ' Okoristiti se čime znači izvući iz čega korist, upotrijebiti za svoju korist.',
                    'okotiti': ' Okotiti znači donijeti mlado na svijet (o sisavcima).',
                    'okrenuti': ' Okrenuti što znači prevrćući premjestiti što na drugu stranu.',
                    'okretati': ' Okretati što znači prevrćući premještati što na drugu stranu.',
                    'okrugao': ' Okrugao je koji ima oblik kruga ili kugle.',
                    'okruglo': ' Okruglo je tako da izraženo najbližim iznosom koji završava na ništicu.',
                    'okrutan': ' Okrutan je koji nema milosrđa prema kome.',
                    'okrutno': ' Okrutno je tako da odražava čiji nedostatak milosrđa prema kome.',
                    'okrutnost': ' Okrutnost je osobina onoga koji je okrutan ili svojstvo onoga što je okrutno.',
                    'oksimoron': ' Oksimoron je pjesnička figura spajanja protuslovnih pojmova.',
                    'oktalni': ' Oktalni je koji se odnosi na brojevni sustav koji ima bazu osam.',
                    'okućnica': ' Okućnica su zemlja, dvorište ili vrt koji se nalaze uz kuću.',
                    'okulist': ' Okulist je liječnik specijalist za očne bolesti.',
                    'okulistica': ' Okulistica je liječnica specijalistica za očne bolesti.',
                    'okulističin': ' Okulističin je koji pripada okulistici. ',
                    'okulistov': ' Okulistov je koji pripada okulistu.',
                    'okupati': ' Okupati koga znači oprati mu čitavo tijelo u vodi.',
                    'okus': ' Okus je osjetilo koje omogućuje sposobnost primanja i razlikovanja hrane i pića s pomoću jezika.',
                    'okvir': ' Okvir je ono čime se što učvršćuje ili obrubljuje.',
                    'olovka': ' Olovka je sredstvo za pisanje i crtanje po papiru.',
                    'olovo': ' Olovo je kemijski element (Pb), meka siva, na prerezima modra otrovna kovina koja ima široku primjenu u industriji.',
                    'oluja': ' Oluja je veoma jak vjetar koji obično prate oborine i grmljavina.',
                    'omaciti': ' Omaciti znači donijeti mlado na svijet (o mački).',
                    'omiljen': ' Omiljen je koji uživa čije simpatije, kojega tko jako voli.',
                    'omiljenost': ' Omiljenost je osobina onoga koji je omiljen, koji uživa čije simpatije i koji je volje.',
                    'omiški': ' Omiški je koji se odnosi na Omiš i Omišane.',
                    'omjer': ' Omjer je odnos između dviju veličina.',
                    'ommetar': ' Ommetar je uređaj za mjerenje električnoga otpora.',
                    'omogućavati': ' Omogućavati znači davati komu priliku da što učini, osiguravati uvjete za što.',
                    'omogućiti': ' Omogućiti znači dati komu priliku da što učini, osigurati uvjete za što.',
                    'omogućivati': ' Omogućivati znači davati komu priliku da što učini, osiguravati uvjete za što.',
                    'omot': ' Omot je tanak, od predmeta odvojiv, obično plastični ili papirnati sloj kojim se predmet omata kako bi se zaštitio, ukrasio itd.',
                    'omotati (se)': ' Omotati što znači obaviti što čime.',
                    'omotavati (se)': ' Omotavati što znači obavijati što čime.',
                    'ona': ' Ona je ženska osoba, životinja ili predmet označen imenicom ženskoga roda o kojemu se govori ili piše, negovorna osoba.',
                    'ona': ' Ona su djeca, mladunčad ili predmeti označeni imenicama srednjega roda o kojima se govori ili piše, negovorne osobe.',
                    'ona': ' Ona označuje žensku osobu, životinju ili predmet označen imenicom ženskoga roda koju nije u izravnoj blizini ni govoritelja ni sugovoritelja.',
                    'onaj': ' Onaj označuje mušku osobu, životinju ili predmet označen imenicom muškoga roda koji nije u izravnoj blizini ni govoritelja ni sugovoritelja.',
                    'onakav': ' Onakav je koji je poput osobe, životinje ili predmeta označenoga imenicom muškoga roda koji nije u izravnoj blizini ni govoritelja ni sugovoritelja.',
                    'onako': ' Onako znači onaj način, na način koji se odnosi na što (u konkretnome i u apstraktnome smislu) udaljeno od govoritelja.',
                    'onda': ' Onda znači u ono vrijeme, u onome trenutku, u trenutku koji je udaljen od trenutka u kojemu govoritelj govori.',
                    'one': ' One su ženske osobe, životinje ili predmeti označeni imenicama ženskoga roda o kojima se govori ili piše, negovorne osobe.',
                    'oni': ' Oni su muške osobe, životinje ili predmeti označeni imenicama muškoga roda o kojima se govori ili piše, negovorne osobe.',
                    'ono': ' Ono je dijete, mladunče ili predmet označen imenicom srednjega roda o kojemu se govori ili piše, negovorna osoba.',
                    'ono': ' Ono je dijete, mladunče ili predmet označen imenicom srednjega roda koji nije u izravnoj blizini ni govoritelja ni sugovoritelja.',
                    'onomatopeja': ' Onomatopeja je pjesnička figura u kojoj se glasovima oponašaju određeni zvuci iz prirode, životinjsko glasanje ili neki zvuci koji nas podsjećaju na određeni predmet.',
                    'opanak': ' Opanci su kožnata obuća koja se veže remenjem i dio je narodne nošnje.',
                    'opasan': ' Opasan je koji može koga ugroziti, koji komu može nanijeti štetu ili nesreću.',
                    'opasno': ' Opasno je tako da odražava da je tko ugrožen, da komu prijeti kakva šteta ili nesreća.',
                    'opasnost': ' Opasnost je radnja, stanje, postupak ili zbivanje koji odražavaju čiju ugroženost ili da komu prijeti kakva šteta ili nesreća.',
                    'opatijski': ' Opatijski je koji se odnosi na Opatiju i Opatijce.',
                    'opći': ' Opći je koji se odnosi na sve, koji je zajednički svima.',
                    'općina': ' Općina je društvena zajednica koja se sastoji od jednoga većeg sela, više sela, jednoga grada ili dijela grada, osnovna upravna jedinica u državi.',
                    'opeka': ' Opeka je četvrtasti blok  od  pečene gline koji služi za gradnju.',
                    'operacija': ' Operacija je složeno, organizirano djelovanje, organizirani rad koji uključuje više ljudi ili strojeva kako bi se ostvario koji cilj.',
                    'opet': ' Opet znači da se što ponavlja, još jednom.',
                    'opip': ' Opip je osjetilo koje omogućuje sposobnost primanja i razlikovanja dodira najjače izraženo na jagodicama prstiju i na usnama.',
                    'opis': ' Opis je prikaz čijih bitnih crta i svojstava iskazan riječima.',
                    'opisati': ' Opisati koga ili što znači navesti čija svojstva ili osobine.',
                    'opisivati': ' Opisivati koga ili što znači navoditi čija svojstva ili osobine.',
                    'opkoračenje': ' Opkoračenje je pjesnička figura koja se temelji na prijenosu rečenične ili značenjske cjeline iz jednoga stiha u drugi ili iz jedne kitice u drugu.',
                    'opna': ' Opna je tanka napeta površina.',
                    'opomena': ' Opomena je skretanje pozornosti na kakvu opasnost ili na loše posljedice kakva postupka.',
                    'oporabiti': ' Oporabiti što znači preraditi otpadno gradivo tako da se ponovno može upotrijebiti.',
                    'oporabljivati': ' Oporabljivati što znači prerađivati otpadno gradivo tako da se ponovno može upotrijebiti.',
                    'oporuka': ' Oporuka je dokument u kojemu se izražava čija posljednja volja koja se odnosi na raspodjelu imovine u slučaju njegove smrti.',
                    'oprasiti': ' Oprasiti znači donijeti mlado na svijet (o krmači).',
                    'opraštati': ' Opraštati znači davati oprost komu, ne zamjerati komu ono što je loše učinio, oslobađati koga krivnje za ono što je loše učinio ili kakve obveze koju nije proveo.',
                    'oprema': ' Oprema su stvari koje imaju zajedničku namjenu, koje služe istoj svrsi.',
                    'oprez': ' Oprez je uzimanje u obzir moguće opasnosti.',
                    'oprezan': ' Oprezan je koji vodi računa o mogućoj opasnosti.',
                    'oprezno': ' Oprezno je tako da se vodi računa o mogućoj opasnosti.',
                    'opreznost': ' Opreznost je uzimanje u obzir moguće opasnosti.',
                    'oprostiti': ' Oprostiti znači dati oprost komu, ne zamjeriti komu ono što je loše učinio, osloboditi koga krivnje za ono što je loše učinio ili kakve obveze koju nije proveo.',
                    'optimist': ' Optimist je osoba bez obzira na spol ili muška osoba koja se nada dobromu, koja na budućnost gleda vedro i s mnogo nade.',
                    'optimistica': ' Optimistica je ženska osoba  koja se nada dobromu, koja na budućnost gleda vedro i s mnogo nade.',
                    'optimističin': ' Optimističin je koji pripada optimistici.',
                    'opustiti': ' Opustiti znači učiniti labavim ono što je bilo učvršćeno, zavezano ili čvrsto zategnuto.',
                    'opuštati': ' Opuštati znači činiti labavim ono što je bilo učvršćeno, zavezano ili čvrsto zategnuto.',
                    'opuzenski': ' Opuzenski je koji se odnosi na Opuzen i Opuzence.',
                    'orah': ' Orah je listopadno visoko stablo koje ima grubu smeđu koru debla, šiljaste listove i plod koštunicu.',
                    'oranica': ' Oranica je zemlja koja se ore i redovito obrađuje.',
                    'orao': ' Orao je strvinar oštra vida, snažnih pandža i jaka kljuna.',
                    'organ': ' Organ je dio organizma koji obavlja određenu funkciju.',
                    'organizacija': ' Organizacija  način na koji su dijelovi cjeline povezani u hijerarhijski odnos.',
                    'organizam': ' Organizam je sustav svih organa u živome biću, živi sustav koji ima sposobnost hranjenja, razvijanja, prilagođavanja i razmnožavanja.',
                    'organizirati': ' Organizirati što znači dati/davati čemu cjelovit oblik i smisao, učiniti/činiti sve potrebne pripreme kako bi se što moglo obaviti.',
                    'orguljaš': ' Orguljaš je osoba bez obzira na spol ili muška osoba koja svira orgulje.',
                    'orguljašev': ' Orguljašev je koji pripada orguljašu.',
                    'orguljašica': ' Orguljašica je ženska osoba koja svira orgulje.',
                    'orguljašičin': ' Orguljašičin je koji pripada orguljašici.',
                    'orguljaški': ' Orguljaški je koji se odnosi na orgulje i orguljaše.',
                    'orgulje': ' Orgulje su glazbalo koje se sastoji od klavijatura, niza registara s velikim brojem svirala i spremišta za zrak iz kojega se posebnim mehanizmom zgusnuti zrak dovod u svirale.',
                    'orhideja': ' Orhideje su porodica biljka jednosupnica s velikim cvjetovima različitih boja koji rastu u skupinama.',
                    'orkestar': ' Orkestar je skupina glazbenika koji, svirajući svaki na svojemu glazbalu, pod ravnanjem dirigenta zajedno izvode glazbena djela.',
                    'ormar': ' Ormar je dio namještaja koji služi za odlaganje odjeće, rublja i sl.',
                    'oruđe': ' Oruđe je predmet napravljen za obavljanje kakva posla.',
                    'oružje': ' Oružje je sredstvo za ubijanje ljudi i životinja. ',
                    'osa': ' Osa je zadružni kukac opnokrilac vitkoga i glatkoga tijela s izrazitim  crnim i žutim šarama po tijelu i s glatkim žalcem kojim može ubosti i nekoliko puta.',
                    'osam': ' Osam je broj koji se obilježuje s 8, za jedan veći od broja sedam i za jedan manji od broja devet.',
                    'osamdeset': ' Osamdeset je broj koji se obilježuje s 80, za jedan veći od broja sedamdeset devet i za jedan manji od broja osamdeset jedan.',
                    'osamdesetak': ' Osamdesetak je približno osamdeset, oko osamdeset.',
                    'osamdesetero': ' Osamdesetero je skupina od osamdeset osoba različita spola.',
                    'osamdeseti': ' Osamdeseti je koji je iza sedamdeset devetoga, a prije osamdeset prvoga.',
                    'osamdesetorica': ' Osamdesetorica je skupina od osamdeset muških osoba.',
                    'osamnaest': ' Osamnaest je broj koji se obilježuje s 18, za jedan veći od broja sedamnaest i za jedan manji od broja devetnaest.',
                    'osamnaestero': ' Osamnaestero je skupina od osamnaest osoba različita spola.',
                    'osamnaesti': ' Osamnaesti je koji je iza sedamnaestoga, a prije devetnaestoga.',
                    'osamsto': ' Osamsto je broj koji se obilježuje s 800, za jedan veći od broja sedamsto devedeset devet i za jedan manji od broja osamsto jedan.',
                    'osamstoti': ' Osamstoti je koji je iza sedamsto devedeset devetoga, a prije osamsto prvoga.',
                    'osigurač': ' Osigurač je uređaj koji štiti električne instalacije tako da prekida dovod struje u slučaju kad jakost struje prijeđe predviđenu vrijednost (npr. zbog kratkoga spoja).',
                    'osiguranje': ' Osiguranje su službe koje osiguravaju ili čuvaju ljude, stvari, imovinu i sl.',
                    'osigurati': ' Osigurati znači nabaviti sve što je potrebno.',
                    'osim': ' Osim označuje da se što izuzima iz čega.',
                    'osip': ' Osip je prolazna upala na koži koja nastaje zbog mikroorganizama ili alergije.',
                    'osječki': ' Osječki je koji se odnosi na Osijek i Osječane.',
                    'osjećaj': ' Osjećaj je ono što se doživljuje preko osjetila.',
                    'osjećajan': ' Osjećajan je koji je pun osjećaja prema komu ili čemu.',
                    'osjećajno': ' Osjećajno je tako da odražava čije osjećaje prema komu ili čemu.',
                    'osjećajnost': ' Osjećajnost je osobina onoga koji je osjećajan.',
                    'osjećati': ' Osjećati što znači primati kakav podražaj, doživljavati osjet.',
                    'osjet': ' Osjet je doživljaj koji nastaje kakvim djelovanjem na osjetila, najizravnija spoznaja o svijetu oko nas.',
                    'osjetilo': ' Osjetilo je organ preko kojega tijelo prima i doživljava vanjske podržaje.',
                    'osjetiti': ' Osjetiti što znači primati kakav podražaj, doživljavati osjet.',
                    'osjetljiv': ' Osjetljiv je koji je sklon promjeni raspoloženja i kojega lako pogađaju reakcije drugih.',
                    'osjetljivo': ' Osjetljio je tako da odražava čiju sklonost promjeni raspoloženja i da ga lako pogađaju reakcije drugih..',
                    'osjetljivost': ' Osjetljivost je osobina onoga koji je sklon promjeni raspoloženja i kojega lako pogađaju reakcije drugih.',
                    'osloboditi': ' Osloboditi znači proglasiti nevinom osobu optuženu u sudskome ili pravnome postupku.',
                    'osmaš': ' Osmaš je učenik (bez obzira na spol ili muškoga spola) osmoga razreda osnovne škole',
                    'osmašica': ' Osmašica je učenica osmoga razreda osnovne škole.',
                    'osmerac': ' Osmerac je stih od osam slogova.',
                    'osmero': ' Osmero je skupina od osam osoba različita spola.',
                    'osmerokratnik': ' Osmerokratnik  je broj koji je umnožak zadanoga broja i broja 8, koji je osam puta veći od zadanoga broja.',
                    'osmerokut': ' Osmerokut je geometrijski lik u ravnini omeđen s osam stranica.',
                    'osmerostruk': ' Osmerostruk je koji ima osam dijelova, koji se ponavlja osam puta.',
                    'osmi': ' Osmi je koji je iza sedmoga, a prije devetoga.',
                    'osmica': ' Osmica je brojka koja označuje broj osam.',
                    'osmijeh': ' Osmijeh je mimika lica određena blagim povijanjem usana prema gore, obično prouzročena čime ugodnim.',
                    'osmina': ' Osmina je broj koji pomnožen s osam daje cijeli broj.',
                    'osmomjesečni': ' Omomjesečni je koji ima osam mjeseci.',
                    'osmorica': ' Osmorica je skupina od osam muških osoba.',
                    'osnivati': ' Osnivati znači počinjati što novo, stvarati što novo.',
                    'osnova': ' Osnova je ono na čemu što stoji, na čemu se što gradi, tvori, stvara.',
                    'osnovan': ' Osnovan je koji se temelji na dokazima, koji ima osnovu, opravdanje.',
                    'osnovati': ' Osnovati znači početi što novo, stvoriti što novo.',
                    'osnovni': ' Osnovni je koji se odnosi na osnovu riječi.',
                    'osoba': ' Osoba je ljudsko biće kao zasebna jedinka.',
                    'osoban': ' Osoban je koji pripada ili koji je svojstven određenoj osobi.',
                    'osobito': ' Osobito naglašava da se što izdvaja od ostaloga. ',
                    'osobno': ' Osobno je u svoje ime, bez tuđega posredovanja.',
                    'osobnost': ' Osobnost je skup psihičkih značajka koje osobe.',
                    'osojnički': ' Osojnički je koji se odnosi na Osojnik i Osojničane.',
                    'ospice': ' Ospice su virusna zarazna dječja bolest, simptomi su joj sitan crvenkasti osip i visoka temperatura.',
                    'ostajati': ' Ostajati znači zadržavati se na istome mjestu.',
                    'ostali': ' Ostali su koji ne pripadaju skupini kojoj pripada govoritelj ili skupini o kojoj je riječ.',
                    'ostatak': ' Ostatak je ono što je ostalo od koga ili čega.',
                    'ostati': ' Ostati znači zadržati se na istome mjestu.',
                    'ostava': ' Ostava je prostorija za držanje i čuvanje hrane odbično smještena unutar kuće ili stana.',
                    'ostaviti': ' Ostaviti znači staviti što privremeno na stranu, spremiti na neko vrijeme dok ponovno ne bude upotrijebljeno.',
                    'ostavljati': ' Ostavljati znači stavljati što privremeno na stranu, spremati što na neko vrijeme dok ponovno ne bude upotrijebljeno.',
                    'ostvariti': ' Ostvariti znači učiniti da kakav naum, želja, plan ili što drugo postane stvarnost.',
                    'osvajati': ' Osvajati znači prisvajati ili uzimati čije područje ili zemlju oružanom silom.',
                    'osvetoljubiv': ' Osvetoljubiv je koji je sklon osveti.',
                    'osvetoljubivo': ' Osvetoljubivo je tako da odražava čiju sklonost osveti.',
                    'osvetoljubivost': ' Osvetoljubivost je osobina onoga koji je osvetoljubiv.',
                    'osvojiti': ' Osvojiti znači prisvojiti ili uzeti čiji teritorij ili zemlju oružanom silom.',
                    'ošteniti': ' Ošteniti znači donijeti mlado na svijet (o kuji).',
                    'otac': ' Otac je roditelj muškoga spola.',
                    'otad': ' Otad znači od toga trenutka, od trenutka koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                    'otada': ' Otada znači od toga trenutka, od trenutka koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                    'otapati': ' Otapati znači grijanjem prevoditi iz čvrstoga u tekuće stanje.',
                    'oteliti': ' Oteliti znači donijeti mlado na svijet (o kravi).',
                    'otići': ' Otići znači krećući se napustiti određeno mjesto.',
                    'otkad': ' Otkad uvodi pitanje o vremenu od kojega je što započelo.',
                    'otkada': ' Otkada uvodi pitanje o vremenu od kojega je što započelo.',
                    'otkako': ' Otkako uvodi zavisnu surečenicu, neizravno pitanje, u objektnoj rečenici.',
                    'otklon': ' Otklon je mijenjanje kakva smjera.',
                    'otključati': ' Otključati znači otvoriti ključem.',
                    'otključavati': ' Otključavati znači otvarati ključem.',
                    'otkriti': ' Otkriti znači doznati ono što se ne zna ili što je tajno, prouzročiti da se što dozna.',
                    'otkrivati': ' Otkrivati znači doznavati ono što se ne zna ili što je tajno, prouzročivati da se što dozna.',
                    'otkud': ' Otkud uvodi pitanje o mjestu od kojega je započelo kretanje ',
                    'otkuda': ' Otkuda uvodi pitanje o mjestu od kojega je započelo kretanje ',
                    'otočački': ' Otočački je koji se odnosi na Otočac i Otočane. ',
                    'otok': ' Otok je dio kopna sa svih strana okružen vodom.',
                    'otopiti': ' Otopiti znači grijanjem prevesti iz čvrstoga u tekuće stanje.',
                    'otpad': ' Otpad je ono što više nije za uporabu, što se ne može iskoristiti.',
                    'otporan': ' Otporan je koji nije osjetljiv na kakve vanjske utjecaje ili podražaje, koji ne gubi svoja svojstva pod djelovanjem čega drugoga.',
                    'otpornik': ' Otpornik je uređaj za povećanje otpora u električnome strujnom krugu radi reguliranja jakosti struje.',
                    'otporno': ' Otporno je tako da odražava čiju neosjetljivost na kakve vanjske utjecaje ili podražaje.',
                    'otpornost': ' Otpornost je svojstvo onoga što je otporno.',
                    'otprilike': ' Otprilike uvodi okvirnu vrijednost ili vrijeme',
                    'otpustiti': ' Otpustiti znači dati komu otkaz.',
                    'otpuštati': ' Otpuštati znači davati komu otkaz s radnoga mjesta.',
                    'otrov': ' Otrov je tvar koja oštećuje živi organizam ili izaziva njegovu bolest ili smrt.',
                    'otud': ' Otud znači od te (konkretne ili apstraktne) polazišne točke.',
                    'otuda': ' Otuda znači od te (konkretne ili apstraktne) polazišne točke.',
                    'otvarač': ' Otvarač je naprava kojom se što otvara.',
                    'otvarati': ' Otvarati što znači pomicati dio ili dijelove čega tako da bude slobodan prolaz izvana unutra i iznutra van.',
                    'otvoren': ' Otvoren je koji nije ograđen ili zatvoren, kroz koji se može proći.',
                    'otvoreno': ' Otvoreno znači tako da se ništa  ne krije i ni iza čega ne skriva.',
                    'otvorenost': ' Otvorenost je  svojstvo onoga što nije ograđeno ili zatvoreno, kroza što se može proći.',
                    'otvoriti': ' Otvoriti što znači pomaknuti dio ili dijelove čega tako da bude slobodan prolaz izvana unutra i iznutra van.',
                    'ovaj': ' Ovaj označuje  mušku osobu, životinju ili predmet označen imenicom muškoga roda u izravnoj blizini govoritelja.',
                    'ovakav': ' Ovakav je koji je poput osobe, životinje, biljke ili predmeta koji je u blizini govoritelja ili se odnosi na sadržaj o kojemu se govori..',
                    'ovako': ' Ovako znači na ovaj način, na način koji se odnosi na što blizu ili blisko govoritelju, koji se odnosi na ono što govoritelj pokazuje ili na okolnosti koje ga okružuju. ',
                    'ovan': ' Ovan je mužjak ovce.',
                    'ovca': ' Ovce su rod papkara iz porodice šupljorožaca kojemu pripadaju domaće ovce i mufloni.',
                    'ovdje': ' Ovdje je na ovome mjestu, na mjestu na kojemu se nalazi govoritelj.',
                    'ovisan': ' Ovisan je koji ovisi o kome drugom, koji nije u čemu samostalan.',
                    'ovisiti': ' Ovisiti o kome/čemu znači ne biti slobodan, ne biti samostalan.',
                    'ovisnost': ' Ovisnost je osobina onoga koji ovisi o čijoj pomoći, koji nije u čemu samostalan.',
                    'ovladati': ' Ovladati čime znači uspostaviti vlast nad čim.',
                    'ovladavati': ' Ovladavati čime znači uspostavljaju vlast na čim.',
                    'ozbiljan': ' Ozbiljan je koji se ponaša odgovorno, u kojega se može pouzdati.',
                    'ozbiljno': ' Ozbiljno je tako da se temelji na razmišljanju i odgovornim postupcima.',
                    'ozbiljnost': ' Ozbiljnost je osobina onoga čije se ponašanje promišljeno i odgovorno.',
                    'ozdraviti': ' Ozdraviti znači učiniti koga zdravim.',
                    'ozdravljati': ' Ozdravljati znači činiti koga zdravim.',
                    'ozljeda': ' Ozljeda je oštećenje tijela izazvana djelovanjem vanjske sile.',
                    'označavati': ' Označavati znači stavljati znak po kojemu se što može prepoznati ili zaključiti.',
                    'označiti': ' Označiti znači staviti znak po kojemu se što može prepoznati ili zaključiti.',
                    'oznaka': ' Oznaka je ono što nedvosmisleno označuje koga ili što, kojim je što obilježeno.',
                    'oždrijebiti': ' Oždrijebiti znači donijeti ždrijebe na svijet (o kobili).',
                    'oženiti': ' Oženiti znači učiniti da muškarac stupi u brak.',
                    'ožujak': ' Ožujak je treći mjesec u kalendarskoj godini, mjesec između veljače i travnja.',
                    'pacijent': ' Pacijent je osoba ili muškarac koji se liječi.',
                    'pacijentica': ' Pacijentica je žena koja se liječi.',
                    'pacijentičin': ' Pacijentičin je koji pripada pacijentici.',
                    'pacijentov': ' Pacijentov je koji pripada pacijentu.',
                    'pacijentski': ' Pacijentski je koji se odnosi na pacijente.',
                    'pače': ' Pače je mlado patke.',
                    'pačetina': ' Pačetina je pačje meso.',
                    'pačji': ' Pačji je koji se odnosi na patke.',
                    'pad': ' Pad je gibanje tijela prema Zemlji zbog sile teže ili njegove vlastite težine.',
                    'padati': ' Padati znači gubiti tjelesnu ravnotežu zbog nedostatka oslonca, dospijevati u niži položaj zbog gubitka tjelesne ravnoteže.',
                    'padavica': ' Padavica je bolest prouzročena poremećajem moždane funkcije s napadajima gubitka ili suženja svijesti nekontroliranim psihičkim i tjelesnim reakcijama.',
                    'padobran': ' Padobran je naprava od svilenoga ili najlonskoga platna koje se u zraku otvara u obliku kupole i tako usporava pad s velike visine.',
                    'padobranac': ' Padobranac je odrasla osoba bez obzira na spol ili muška osoba koja skače s padobranom.',
                    'padobranka': ' Padobranka je odrasla ženska osoba koja skače s padobranom.',
                    'pahulja': ' Pahulja je mala nakupina kristala snijega.',
                    'pak': ' Pak je tvrda gumena pločica kojom se igra hokej.',
                    'pak': ' Pak naglašuje rečenični sadržaj ili dio rečenice.',
                    'pakao': ' Pakao je u kršćanstvu mjesto ili stanje u kojemu borave duše grešnika.',
                    'pakistanski': ' Pakistanski je koji se odnosi na Pakistan i Pakistance.',
                    'pakrački': ' Pakrački je koji se odnosi na Pakrac i Pakračane.',
                    'palac': ' Palac je prvi, najkraći, najsnažniji i najdeblji prst na ljudskoj ruci ili prvi i najdeblji prst na ljudskoj nozi.',
                    'palača': ' Palača je velika bogato uređena zgrada okružena perivojem, obično mjesto u kojemu živi vladar ili velikaš.',
                    'palačinka': ' Palačinka je slastica od smjese brašna, jaja i mlijeka koja se peče u tavi i nadijeva pekmezom, sirom, orasima i sl.',
                    'palatalizacija': ' Palatalizacija je glasovna promjena u kojoj se nenepčanici 
                    ',
                    'palčić': ' Palčić je mali palac.',
                    'paliti': ' Paliti znači činiti da počne gorjeti.',
                    'palma': ' Palma je jednosupnica, često visoko tropsko ili suptropsko drvo bez grana s lišćem koje čini krošnju u obliku lepeze ili dugačkih pera.',
                    'pamćenje': ' Pamćenje je prihvaćanje i zadržavanje novih sadržaja ili spoznaja.',
                    'pamet': ' Pamet je sposobnost čovjeka da misli, shvaća i prosuđuje.',
                    'pametan': ' Pametan je koji ima dobru moć prosuđivanja, brzo shvaća i mnogo zna.',
                    'pametno': ' Pametno je tako da odražava dobru moć prosuđivanja, brzo shvaćanje i veliko znanje.',
                    'pamtiti': ' Pamtiti znači usvajati i zadržavati u svijesti nove sadržaje ili spoznaje.',
                    'pamuk': ' Pamuk je jednogodišnja tropska grmolika industrijska biljka s plodom koji se sastoji od sjemenka ovijenih mekim bijelim vlaknom.',
                    'pandemija': ' Pandemija je epidemija velikih razmjera, širenje bolesti na više država, cijeli kontinent, više kontinenata ili cijeli svijet.',
                    'pandemijski': ' Pandemijski je koji se širi putem pandemije, koji se širi na više država, cijeli kontinent, više kontinenata ili cijeli svijet.',
                    'pandža': ' Pandža je svinuta rožnata izraslina na prstima vodozemaca, gmazova, ptica i mnogih sisavaca.',
                    'panika': ' Panika je nekontrolirani strah izazvan stvarnom ili zamišljenom opasnošću, često praćen psihičkim ili tjelesnim reakcijama (otežanim disanjem, lupanjem srca, drhtanjem i sl.)',
                    'papa': ' Papa je naslov rimskoga biskupa i vrhovnoga poglavara Katoličke Crkve.',
                    'papar': ' Papar je tropska biljka povijuša srcolikih listova i cvjetova združenih u klas.',
                    'papiga': ' Papiga je ptica šarena perja i svinuta kljuna koja može oponašati ljudski glas.',
                    'papir': ' Papir je gradivo koje se dobiva preradom drva, tkanine i sl.',
                    'paprika': ' Paprika je jednogodišnja povrtna biljka uspravne razgranate stabljike s mnogo listova i sitnim bijelim, žućkastim ili tamnoljubičastim cvjetovima.',
                    'papuča': ' Papuče su obuća koja se nosi po kući.',
                    'par': ' Par su dva predmeta koji čine uporabnu cjelinu.',
                    'par': ' Par označuje malu količinu ili mjeru.',
                    'para': ' Para je plinovito stanje u koje prelazi čvrsta ili tekuća tvar pri zagrijavanju.',
                    'paralelogram': ' Paralelogram je četverokut kojemu su nasuprotne stranice usporedne.',
                    'paran': ' Paran je koji se pojavljuje u paru.',
                    'parangal': ' Parangal je naprava za hvatanje riba u obliku dugačke niti na koju su u razmacima privezane udice.',
                    'paranoja': ' Paranoja je psihička bolest pri kojoj bolesnik misli da ga svi progone.',
                    'pariški': ' Pariški je koji se odnosi na Pariz i Parižane.',
                    'park': ' Park je uređeno zemljište u gradu ili izvan grada s planski zasađenim ukrasnim biljem i drvećem.',
                    'parkiralište': ' Parkiralište je uređeni prostor na kojemu se parkiraju automobili.',
                    'parkirati (se)': ' Parkirati znači ostaviti/ostavljati vozilo izvan pogona na određenome mjestu.',
                    'partner': ' Partner je osoba bez obzira na spol ili muška osoba ili organizacija koja s kim sudjeluje u zajedničkome poslu.',
                    'partnerica': ' Partnerica je ženska osoba koja s kim sudjeluje u zajedničkome poslu.',
                    'partneričin': ' Partneričin je koji pripada partnerici.',
                    'partnerski': ' Partnerski je koji se odnosi na partnere.',
                    'pas': ' Psi su skupina sisavaca vitka tijela, male glave, izbočene njuške, trupa udubljena u slabinama, čine je lisice, čagljevi, kojoti, vukovi i domaći psi.',
                    'pas': ' Pas je najuži dio tijela koji se nalazi između prsa i bedara.',
                    'pasiv': ' Pasiv je glagolsko stanje kojim se izriče radnja koju trpi subjekt.',
                    'pasiva': ' Pasiva je dio bilance koji obuhvaća kratkoročne i dugoročne obveze te vlasnički kapital.',
                    'pasivan': ' Pasivan je koji ne djeluje, koji nije izravno uključen u kakvo događanje.',
                    'pasivni': ' Pasivni je koji se odnosi na pasiv. ',
                    'pasivni': ' Pasivni je koji se odnosi na pasivu.',
                    'pasivno': ' Pasivno je tako da odražava čije nedjelovanje ili neuključenost u kakvo događanje.',
                    'pasivnost': ' Pasivnost je osobina onoga koji je nedjelatan i neuključen u što.',
                    'pasjemenik': ' Pasjemenik je duguljasti organ u kojemu sazrijevaju spermiji, smješten je uz stražnji rub sjemenika.',
                    'paskal': ' Paskal je mjerna jedinica za tlak (Pa).',
                    'pastela': ' Pastela je suha boja u obliku meke olovke ili krede.',
                    'pasti': ' Pasti znači hraniti se na paši.',
                    'pasti': ' Pasti znači izgubiti tjelesnu ravnotežu zbog nedostatka oslonca, dospjeti na niži položaj zbog gubitka tjelesne ravnoteže.',
                    'pastir': ' Pastir je osoba ili muškarac koji čuva stoku na paši.',
                    'pastirica': ' Pastirica je žena koja čuva stoku na paši.',
                    'pastiričin': ' Pastiričin je koji pripada pastirici.',
                    'pastirov': ' Pastirov je koji pripada pastiru, osobi ili muškarcu koji čuva stoku na paši.',
                    'pastirski': ' Pastirski je koji se odnosi na pastire, osobe ili muškarce koji čuvaju stoku na paši.',
                    'pastrva': ' Pastrva je riba koštunjača srebrnkaste boje i cijenjena mesa koja živi u slatkim vodama.',
                    'paški': ' Paški je koji se odnosi na Pag i Pažane.',
                    'pašnjak': ' Pašnjak je travnata površina, mjesto na kojemu pase stoka.',
                    'pašteta': ' Pašteta je namaz od mljevenih iznutrica ili mesa i začina.',
                    'patak': ' Patak je mužjak patke.',
                    'patka': ' Patka je ptica močvarica izdužena tijela i široka plosnata kljuna koja se uzgaja i kao domaća životinja.',
                    'patlidžan': ' Patlidžan je jednogodišnja povrtna zeljasta biljka razvijena korijena, grmolike stabljike i velikih ljubičasth plodova.',
                    'patnja': ' Patnja je stanje onoga koji pati.',
                    'patuljak': ' Patuljak je maleni čovjek iz predaje, bajke, crtanoga filma i slično.',
                    'paučica': ' Paučica je ženka pauka.',
                    'paučina': ' Paučina je mreža koju pauk sam izrađuje od niti nastalih lučenjem ljepljive tekućine iz posebne žlijezde, a služi mu za hvatanje kukaca kako bi se prehranio.',
                    'pauk': ' Pauci su red životinja iz razreda paučnjaka s četirima parovima nogu za hodanje, kliještima i čeljusnim nožicama na prednjemu dijelu tijela te žlijezdama na zatku koje luče ljepljivi sekret ili paučinu. ',
                    'pauza': ' Pauza je prekid ili odmor u poslu, govoru, predstavi i sl.',
                    'paziti': ' Paziti na koga ili što znači pratiti pogledom koga ili što, pozorno uočavati.',
                    'pažljiv': ' Pažljiv je koji iskazuje obzir ili poštovanje.',
                    'pažljivo': ' Pažljivo je tako da odražava tko što radi temeljito i usmjereno na postizanje cilja.',
                    'pčela': ' Pčela je opnokrilac koji proizvodi med i vosak te oprašuje većinu biljaka, a živi u zadrugama koje se sastoje od matice, trutova i sterilnih ženka radilica.',
                    'pecati': ' Pecati znači loviti udicom.',
                    'pecivo': ' Pecivo je mali pekarski proizvod.',
                    'pečenje': ' Pečenje je meso pečeno na žaru ili u pećnici.',
                    'peć': ' Peć je uređaj koji služi za grijanje prostorija ili za kuhanje jela.',
                    'peći': ' Peći znači pripremati sirovu hranu u pećnici ili na vatri, najčešće bez dodatka tekućine ili vode.',
                    'pećnica': ' Pećnica je dio štednjaka namijenjen pečenju hrane.',
                    'pedagog': ' Pedagog je odrasla osoba bez obzira na spol  ili muškarac koji se bavi poučavanjem.',
                    'pedagogica': ' Pedagogica je žena koja je završila studij pedagogije i radi kao stručna suradnica u školi ili vrtiću.',
                    'pedagogičin': ' Pedagogičin je koji pripada pedagogici.',
                    'pedagoginja': ' Pedagoginja je žena koja se bavi poučavanjem.',
                    'pedagoginjin': ' Pedagoginjin je koji pripada pedagoginji, ženi koja se bavi poučavanjem. ',
                    'pedagogov': ' Pedagogov je koji pripada pedagogu. ',
                    'pedagoški': ' Pedagoški je koji se odnosi na pedagoge i pedagogiju, ',
                    'pedalj': ' Pedalj je duljina razmaka između vrha palca i vrha maloga prsta kad se ispruže.',
                    'pedeset': ' Pedeset je broj koji se obilježuje s 50, za jedan veći od broja četrdeset devet i za jedan manji od broja pedeset jedan.',
                    'pedesetak': ' Pedesetak je približno pedeset, oko pedeset.',
                    'pedesetero': ' Pedesetero je skupina od pedeset osoba različita spola.',
                    'pedeseti': ' Pedeseti je koji je iza četrdeset devetoga, a prije pedeset prvoga.',
                    'pedesetogodišnjak': ' Pedesetogodišnjak je osoba koja ima pedeset godina.',
                    'pedesetogodišnjakinja': ' Pedesetogodišnjakinja je ženska osoba koje ima pedeset godina.',
                    'pedesetogodišnji': ' Pedesetogodišnji je koji ima pedeset godina.',
                    'pedesetogodišnjica': ' Pedesetogodišnjica je dan ili godina u kojoj se navršava pedeset godina od događaja koji se obilježuje.',
                    'pedesetorica': ' Pedesetorica je skupina od pedeset muških osoba.',
                    'pegla': ' Pegla je kućanski uređaj s veoma glatkom donjom stranom koja zagrijana služi za glačanje tkanine, rublja ili odjeće.',
                    'pekar': ' Pekar je osoba ili muškarac koji mijesi, peče i prodaje kruh.',
                    'pekara': ' Pekara je mjesto na kojemu se mijesi i peče kruh.',
                    'pekarev': ' Pekarev je koji pripada pekaru.',
                    'pekarica': ' Pekarica je žena koja mijesi, peče i prodaje kruh.',
                    'pekaričin': ' Pekaričin je koji pripada pekarici.',
                    'pekarna': ' Pekarna je mjesto na kojemu se mijesi i peče kruh.',
                    'pekarnica': ' Pekarnica je prodavaonica kruha i drugih prerađevina od tijesta.',
                    'pekarov': ' Pekarov je koji pripada pekaru.',
                    'pekarski': ' Pekarski je koji se odnosi na pekare.',
                    'pekinški': ' Pekinški je koji se odnosi na Peking i Pekinžane.',
                    'pekmez': ' Pekmez je smjesa protisnutoga voća gusto ukuhanoga sa šećerom.',
                    'pelena': ' Pelena je komad platna ili celuloze koji dobro upija tekućinu, a stavlja se između nogu i oko struka.',
                    'pelin': ' Pelin je ljekovita biljka iz porodice glavočika jaka mirisa i gorka okusa.',
                    'pelinkovac': ' Pelinkovac je alkoholno piće proizvedeno kuhanjem pelina.',
                    'pelješki': ' Pelješki je koji se odnosi na Pelješac i Pelješčane.',
                    'penjalica': ' Penjalica je naprava za penjanje, npr. na stupove električnih ili telefonskih vodova.',
                    'penjati se': ' Penjati se znači premještati se s nižega na viši položaj, s nižega na više mjesto.',
                    'pepelnica': ' Pepelnice su skupina mješinarka, parazitskih gljivica koje žive u pepeljastim prevlakama na listovima i plodovima različitih viših biljaka.',
                    'pepeo': ' Pepeo je prah koji ostaje kad što izgori.',
                    'perad': ' Perad su domaće životinje koje imaju perje.',
                    'peraja': ' Peraja je organ u riba i nekih sisavaca koji služi za kretanje i održavanje ravnoteže.',
                    'perfekt': ' Perfekt je opće prošlo glagolsko vrijeme koje se tvori od nenaglašenoga prezenta pomoćnoga glagola 
                    ',
                    'perfektni': ' Perfektni je koji se odnosi na perfekt.',
                    'perilica': ' Perilica je stroj za pranje posuđa ili rublja.',
                    'periskop': ' Periskop je optički uređaj koji služi za promatranje predmeta koji se nalaze iznad ili izvan izravnoga promatračeva vidnoga polja (u podmornicama, u oklopnim vozilima i sl.).',
                    'perje': ' Perje je skup pera.',
                    'pernica': ' Pernica je kutija ili torbica za kemijske olovke, bojice i ostali školski pribor.',
                    'pero': ' Pero je rožnata tvorevina na koži ptica.',
                    'peron': ' Peron je prostor na kolodvoru ili terminalu s kojega putnici ulaze u vlak, tramvaj ili autobus ili na koji iz njih izlaze.',
                    'peronospora': ' Peronospora je parazitna gljivica koja izaziva bolest vinove loze i nekih drugih viših biljaka.',
                    'personifikacija': ' Personifikacija je pjesnička figura u kojoj se stvarima, prirodnim pojavama, apstraktnim predmetima, životinjama ili biljakama pridaju ljudske osobine.',
                    'peršin': ' Peršin je dvogodišnja povrtna zeljasta biljka iz porodice štitarka prljavobijeloga korijena koja u drugoj godini razvija razgranatu cvjetnu stabljiku.',
                    'peruanski': ' Peruanski je koji se odnosi na Peru i Peruance.',
                    'perunika': ' Perunika je zelena gomoljasta biljka trajnih sabljastih listova i obično ljubičastih cvjetova.',
                    'pesimist': ' Pesimist je osoba obzira na spol ili muška osoba koja u svemu vidi samo loše i nepovoljno i mračno gleda na budućnost.',
                    'pesimistica': ' Pesimistica je ženska osoba koja u svemu vidi samo loše i nepovoljno i mračno gleda na budućnost.',
                    'pesimističin': ' Pesimističin je koji pripada pesimistici.',
                    'pet': ' Pet je broj koji se obilježuje s 5, za jedan veći od broja četiri i za jedan manji od broja šest.',
                    'peta': ' Peta je stražnji dio stopala.',
                    'petak': ' Petak je peti dan u tjednu, dan između četvrtka i subote.',
                    'petaš': ' Petaš je učenik (bez obzira na spol ili muškoga spola) petoga razreda osnovne škole.',
                    'petašica': ' Petašica je učenica petoga razreda osnovne škole.',
                    'peterac': ' Peterac je stih od pet slogova.',
                    'petero': ' Petero je skupina od pet osoba različita spola.',
                    'peterokratnik': ' Peterokratnik je broj koji je umnožak zadanoga broja i broja 5, koji je pet puta veći od zadanoga broja.',
                    'peterokut': ' Peterokut je geometrijski lik u ravnini omeđen s pet stranica.',
                    'peterosjed': ' Peterosjed je vozilo predviđeno za pet osoba.',
                    'peterostruk': ' Peterostruk je koji ima pet dijelova, koji se ponavlja pet puta.',
                    'peti': ' Peti je koji je iza četvrtoga, a prije šestoga.',
                    'petica': ' Petica je brojka koja označuje broj pet.',
                    'petina': ' Petina je broj koji pomnožen s pet daje cijeli broj.',
                    'petnaest': ' Petnaest je broj koji se obilježuje s 15, za jedan veći od broja četrnaest i za jedan manji od broja šesnaest.',
                    'petnaestero': ' Petnaestero je skupina od petnaest osoba različita spola.',
                    'petnaesti': ' Petnaesti je koji je iza četrnaestoga, a prije šesnaestoga.',
                    'petogodišnjak': ' Petogodišnjak je dijete koje ima pet godina.',
                    'petogodišnjakinja': ' Trogodišnjakinja je žensko dijete koje ima tri godine.',
                    'petogodišnji': ' Petogodišnji je koji ima pet godina.',
                    'petogodišnjica': ' Petogodišnjica je dan ili godina u kojoj se navršava pet godina od događaja koji se obilježuje.',
                    'petomjesečni': ' Petomjesečni je koji ima pet mjeseci.',
                    'petorica': ' Petorica je skupina od pet muških osoba.',
                    'petrinjski': ' Petrinjski je koji se odnosi na Petrinju i Petrinjce.',
                    'petroselski': ' Petroselski je koji se odnosi na Staro Petrovo Selo i Petroselce.',
                    'petrovaradinski': ' Petrovaradinski je koji se odnosi na Petrovaradin i Petrovaradince.',
                    'petsto': ' Petsto je broj koji se obilježuje s 500, za jedan veći od broja četiristo devedeset devet i za jedan manji od broja petsto jedan.',
                    'petstoti': ' Petstoti je koji je iza četiristo devedeset devetoga, a prije petsto prvoga.',
                    'piće': ' Piće je tekućina koja se može piti.',
                    'pidžama': ' Pidžama je lagana dvodijelna odjeća za spavanje.',
                    'pijanist': ' Pijanist je osoba bez obzira na spol ili muška osoba koja svira klavir.',
                    'pijanistica': ' Pijanistica je ženska osoba koja svira klavir.',
                    'pijanističin': ' Pijanističin je koji pripada pijanistici.',
                    'pijanistički': ' Pijanistički je koji se odnosi na pijaniste.',
                    'pijanistov': ' Pijanistov je koji pripada pijanistu.',
                    'pijesak': ' Pijesak je skup sitnih zrnaca tvrdih minerala, uglavnom stijena.',
                    'pijetao': ' Pijetao je mužjak kokoši.',
                    'piju': ' Piju je usklik kojim se oponaša glasanje pileta. ',
                    'pijuk': ' Pijuk je jednostavno oruđe zašiljeno na dva kraja koje služi za kopanje.',
                    'pijukati': ' Pijukati znači glasati se glasom koji podsjeća na piju-piju.',
                    'piksel': ' Piksel je najmanji djelić slike u obliku kvadratića koji se prikazuje na zaslonu.',
                    'pila': ' Pila je oruđe koje ima nazubljenu kovinsku oštricu, služi za rezanje stabala, drva ili predmeta od kovine.',
                    'pile': ' Pile je mlado kokoši.',
                    'pileći': ' Pileći je koji se odnosi na pilad.',
                    'piletina': ' Piletina je pileće meso.',
                    'pilot': ' Pilot je osoba koja upravlja letjelicom.',
                    'pingvin': ' Pingvini su porodica morskih ptica južne polutke crnoga perja s leđne i bijeloga s trbušne strane koje ne mogu letjeti, prilagođene su plivanju i preživljavanju u izrazito hladnim uvjetima.',
                    'piramida': ' Piramida je geometrijsko tijelo omeđeno osnovicom, koja je mnogokut, i pobočkama, koje su trokuti.',
                    'pirat': ' Pirat je pripadnik skupine pomorskih pljačkaša koji napadaju i pljačkaju brodove.',
                    'pisac': ' Pisac je odrasla osoba bez obzira na spol ili muškarac koji piše književna djela.',
                    'pisač': ' Pisač je izlazni uređaj koji tiska na papir podatke koje dobiva od računala.',
                    'pisanica': ' Pisanica je šareno uskrsno jaje.',
                    'pisanka': ' Pisanka je bilježnica za vježbanje pravilnoga pisanja.',
                    'pisati': ' Pisati što znači iznositi kakav sadržaj ili misli u pisanome obliku, oblikovati kakav tekst.',
                    'piskutati': ' Piskutati znači isprekidano ispuštati piskove.',
                    'pismen': ' Pismen je koji ne zna pisati i čitati.',
                    'pismeno': ' Pismeno je tako da odražava da je što usklađeno s gramatičkim i pravopisnim pravilima.',
                    'pismenost': ' Pismenost je osobina onoga koji je pismen, koji zna čitati i pisati.',
                    'pismo': ' Pismo je sustav znakova koji služi za prenošenje poruka.',
                    'pismonoša': ' Pismonoša je odrasla osoba bez obzira na spol koja raznosi poštanske pošiljke.',
                    'pisnuti': ' Pisnuti znači progovoriti, izreći što, izustiti.',
                    'pista': ' Pista je posebno uređena staza za slijetanje i polijetanje zrakoplova.',
                    'piščev': ' Piščev je koji pripada piscu, osobi ili muškarcu koji piše književna djela.',
                    'pištati': ' Pištati znači proizvoditi visok oštar zvuk.',
                    'pištolj': ' Pištolj je vatreno oružje kratke cijevi za pucanje iz ruke bez oslonca.',
                    'pita': ' Pita je jelo od tankih listova tijesta između kojih se stavlja nadjev.',
                    'pitalica': ' Pitalica je zagonetka u kojoj se postavlja pitanje i traži odgovor.',
                    'pitanje': ' Pitanje su riječi ili rečenica kojima se pita i na koje se očekuje odgovor.',
                    'pitati': ' Pitati znači obraćati se komu tražeći odgovor.',
                    'piti': ' Piti znači unositi tekućinu u usta i gutati.',
                    'pivo': ' Pivo je alkoholno piće koje se dobiva od ječma, hmelja, kvasca i vode.',
                    '
                    ' : '
                    ',
                    '
                    ' : '
                    ',
                    'pjena': ' Pjena je nakupina mjehurića na površini tekućine.',
                    'pjesma': ' Pjesma je književno lirsko ili epsko djelo pisano u stihovima, posebnoga ritma i rime.',
                    'pjesmarica': ' Pjesmarica je knjiga odabranih pjesama.',
                    'pjesnički': ' Pjesnički je koji se odnosi na pjesnike i pjesništvo.',
                    'pjesnik': ' Pjesnik je pisac ili književnik koji piše pjesme, koji stvara pjesnička djela.',
                    'pjesnikinja': ' Pjesnikinja je književnica koja piše pjesme, koja stvara pjesnička djela.',
                    'pjesnikinjin': ' Pjesnikinjin je koji pripada pjesnikinji.',
                    'pjesnikov': ' Pjesnikov je koji pripada pjesniku.',
                    'pješački': ' Pješački je koji se odnosi na pješake i pješačenje.',
                    'pješak': ' Pješak je osoba ili muškarac koji pješači, koji ide pješice, koji hoda.',
                    'pješakinja': ' Pješakinja je žena koja pješači, koja ide pješice, koja hoda.',
                    'pješakinjin': ' Pješakinjin je koji pripada pješakinji.',
                    'pješakov': ' Pješakov je koji pripada pješaku, osobi ili muškarcu koji pješači, koji ide pješice, koji hoda.',
                    'pješčanik': ' Pješčanik je ograđeni dio dječjega igrališta ispunjen pijeskom.',
                    'pješice': ' Pješice je tako da se pješači, hoda.',
                    'pjevač': ' Pjevač je osoba ili muškarac koji se bavi pjevanjem.',
                    'pjevačev': ' Pjevačev je koji pripada pjevaču.',
                    'pjevačica': ' Pjevačica je žena koja se bavi pjevanjem.',
                    'pjevačičin': ' Pjevačičin je koji pripada pjevačici.',
                    'pjevački': ' Pjevački je koji se odnosi na pjevače i pjevanje.',
                    'pjevati': ' Pjevati znači glasom oblikovati melodiju.',
                    'plač': ' Plač je izlučivanje suza koje nastaje zbog tjelesne boli, tuge ili kakva drugog jakog osjećaja.',
                    'plačljiv': ' Plačljiv je koji je sklon plakanju, koji lako zaplače.',
                    'plačljivo': ' Plačljivo je tako da odražava tugu i sklonost plaču.',
                    'plačljivost': ' Plačljivost je osobina onoga koji je sklon plakanju.',
                    'plaća': ' Plaća je novčana naknada za rad u određenome razdoblju.',
                    'plaćati': ' Plaćati znači davati komu novac za kakvu robu ili obavljenu uslugu, odnosno za kakvo zakonsko davanje.',
                    'plahta': ' Plahta je dio posteljine, komad platna kojim se pokriva krevet ili spavač.',
                    'plakat': ' Plakat je veliki tiskani oglas ili likovno oblikovana objava izložena na javnome mjestu.',
                    'plakati': ' Plakati znači pokazivati psihičko stanje ili bol ispuštajući suze.',
                    'plamen': ' Plamen je toplinska i svjetlosna energija koja se oslobađa pri gorenju vatre.',
                    'plamenik': ' Plamenik je uređaj koji propušta plamen u pećima, štednjacima, grijalicama itd.',
                    'plamenjača': ' Plamenjača je parazitna gljivica koja izaziva bolest vinove loze i nekih drugih viših biljaka.',
                    'plan': ' Plan je unaprijed smišljen način da se što postigne, unaprijed utvrđen red i tijek ostvarivanja čega, zamisao o onome što treba napraviti kako bi se postigao određeni cilj.',
                    'planet': ' Planet je nebesko tijelo koje se kreće oko Sunca ili koje druge zvijezde.',
                    'planina': ' Planina je prostrana i razgranata prirodna uzvisina viša od 1000 metara nadmorske visine.',
                    'planinar': ' Planinar je osoba ili muškarac koji se bavi planinarenjem.',
                    'planinarev': ' Planinarev je koji pripada planinaru.',
                    'planinariti': ' Planinariti znači uspinjati se na planine radi razonode, baviti se planinarenjem.',
                    'planinarka': ' Planinarka je žena koja se bavi planinarenjem.',
                    'planinarkin': ' Planinarkin je koji pripada planinarki.',
                    'planinarov': ' Planinarov je koji pripada planinaru.',
                    'planinarski': ' Planinarski je koji se odnosi na planinare i planinarstvo.',
                    'planinski': ' Planinski je koji se odnosi na planinu.',
                    'planirati': ' Planirati znači osmišljavati kakav plan, kakvu zamisao ili ideju.',
                    'plastelin': ' Plastelin je meka masa od gline, voska ili masti koja se lako oblikuje.',
                    'plastika': ' Plastika je umjetna masa od koje se izrađuju različiti predmeti.',
                    'plašiti': ' Plašiti koga znači izazivati strah u kome.',
                    'plašt': ' Plašt je odjevni predmet, ograč bez rukava koji se nosi preko odjeće.',
                    'platina': ' Platina je kemijski element (Pt), plemenita srebrnobijela sjajna rastezljiva kovina koja se upotrebljava za izradu nakita.',
                    'platiti': ' Platiti znači dati komu novac za kakvu robu ili obavljenu uslugu, odnosno za kakvo zakonsko davanje.',
                    'platno': ' Platno je glatka tkanina od pamuka, lana ili konoplje.',
                    'plav': ' Plav je koji je boje vedra neba ili mora.',
                    'plaviti': ' Plaviti znači bojiti što u plavo, činiti plavim.',
                    'plavjeti': ' Plavjeti znači postajati plavim.',
                    'plavokos': ' Plavokos je koji je plave, odnosno svijetle ili žute kose. ',
                    'plavuša': ' Plavuša je ženska osoba svijetle kose, plavokosa ženska osoba. ',
                    'plavušan': ' Plavušan je muška osoba svijetle kose, plavokosa muška osoba. ',
                    'plavušin ': ' Plavušin je koji pripada plavuši. ',
                    'plaža': ' Plaža je dio obale uz more, rijeku ili jezero pogodan za kupanje.',
                    'plemenit': ' Plemenit je koji se odlikuje moralnim vrijednostima, koji je dobar i pošten.',
                    'plemenito': ' Plemenito je tako da odražava čiju dobrotu i poštenje.',
                    'plemenitost': ' Plemenitost je osobina onoga koji se odlikuje dobrotom i poštenjem.',
                    'pleonazam': ' Pleonazam je stilsko izražajno sredstvo ponavljanja riječi ili ponavljanja značenja.',
                    'ples': ' Ples su pokreti tijela u ritmu glazbe.',
                    'plesač': ' Plesač je osoba ili muškarac koji pleše.',
                    'plesačev': ' Plesačev je koji pripada plesaču.',
                    'plesačica': ' Plesačica je žena koja pleše.',
                    'plesačičin': ' Plesačičin je koji pripada plesačici.',
                    'plesački': ' Plesački je koji se odnosi na plesače i plesanje.',
                    'plesati': ' Plesati znači izvoditi koji ples.',
                    'plesti': ' Plesti znači na poseban način povezivati niti ili pruće i izrađivati kakav odjevni ili uporabni predmet.',
                    'pletenica': ' Pletenica je nekoliko spletenih pramenova kose.',
                    'plin': ' Plin je tvar u jednome od triju osnovnih agregacijskih stanja u kojemu su molekule toliko udaljene da gotovo nemaju međusobnoga djelovanja te stoga plin može ispuniti svaki prostor i pruža mali otpor promjeni oblika i obujma.',
                    'pliš': ' Pliš je tkanina s mekim, kratkim, gustim dlačicama.',
                    'plitak': ' Plitak je koji je manje dubine od uobičajene ili prosječne.',
                    'plitko': ' Plitko znači tako da se ne nalazi na velikoj dubini.',
                    'plivač': ' Plivač je osoba ili muškarac koji pliva, koji zna plivati.',
                    'plivačev': ' Plivačev je koji pripada plivaču.',
                    'plivačica': ' Plivačica je žena koja pliva, koja zna plivati.',
                    'plivačičin': ' Plivačičin je koji pripada plivačici.',
                    'plivački': ' Plivački je koji se odnosi na plivače i plivanje.',
                    'plivati': ' Plivati znači kretati se i održavati se zamasima ruku i/ili nogu na površini ili ispod površine vode.',
                    'ploča': ' Ploča je plosnat komad ravne površine.',
                    'pločanski': ' Pločanski je koji se odnosi na Pločane i Ploče.',
                    'pločnik': ' Pločnik je dio ulice namijenjen pješacima.',
                    'plod': ' Plod je organ kritosjemenjača koji se nakon oplodnje cvijeta razvija iz plodnice, čine ga sjemenke s usplođem.',
                    'plodan': ' Plodan je koji daje plod.',
                    'plodno': ' Plodno je tako da ima rezultate ili kakav učinak.',
                    'plodnost': ' Plodnost je svojstvo onoga što je plodno, koji daje plod.',
                    'ploha': ' Ploha je ravna površina.',
                    'plovilo': ' Plovilo je vozilo namijenjeno kretanju po vodi ili ispod njezine površine.',
                    'ploviti': ' Ploviti znači kretati se po površini vode u određenome smjeru.',
                    'pluća': ' Pluća su središnji organ dišnoga sustava kralježnjaka smješten u prsnome košu.',
                    'plug': ' Plug je oruđe sa zaprežnom ili traktorskom vučom kojim se oru brazde u tlu.',
                    'plus': ' Plus je znak (+) koji označuje zbrajanje.',
                    'pluskvamperfekt': ' Pluskvamperfekt je pretprošlo glagolsko vrijeme koje se tvori od perfekta ili imperfekta glagola 
                    ',
                    'pluskvamperfektni': ' Pluskvamperfektni je koji se odnosi na pluskvamperfekt. ',
                    'Pluton': ' Pluton je u grčkoj i rimskoj mitologiji bog podzemlja.',
                    'pljačka': ' Pljačka je otimanje tuđe imovine.',
                    'pljas': ' Usklikom 
                    ',
                    'pljus': ' Pljus je onomatopejska riječ kojom se oponaša zvuk pada nekoga tijela u vodu. ',
                    'pljusak': ' Pljusak je jaka kiša koja naglo počinje i brzo prestaje padati.',
                    'pljuskati': ' Pljuskati znači proizvoditi zvuk pri padu ili udarcu u vodu, snijeg ili blato.',
                    'pljusnuti': ' Pljusnuti znači proizvesti zvuk pri padu ili udarcu u vodu, snijeg ili blato.',
                    'pljuvačka': ' Pljuvačka je sluzava bezbojna izlučina žlijezda slinovnica koja vlaži usnu šupljinu i omekšava hranu.',
                    'pobijediti': ' Pobijediti znači prevladati u kakvu sukobu ili sporu, ostvariti pobjedu.',
                    'pobjeda': ' Pobjeda je uspjeh u ratu ili natjecanju.',
                    'pobožan': ' Pobožan je koji živi i djeluje u skladu s vjerom.',
                    'pobožno': ' Pobožno je tako da odražava vjerske ideje ili da tko živi i djeluje u skladu s vjerom.',
                    'pobožnost': ' Pobožnost je osobina onoga koji je pobožan ili svojstvo onoga što je pobožno.',
                    'počešljati': ' Počešljati znači dotjerati ili popraviti što češljem.',
                    'početak': ' Početak je prvi, uvodni dio čega.',
                    'početi': ' Početi znači krenuti od početka, pokrenuti kakvo djelovanje ili događanje.',
                    'početnica': ' Početnica je žena koja počinje što raditi, koja se tek počinje čime baviti.',
                    'počinjati': ' Počinjati znači kretati od početka, pokretati kakvo djelovanje ili događanje.',
                    'poći': ' Poći kamo znači početi ići, pomaknuti se s kojega mjesta u određenome smjeru.',
                    'pod': ' Pod je vodoravna površina prostorije po kojoj se hoda.',
                    'pod(a)': ' Pod(a) označuje da tko ili što dospijeva s donje strane čega.',
                    'podao': ' Podao je koji na prikiven način čini zlo ili koji prikriva zle namjere.',
                    'podatak': ' Podatak je činjenica koja što potvrđuje ili na temelju koje se što može zaključiti.',
                    'poderati': ' Poderati znači potežući ili čupajući učiniti da što bude u komadima.',
                    'podlo': ' Podlo je tako da  odražava čije prikrivene zle namjere ili da tko prikriveno čini zlo.',
                    'podloga': ' Podloga je ono na čemu što stoji, na čemu se što gradi, tvori ili stvara.',
                    'podlost': ' Podlost je osobina onoga koji je podao ili svojstvo onoga što je podlo.',
                    'podmornica': ' Podmornica je plovilo koje je namijenjeno plovidbi ispod površine vode.',
                    'podmukao': ' Podmukao je koji na prikriven način čini zlo ili koji prikriva zle namjere.',
                    'podmuklo': ' Podmuklo je tako da odražava čije prikrivene zle namjere ili da tko prikriveno čini zlo.',
                    'podmuklost': ' Podmuklost je osobina onoga koji je podmukao.',
                    'podne': ' Podne je sredina dana, točno u dvanaest sati.',
                    'podnevni': ' Podnevni je koji se odnosi na podne.',
                    'podni': ' Podni je koji se odnosi na pod.',
                    'podnijeti': ' Podnijeti kakvu službenu izjavu ili dokument znači predati je službenomu tijelu.',
                    'podno': ' Podno označuje da se tko ili što nalazi, kreće ili zbiva s donje strane, pri dnu čega.',
                    'podnožje': ' Podnožje je prostor na dnu stranice dokumenta na kojemu se obično nalaze bilješke i broj stranice.',
                    'podravski': ' Podravski je koji se odnosi na Podravinu i na Podravce.',
                    'podrijetlo': ' Podrijetlo je početak ili početna točka, ono iz čega što potječe.',
                    'podrška': '  Podrška je pomaganje u kakvu nastojanju, radu, djelovanju i sl.',
                    'područje': ' Područje je dio Zemljine površine koji je obilježen zajedničkim prirodnim, povijesnim, gospodarskim ili političkim posebnostima.',
                    'područni': ' Područni je koji se odnosi na kakvo, u pravilu administrativno, područje.',
                    'podrum': ' Podrum je podzemni prostor ispod kuće ili potpuno ukopan u tlo.',
                    'podrumski': ' Podrumski je koji se odnosi na podrum.',
                    'podstanar': ' Podstanar je osoba bez obzira na spol ili muška osoba koja stanuje u unajmljenome stanu.',
                    'podstanarev': ' Podstanarev je koji pripada podstanaru.',
                    'podstanarka': ' Podstanarka je ženska osoba koja stanuje u unajmljenome stanu.',
                    'podstanarkin': ' Podstanarkin je koji pripada podstanarki.',
                    'podstanarov': ' Podstanarov je koji pripada podstanaru.',
                    'podstanarski': ' Podstanarski je koji se odnosi na podstanare.',
                    'poduzeće': ' Poduzeće je gospodarska jedinica ili radna organizacija koja se bavi proizvodnjom ili pružanjem usluga.',
                    'pogađati': ' Pogađati znači postizati cilj pri gađanju čime ili bacanju čega.',
                    'poglavito': ' Poglavito naglašava da se što izdvaja od ostaloga. ',
                    'poglavlje': ' Poglavlje je dio knjige ili drugoga tipa teksta koji čini veću cjelinu i koji je obično označen naslovom ili brojem.',
                    'pogled': ' Pogled je smjer gledanja, usmjerenost očiju na koga ili što.',
                    'pogledati': ' Pogledati znači uputiti pogled u određenome smjeru.',
                    'pogodak': ' Pogodak je udarac ili hitac u cilj ili metu.',
                    'pogoditi': ' Pogoditi znači dostići cilj pri gađanju čime,pri opaljivanju vatrenog oružja ili bacanju čega.',
                    'pogon': ' Pogon je sila koja što pokreće i njezin izvor.',
                    'pogoršati': ' Pogoršati znači učiniti što lošijim.',
                    'pogoršavati': ' Pogoršavati znači činiti što lošijim.',
                    'pogotovo': ' Pogotovo naglašava da se što izdvaja od ostaloga. ',
                    'pogreb': ' Pogreb je obred polaganja pokojnikova tijela u grob.',
                    'pogrešan': ' Pogrešan je koji sadržava pogrešku, koji ne odgovara istini.',
                    'pogreška': ' Pogreška je neispravan postupak, ono što je napravljeno loše ili netočno.',
                    'pohlepa': ' Pohlepa je osobina onoga koji je pohlepan.',
                    'pohlepan': ' Pohlepan je koji pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                    'pohlepno': ' Pohlepno je tako da odražava da tko pretjerano grabi i želi imati čega više nego što mu je potrebno.',
                    'pohlepnost': ' Pohlepnost je osobina onoga koji je pohlepan.',
                    'pohvala': ' Pohvala je pismeno ili usmeno priznanje za učinjeno djelo, postupak ili uspjeh u čemu.',
                    'pohvalnica': ' Pohvalnica je lirska pjesnička književna vrsta koja obuhvaća djela u kojima se na svečan način koga slavi.',
                    'pojačalo': ' Pojačalo je uređaj koji pojačava snagu nekoga signala.',
                    'pojam': ' Pojam je zamisao koja sadržava bitna svojstva čega.',
                    'pojas': ' Pojas je najuži dio tijela koji se nalazi između prsa i bedara.',
                    'pojas': ' Pojas je dug, uzak komad trakinen ili kože kojim se veže odjeća u struku',
                    'pojaviti se': ' Pojaviti se znači doći na koje mjesto ili pred kakvu publiku.',
                    'pojavljivati se': ' Pojavljivati se znači dolaziti na koje mjesto ili pred kakvu publiku.',
                    'pojedinac': ' Pojedinac je ljudsko biće kao zasebna jedinka.',
                    'pojedini': ' Pojedini je koji se razumijeva kao pojedinac ili pojedinačni predmet.',
                    'pojesti': ' Pojesti znači sažvakati i progutati jelo.',
                    'pokazati': ' Pokazati znači omogućiti komu da što vidi.',
                    'pokazivač': ' Pokazivač je uređaj koji bilježi kakvu pojavu ili uzajamne odnose više pojava.',
                    'pokazivati': ' Pokazivati znači omogućivati komu da što vidi.',
                    'poklade': ' Poklade su vrijeme od Bogojavljenja (6. siječnja) do korizme.',
                    'poklanjati': ' Poklanjati znači prepuštati što komu drugom u vlasništvo, činiti da što mijenja vlasnika bez novčane naknade, prouzročivati da tko što ima.',
                    'poklon': ' Poklon je je predmet ili novac koji se komu daruje.',
                    'pokloniti': ' Pokloniti znači prepustiti što komu drugom u vlasništvo, učiniti da što promijeni vlasnika bez novčane naknade, prouzročiti da tko što ima.',
                    'pokoji': ' Pokoji označuje tu i tamo koju, rijetko koju, malo koju osobu.',
                    'pokraj': ' Pokraj označuje da se tko ili što nalazi, kreće ili zbiva u blizini koga ili čega.',
                    'pokrajina': ' Pokrajina je veće područje koje se izdvaja po prirodnim, povijesnim, gospodarskim ili političkim posebnostima.',
                    'pokrata': ' Pokrata je riječ koja se piše velikim slovima nastala kraćenjem najčešće višerječnoga naziva ili imena.',
                    'pokrenuti': ' Pokrenuti znači učiniti da se što počne kretati, staviti u pokret.',
                    'pokret': ' Pokret je radnja koju živo biće čini mičući se ili mičući dijelovima svojega tijela.',
                    'pokretati': ' Pokretati znači činiti da se što počne kretati, stavljati u pokret.',
                    'pokrivač': ' Pokrivač je dio posteljine kojim se tko ili što pokriva.',
                    'pokušaj': ' Pokušaj je nastojanje da se što učini, čin u kojemu se pokušava što učiniti.',
                    'pokušati': ' Pokušati znači uložiti napor kako bi se postigao kakav cilj.',
                    'pokušavati': ' Pokušavati znači ulagati napor kako bi se postigao kakav cilj.',
                    'pokvariti': ' Pokvariti znači izazvati kvar, prouzročiti da što ne radi ispravno.',
                    'pol': ' Pol je krajnja točka zamišljene osi oko koje se okreću nebeska tijela.',
                    'pol': ' Pol je jedan od dvaju jednakih dijelova cjeline.',
                    'pola': ' Pola je jedan od dvaju jednakih dijelova cjeline.',
                    'polako': ' Polako znači tako da se u određenome razdoblju prelazi mala udaljenost.',
                    'polazak': ' Polazak je napuštanje odredišta.',
                    'polazište': ' Polazište je  početna točka kakva promišljanja, pregovora ili ispitivanja. ',
                    'polaziti': ' Polaziti kamo znači pomicati se s kojega mjesta u određenome smjeru.',
                    'poletjeti': ' Poletjeti znači početi letjeti, dignuti se uvis leteći.',
                    'polica': ' Polica je vodoravna ploha od drva, plastike, stakla ili kovine na zidu ili u ormaru na koju se savljaju ili spremaju različite stvari.',
                    'policajac': ' Policajac je osoba ili muškarac, obično uniformiran, koji radi u policiji.',
                    'policajčev': ' Policajčev je koji pripada policajcu.',
                    'policajka': ' Policajka je žena, obično uniformirana, koji radi u policiji.',
                    'policajkin': ' Policajkin je koji pripada policajki.',
                    'policija': ' Policija je služba državne uprave kojoj je povjereno čuvanje zakona, javnoga reda i mira.',
                    'polijevati (se)': ' Polijevati (se) znači izlijevati tekućinu po kome ili čemu.',
                    'političar': ' Političar je osoba ili muškarac koji se bavi politikom, kojem je politika zanimanje.',
                    'političarev': ' Političarev je koji pripada političaru.',
                    'političarka': ' Političarka je žena koji se bavi politikom, kojoj je politika zanimanje.',
                    'političarkin': ' Političarkin je koji pripada političarki.',
                    'političarov': ' Političarov je koji pripada političaru.',
                    'političarski': ' Političarski je koji se odnosi na političare.',
                    'politički': ' Politički je koji se odnosi na političare i politiku.',
                    'politički': ' Prilog politički znači kao u politici, na način politike i političara.',
                    'politika': ' Politika je upravljanje ljudskom zajednicom, način vođenja državnih poslova.',
                    'politi (se)': ' Politi (se) znači izliti tekućinu po kome ili čemu.',
                    'polnoćka': ' Polnoćka je misa u ponoć između Badnjaka i Božića.',
                    'polovica': ' Polovica je jedan od dvaju jednakih dijelova cjeline.',
                    'polovina': ' Polovina je broj koji pomnožen s dva daje cijeli broj.',
                    'položaj': ' Položaj je mjesto na kojemu se što nalazi u odnosu na što drugo.',
                    'polubrat': ' Polubrat je muška osoba u odnosu na ostale osobe koje imaju samo jednoga istog roditelja.',
                    'polubratov': ' Polubratov je koji pripada polubratu.',
                    'polugodište': ' Polugodište je razdoblje od pola godine.',
                    'polunavodnik': ' Polunavodnik je pravopisni znak (‘ ’) kojim se označuje početak i kraj teksta koji se navodi doslovno ili kojemu se daje drugo značenje, a nalazi se unutar drugoga teksta označenoga navodnicima; njime se označuje i početak i kraj značenja koje riječi.',
                    'poluotok': ' Poluotok je dio kopna koji je s triju strana okružen vodom, a jednom stranom povezan s kontinentom.',
                    'polusestra': ' Polusestra je ženska osoba u odnosu na ostale osobe s kojima ima samo jednoga istog roditelja.',
                    'polusestrin': ' Polusestrin je koji pripada polusestri.',
                    'polusloženica': ' Polusloženica je riječ nastala združivanjem dviju riječi u jednu pri kojemu svaka riječ zadržava svoj morfološki i naglasni lik.',
                    'polusloženički': ' Polusloženički je koji se odnosi na polusloženicu.',
                    'polje': ' Polje je ravno, obrađeno ili obradivo zemljište.',
                    'poljički': ' Poljički je koji se odnosi na Poljica i Poljičane.',
                    'poljoprivreda': ' Poljoprivreda je primarna gospodarska grana koja uključuje obradbu i iskorištavanje zemljišta te uzgoj krupne i sitne stoke.',
                    'poljoprivredni': ' Poljoprivredni je koji se odnosi na poljoprivredu, primarnu primarnu gospodarsku granu koja uključuje obradbu i iskorištavanje zemljišta te uzgoj krupne i sitne stoke.',
                    'poljoprivrednica': ' Poljoprivrednica je žena koja se bavi poljoprivredom kao zanimanjem, koja živi od poljoprivrede.',
                    'poljoprivredničin': ' Poljoprivredničin je koji pripada poljoprivrednici.',
                    'poljoprivrednički': ' Poljoprivrednički je koji se odnosi na poljoprivrednike.',
                    'poljoprivrednik': ' Poljoprivrednik je osoba ili muškarac koji se bavi poljoprivredom kao zanimanjem, koji živi od poljoprivrede',
                    'poljoprivrednikov': ' Poljoprivrednikov je koji pripada poljoprivredniku.',
                    'poljski': ' Poljski je koji se odnosi na Poljsku i Poljake.',
                    'poljubac': ' Poljubac je dodir usnama kao znak ljubavi, prijateljstva, nježnosti, pozdrava, poštovanja ili naklonosti.',
                    'pomagalo': ' Pomagalo je predmet ili naprava koja pomaže izvođenju čega.',
                    'pomagati': ' Pomagati komu ili čemu znači biti komu ili čemu od koristi ili činiti da mu bude lakše.',
                    'pomoć': ' Pomoć je nastojanje da se komu pomogne, olakša rad, stanje ili položaj.',
                    'pomoći': ' Pomoći komu ili čemu znači dati komu ili čemu pomoć ili podršku, učiniti da komu bude lakše.',
                    'ponašanje': ' Ponašanje je postupanje, odnošenje prema okolini na određen način.',
                    'ponašati se': ' Ponašati se znači postupati, odnositi se prema okolini na određen način.',
                    'ponavljati': ' Ponavljati znači činiti ili govoriti što ponovno, još jednom.',
                    'ponedjeljak': ' Ponedjeljak je prvi dan u tjednu, dan između nedjelje i utorka. ',
                    'ponekad': ' Ponekad znači s vremena na vrijeme, neredovito i rijetko, koji put.',
                    'poneki': ' Poneki označuje tu i tamo koju, rijetko koju, malo koju osobu.',
                    'ponešto': ' Ponešto označuje neimenovani predmet ili pojavu.',
                    'ponešto': ' Ponešto označuje određenu, u pravilu manju mjeru čega.',
                    'ponetko': ' Ponetko označuje neimenovanu i rijetku osobu, malo tko, rijetko tko.',
                    'ponoć': ' Ponoć je sredina noći, točno u dvadeset i četiri sata, trenutak u kojem završava prethodni i počinje novi kalendarski dan – 00,00 sati.',
                    'ponoćni': ' Ponoćni je koji se odnosi na ponoć.',
                    'ponos': ' Ponos je osjećaj vlastite vrijednosti, dostojanstva ili časti.',
                    'ponositi se': ' Ponositi se kime ili čime znači osjećati zadovoljstvo zbog vlastite ili tuđe vrijednosti, uspjeha, truda i sl.',
                    'ponoviti': ' Ponoviti znači učiniti što ponovno, još jednom.',
                    'ponovno': ' Ponovno znači da se što ponavlja, još jednom.',
                    'ponton': ' Ponton je plovilo s ravnim dnom ili kakav sličan plutajući objekt koji služi kao oslonac za most što je nad njim postavljen.',
                    'ponuda': ' Ponuda je izjava o spremnosti da se što učini.',
                    'ponuditi': ' Ponuditi što znači predstaviti, predložiti komu da što prihvati, odbije ili da o čemu razmisli, iskazati spremnost ili namjeru, odnosno dati mogućnost ili osigurati.',
                    'poosobljenje': ' Poosobljenje je pjesnička figura u kojoj se stvarima, prirodnim pojavama, apstraktnim predmetima, životinjama ili biljakama pridaju ljudske osobine.',
                    'pop': ' Pop je pravoslavni i grkokatolički svećenik.',
                    'popis': ' Popis su sva imena ili nazivi čega napisani određenim redoslijedom.',
                    'popiti': ' Popiti znači unijeti tekućinu u usta i progutati.',
                    'poplava': ' Poplava je izlijevanje vode iz korita.',
                    'poplun': ' Poplun je debeo pokrivač, najčešće ispunjen perjem, vatom ili vunom.',
                    'popodne': ' Popodne je dio dana od podneva do večeri.',
                    'popodnevni': ' Popodnevni je koji se odnosi na popodne.',
                    'popovski': ' Popovski je koji se odnosi na Popovo i Popovce.',
                    'popularan': ' Popularan je kojega/koji mnogi prepoznaju i vole.',
                    'popularno': ' Popularno je tako da je većini razumljivo.',
                    'popularnost': ' Popularnost je osobina onoga koji je popularan ili svojstvo onoga što je popularno.',
                    'poput': ' Poput označuje da se što uspoređuje s čim.',
                    'poraz': ' Poraz je neuspjeh u ratu ili natjecanju.',
                    'porečki': ' Porečki je koji se odnosi Poreč i Porečane.',
                    'pored': ' Pored označuje da se tko ili što nalazi, kreće ili zbiva u blizini koga ili čega.',
                    'poredba': ' Poredba je stilska figura u kojoj se dva pojma međusobno uspoređuju prema kakvoj sličnosti.',
                    'porez': ' Porez je doprinos koji građani plaćaju državi za njezinu djelatnost.',
                    'poriluk': ' Poriluk je dvogodišnja povrtna zeljasta biljka iz porodice ljiljana s produženom valjkastom mesnatom bijelom lukovicom i dugačkim plosnatim sivozelenim listovima.',
                    'porođaj': ' Porođaj je prirodni završetak trudnoće kad dijete izlazi iz maternice, čin rađanja djeteta.',
                    'portal': ' Portal je mrežno mjesto koje je ishodišna točka prema ostalim internetskim ili intranetskim sadržajima.',
                    'portret': ' Portret je slikarski, kiparski ili fotografski prikaz osobe s njezinim individualnim tjelesnim i psihičkim obilježjima.',
                    'portugalski': ' Portugalski je koji se odnosi na Portugal i Portugalce.',
                    'poručnica': ' Poručnica je žena s činom poručnika.',
                    'poručničin': ' Poručničin je koji pripada poručnici.',
                    'poručnički': ' Poručnički je koji se odnosi na poručnike.',
                    'poručnik': ' Poručnik je niži časnički čin u svim rodovima vojske.',
                    'poručnikov': ' Poručnikov je koji pripada poručniku.',
                    'poruka': ' Poruka je ono što se komu usmeno ili pismeno prenosi ili šalje kao obavijest.',
                    'posada': ' Posada su osobe koje zajedno rade u letjelici, plovilu ili prometnome sredstvu.',
                    'posaditi': ' Posaditi znači staviti u zemlju sadnicu da bi se primila i narasla.',
                    'posao': ' Posao je djelatnost kojom čovjek što proizvodi.',
                    'poseban': ' Poseban je onaj koji se čime ističe ili izdvaja od ostalih.',
                    'posebice': ' Posebice naglašava da se što izdvaja od ostaloga. ',
                    'posebno': ' Posebno naglašava da se što izdvaja od ostaloga. ',
                    'posebnost': ' Posebnost je osobina onoga koji je poseban ili svojstvo onoga što je posebno.',
                    'posjećivati': ' Posjećivati znači dolaziti komu u posjet.',
                    'posjet': ' Posjet je dolazak komu i kraći boravak kod njega.',
                    'posjetiti': ' Posjetiti znači doći komu i kraće vrijeme kod njega boraviti.',
                    'poslanica': ' Poslanica je književna vrsta oblikom i sadržajem utemeljena na pismu upućenomu stvarnom ili fiktivnom primatelju.',
                    'poslati': ' Poslati znači uputiti što na čiju adresu.',
                    'poslije': ' Poslije označuje da što slijedi za čim.',
                    'poslije': ' Poslije znači u vrijeme koje slijedi nakon čega.',
                    'poslijepodne': ' Poslijepodne je dio dana od podneva do večeri.',
                    'poslijepodnevni': ' Poslijepodnevni je koji se odnosi na poslijepodne.',
                    'poslovan': ' Poslovan je koji se bavi poslovima, koji zna voditi poslove, koji poduzima poslove.',
                    'poslovanje': ' Poslovanje je vođenje posla.',
                    'poslovati': ' Poslovati znači voditi posao.',
                    'poslovica': ' Poslovica je rečenica ili ustaljena veza riječi u kojoj je sažeto životno iskustvo ili mudrost.',
                    'poslovni': ' Poslovni je koji se odnosi na posao.',
                    'poslovnost': ' Poslovnost je osobina onoga tko je poslovan i svojstvo onoga što je poslovno.',
                    'poslušan': ' Poslušan je koji koga sluša, koji se ponaša prema čijemu zahtjevu i bez opiranja.',
                    'poslušno': ' Poslušno znači tako da je u skladu s čijim zahtjevom i bez opiranja. ',
                    'poslušnost': ' Poslušnost je osobina onoga tko je poslušan i svojstvo onoga što je poslušno.',
                    'poslužilac': ' Poslužilac je glavno računalo, uređaj ili program u mreži koji upravlja i šalje potrebne podatke ili programe ostalim računalima i uređajima koji su na njega priključeni.',
                    'poslužiti': ' Poslužiti znači ponuditi ili donijeti jelo pred koga.',
                    'posluživati': ' Posluživati znači donositi jelo ili piće pred koga.',
                    'posljedica': ' Posljedica je ono što je prouzročeno čime.',
                    'posljednji': ' Posljednji je koji je na kraju niza ili reda.',
                    'pospan': ' Pospan je kojemu se spava ili koji se nije sasvim probudio.',
                    'pospano': ' Pospano je tako da odražava  da se komu spava ili da se tko nije sasvim probudio.',
                    'pospanost': ' Pospanost je stanje onoga kojemu se spava ili koji se nije sasvim probudio.',
                    'posred': ' Posred označuje da se tko ili što nalazi po sredini čega.',
                    'post': ' Post je povremeno suzdržavanje od hrane, pića ili drugih tjelesnih užitaka. ',
                    'postaja': ' Postaja je uređeno mjesto na kojemu se kratko zadržavaju prijevozna sredstva kako bi se što obavilo, iskrcali ili primili putnici i sl.',
                    'postajati': ' Postajati znači počinjati biti čime, dobivati novu ulogu, funkciju i sl.',
                    'postati': ' Postati znači početi biti čime, dobiti novu ulogu, funkciju i sl.',
                    'postaviti': ' Postaviti znači staviti što na određeno mjesto.',
                    'postavljati': ' Postavljati znači stavljati što na određeno mjesto.',
                    'postelja': ' Postelja je dio namještaja na kojemu se leži, spava ili odmara.',
                    'posteljica': ' Posteljica je mala postelja.',
                    'posteljina': ' Posteljina je rublje ili oprema za postelju.',
                    'poster': ' Poster je veliki tiskani oglas ili likovno oblikovana objava izložena na javnome mjestu.',
                    'postići': ' Postići znači uspjeti u onome za čim se teži, doći do onoga u što se uložio trud.',
                    'posto': ' Posto je stoti dio kojega broja, postotak izražen brojem.',
                    'postojati': ' Postojati znači biti u vremenu i prostoru.',
                    'postojeći': ' Postojeći je koji postoji, koji jest, kojega ima.',
                    'postupak': ' Postupak je način na koji se što obavlja.',
                    'postupati': ' Postupati znači obavljati što na određen način.',
                    'postupiti': ' Postupiti znači obaviti što na određen način.',
                    'posuda': ' Posuda je predmet u kojemu se što drži, priprema ili poslužuje, u kojemu se što čuva.',
                    'posuditi': ' Posuditi znači dati komu što na određeno vrijeme uz obvezu vraćanja.',
                    'posuđe': ' Posuđe je skup posuda.',
                    'posuđenica': ' Posuđenica je riječ nastala združivanjem dviju riječi u jednu pri kojemu svaka riječ zadržava svoj morfološki i naglasni lik.',
                    'posuđivati': ' Posuđivati znači davati komu što na određeno vrijeme uz obvezu vraćanja.',
                    'posvađati': ' Posvađati znači izazvati svađu među kim.',
                    'posvud': ' Posvud je na svakome mjestu.',
                    'posvuda': ' Posvuda je na svakome mjestu.',
                    'pošiljka': ' Pošiljka je paket, pismo ili što drugo što se komu šalje poštom ili na koji drugi način.',
                    'pošta': ' Pošta je ustanova koja se bavi preuzimanjem i dostavljanjem paketa, pošiljaka i pisama te katkad i novčarskim poslovima.',
                    'poštar': ' Poštar je odrasla osoba bez obzira na spol ili muškarac koji raznosi poštanske pošiljke.',
                    'poštarev': ' Poštarev je koj pripada poštaru.',
                    'poštarica': ' Poštarica je žena koja raznosi poštanske pošljke.',
                    'poštaričin': ' Poštaričin je koji pripada poštarici.',
                    'poštarov': ' Poštarov je koji pripada poštaru.',
                    'poštarski': ' Poštarski je koji se odnosi na poštare.',
                    'pošten': ' Pošten je koji se odlikuje osjećajem za istinu i pravdu.',
                    'pošteno': ' Pošteno znači tako da odražava čiji osjećaj za istinu i pravdu.',
                    'poštenje': ' Poštenje je osjećaj za pravdu i istinu.',
                    'poštivati': ' Poštivati što znači ponašati se u skladu s čim.',
                    'pošto': ' Pošto uvodi vremensku surečenicu u zavisnosloženoj rečenici, izriče da se radnja zavisne surečenice zbiva neposredno prije radnje glavne surečenice. ',
                    'poštovanje': ' Poštovanje je osjećaj koji tko ima prema onomu koga poštuje, osjećaj izazvan čijom vrlinom, ponašanjem ili postupkom. ',
                    'poštovati': ' Poštovati koga ili što znači priznavati čiju vrijednost, držati do koga ili čega.',
                    'potenciometar': ' Potenciometar je električni uređaj kojim se mjere električna struja, napon i otpor.',
                    'potišten': ' Potišten je koji nije raspoložen, koji je zbog koga ili čega ispunjen tugom i sjetom.',
                    'potišteno': ' Potišteno je tako da odražava da tko nije raspoložen, da je ispunjen tugom i sjetom.',
                    'potištenost': ' Potištenost je osobina onoga koji je potišten ili svojstvo onoga što je potišteno',
                    'potkošulja': ' Potkošulja je donje rublje koje se nosi na golome gornjem dijelu tijela, ispod druge odjeće, a navlači se preko ruku i glave.',
                    'potkraj': ' Potkraj označuje da se što zbiva pod kraj, pri kraju čega.',
                    'potkrovlje': ' Potkrovlje je prostor ispod krova kuće.',
                    'potkrovni': ' Potkrovni je koji je ispod krova.',
                    'potok': ' Potok je kratka i vodom siromašna tekućica koja vodu dobiva od oborina, izvora i vrela.',
                    'potpetica': ' Potpetica je vanjski dio obuće koji podupire petu.',
                    'potpis': ' Potpis je vlastoručno napisano ime i prezime.',
                    'potpisati': ' Potpisati znači stavljanjem potpisa ozakoniti ili učiniti kakav dogovor ili dokument vrijedećim.',
                    'potpisivati': ' Potpisivati znači stavljanjem potpisa ozakonjivati ili činiti kakav dogovor ili dokument vrijedećim.',
                    'potpora': ' Potpora je pomaganje u kakvu nastojanju, radu, djelovanju i sl.',
                    'potporučnica': ' Potporučnica je žena s činom potporučnika.',
                    'potporučničin': ' Potporučničin je koji pripada potporučnici.',
                    'potporučnički': ' Potporučnički je koji se odnosi na potporučnike.',
                    'potporučnik': ' Potporučnik je niži časnički čin u jugoslavenskoj vojsci (i drugim vojskama), podređen činu poručnika.',
                    'potporučnikov': ' Potporučnikov je koji pripada potporučniku.',
                    'potprogram': ' Potprogram je kraći specijalizirani program koji se pri izvođenju glavnoga programa može upotrijebiti više puta.',
                    'potpukovnica': ' Potpukovnica je žena s činom potpukovnika.',
                    'potpukovničin': ' Potpukovničin je koji pripada potukovnici.',
                    'potpukovnički': ' Potpukovnički je koji se odnosi na potpukovnike.',
                    'potpukovnik': ' Potpukovnik je viši časnički čin u jugoslavenskoj vojsci (i drugim vojskama), podređen činu pukovnika.',
                    'potpukovnikov': ' Potpukovnikov je koji pripada potpukovniku.',
                    'potpun': ' Potpun je koji što obuhvaća u punome opsegu, u cjelini i bez ostatka.',
                    'potpuno': ' Potpuno je tako da se što obuhvaća u punome opsegu, u cjelini i bez ostatka.',
                    'potpunost': ' Potpunost je svojstvo onoga što obuhvaća što u punome opsegu, u cjelini i bez ostatka.',
                    'potraga': ' Potraga je nastojanje da se nađe ono što se negdje krije, što je nestalo ili se izgubilo.',
                    'potreba': ' Potreba je ono što je nužno za život i rad, bez čega je teško ili se ne može.',
                    'potreban': ' Potreban je koji treba da bi se što učinilo, bez kojega se ne može.',
                    'potvrditi': ' Potvrditi znači posvjedočiti ili izjaviti da je što istinito, valjano ili ispravno.',
                    'pouzdan': ' Pouzdan je kojemu se može vjerovati i u kojega se može biti siguran. ',
                    'pouzdano': ' Pouzdano je tako da odražava da je što sigurno, provjereno i točno.',
                    'pouzdanost': ' Pouzdanost je osobina onoga koji je pouzdan ili svojstvo onoga što je pouzdano.',
                    'povećalo': ' Povećalo je optičko staklo koje povećava sliku, služi za promatranje sitnih predmeta.',
                    'povezati': ' Povezati znači vežući pokriti, zaštititi što.',
                    'povezivati': ' Povezivati znači vežući pokrivati, štititi što.',
                    'poveznica': ' Poveznica je sličica, riječi ili izraz u dokumentu na internetu koje taj dokument povezuju s kojim drugim dokumentom na internetu.',
                    'povijest': ' Povijest su vrijeme i događaji koji su se dogodili u prošlosti.',
                    'povik': ' Povik je glasno izgovoreni glas, riječ ili niz glasova ili riječi koji služe da se njima dozove koga ili izrazi koji osjećaj',
                    'povjerenje': ' Povjerenje je osjećaj da se komu ili čemu može vjerovati.',
                    'povjerljiv': ' Povjerljiv je kojemu se može vjerovati i u kojega se može biti siguran.',
                    'povjerljivo': ' Povjerljivo je tako da odražava da se komu ili čemu može vjerovati i u kojega se može biti siguran.',
                    'povjerljivost': ' Povjerljivost je svojstvo onoga što odražava sigurnost, provjerenost  i točnost.',
                    'povjestica': ' Povjestica je kraća epska pjesnička književna vrsta koja obuhvaća djela povijesna tematike, pjesnička pripovijetka.',
                    'povjetarac': ' Povjetarac je lagan vjetar.',
                    'povod': ' Povod je ono što je izravno dovelo do čega, što je potaknulo ili pokrenulo koji događaj ili postupak.',
                    'povodom': ' Povodom označuje da se što odvija istodobno s čim drugim što je ujedno i povod.',
                    'povoj': ' Povoj je platno kojim se povijaju mala djeca.',
                    'povoljan': ' Povoljan je koji pogoduje, koji je po volji komu ili čemu, koji odgovara čijim željama ili očekivanjima.',
                    'povoljno': ' Povoljno je tako da pogoduje, da je po volji komu ili čemu, da odgovara čijim željama ili očekivanjima.',
                    'povratak': ' Povratak je dolazak ili vraćanje na mjesto odakle se krenulo.',
                    'povrće': ' Povrće su različite kultivirane ili samonikle jestive biljke koje se sirove ili kuhane upotrebljavaju kao osnovna hrana ili prilog jelu.',
                    'povremeno': ' Povremeno znači u nepravilnim vremenskim razmacima, s vremena na vrijeme.',
                    'povrh': ' Povrh označuje da se tko ili što nalazi ili kreće malo iznad vrha ili površine čega.',
                    'površina': ' Površina je gornja ili vanjska strana čega.',
                    'pozabaviti se': ' Pozabaviti se čime znači raditi na čemu neko vrijeme.',
                    'pozdrav': ' Pozdrav je uobičajeni izraz ili pokret glavom, rukom ili tijelom pri susretu ili rastanku.',
                    'pozdraviti': ' Pozdraviti znači iskazati pozdrav riječima ili pokretom pri susretu ili rastanku.',
                    'pozdravljati': ' Pozdravljati znači iskazivati pozdrav riječima ili pokretom pri susretu ili rastanku.',
                    'pozicija': ' Pozicija je mjesto na kojemu se što nalazi u odnosu na što drugo.',
                    'pozitiv': ' Pozitiv je filmska vrpca ili fotografija na kojoj su odnosi svijetlih i tamnih dijelova kao u stvarnosti',
                    'pozitivan': ' Pozitivan je koji potvrđuje što, koji izražava slaganje ili odobravanje.',
                    'pozitivno': ' Pozitivno znači tako da što potvrđuje, da izražava slaganje ili odobravanje.',
                    'poziv': ' Poziv je glas, riječ, pokret i sl. koji se upućuje komu da se komu ili čemu pridruži ili odazove .',
                    'pozivati': ' Pozivati znači obraćati se komu očekujući da dođe ili da se odazove.',
                    'pozivnica': ' Pozivnica je pismena obavijest kojom se koga poziva da sudjeluje u kakvu događaju.',
                    'poznanica': ' Poznanica je žena koju tko površno poznaje.',
                    'poznaničin': ' Poznaničin je koji pripada poznanici.',
                    'poznanik': ' Poznanik je osoba koju tko površno poznaje.',
                    'poznanikov': ' Poznanikov je koji pripada poznaniku.',
                    'poznat': ' Poznat je kojemu se zna identitet.',
                    'poznato': ' Poznato znači pout onoga za koji se već zna.',
                    'pozornica': ' Pozornica je uređeni prostor s odgovarajućom scenografijom ispred gledališta na kojemu se izvodi predstava.',
                    'pozornica': ' Pozornica je žena s činom pozornika.',
                    'pozorničin': ' Pozorničin je koji pripada pozornici, ženi s činom pozornika.',
                    'pozornički': ' Pozornički je koji se odnosi na pozornike.',
                    'pozornik': ' Pozornik je najniži vojnički čin u svim rodovima vojske, podređen činu razvodnika.',
                    'pozornikov': ' Pozornikov je koji pripada pozorniku.',
                    'pozvati': ' Pozvati znači riječima ili pokretima izraziti želju da tko dođe ili da se odazove.',
                    'požar': ' Požar je velika vatra koja zahvaća i uništava sve što može gorjeti.',
                    'požeški': ' Požeški je koji se odnosi na Požegu i Požežane.',
                    'prabaka': ' Prabaka je bakina ili djedova majka.',
                    'prabakin': ' Prabakin je koji pripada prabaki.',
                    'praćka': ' Praćka je jednostavna naprava u obliku slova V s gumenom vrpcom koja, ako se zategne i naglo pusti, izbacuje predmet koji pridržava u željenome pravcu.',
                    'pradjed': ' Pradjed je djedov ili bakin otac.',
                    'pradjedov': ' Pradjedov je koji pripada pradjedu.',
                    'prah': ' Prah su najsitnije čestice tvari.',
                    'praksa': ' Praksa je stvarna, izravna djelatnost.',
                    'praona': ' Praona je prostorija u kojoj se što pere.',
                    'praonica': ' Praonica je prostorija u kojoj se što pere.',
                    'praporac': ' Praporac je šuplja kovinska loptica s kuglicom koja pri pokretu zvecka.',
                    'pras': ' Praskanje je onomatopejska riječ kojom se oponaša udarac ili pucanj. ',
                    'prasak': ' Prasak je jak zvuk koji se čuje pri udarcu, pucnju, strujnome udaru i slično. ',
                    'prase': ' Prase je mlado svinje.',
                    'prasiti se': ' Prasiti se znači donositi prase na svijet.',
                    'praskati': ' Praskati znači proizvoditi prasak.',
                    'praslavenski': ' Praslavenski je koji se odnosi na Praslavene.',
                    'prasnuti': ' Prasnuti znači proizvesti prasak. ',
                    'prašak': ' Prašak je proizvod u obliku praha.',
                    'prašina': ' Prašina je skup sitnih čestica krutih tvari.',
                    'praški': ' Praški je koji se odnosi na Prag i Pražane.',
                    'prašuma': ' Prašuma je gusta neprohodna šuma neizmijenjena ljudskim djelovanjem, najproširenija u tropskim kišnim područjima.',
                    'prati (se)': ' Prati (se) znači vodom ili kojom drugom tekućinom uklanjati s čega nečistoću.',
                    'pratiti': ' Pratiti koga znači ići neko vrijeme s kim.',
                    'pravac': ' Pravac je put kojim se što kreće prema kakvu cilju.',
                    'pravda': ' Pravda je stanje u kojemu svatko dobiva ono što mu pripada i u kojemu nitko nije oštećen.',
                    'pravedan': ' Pravedan je koji donosi odluke koje su razumne, moralne i temeljene na nastojanju da svatko dobije ono što zaslužuje.',
                    'pravedno': ' Pravedno je tako odražava da su čije odluke razumne, moralne i temeljene na nastojanju da svatko dobije ono što zaslužuje.',
                    'pravednost': ' Pravednost je osobina onoga koji je pravedan ili svojstvo onoga što je pravedno.',
                    'pravi': ' Pravi je koji je onakav kakav bi trebao biti.',
                    'pravilan': ' Pravilan je onakav kakav treba biti, koji je u skladu s očekivanim ili zadanim.',
                    'pravilno': ' Pravilno znači tako da što bude onakvo kakvo treba biti, da je u skladu s očekivanim ili zadanim.',
                    'pravilnost': ' Pravilnost je svojstvo onoga što je onakvo kakvo treba biti, što je u skladu s očekivanim ili zadanim.',
                    'pravilo': ' Pravilo je stalan, čvrst, uzajaman odnos nekih pojava u kojemu do izražaja dolazi kakva zakonitost.',
                    'pravni': ' Pravni je koji se odnosi na pravo.',
                    'pravo': ' Pravo je zajamčena sloboda ili mogućnost uživanja čega.',
                    'pravokutan': ' Pravokutan je koji ima barem jedan pravi kut.',
                    'pravokutnik': ' Pravokutnik je četverokut kojemu su sva četiri kuta prava.',
                    'pravopis': ' Pravopis je skup pravila koja određuju kako pravilno pisati.',
                    'pravopisni': ' Pravopisni je koji se odnosi na pravopis.',
                    'pravoslavac': ' Pravoslavac je osoba bez obzira na spol ili muška osoba pravoslavne vjere.',
                    'pravoslavka': ' Pravoslavka je ženska osoba pravoslavne vjere.',
                    'prazan': ' Prazan je koji nije ispunjen kakvim sadržajem, u kojemu nema ničega.',
                    'praznik': ' Praznik je dan kojim se obilježava dan važan za društvenu zajednicu ili međunarodni dan posvećen čemu.',
                    'prčanjski': ' Prčanjski je koji se odnosi na Prčanj i Prčanjane.',
                    'precizan': ' Precizan je koji u svojemu radu vodi računa o svim pojedinostima i postiže točne i jasne rezultate.',
                    'precizno': ' Precizno je tako da odražava se vodi računa o svim pojedinostima i postižu točni i jasni rezultati.',
                    'preciznost': ' Preciznost je osobina onoga koji je precizan ili svojstvo onoga što je precizno.',
                    'precrtati': ' Precrtati znači crtom prijeći preko teksta, slike ili čega drugoga.',
                    'precrtavati': ' Precrtavati znači crtom označivati da kakav tekst treba izbaciti.',
                    'preča': ' Preča je naprava za vježbanje koja se sastoji od dvaju stupova s vodoravno položenom prečkom.',
                    'pred(a)': ' Pred(a) označuje da tko ili što dospijeva s prednje strane koga ili čega.',
                    'predavanje': ' Predavanje je oblik nastave u kojemu se tumači nastavno gradivo.',
                    'predavaona': ' Predavaona je veća prostorija ili dvorana u kojoj se drže predavanja.',
                    'predavaonica': ' Predavaonica je veća prostorija ili dvorana u kojoj se drže predavanja.',
                    'predbožićni': ' Predbožićni je koji se odnosi na razdoblje prije Božića. ',
                    'predikat': ' Predikat je središnji rečenični dio koji otvara mjesto svim ostalim samostalnim rečeničnim dijelovima',
                    'predikatni': ' Predikatni je koji se odnosi na predikat, središni rečenični dio. ',
                    'prediona': ' Prediona je radionica u kojoj se uvijanjem vlakana stvaraju niti pređe.',
                    'predionica': ' Predionica je radionica u kojoj se uvijanjem vlakana stvaraju niti pređe.',
                    'predivan': ' Predivan je koji je iznimno lijep, koji ispunjava velikim zadovoljstvom.',
                    'predivno': ' Predivno znači iznimno lijepotako da ispunjava velikim zadovoljstvom.',
                    'predmet': ' Predmet je ono što se može vidjeti i dotaknuti, a nije živo.',
                    'prednaglasni': ' Prednaglasni je koji se nalazi ispred naglaska. ',
                    'prednaglasnica': ' Prednaglasnica je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ iza sebe i s njom čini jednu naglasnu cjelinu.',
                    'prednost': ' Prednost je svojstvo po kojemu se tko ističe pred drugima, po kojemu je tko bolji od drugih.',
                    'predsjedati': ' Predsjedati čime znači biti predsjednik kakva tijela.',
                    'predsjedavati': ' Predsjedavati čime znači biti predsjednik kakva tijela.',
                    'predsjednica': ' Predsjednica je odrasla žena koja je poglavarica države koja je uređena kao republika.',
                    'predsjedničin': ' Predsjedničin je koji pripada predsjednici, odrasloj ženi koja je poglavarica države koja je uređena kao republika.',
                    'predsjednički': ' Predsjednički je koji se odnosi na predsjednike, odrasle osobe bez obzira na spol ili muškarce koji su poglavari u državi koja je uređena kao republika.',
                    'predsjednik': ' Predsjednik je odrasla osoba bez obzira na spol ili muškarac koji je poglavar u državi koja je uređena kao republika.',
                    'predsjednikov': ' Predsjednikov je koji pripada predsjedniku, muškarcu koji je poglavar u državi koja je uređena kao republika.',
                    'predsjednikovati': ' Predsjednikovati znači obavljati predsjedničke dužnosti.',
                    'predsoblje': ' Predsoblje je prostorija koja povezuje ulaz u kuću ili stan s ostalim prostorijama.',
                    'predstava': ' Predstava je izvedba scenskoga djela.',
                    'predstaviti': ' Predstaviti znači reći komu čije ime i osnovne podatke pri upoznavanju.',
                    'predstavljati': ' Predstavljati znači govoriti komu čije ime i osnovne podatke pri upoznavanju.',
                    'predstavnica': ' Predstavnica je žena koja djeluje ili govori uime kakve skupine ili organizacije.',
                    'predstavničin': ' Predstavničin je koji pripada predstavnici, ženi koja djeluje ili govori uime koga drugoga ili ženi koja predstavlja, izražava duh određenoga vremena.',
                    'predstavnički': ' Predstavnički je koji se odnosi na predstavnike.',
                    'predstavnik': ' Predstavnik je osoba koja djeluje ili govori uime kakve skupine ili organizacije.',
                    'predstavnikov': ' Predstavnikov je koji pripada predstavniku.',
                    'predug': ' Predug je koji je duljine veće od poželjne ili potrebne.',
                    'predvorje': ' Predvorje je velika prostorija ili dvorana koja se nalazi iza glavnoga ulaza, a ispred ostalih prostorija, obično u palači ili velikoj kući.',
                    'pregled': ' Pregled je uvid u stanje činjenica.',
                    'preglednik': ' Preglednik je program s pomoću kojega korisnik može tražiti neki podatak ili pregledavati podatke te programski alat za pretraživanje i pregledavanje dokumenata',
                    'prehlada': ' Prehlada je virusna upala nosne i ždrijelne sluznice.',
                    'prehrana': ' Prehrana je davanje ili uzimanje hrane.',
                    'prekidač': ' Prekidač je naprava kojom se što prekida, otvara ili zatvara dovod čega.',
                    'preklopnik': ' Preklopnik je uređaj koji ubrzava protok podataka unutar računalne mreže.',
                    'preko': ' Preko označuje da se tko ili što nalazi ili kreće iznad čega ili s gornje strane čega.',
                    'prekosutra': ' Prekosutra je tijekom dana koji je nakon sutrašnjega dana, u danu koji je nakon sutrašnjega dana.',
                    'prekrasan': ' Prekrasan je koji je iznimno oku ugodan.',
                    'prekratak': ' Prekratak je koji je duljine manje od poželjne ili potrebne.',
                    'preksinoć': ' Preksinoć znači pretprošle večeri.',
                    'prelaziti': ' Prelaziti što znači dospijevati s jedne strane na drugu, prebacivati se preko čega.',
                    'prema': ' Prema označuje da je tko ili što usmjereno kakvu cilju.',
                    'premalo': ' Premalo je manje nego što treba, toliko da nije dovoljno.',
                    'premda': ' Premda uvodi stvarnu dopusnu surečenicu u zavisnosloženoj rečenici. ',
                    'premijer': ' Premijer je predsjednik vlade.',
                    'premijerka': ' Premjerka je predsjednica vlade.',
                    'premjestiti': ' Premjestiti što znači mičući ili noseći pomaknuti, prenijeti što s jednoga mjesta na drugo.',
                    'premještati': ' Premještati što znači mičući ili noseći pomicati, prenositi što s jednoga mjesta na drugo.',
                    'premosnica': ' Premosnica je kirurški zahvat kojim se premošćuje bolesni ili oštećeni dio organa i omogućuje protok krvi, likvora ili gastrointestinalnoga sadržaj.',
                    'prepisati': ' Prepisati znači ponovno napisati, doslovno prenijeti kakav tekst onako kako je gdje već napisan.',
                    'prepisivati': ' Prepisivati znači ponovno pisati, doslovno prenositi kakav tekst onako kako je gdje već napisan.',
                    'prepjev': ' Prepjev je slobodan prijevod pjesme s drugoga jezika.',
                    'prepreka': ' Prepreka je predmet koji priječi kretanje u određenome smjeru ili pristup čemu.',
                    'preseliti': ' Preseliti znači seleći pomaknuti, dopremiti s jednoga mjesta na drugo.',
                    'preskakati': ' Preskakati znači skakati preko čega.',
                    'preskočiti': ' Preskočiti znači skočiti preko čega.',
                    'preslica': ' Preslica je drvena naprava za predenje niti.',
                    'prestajati': ' Prestajati znači završavati kakvo djelovanje.',
                    'prestati': ' Prestati znači završiti kakvo djelovanje.',
                    'presti': ' Presti znači praviti niti ili pređu od vune, lana ili konoplje.',
                    'prethodni': ' Prethodni je koji prethodi čemu, koji se dogodio neposredno prije onoga o čemu je riječ.',
                    'preurediti': ' Preurediti znači urediti drukčije, na nov način.',
                    'preuređivati': ' Preuređivati znači uređivati drukčije, na nov način.',
                    'preuzeti': ' Preuzeti znači uzeti što od koga.',
                    'preuzimanje': ' Preuzimanje je uzimanje čega od koga.',
                    'preuzimati': ' Preuzimati znači uzimati što od koga.',
                    'previše': ' Previše je više nego što treba.',
                    'prevodilac': ' Prevodilac je odrasla osoba bez obzira na spol ili muškarac koji prevodi s jednoga jezika na drugi. ',
                    'prevoditelj': ' Prevoditelj je odrasla osoba bez obzira na spol ili muškarac koji prevodi s jednoga jezika na drugi. ',
                    'prevoditeljev': ' Prevoditeljev je koji pripada prevoditelju. ',
                    'prevoditeljica': ' Prevoditeljica je žena  koja prevodi s jednoga jezika na drugi. ',
                    'prevoditeljičin': ' Prevoditeljičin je koji pripada prevoditeljici. ',
                    'prevoditeljski': ' Prevoditeljski je koji se odnosi na prevoditelje. ',
                    'prezent': ' Prezent je sadašnje glagolsko vrijeme. ',
                    'prezentski': ' Prezentski je koji se odnosi na prezent. ',
                    'prezime': ' Prezime je nasljedno obiteljsko ime ili ime koje žena stječe udajom.',
                    'pri': ' Pri označuje da se što događa istodobno s čim drugim.',
                    'pribor': ' Pribor je skupina pomagala koja služe za određenu djelatnost ili posao.',
                    'pribrojnik': ' Pribrojnik je broj koji sudjeluje u matematičkoj operaciji zbrajanja.',
                    'priča': ' Priča je usmeno kazivanje ili prenošenje događaja, čije viđenje kakva događaja.',
                    'pričanje': ' Pričanje je sposobnost artikuliranja slogova, riječi i rečenica te komunikacije s pomoću njih.',
                    'pričati': ' Pričati znači usmeno iznositi kakav sadržaj.',
                    'pričest': ' Pričest je dio kršćanske mise (euharistije) u kojemu svećenik i vjernici blaguju euharistijski kruh i vino.',
                    'pridjev': ' Pridjev je promjenjiva riječ kojom se izriče osobina ili svojstvo onoga što je označeno imenicom, mijenja se po padežima, broju i rodu. ',
                    'pridjevni': ' pridjevni je koji se odnosi na pridjeve.',
                    'prigoda': ' Prigoda je povoljan trenutak.',
                    'prigodni': ' Prigodni je koji se odnosi na prigodu.',
                    'prigodom': ' Prigodom označuje da se što odvija istodobno s čim drugim što je ujedno i povod.',
                    'prigušivač': ' Prigušivač je naprava za prigušivanje zvuka.',
                    'prihvatiti': ' Prihvatiti znači uzeti u ruke što od onoga koji to dodaje.',
                    'prihvatljiv': ' Prihvatljiv je koji se na temelju svojih obilježja može prihvatiti kao razuman, odgovarajući ili dopustiv. ',
                    'prihvatljivo': ' Prihvatljivo je tako odražava da se što može prihvatiti kao razumno, odgovarajuće ili dopustivo. ',
                    'prihvatljivost': ' Prihvatljivost je svojstvo onoga što je prihvatljivo.',
                    'prijamnik': ' Prijamnik je uređaj koji prima signale i iz njih odvaja sadržaj informacije.',
                    'prijatelj': ' Prijatelj je bliska osoba bez obzira na spol ili muška osoba s kojom se tko druži, koju poštuje i voli i u koju ima povjerenja.',
                    'prijateljev': ' Prijateljev je koji pripada prijatelju, bliskoj osobi bez obzira na spol ili muškoj osobi s kojom se tko druži, koju poštuje i voli i u koju ima povjerenja.',
                    'prijateljica': ' Prijateljica je ženska osoba s kojom se tko druži, koju poštuje i voli i u koju ima povjerenja.',
                    'prijateljičin': ' Prijateljičin je koji pripada prijateljici, ženskoj osobi s kojom se tko druži, koju poštuje i voli i u koju ima povjerenja.',
                    'prijateljski': ' Prijateljski je koji se odnosi na prijatelje.',
                    'prijava': ' Prijava je izjava kojom tko izražava želju da sudjeluje u čemu, da se pridruži čemu ili da bude član čega.',
                    'prije': ' Prije označuje da što prethodi čemu.',
                    'prije': ' Prije znači u proteklom, prošlom vremenu.',
                    'prijeći': ' Prijeći što znači dospjeti s jedne strane čega na drugu, prebaciti se preko čega.',
                    'prijedlog': ' Prijedlog je mišljenje, plan ili ideja  koju tko iznosi komu kako bi tko drugi mogao o tome razmisliti i odlučiti  što učiniti i kako postupiti. ',
                    'prijedložni': ' Prijedložni je koji se odnosi na prijedloge (vrstu riječi).',
                    'prijelaz': ' Prijelaz je mjesto na kojemu se prelazi s jedne strane na drugu.',
                    'prijenos': ' Prijenos je prebacivanje čega s jednoga mjesta na drugo.',
                    'prijepodne': ' Prijepodne je dio dana od jutra do podneva.',
                    'prijepodnevni': ' Prijepodnevni je koji se odnosi na prijepodne.',
                    'prijetiti': ' Prijetiti komu znači strašiti koga riječima ili postupcima, izricati prijetnje.',
                    'prijevoz': ' Prijevoz je premještanje ili dovođenje na odredište vožnjom.',
                    'prikladan': ' Prikladan je koji svojim osobinama i sposobnostima odgovara kakvoj namjeni ili okolnostima.',
                    'prikladno': ' Prikladno je tako da odražava da što odgovara kakvoj namjeni, okolnostima ili mogućnostima.',
                    'prikladnost': ' Prikladnost je osobina onoga koji je prikladan ili svojstvo onoga što je prikladno.',
                    'priključiti': ' Priključiti znači uključiti koga ili što u sastav čega, dodati koga ili što čemu.',
                    'priključivati': ' Priključivati znači uključivati koga ili što u sastav čega, dodavati koga ili što čemu.',
                    'prilagodnik': ' Prilagodnik je uređaj koji omogućuje međusobno spajanje dvaju ili više neusklađenih uređaja ili sustava.',
                    'prilika': ' Prilika je povoljan trenutak.',
                    'prilikom': ' Prilikom označuje da se što odvija istodobno s čim drugim što je ujedno i povod.',
                    'prilog': ' Prilog je ono što služi kao dopuna ili dodatak čemu. ',
                    'priložni': ' Priložni je koji se odnosi na priloge, vrstu riječi. ',
                    'primalja': ' Primalja je žena koja nadzire porođaj i pomaže ženama pri porodu.',
                    'primaljin': ' Primaljin je koji pripada primalji.',
                    'primarijus': ' Primarijus je naslov glavnoga liječnika, upravitelja bolnice ili šefa bolničkoga odjela.',
                    'primati': ' Primati znači hvatati koga ili što rukom.',
                    'primijetiti': ' Primijetiti znači uočiti što promatranjem.',
                    'primiti': ' Primiti znači uhvatiti koga ili što rukom.',
                    'primjećivati': ' Primjećivati znači uočavati što promatranjem.',
                    'primjer': ' Primjer je model s pomoću kojega se objašnjava koja tvrdnja ili potvrđuje ispravnost, istinitost kakva pravila ili zakonitosti.',
                    'primjeren': ' Primjeren je koji svojim osobinama i sposobnostima odgovara kakvoj namjeni ili okolnostima.',
                    'primjereno': ' Primjereno je tako da odražava da što odgovara kakvoj namjeni, okolnostima ili mogućnostima.',
                    'primjerenost': ' Primjerenost je osobina onoga koji je primjeren ili svojstvo onoga što je neprimjereno.',
                    'primjerice': ' Primjerice uvodi primjer.',
                    'primorje': ' Primorje je dio kopna uz morsku obalu na čija prirodna obilježja i život ljudi more ima snažan utjecaj.',
                    'primorski': ' Primorski je koji se odnosi na Hrvatsko primorje i Primorce.',
                    'princ': ' Princ je kraljev sin.',
                    'pripjev': ' Pripjev su stih, stihovi ili dio stiha koji se ponavljaju, obično na kraju kitice.',
                    'pripovijest': ' Pripovijest je prozna književna vrsta duža od novele, a kraća od romana, u kojoj se opisuje više više likova povezanih kakvim događajem.',
                    'pripovijetka': ' Pripovijetka je prozna književna vrsta duža od novele, a kraća od romana, u kojoj se opisuje više više likova povezanih kakvim događajem.',
                    'pripovjedač': ' Pripovjedač je strukturni element književnoga djela koji označuje govornika u književnoj komunikaciji.',
                    'pripovjedačev': ' Pripovjedačev je koji pripada pripovjedaču.',
                    'pripovjedačica': ' Pripovjedačica je žena koja pripovijeda.',
                    'pripovjedačičin': ' Pripovjedačičin je koji pripada pripovjedačici.',
                    'priprema': ' Priprema je skup radnja koje se čine pri početku obavljanja kojega posla ili zadatka kako bi se mogao uspješno obaviti.',
                    'priredba': ' Priredba je kulturna i zabavna svečanost, svečanost ili predstava s plesom, pjesmom, recitiranjem, obično u povodu kakva događaja ili proslave.',
                    'priroda': ' Priroda je sve što postoji na svijetu samo po sebi i nije ljudsko djelo.',
                    'prirodan': ' Prirodan je koji je nastao kao dio prirode.',
                    'prirodno': ' Prirodno znači tako da je spontano i ležerno.',
                    'prirodnost': ' Prirodnost je svojstvo onoga što odražava iskrenost.',
                    'prispodoba': ' Prispodoba a je književna vrsta, u stihu ili prozi, koja iznosi neku moralnu pouku pomoću prenesenog značenja i usporedbe.',
                    'pristajati': ' Pristajati znači davati pristanak na što, biti suglasan s čime.',
                    'pristati': ' Pristati znači dati pristanak na što, suglasiti se s čime.',
                    'pristojan': ' Pristojan je koji poštuje pravila ponašanja ili koji se ponaša u skladu s njima.',
                    'pristojno': ' Pristojno je tako da odražava da tko poštuje pravila ponašanja ili se ponaša u skladu s njima.',
                    'pristojnost': ' Pristojnost je osobina onoga koji je pristojan ili svojstvo onoga što je pristojno.',
                    'pristup': ' Pristup je mjesto na kojemu se čemu prilazi ili odakle se može čemu prići.',
                    'pristupačan': ' Pristupačan je s kojim se lako može komunicirati, s kojim se lako uspostavlja odnos.',
                    'pristupačno': ' Pristupačno je tako da odražava laku komunikaciju i uspostavljanje kakva odnosa.',
                    'pristupačnost': ' Pristupačnost je osobina onoga koji je pristupačan ili svojstvo onoga što je pristupačno.',
                    'pritisnuti': ' Pritisnuti znači izvesti pritisak i otpuštanje tipke na mišu, tipkovnici i na drugim vanjskim uređajima ili kontrolama za računalo.',
                    'privatan': ' Privatni je koji pripada intimnomu i obiteljskomu životu.',
                    'privatno': ' Privatno znači u intimnome i obiteljskome životu.',
                    'privatnost': ' Privatnost je područje privatnoga, intimnoga i obiteljskoga života.',
                    'privitak': ' Privitak je dodatak uz e-poruku. ',
                    'privlačan': ' Privlačan je koji svojim izgledom koga privlači ili mu se sviđa.  ',
                    'privlačno': ' Privlačno je tako da odražava da odražava da je tko ili što koga privlači ili pobuđuje čije zanimanje.',
                    'privlačnost': ' Privlačnost je osobina onoga koji je privlačan ili svojstvo onoga što je privlačno.',
                    'prizeman': ' Prizeman je koji se nalazi pri zemlji, u blizini tla.',
                    'prizemlje': ' Prizemlje je dio zgrade koji se nalazi između razine zemlje i prvoga kata.',
                    'prizemni': ' Prizemni je koji ima smo prizemlje.',
                    'prizemnica': ' Prizemnica je kuća čija je najviša etaža prizemlje.',
                    'prizemno': ' Prizemno znači u prizemlju.',
                    'prizemno': ' Prizemno znači tako da se nalazi pri zemlji, u blizini tla.',
                    'priznanje': ' Priznanje je osobna izjava o istinitosti čega.',
                    'prkos': ' Prkos je tvrdoglavo protivljenje čijoj volji ili mišljenju.',
                    'prljav': ' Prljav je koji ima mrlje, prljavštinu ili tragove čega.',
                    'prljavština': ' Prljavština je nakupina prljavih tragova na čemu.',
                    'probati': ' Probati znači uložiti napor kako bi se postigao kakav cilj.',
                    'problem': ' Problem je ono što je nejasno, što treba riješiti, što je težak zadatak.',
                    'proces': ' Proces je niz radnja ili postupaka usmjerenih određenomu cilju. ',
                    'procesor': ' Središnji računalni dio koji je zadužen za obradu podataka u računalu.',
                    'procesorski': ' Procesorski je koji se odnosi na procesore.',
                    'pročelje': ' Pročelje je prednja strana zgrade.',
                    'pročišćivač': ' Pročišćivač je sredstvo ili naprava koja čisti što od nečistoća.',
                    'pročitati': ' Pročitati znači završiti čitanje čega.',
                    'proći': ' Proći znači hodajući ili vozeći se prijeći određenu udaljenost.',
                    'prodaja': ' Prodaja je davanje ili razmjena robe za novac.',
                    'prodati': ' Prodati znači ustupiti što komu za novčanu naknadu.',
                    'prodavač': ' Prodavač je osoba bez obzira na spol ili muška osoba koja se bavi prodajom, koja prodaje što.',
                    'prodavačev': ' Prodavačev je koji pripada prodavaču.',
                    'prodavačica': ' Prodavačica je ženska osoba koja se bavi prodajom, koja prodaje što.',
                    'prodavačičin': ' Prodavačičin je koji pripada prodavačici.',
                    'prodavački': ' Prodavački je koji se odnosi na prodavače i prodavanje.',
                    'prodavaona': ' Prodavaona je zatvoreni prostor u kojemu se što prodaje.',
                    'prodavaonica': ' Prodavaonica je zatvoreni prostor u kojemu se što prodaje. ',
                    'prodavati': ' Prodavati znači ustupati što komu za novčanu naknadu.',
                    'prodoran': ' Prodoran je koji prodire, širi se prostorom.',
                    'prodorno': ' Prodorno je tako da prodire, da se lako širi prostorom.',
                    'prodornost': ' Prodornost je osobina onoga koji je prodoran ili svojstvo onoga što je prodorno.',
                    'produkt': ' Produkt je konačni rezultat proizvodne ili razvojne djelatnosti.',
                    'prof.': ' Prof. je  kratica za titulu osobe koja ima znanstveno-nastavno ili umjetničko-nastavno zvanje redovitoga profesora. ',
                    'profesor': ' Profesor je znanstveno-nastavno ili umjetničko-nastavno zvanje i odgovarajuće radno mjesto na visokoškolskoj ustanovi i fakultetu. ',
                    'profesorica': ' Profesorica je žena koja ima znanstveno-nastavno ili nastavno-umjetničko zvanje redovitoga profesora.',
                    'profesoričin': ' Profesoričin je koji pripada profesorici. ',
                    'profesorov': ' Profesorov je koji pripada profesoru. ',
                    'profesorski': ' Profesorski je koji se odnosi na profesore.',
                    'prognoza': ' Prognoza je predviđanje budućih zbivanja, pojava ili događaja na temelju poznatih podataka.',
                    'program': ' Program je sadržaj i cilj rada koje djelatnosti koji treba provesti.',
                    'programator': ' Programator je uređaj koji upravlja radom kakva programa ili ga nadzire.',
                    'prohodan': ' Prohodan je kroz koji tko ili što može proći.',
                    'prohodno': ' Prohodno je tako da odražava da se kroz što može proći',
                    'prohodnost': ' Prohodnost je svojstvo onoga kroz što se lako može proći.',
                    'proizvod': ' Proizvod je konačni rezultat proizvodne djelatnosti.',
                    'proizvodnja': ' Proizvodnja je organizirana ljudska djelatnost u kojoj se što proizvodi.',
                    'proizvođač': ' Proizvođač je odrasla osoba bez obzira na spol ili muškarac koji što proizvodi.',
                    'proizvođačica': ' Proizvođačica je žena koja što proizvodi.',
                    'proizvođačičin': ' proizvođačičin je koji pripada proizvođačici.',
                    'projekcija': ' Projekcija je preslikavanje točaka prostora na ravninu.',
                    'projekt': ' Projekt je pomno nacrtan plan za izgradnju ili preuređivanje čega.',
                    'projektil': ' Projektil je naprava koja se izbacuje u prostor i upućuje prema cilju.',
                    'projektor': ' Projektor je optički uređaj kojim se fotografska, filmska ili digitalna slika povećava i prenosi na kakvu površinu.',
                    'proklitika': ' Proklitika je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ iza sebe i s njom čini jednu naglasnu cjelinu.',
                    'prolaz': ' Prolaz je put kojim se prelazi iz jednoga mjesta na drugo.',
                    'prolazan': ' Prolazan je koji traje određeno vrijeme, koji nije trajan.',
                    'prolaziti': ' Prolaziti znači hodajući ili vozeći se prelaziti određenu udaljenost.',
                    'prolaznica': ' Prolaznica je ženska osoba koja prolazi pokraj ili mimo koga ili kroza što.',
                    'prolazničin': ' Prolazničin je koji pripada prolaznici.',
                    'prolaznički': ' Prolaznički je koji se odnosi na prolaznike.',
                    'prolaznik': ' Prolaznik je osoba bez obzira na spol ili muška osoba koja prolazi pokraj ili mimo koga ili kroza što.',
                    'prolaznikov': ' Prolaznikov je koji pripada prolazniku.',
                    'prolazno': ' Prolazno je tako da traje samo određeno vrijeme.',
                    'prolaznost': ' Prolaznost je osobina ili svojstvo onoga koji traje određeno vrijeme, što nije trajno.',
                    'proljeće': ' Proljeće je godišnje doba koje na sjevernoj hemisferi počinje 21. ožujka i traje do 21. lipnja.',
                    'proljetni': ' Proljetni je koji se odnosi na proljeće.',
                    'promet': ' Promet je kretanje vozila i ljudi određenim putom.',
                    'prometnica': ' Prometnica je žena koja je zadužena za nadzor i upravljanje prometom (otpremu ili prihvat vozila) te koordinaciju rada na otklanjanju smetnja u prometu.',
                    'prometnica': ' Prometnica je cesta ili ulica kojom se odvija promet.',
                    'prometničin': ' Prometničin je koji pripada prometnici, ženi koja je zadužena za nadzor i upravljanje prometom (otpremu ili prihvat vozila) te koordinaciju rada na otklanjanju smetnja u prometu.',
                    'prometnički': ' Prometnički je koji se odnosi na prometnike.',
                    'prometnik': ' Prometnik je odrasla osoba bez obzira na spol ili muškarac koji je zadužen za nadzor i upravljanje prometom (otpremu ili prihvat vozila) te koordinaciju rada na otklanjanju smetnja u prometu.',
                    'prometnikov': ' Prometnikov je koji pripada prometniku, odrasloj osobi bez obzira na spol ili muškarcu koji je zadužen za nadzor i upravljanje prometom (otpremu ili prihvat vozila) te koordinaciju rada na otklanjanju smetnji u prometu.',
                    'promijeniti': ' Promijeniti znači dati čemu drugi sadržaj ili oblik, učiniti što drukčijim.',
                    'promjena': ' Promjena je zamjena čega čime drugime.',
                    'promjenjiv': ' Promjenjiv je koji se može mijenjati, koji se lako mijenja.',
                    'promjenjivo': ' Promjenjivo je tako da odražava mogućnost promjene.',
                    'promjenjivost': ' Promjenjivost je svojstvo onoga što se može mijenjati, što se lako mijenja.',
                    'pronaći': ' Pronaći znači tražeći otkriti što izgubljeno ili zaboravljeno.',
                    'propovijed': ' Propovijed je dio mise u kojemu svećenik tumači vjerske istine.',
                    'propovijedati': ' Propovijedati znači služiti dio mise u kojemu se tumače vjerske istine.',
                    'propovjedaona': ' Propovjedaona je povišeno mjesto u crkvi s ogradom s kojega propovjednik govori.',
                    'propovjedaonica': ' Propovjedaonica je povišeno mjesto u crkvi s ogradom s kojega propovjednik govori.',
                    'propuh': ' Propuh je struja zraka koja prolazi kroz dva otvora.',
                    'propustiti': ' Propustiti znači pustiti koga ili što da prođe, dati komu prednost.',
                    'propuštati': ' Propuštati znači puštati koga ili što da prođe, davati komu prednost.',
                    'proračun': ' Proračun je približni iznos primitaka i izdataka koji se predviđaju za određeno vrijeme.',
                    'prosinac': ' Prosinac je jedanaesti mjesec u kalendarskoj godini, mjesec između studenoga i siječnja.',
                    'prosječan': ' Prosječan je koji je u skladu s prosjekom, koji je na sredini između dviju veličina.',
                    'prosječno': ' Prosječno znači u prosjeku, tako da je na sredini između dviju veličina.',
                    'prosječnost': ' Prosječnost je osobina ili svojstvo onoga koji se ne ističe, ne odskače od drugih, koji je u skladu s većinom.',
                    'proslava': ' Proslava je svečano obilježavanje kojega važnog događaja.',
                    'prostirač': ' Prostirač je tkanina koja se prostire po najčešće po podu.',
                    'prostor': ' Prostor je neograničena praznina u kojoj je smješten opipljivi svijet.',
                    'prostorija': ' Prostorija je prostor u unutrašnjosti zgrade omeđen zidovima i pregradama.',
                    'prostran': ' Prostran je koji zauzima velik prostor.',
                    'prostrano': ' Prostrano je tako da odražava da što zauzima velik prostor.',
                    'prostranost': ' Prostranost je svojstvo onoga što je prostrano.',
                    'prošli': ' Prošli je koji je prošao, koji više ne postoji.',
                    'prošlost': ' Prošlost je prošlo vrijeme, vrijeme koje više ne postoji.',
                    'protiv': ' Protiv označuje da se tko ili što kreće u smjeru suprotnome od čega.',
                    'protivnica': ' Protivnica je ženska osoba koja izražava protivljenje čemu, koja je protiv koga ili čega.',
                    'protivničin': ' Protivničin je koji pripada protivnici, ženskoj osobi koja se bori s kim za prednost u čemu ili natječe s kim za pobjedu u igri.',
                    'protivnički': ' Protivnički je koji se odnosi na protivnike.',
                    'protivnik': ' Protivnik je osoba bez obzira na spol ili muška osoba koja izražava protivljenje čemu, koja je protiv koga ili čega.',
                    'protivnikov': ' Protivnikov je koji pripada protivniku, osobi bez obzira na spol ili muškoj osobi koja se bori s kim za prednost u čemu ili natječe s kim za pobjedu u igri.',
                    'protokol': ' Protokol je dogovorni oblik prijenosa podataka među računalima.',
                    'proučavati': ' Proučavati znači stjecati znanje o čemu.',
                    'proučiti': ' Proučiti znači steći znanje o čemu.',
                    'provesti': ' Provesti znači vodeći učiniti da tko ili što prođe kroza što.',
                    'provjeravati': ' Provjeravati znači utvrđivati ispravnost ili istinitost čega.',
                    'provjeriti': ' Provjeriti znači utvrditi ispravnost ili istinitost čega.',
                    'provoditi': ' Provoditi znači vodeći činiti da tko ili što prođe kroza što.',
                    'provoz': ' Provoz je prevoženje robe kroz koju državu bez zadržavanja u njoj.',
                    'provozni': ' Provozni je pri kojemu se uzorak uzima osobi koja dolazi automobilom te ne izlazi iz njega tijekom uzorkovanja. ',
                    'proza': ' Proza ja oblik književnoga izražavanja koji se temelji na pripovijedanju, slobodnome ritmu i jeziku bliskomu svakodnevnom govoru.',
                    'proziran': ' Proziran je kroz koji se vidi, kroz koji prolazi svjetlost.',
                    'prozirno': ' Prozirno je tako da se prozire, da prolazi svjetlost.',
                    'prozirnost': ' Prozirnost je svojstvo onoga kroza što se vidi, kroza što prolazi svjetlost.',
                    'prozor': ' Prozor je otvor u zidu, na krovu ili na vozilu, obično zatvoren staklom tako da propušta svjetlo i da se kroz njega može gledati.',
                    'prozorski': ' Prozorski je koji se odnosi na prozor.',
                    'prozujati': ' Prozujati znači proletjeti pored čega velikom brzinom.',
                    'prozujiti': ' Prozujiti znači proletjeti pored čega velikom brzinom.',
                    'prozviždati': ' Prozviždati znači proletjeti pored čega velikom brzinom.',
                    'proždrljiv': ' Proždrljiv je koji mnogo i pohlepno jede.',
                    'proždrljivo': ' Proždrljivo je tako da odražava da tko mnogo i pohlepno jede.',
                    'proždrljivost': ' Proždrljivost je osobina onoga koji je proždrljiv.',
                    'prsa': ' Prsa su prednji dio tijela od vrata do trbuha u kojemu se nalaze srce i pluća.',
                    'prskalica': ' Prskalica je uređaj za prskanje tekućine.',
                    'prsluk': ' Prsluk je dio ženske ili muške odjeće ili nošnje bez rukava koji pokriva prsa i pleća.',
                    'prst': ' Prst je jedan od krajnjih pokretljivih dijelova šake i stopala.',
                    'prsten': ' Prsten je mali kolut koji se nosi na prstu kao ukras ili oznaka čega.',
                    'prstenjak': ' Prstenjak je četvrti prst na ljuskoj ruci koji se nalazi između srednjaka i maloga prsta i na kojemu se nosi prsten.',
                    'prstić': ' Prstić je mali prst.',
                    'pršut': ' Pršut je svinjski but priređen na poseban način i osušen na dimu i zraku.',
                    'prtljaga': ' Prtljaga su stvari koje se nose sa sobom na putovanju, obično kovčezi, torbe i sl. u kojima se nose stvari na putovanju.',
                    'pruga': ' Pruga su dvije usporedno položene tračnice.',
                    'prut': ' Prut je tanka odrezana grana drveta, grma ili loze.',
                    'prvački': ' Prvački je koji se odnosi na prvake, osobe bez obzira na spol ili muške osobe koje su najbolje u čemu.',
                    'prvak': ' Prvak je osoba bez obzira na spol ili muška osoba koja je najbolja u čemu.',
                    'prvakinja': ' Prvakinja je ženska osoba koja je najbolja u čemu.',
                    'prvakinjin': ' Prvakinjin je koji pripada prvakinji.',
                    'prvakov': ' Prvakov je koji pripada prvaku, muškoj osobi koja je najbolja u čemu.',
                    'prvaš': ' Prvaš je učenik (bez obzira na spol ili muškoga spola) prvoga razreda osnovne ili srednje škole.',
                    'prvašev': ' Prvašev je koji pripada prvašu.',
                    'prvašica': ' Prvašica je učenica prvoga razreda osnovne ili srednje škole.',
                    'prvašičin': ' Prvašičin je koji pripada prvašici.',
                    'prvaški': ' Prvaški je koji se odnosi na prvaše.',
                    'prvenstvo': ' Prvenstvo je prednost.',
                    'prvi': ' Prvi je koji je iza nultoga, a prije drugoga, kojim započinje nabrajanje u kakvu nizu.',
                    'prvo': ' Prvo znači na prvome mjestu, u prvome redu, prije svega ostaloga.',
                    'pržilica': ' Pržilica je uređaj za zapisivanje podataka na CD i DVD.',
                    'psiholog': ' Psiholog je odrasla osoba bez obzira na spol ili muškarac koji se bavi psihologijom kao strukom.',
                    'psihologinja': ' Psihologinja je odrasla ženska osoba koja se bavi psihologijom kao strukom.',
                    'psihologinjin': ' Psihologinjin je koji pripada psihologinji.',
                    'psihologov': ' Psihologov je koji pripada psihologu.',
                    'psihološki': ' Psihološki je koji se odnosi na psihologe.',
                    'psihoza': ' Psihoza je teška psihička bolest prouzročena poremećajima u mozgu.',
                    'psika': ' Psika je piskav zvuk koji nastaje snažnim istiskivanjem zraka kroz stisnute zube ili usne.',
                    'psikati': ' Psikati znači glasati se psikom.',
                    'pst': ' Usklikom 
                    ',
                    'pšenica': ' Pšenica je žitarica s malim žutosmeđim duguljastim jestivim zrnatim plodovima.',
                    'ptica': ' Ptice su razred dvonožnih toplokrvnih kralježnjaka koji nesu jaja, obrasli su perjem, mogu letjeti zahvaljujući krilima, laganomu i čvrstomu kosturu te prilagođenomu dišnom sustavu.',
                    'ptičica': ' Ptičica je mala ptica.',
                    'publika': ' Publika su gledatelji i slušatelji koje predstave ili priredbe.',
                    'pucati': ' Pucati znači slabiti fizičku povezanost i stvarati rupe ili se razbijati na manje dijelove.',
                    'puckati': ' Puckati znači proizvoditi tih, praskav zvuk.',
                    'pucketati': ' Pucketati znači proizvoditi tih, praskav zvuk.',
                    'pučiški': ' Pučiški je koji se odnosi na Pučišća i Pučišćane.',
                    'puh': ' Puh je šumski glodavac odozgo sive, smeđe ili žućkaste boje i bijeloga trbuha te dugoga repa, koji je aktivan noću i spava zimski san.',
                    'puhati': ' Puhati znači jakim izdisajima pokretati struju zraka.',
                    'puhnuti': ' Puhnuti znači jakim izdisajem pokrenuti struju zraka.',
                    'puknuti': ' Puknuti znači oslabiti fizičku povezanost i stvoriti rupe ili se razbiti na manje dijelove.',
                    'pukovnica': ' Pukovnica je žena s činom pukovnika.',
                    'pukovničin': ' Pukovničin je koji pripada pukovnici.',
                    'pukovnički': ' Pukovnički je koji se odnosi na pukovnike.',
                    'pukovnik': ' Pukovnik je viši časnički čin u kopnenoj vojsci i ratnome zrakoplovstvu, nadređen časničkom činu bojnika, a podređen časničkom činu brigadira.',
                    'pukovnikov': ' Pukovnikov je koji pripada pukovniku.',
                    'pulover': ' Pulover je pleteni odjevni predmet za gornji dio tijela koji se oblači preko glave.',
                    'pulski': ' Pulski je koji se odnosi na Pulu i Puljane.',
                    'pun': ' Pun je koji sadržava onoliko koliko može primiti ili smjestiti.',
                    'puniti': ' Puniti znači činiti što punim, dodavati sadržaj u što.',
                    'puno': ' Puno označuje veliku količinu ili mjeru.',
                    'punjač': ' Punjač je uređaj koji električnom energijom puni bateriju ili akumulator.',
                    'pupoljak': ' Pupoljak je razvijeni zametak na stabljici iz kojega se razvija cvijet.',
                    'pura': ' Pura je ženka purana.',
                    'puran': ' Puran je domaća životinja iz razreda ptica, gole glave i vrata prekrivenog crvenim bradavicama bez obzira na spol ili muškoga spola.',
                    'pureći': ' Pureći je koji se odnosi na purane.',
                    'puretina': ' Puretina je pureće meso.',
                    'purica': ' Purica je ženka purana.',
                    'pust': ' Pust je koji nije naseljen.',
                    'pustinja': ' Pustinja je područje koje je zbog male količine oborina sušno i u kojemu je život ograničen.',
                    'pustiti': ' Pustiti znači prestati držati što.',
                    'pušač': ' Pušač je osoba ili muškarac koji puši.',
                    'pušačev': ' Pušačev je koji pripada pušaču.',
                    'pušačica': ' Pušačica je žena koja puši.',
                    'pušačičin': ' Pušačičin je koji pripada pušačici.',
                    'pušački': ' Pušački je koji se odnosi na pušače.',
                    'pušiti': ' Pušiti znači uvlačiti i ispuštati duhanski dim.',
                    'puška': ' Puška je vatreno oružje s jednom ili dvijema dugim cijevima.',
                    'puštati': ' Puštati znači prestajati držati što.',
                    'put': ' Put je dug uzak dio tla kojim se prolazi.',
                    'put': ' Put označuje ponavljanje kakve radnje, događaja itd. (uz redne brojeve i pridjeve).',
                    'put': ' Put označuje da je tko ili što usmjereno kakvu cilju.',
                    'puta': ' Puta (uz glavne brojeve i priloge) označuje ponavljanje kakve radnje, događaja itd. ',
                    'putem': ' Putem označuje da je što sredstvo za postizanje čega.',
                    'putnica': ' Putnica je ženska osoba koja putuje, koja je na putovanju.',
                    'putničin': ' Putničin je koji pripada putnici.',
                    'putnički': ' Putnički je koji se odnosi na putnika.',
                    'putnik': ' Putnik je osoba bez obzira na spol ili muška osoba koja putuje, koja je na putovanju.',
                    'putnikov': ' Putnikov je koji pripada putniku.',
                    'putovanje': ' Putovanje je odlazak iz mjesta u mjesto s određenom svrhom, kretanje različitim prijevoznim sredstvima izvan mjesta stalnoga boravka.',
                    'putovanje': ' Putovanje je kretanje čime iz jednoga odredišta u drugo.',
                    'putovati': ' Putovati znači kretati se čime iz jednoga mjesta ili vremenske točke u drugu.',
                    'putovnica': ' Putovnica je isprava kojom se pri prijelazu državne granice dokazuje državljanstvo i identitet.',
                    'puž': ' Puževi su najbrojniji razred kopnenih ili vodenih mekušaca koji najčešće imaju spiralnu kućicu i pokreću se s pomoću stopala, na velikoj glavi nalaze se oči i ticala te nazubljeni usni dio.',
                    'rabin': ' Rabin je židovski vjerski učitelj, voditelj židovske vjerske zajednice.',
                    'rabinov': ' Rabinov je koji pripada rabinu.',
                    'rabinski': ' Rabinski je koji se odnosi na rabine.',
                    'račić': ' Račić je mali rak.',
                    'račji': ' Račji je koji se odnosi na rakove, pripadnike istoimenoga razreda člankonožaca.',
                    'račun': ' Račun je postupak kojim se računa.',
                    'računalni': ' Računalni je koji se odnosi na računala i računalstvo. ',
                    'računalo': ' Računalo je elektronički uređaj koji prima, obrađuje i sprema različite podatke.',
                    'računalstvo': ' Računalstvo je elektronička djelatnost i znanstvena grana koja se bavi računalima.',
                    'računati': ' Računati znači utvrđivati ili određivati što s pomoću računa, izvoditi računsku operaciju.',
                    'rad': ' Rad je svjesna ljudska tjelesna i duhovna djelatnost koja ima svrhu da se učini što korisno.',
                    'radar': ' Radar je uređaj koji odašilje i prima radiovalove omogućujući tako određivanje položaj, udaljenost, smjer i brzinu kakva objekta.',
                    'radi': ' Radi označuje da je što namjera, svrha čemu.',
                    'radio': ' Radio je uređaj s pomoću kojega se sluša glazba, vijesti i sl.',
                    'radiona': ' Radiona je prostorija ili prostor u kojemu se što proizvodi ili popravlja.',
                    'radionica': ' Radionica je prostorija ili prostor u kojemu se što proizvodi ili popravlja.',
                    'raditi': ' Raditi znači ulagati rad s namjerom da se što postigne.',
                    'radni': ' Radni je koji se odnosi na rad.',
                    'radnica': ' Radnica je ženska osoba koja radi, koja obavlja poslove za plaću.',
                    'radničin': ' Radničin je koji pripada radnici, osobi koja radi, koja obavlja poslove za plaću.',
                    'radnički': ' Radnički je koji se odnosi na radnike.',
                    'radnik': ' Radnik je osoba bez obzira na spol ili muška osoba koja radi, koja za plaću obavlja poslove.',
                    'radnikov': ' Radnikov je koji pripada radniku, osobi bez obzira na spol ili muškoj osobi koja radi, koja za plaću obavlja poslove.',
                    'rado': ' Rado je s voljom, sa zadovoljstvom.',
                    'radost': ' Radost je stanje ili osjećaj velikoga zadovoljstva.',
                    'radovati': ' Radovati koga znači izazivati radost u kome.',
                    'rađaona': ' Rađaona je prostorija u kojoj se rađa.',
                    'rađaonica': ' Rađaonica je prostorija u kojoj se rađa.',
                    'rađati': ' Rađati koga znači donositi ga na svijet (o djetetu, djeci).',
                    'rahitis': ' Rahitis je bolest koju u dječjoj dobi prouzročuje nedostatak vitamina D u organizmu, pri čemu dolazi do nepravilna rasta kostiju.',
                    'raj': ' Raj je prema vjerovanju mnogih religija (kršćanstva, židovstva, islama i budizma) mjesto vječnoga života i zajedništva s Bogom na koje se dolazi nakon smrti.',
                    'rajčica': ' Rajčica je jednogodišnja povrtna biljka duboka korijena i dlakave žilave razgranate stabljike sa žućkastim cvjetovima u grozdastome cvatu.',
                    'rak': ' Rakovi su razred člankonožaca koji dišu škrgama, na glavi imaju dva para ticala, tijelo prekriveno oklopom i najčešće imaju kliješta na prednjih udovima koja služe za hvatanje plijena.',
                    'raketa': ' Raketa je letjelica koja služi za svemirski let.',
                    'raketoplan': ' Raketoplan je raketna letjelica.',
                    'rakija': ' Rakija je žestoko alkoholno piće koje se proizvodi od voća ili žitarica.',
                    'rakov': ' Rakov je koji pripada raku, pripadniku istoimenoga razreda člankonožaca.',
                    'ral': ' Ral je mjerna jedinica za površinu zemljišta (5745 četvornih metara).',
                    'ralo': ' Ralo je drveno oruđe sa željeznim nožem koji reže i razgrće zemlju pri oranju.',
                    'ramazan': ' Ramazan je mjesec muslimanskoga posta.',
                    'rame': ' Rame je dio tijela između vrata i nadlaktice.',
                    'ramski': ' Ramski je koji se odnosi na Ramu i Ramljake.',
                    'rana': ' Rana je površinsko oštećenje tjelesnoga tkiva prouzročeno djelovanjem vanjske sile.',
                    'ranije': ' Ranije znači u proteklom, prošlom vremenu.',
                    'rano': ' Rano je prije očekivanoga ili uobičajenoga vremena.',
                    'ranjenica': ' Ranjenica je ženska osoba koja je ranjena, koja ima rane.',
                    'ranjeničin': ' Ranjeničin je koji pripada ranjenici.',
                    'ranjenički': ' Ranjenički je koji se odnosi na ranjenike.',
                    'ranjenik': ' Ranjenik je osoba bez obzira na spol ili muška osoba koja je ranjena, koja ima rane.',
                    'ranjenikov': ' Ranjenikov je koji pripada ranjeniku.',
                    'rapski': ' Rapski je koji se odnosi na Rab i Rabljane.',
                    'raskrižje': ' Raskrižje je mjesto na kojemu se prometnice križaju.',
                    'rasplinjač': ' Rasplinjač je uređaj za raspršivanje tekućega goriva.',
                    'raspolagati': ' Raspolagati čime znači služiti se čime po vlastitoj volji.',
                    'raspored': ' Raspored je utvrđen vremenski slijed planiranih događaja, obveza ili aktivnosti.',
                    'rasprava': ' Rasprava je razgovor o određenoj temi, tijekom kojega se argumentirano iznosi vlastito mišljenje te osvrt na već rečeno.',
                    'raspravljati': ' Raspravljati znači razmatrati što sa željom da se objasni.',
                    'raspršivač': ' Raspršivač je naprava ili uređaj za raspršivanje tekućine.',
                    'rast': ' Rast je povećavanje jedinke povećanjem broja stanica ili veličinom postojećih stanica.',
                    'rastanak': ' Rastanak je prestanak druženja ili trenutak u kojemu svatko kreće na svoju stranu.',
                    'rasti': ' Rasti znači protezati se u visinu i širinu, postajati višim ili većim.',
                    'rastresen': ' Rastresen je koji se misaono ne može usmjeriti na što.',
                    'rastreseno': ' Rastreseno je tako da odražava da je se tko misaono ne može usmjeriti na što.',
                    'rastresenost': ' Rastresenost je stanje onoga koji se mislima ne može usmjeriti na što.',
                    'rastrošan': ' Rastrošan je koji prekomjerno troši novčana sredstva.',
                    'rastrošno': ' Rastrošno je tako da odražava prekomjernu potrošnju novčanih sredstava.',
                    'rastrošnost': ' Rastrošnost je osobina onoga koji je rastrošan ili svojstvo onoga što je rastrošno.',
                    'raščlamba': ' Raščlamba je iscrpno istraživanje i rastavljanje kakve složene cjeline na sastavne dijelove radi boljega razumijevanja ili znanstvenoga israživanja. ',
                    'rašeljka': ' Rašeljka je divlji grm ili stablo koje se može upotrijebiti kao podloga za cijepljene voćke.',
                    'rat': ' Rat je oružani sukob velikih razmjera, borba među državama, narodima ili skupinama uz velike ljudske žrtve.',
                    'ratni': ' Ratni je koji se odnosi na rat, koji je namijenjen ratovanju.',
                    'ratnica': ' Ratnica je ženska osoba koja sudjeluje u ratu.',
                    'ratničin': ' Ratničin je koji pripada ratnici.',
                    'ratnički': ' Ratnički je koji se odnosi na osobe koje ratuju.',
                    'ratnik': ' Ratnik je osoba bez obzira na spol ili muška osoba koja sudjeluje u ratu.',
                    'ratnikov': ' Ratnikov je koji pripada ratniku.',
                    'ravan': ' Ravan je koji je posvuda iste visine.',
                    'ravanjski': ' Ravanjski je koji se odnosi na Ravno i Ravnjane.',
                    'ravnalo': ' Ravnalo je dio crtaćega pribora koji služi za mjerenje i povlačenje ravnih crta.',
                    'ravnatelj': ' Ravnatelj je odrasla osoba bez obzira na spol ili muškarac koji upravlja kakvom ustanovom.',
                    'ravnateljev': ' Ravnateljev je koji pripada ravnatelju.',
                    'ravnateljica': ' Ravnateljica je odrasla žena koja upravlja kakvom ustanovom.',
                    'ravnateljičin': ' Ravnateljičin je koji pripada ravnateljici.',
                    'ravnateljski': ' Ravnateljski je koji se odnosi na ravantelja i ravnateljstvo.',
                    'ravnati': ' Ravnati znači činiti kakvu površinu ravnom, uklanjati neravnine.',
                    'ravno': ' Ravno je bez vijuganja ili skretanja, po zamišljenome pravcu.',
                    'ravnokotarski': ' Ravnokotarski je koji se odnosi na Ravne Kotare i Ravnokotarce.',
                    'ravnopravan': ' Ravnopravan je koji je s kim izjednačen u pravima ili je po čemu jednak s kim drugim.',
                    'ravnopravno': ' Ravnopravno je tako da odražava izjednačenost u pravima ili jednakost u čemu s kime drugim.',
                    'ravnopravnost': ' Ravnopravnost je stanje onoga koji je ravnopravan ili svojstvo onoga što je ravnopravno.',
                    'raz.': ' Raz. je kratica za razred.',
                    'razdoblje': ' Razdoblje je vremenski odsječak.',
                    'razdragan': ' Razdragan je koji je ispunjen velikom radošću i dobrim raspoloženjem.',
                    'razdragano': ' Razdragano je tako da odražava ispunjenost velikom radošću i dobrim raspoloženjem.',
                    'razdraganost': ' Razdraganost je stanje onoga koji je razdragan ili svojstvo onoga što je razdragano.',
                    'razglas': ' Razglas je uređaj za prijenos obavijesti i glazbe na javnim mjestima.',
                    'razgledati': ' Razgledati znači pomno promatrati što.',
                    'razgledavati': ' Razgledavati znači pomno promatrati što.',
                    'razglednica': ' Razglednica je komad debljega papira, najčešće pravokutni, koji s prednje strane ima otisnut motiv (najčešće fotografiju ili crtež naselja, krajolika, spomenika i sl.), a namijenjena je pisanju poruka i slanju poštom bez omotnice.',
                    'razgovarati': ' Razgovarati s kim znači sporazumijevati se govorom, glasno izgovorenim riječima razmjenjivati misli, voditi s kim razgovor.',
                    'razgovijetan': ' Razgovijetan je koji je izgovoren jasno i razumljivo.',
                    'razgovijetno': ' Razgovijetno je tako da odražava da je što izgovoreno jasno i razumljivo.',
                    'razgovijetnost': ' Razgovijetnost je svojstvo onoga što je razgovijetno.',
                    'razgovor': ' Razgovor je usmena razmjena mišljenja između dviju osoba ili među više osoba.',
                    'razigran': ' Razigran je koji je prepušten igri i u njoj uživa.',
                    'razigrano': ' Razigrano je tako da odražava prepuštenost igri.',
                    'razigranost': ' Razigranost je osobina onoga koji je razigran ili svojstvo onoga što je razigrano.',
                    'razina': ' Razina je visina do koje dopire koja tekućina.',
                    'različit': ' Različit je koji se razlikuje od onoga s kojim se uspoređuje.',
                    'različito': ' Različito znači tako da odražava različitost.',
                    'različitost': ' Različitost je osobina onoga koji je različit ili svojstvo onoga što je različito',
                    'razlika': ' Razlika je svojstvo po kojemu je jedna stvar drukčija od druge.',
                    'razlikovati': ' Razlikovati što znači biti svjestan razlike među stvarima, bićima i pojavama, znati da je što različito od čega.',
                    'razlog': ' Razlog je činjenica koja je uzrok čemu.',
                    'razmisliti': ' Razmisliti o komu ili čemu znači usmjeriti misli na koga ili što kako bi se donio sud ili mišljenje o čemu.',
                    'razmišljati': ' Razmišljati o komu ili čemu znači usmjeravati misli na koga ili što kako bi se donio sud ili mišljenje o čemu.',
                    'razni': ' Razni su koji su neodređene vrste, dobi, spola ili svojstava.',
                    'razred': ' Razred je stupanj obrazovanja u osnovnoj i srednjoj školi.',
                    'razum': ' Razum je sposobnost shvaćanja, mišljenja i zaključivanja.',
                    'razumijevati': ' Razumijevati znači spoznavati bit, smisao ili značenje čega.',
                    'razumjeti': ' Razumjeti znači spoznati bit, smisao ili značenje čega.',
                    'razumljiv': ' Razumljiv je koji se može razumjeti.',
                    'razumljivo': ' Razumljivo je tako da se može razumjeti.',
                    'razumljivost': ' Razumljivost je svojstvo onoga što je razumljivo.',
                    'razvodnica': ' Razvodnica je žena s činom razvodnika.',
                    'razvodnica': ' Razvodnica je granica između porječja ili sljevova.',
                    'razvodničin': ' Razvodnički je koji se odnosi na razvodnike.',
                    'razvodnički': ' Razvodnički je koji se odnosi na razvodnike, odrasle osobe bez obzira na spol ili muškarce s istoimenim činom.',
                    'razvodnik': ' Razvodnik je niži vojnički čin u svim rodovima vojske, viši od čina pozornika.',
                    'razvodnikov': ' Razvodnikov je koji pripada razvodniku.',
                    'razvoj': ' Razvoj je postupni rast ili napredak [zemlje u razvoju.',
                    'razvojni': ' Razvojni je koji se odnosi na razvoj.',
                    'ražnjić': ' Ražnjić je štapić na koji su nabodeni komadići mesa (i povrća).',
                    'reaktor': ' Reaktor je postrojenje ili uređaj u kojemu se odvija neka reakcija.',
                    'recepcija': ' Recepcija je primanje i usvajanje intelektualnih i umjetničkih tvorevina.',
                    'recept': ' Recept je pismeni zahtjev koji liječnik upućuje ljekarniku da bolesniku pripremi ili izda određeni lijek.',
                    'reciklirati': ' Reciklirati što znači preraditi/prerađivati otpadno gradivo tako da se ponovno može upotrijebiti.',
                    'rečenica': ' Rečenica je izrečena misao.',
                    'reći': ' Reći znači izraziti ili priopćiti što govoreći.',
                    'red': ' Red je uređeno stanje. ',
                    'redak': ' Redak je niz znakova ispod ili iznad kojega stoji ili može stajati još takvih nizova.',
                    'redoslijed': ' Redoslijed je raspored prema kojemu se nižu događaji, obično u skladu s određenim pravilima.',
                    'redovit': ' Redovit je koji se zbiva prema utvrđenome redu ili rasporedu.',
                    'redovito': ' Redovito znači po određenome redu ili rasporedu.',
                    'redovitost': ' Redovitost je svojstvo onoga koji se zbiva prema utvrđenome redu ili rasporedu.',
                    'redovnica': ' Redovnica je pripadnica katoličkoga ženskog reda koja živi u samostanu te polaže zavjete siromaštva, pobožnosti i čistoće.',
                    'redovničin': ' Redovničin je koji pripada redovnici.',
                    'redovnički': ' Redovnički je koji se odnosi na redovnike.',
                    'redovnički': ' Redovnički je koji se odnosi na redovnice.',
                    'redovnik': ' Redovnik je pripadnik katoličkoga muškog reda koji živi u samostanu te polaže zavjete siromaštva, pobožnosti i čistoće.',
                    'redovnikov': ' Redovnikov je koji pripada redovniku.',
                    'reduktor': ' Reduktor je uređaj koji prilagođuje ili smanjuje brzinu pogonskoga stroja.',
                    'regija': ' Regija je dio Zemljine površine koji ima zajedničke prirodne, povijesne, gospodarske ili političke posebnosti.',
                    'regionalni': ' Regionalni je koji se odnosi na regiju.',
                    'reklama': ' Reklama je medijska obavijest o kojemu proizvodu, usluzi ili događaju kojoj je svrha poticanje na kupnju.',
                    'religija': ' Religija je sustav vjerovanja u Boga ili bogove, obredi i načela kojima se izražava odnos čovjeka prema Bogu.',
                    'religijski': ' Religijski je koji se odnosi na religiju. ',
                    'religiozan': ' Religiozan je koji živi i djeluje u skladu s načelima koje vjere.',
                    'religiozno': ' Religiozno je tako da odražava da tko živi i djeluje u skladu s načelima koje vjere.',
                    'religioznost': ' Religioznost je osobina onoga koji je religiozan ili svojstvo onoga što je religiozno.',
                    'remen': ' Remen je čvrsta vrpca od kože ili kakva drugoga gradiva različitih namjena.',
                    'rendgen': ' Rendgen je uređaj za snimanje i promatranje unutrašnjosti čega s pomoću rendgenskih zraka.',
                    'rep': ' Rep je stražnji izduženi dio tijela kralježnjaka i nekih beskralježnjaka.',
                    'repa': ' Repa je zeljasta kupusnjača zadebljala mesnata korijena.',
                    'repetitor': ' Repetitor je dio odašiljača, uređaj koji dobiva signale i odašilje u televizijsku mrežu na određenome području.',
                    'reprezentacija': ' Reprezentacija je skupina odabranih sportaša koji sudjeluju na natjecanjima.',
                    'republika': ' Republika je sustav državne vlasti u kojemu je vlast naroda uspostavljena na demokratskim načelima, njome vlada jedan ili više izabranih predsjednika na određeno vrijeme.',
                    'respirator': ' Respirator je medicinski uređaj koji omogućuje disanje bolesnicima koji samostalno otežano dišu.',
                    'restoran': ' Restoran je uređeni prostor u kojemu se mogu kupiti i pojesti različita jela.',
                    'rešetka': ' Rešetka je pregrada napravljena od usporedno ili okomito postavljenih prečaka ili kovinskih šipaka.',
                    'reuma': ' Reuma je bolest kostiju, zglobova i mišića popraćena dugotrajnim bolom i nemogućnošću normalnoga kretanja.',
                    'reumatizam': ' Reumatizam je bolest kostiju, zglobova i mišiča popraćena dugotrajnim bolom i nemogućnošću normalnoga kretanja.',
                    'revati': ' Revati znači glasati se revanjem.',
                    'revolver': ' Revolver je lako ručno vatreno oružje s kratkom cijevi i rotirajućim spremnikom.',
                    'rezati': ' Rezati znači oštricom odvajati dijelove čega.',
                    'rezervacija': ' Rezervacija je osiguravanje korištenja kojom uslugom koje se čini unaprijed.',
                    'rezervirati': ' Rezervirati znači privremeno osigurati/osiguravati kakvu uslugu, obaviti/obavljati predbilježbu za što.',
                    'rezultat': ' Rezultat je učinak kakva djelovanja.',
                    'Rh-faktor': ' Rh-faktor antigen je u ljudskoj krvi.',
                    'riba': ' Ribe su razred kralježnjaka koji žive u vodi, dišu škrgama, imaju tijelo prekriveno ljuskama i kreću se perajama.',
                    'ribar': ' Ribar je odrasla osoba bez obzira na spol ili muškarac koji lovi i prodaje ribu, koji živi od ribolova.',
                    'ribarev': ' Ribarev je koji pripada ribaru.',
                    'ribarica': ' Ribarica je ribarski brod.',
                    'ribaričin': ' Ribaričin je koji pripada ribarici.',
                    'ribarnica': ' Ribarnica je mjesto na kojemu se prodaje riba.',
                    'ribarov': ' Ribarov je koji pripada ribaru.',
                    'ribarski': ' Ribarski je koji se odnosi na ribare i ribarstvo.',
                    'ribarstvo': ' Ribarstvo je grana gospodarstva koja se bavi lovom, uzgojem, prodajom i preradbom ribe.',
                    'ribnjak': ' Ribnjak je bazen za uzgoj ribe.',
                    'ribolov': ' Ribolov je lov riba i drugih životinja koje žive u vodi.',
                    'ribolovni': ' Ribolovni je koji se odnosi na ribolov.',
                    'ridati': ' Ridati znači glasno, neutješno plakati.',
                    'riđ': ' Riđ je koji je boje hrđe, koji je crvenkaste i žute boje.',
                    'riječ': ' Riječ je skup glasova (izraz) koji ima svoje značenje (sadržaj) i može stajati samostalno.',
                    'riječki': ' Riječki je koji se odnosi na Rijeku i Riječane.',
                    'riječni': ' Riječni je koji se odnosi na rijeku.',
                    'rijedak': ' Rijedak je kojemu su dijelovi razmaknuti jedan od drugoga ili koji ima malo krutih sastojaka.',
                    'rijeka': ' Rijeka je stalna tekućica koja pod utjecajem sile teže teče i sama svojim tijekom usijeca korito.',
                    'riješiti': ' Riješiti znači donijeti odluku o čemu.',
                    'rijetko': ' Rijetko znači da se što događa u velikim vremskim razmacima.',
                    'rijetkost': ' Rijetkost je svojstvo onoga što je rijetko, kojemu su dijelovi razmaknuti jedan od drugoga ili koji ima malo krutih sastojaka.',
                    'rikati': ' Rikati znači glasati se snažnim i prodornim glasom.',
                    'rikavati': ' Rikavati znači prestajati raditi, prestajati biti u funkciji, kvariti se, trošiti se.',
                    'riknuti': ' Riknuti znači oglasiti se snažnim i prodornim glasom.',
                    'rima': ' Rima je podudaranje slogova na kraju riječi.',
                    'rimokatolički': ' Rimokatolički je koji se odnosi na rimokatolike.',
                    'rimski': ' Rimski je koji se odnosi na Rim i Rimljane.',
                    'ris': ' Risovi su rod životinja iz porodice mačaka te reda zvijeri, crvenkaste su boje s mrljama.',
                    'ritam': ' Ritam je pravilno i uzastopno ponavljanje ili izmjenjivanje zvukova, pokreta, slogova ili pojava.',
                    'riža': ' Riža je suptropska žitarica s malim jestivim okruglim ili duguljastim zrnatim plodovima.',
                    'rižin': ' Rižin je koji se odnosi na rižu, biljku.',
                    'rječnik': ' Rječnik je skup riječi određenoga područja, osobe ili skupine ljudi.',
                    'rješavati': ' Rješavati znači donositi odluke o čemu.',
                    'rješenje': ' Rješenje je odgovor na problem ili situaciju.',
                    'robot': ' Robot je računalno pokretani uređaj, često oblikovan prema ljudskome liku, koji se može kretati, govoriti, obavljati određene radnje i sl.',
                    'ročnica': ' Ročnica je vojnikinja na odsluženju vojnoga roka.',
                    'ročničin': ' Ročničin je koji pripada ročnici.',
                    'ročnički': ' Ročnički je koji se odnosi na ročnike.',
                    'ročnik': ' Ročnik je vojnik na odsluženju vojnoga roka.',
                    'ročnikov': ' Ročnikov je koji pripada ročniku.',
                    'rod': ' Rod je potomstvo jednoga pretka. ',
                    'roda': ' Rode su porodica ptica selica obično bijele ili crne boje, dugih crvenih tankih nogu, crvena kljuna i duga vrata koje žive u močvarnim staništima, a često svijaju svoja gnijezda i na dimnjacima.',
                    'rodbina': ' Rodbina je skup bližih i daljih rođaka s njihovim potomcima',
                    'rodbinski': ' Rodbinski je koji se odnosi na rodbinu.',
                    'roditelj': ' Roditelj je osoba bez obzira na spol ili muška osoba koja ima dijete.',
                    'roditeljev': ' Roditeljev je koji pripada roditelju.',
                    'roditeljica': ' Roditeljica je ženska osoba koja ima dijete.',
                    'roditeljičin': ' Roditeljičin je koji pripada roditeljici.',
                    'roditeljski': ' Roditeljski je koji se odnosi na roditelje.',
                    'roditi': ' Roditi koga znači donijeti ga na svijet (o djetetu).',
                    'rodni': ' Rodni je koji se odnosi na rod. ',
                    'rođ.': ' rođ. je kratica za rođen/rođena.',
                    'rođački': ' Rođački je koji se odnosi na rođake.',
                    'rođak': ' Rođak je osoba bez obzira na spol ili muška osoba koja je s kim u rodbinskoj vezi.',
                    'rođakinja': ' Rođakinja je ženska osoba koja je s kim u rodbinskoj vezi.',
                    'rođakinjin': ' Rođakinjin je koji pripada rođakinji, ženskoj osobi koja je s kim u rodbinskoj vezi.',
                    'rođakov': ' Rođakov je koji pripada rođaku, osobi bez obzira na spol ili muškoj osobi koja je s kim u rodbinskoj vezi.',
                    'rođendan': ' Rođendan je datum u godini na koji se tko rodio.',
                    'rođendanski': ' Rođendanski je koji se odnosi na rođendan.',
                    'rođenje': ' Rođenje je dolazak na svijet rađanjem.',
                    'rog': ' Rog je koštana, šuplja ili puna izraslina na prednjoj strani glave nekih sisavaca.',
                    'rok': ' Rok je zadano ili dogovoreno vrijeme u kojemu treba obaviti koji posao ili ispuniti obvezu.',
                    'roktati': ' Roktati znači glasati se glasom koji podsjeća na rok-rok.',
                    'rola': ' Rola je cipela s kotačima.',
                    'rolanje': ' Rolanje je vožnja na rolama.',
                    'roman': ' Roman je prozna književna vrsta koja obuhvaća najopsežnija djela u kojima se opisuje velik broj likova.',
                    'romanizam': ' Romanizam je riječ ili sveza romanskoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                    'romb': ' Romb je paralelogram kojemu su stranice jednake duljine.',
                    'rombičan': ' Rombičan je koji je nalik rombu.',
                    'romboidan': ' Romboidan je koji nalikuje na romboid, koji je u obliku romboida.',
                    'romobil': ' Romobil je vozilo koje ima dva ili tri kotača, a pokreće se snagom jedne noge ili električnim motorom.',
                    'romon': ' Romon je šum vode ili kiše.',
                    'romoniti': ' Romoniti znači proizvoditi romon.',
                    'ronilac': ' Ronilac je osoba bez obzira na spol ili muška osoba koja roni ili zna roniti.',
                    'ronilački': ' Ronilački je koji se odnosi na ronioce i ronjenje.',
                    'roniočev': ' Roniočev je koji pripada roniocu.',
                    'roniteljica': ' Roniteljica je ženska osoba koja roni ili zna roniti.',
                    'roniteljičin': ' Roniteljičin je koji pripada roniteljici.',
                    'roniti': ' Roniti znači plivati ispod površine vode ili u njezinu dubinu.',
                    'roptati': ' Roptati znači izražavati nezadovoljstvo, negodovati.',
                    'rosa': ' Rosa je skup vodenih kapljica nastalih kondenzacijom vodene pare iz najnižega sloja atmosfere koje se za vedrih noći talože na vodoravnim površinama.',
                    'roštilj': ' Roštilj je željezna rešetkasta naprava za pečenje mesa na žaru.',
                    'roštiljati': ' Roštiljati znači pripremati jelo na roštilju.',
                    'rotkva': ' Rotkva je dvogodišnja povrtna biljka iz porodice krstašica jestiva mesnata korijena.',
                    'rotkvica': ' Rotkvica je mala rotkva.',
                    'rovinjski': ' Rovinjski je koji se odnosi na Rovinj i Rovinjane.',
                    'roza': ' Roza je koji je boje mareličina cvijeta, koji je između bijele i crvene boje.',
                    'ruandski': ' Ruandski je koji se odnosi na Ruandu i Ruanđane.',
                    'rub': ' Rub je brid koji obrubljuje kakvu površinu ili šupljinu.',
                    'rubac': ' Rubac je četvrtast komad tkanine ili platna koji se nosi preko glave, oko vrata ili preko ramena.',
                    'rubeola': ' Rubeola je virusna zarazna bolest koja se kapljično širi.',
                    'rublje': ' Rublje je donja odjeća koja se oblači na golo tijelo i nosi ispod odijela ili haljine.',
                    'ručak': ' Ručak je glavni dnevni obrok koji se jede ili sredinom dana ili nakon posla.',
                    'ručati': ' Ručati znači pojesti/jesti ručak.',
                    'ruče': ' Ruče su naprava za tjelovježbu koja se sastoji od dviju vodoravnih motka na nosačima.',
                    'ručnik': ' Ručnik je komad tkanine kojim se brišu ruke, lice i tijelo nakon pranja ili kupanja.',
                    'rudnik': ' Rudnik je mjesto na površini ili ispod zemlje odakle se kopanjem vadi ruda.',
                    'rugati se': ' Rugati se znači činiti koga ili što smiješnim, izlagati koga ili što ruglu, govoriti pogrdno o kome ili čemu.',
                    'rujan': ' Rujan je deveti mjesec u kalendarskoj godini, mjesec između kolovoza i listopada.',
                    'ruka': ' Ruka je gornji ljudski ud koji služi za hvatanje i držanje.',
                    'rukav': ' Rukav je dio odjeće koji pokriva ruku.',
                    'rukavica': ' Rukavica je odjevni predmet za šaku i prste koji ih štiti od hladnoće, nečistoće, prevelike topline i sl.',
                    'rukomet': ' Rukomet je sportska igra dviju momčadi u kojoj se lopta dobacuje rukom, a cilj je postići više pogodaka u protivničku mrežu od protivnika.',
                    'rukometaš': ' Rukometaš je osoba bez obzira na spol ili muška osoba koja se bavi rukometom.',
                    'rukometašev': ' Rukometašev je koji pripada rukometašu.',
                    'rukometašica': ' Rukometašica je ženska osoba koja se bavi rukometom.',
                    'rukometašičin': ' Rukometašičin je koji pripada rukometašici.',
                    'rukometaški': ' Rukometaški je koji se odnosi na rukometaše i rukomet.',
                    'rukopis': ' Rukopis je oblikovanje slova u pisanju rukom.',
                    'rukovati': ' Rukovati čime znači upotrebljavati što, služiti se ili ručno upravljati čime.',
                    'rukovati se': ' Rukovati se znači dati/davati jedan drugomu ruku u znak pozdrava, obećanja, davanja riječi, pogodbe i sl.',
                    'rukovoditi': ' Rukovoditi čime znači voditi kakav posao, upravljati kakvim tijelom.',
                    'rum': ' Rum je alkoholno piće koje se dobiva destilacijom šećerne trske.',
                    'rumen': ' Rumen je koji je svjetlocrvene boje.',
                    'rumunjski': ' Rumunjski je koji se odnosi na Rumunje i Rumunjsku.',
                    'rupa': ' Rupa je šupljina ili otvor u čemu.',
                    'rupčić': ' Rupčić je mali rubac.',
                    'ruski': ' Ruski je koji se odnosi na Ruse i Rusiju.',
                    'ruža': ' Ruže su porodica višegodišnjega drvenastog bilja koja se uzgaja radi cvijeta.',
                    'ružan': ' Ružan je koji svojim izgledom, zvukom ili drugom značajkom izaziva loš dojam.',
                    'ružičast': ' Ružičast je koji je boje mareličina cvijeta, koji je između bijele i crvene boje.',
                    'ružičasto': ' Ružičasto znači tako da se u svemu nađe dobra strana.',
                    'ružmarin': ' Ružmarin je vazdazeleni sredozmeni grm iz porodice usnača aromatičnih igličastih listova.',
                    'ružno': ' Ružno znači tako da  svojim izgledom, zvukom ili drugom značajkom izaziva loš dojam.',
                    'rzati': ' Rzati znači glasati se glasom koji podsjeća na rr-rr.',
                    's(a)': ' S označuje da kretanje započinje na gornjoj ili vanjskoj strani čega.',
                    'sabirnica': ' Sabirnica je skup vodiča koji služe za prijenos podataka i adresa između mikroprocesora i ostalih dijelova računalnoga sustava.',
                    'sablja': ' Sablja je hladno ručno oružje koje se sastoji od drška i zakrivljene oštrice.',
                    'sad': ' Sad znači u ovome trenutku, u trenutku u kojemu govoritelj govori.',
                    'sada': ' Sada znači u ovome trenutku, u trenutku u kojemu govoritelj govori.',
                    'sadašnjost': ' Sadašnjost je vrijeme koje upravo traje, današnje, sadašnje vrijeme.',
                    'sadržaj': ' Sadržaj je ono što se u čemu nalazi, čime je što ispunjeno.',
                    'sag': ' Sag je pokrivač za pod, obično izrađen od vune, lanenih, pamučnih ili svilenih niti.',
                    'sako': ' Sako je kratak kaput, gornji dio muškoga odijela ili ženskoga kostima.',
                    'saksofon': ' Saksofon je limeno puhaće glazbalo opsega oko dvije i pol oktave.',
                    'saksofonist': ' Saksofonist je osoba bez obzira na spol ili muška osoba koja svira saksofon.',
                    'saksofonistica': ' Saksofonistica je ženska osoba koja svira saksofon.',
                    'saksofonističin': ' Saksofonističin jekoji pripada saksofonistici.',
                    'saksofonistički': ' Saksofonistički je koji se odnosi na saksofoniste.',
                    'saksofonistov': ' Saksofonistov je koji pripada saksofonistu.',
                    'saksofonski': ' Saksofonski je koji se odnosi na saksofone.',
                    'salama': ' Salama je trajna kobasica, obično od grubo nasjeckana mesa.',
                    'salata': ' Salata je jednogodišnja povrtna zeljasta biljka iz porodice glavočika koja raste u lisnatim glavicama.',
                    'salonka': ' Salonke su svečana ženska obuća, obično s potpeticom.',
                    'sam': ' Sam je koji je bez ostalih pripadnika svoje skupine ili bez društva.',
                    'samo': ' Samo naglašuje malu količinu čega.',
                    'samoborski': ' Samoborski je koji se odnosi na Samobor i Samoborce.',
                    'samoglasnik': ' Samoglasnik je glas pri čijemu je izgovoru otvoren prolaz zračnoj struji.',
                    'samoizolacija': ' Samoizolacija je kućna izolacija osoba koje imaju simptome zaraze ili osoba koje ne pokazuju simptome zaraze, ali su boravile u epidemijom zahvaćenim područjima ili su bile u kontaktu sa zaraženim osobama.',
                    'samostalan': ' Samostalan je koji je sposoban postupati u skladu s vlastitim uvjerenjima ili mogućnostima.',
                    'samostalno': ' Samostalno je tako da odražava da je tko sposoban postupati u skladu s vlastitim uvjerenjima ili mogućnostima.',
                    'samostalnost': ' Samostalnost je osobina koji postupa u skladu s vlastitim uvjerenjima ili mogućnostima.',
                    'samouvjeren': ' Samouvjeren je koji vjeruje u sebe i svoje sposobnosti.',
                    'samouvjereno': ' Samouvjereno je tako da odražava vjerovanje u sebe i svoje sposobnosti.',
                    'samouvjerenost': ' Samouvjerenost je osobina onoga koji je samouvjeren ili svojstvo onoga što je samouvjereno.',
                    'san': ' San je niz slika i događaja koje tko vidi i proživljava dok spava.',
                    'sandala': ' Sandale su lagana ljetna obuća, obično od kože, s čvrstim potplatom, otvorenim prstima i petom.',
                    'sanduk': ' Sanduk je četvrtasta kutija.',
                    'sanjati': ' Sanjati znači imati san ili snove tijekom spavanja.',
                    'sanjke': ' Sanjke su naprava kojom se spušta niz snježnu padinu.',
                    'saonice': ' Saonice su vozilo s daskama nalik na skije koje se pokreće s pomoću zaprege, vjetra ili na motorni pogon.',
                    'sapun': ' Sapun je tvrdo ili tekuće sredstvo koje služi za pranje.',
                    'sarajevski': ' Sarajevski je koji se odnosi na Sarajevo i Sarajlije.',
                    'SARS-CoV-2': ' SARS-CoV-2 (kratica od engl. 
                    ',
                    'sastajati se': ' Sastajati se znači viđati se s kim prema dogovoru.',
                    'sastanak': ' Sastanak je dogovoreni susret.',
                    'sastati se': ' Sastati se znači vidjeti se s kim prema dogovoru.',
                    'sastav': ' Sastav je gradivo ili dijelovi od kojih je što načinjeno ili složeno.',
                    'sastavak': ' Sastavak je pismeni tekst o kojoj zadanoj temi, pismena obradba određene teme.',
                    'sasvim': ' Sasvim je tako da se što obuhvaća u punome opsegu, u cjelini i bez ostatka.',
                    'sat': ' Sat je mjerna jedinica za vrijeme, 3600 sekunda (h).',
                    'satnica': ' Satnica je žena s činom satnika.',
                    'satničin': ' Satničin je koji pripada satnici, ženi s činom satnika.',
                    'satnički': ' Satnički je koji se odnosi na satnike.',
                    'satnik': ' Satnik je niži časnički čin u kopnenoj vojsci i ratnome zrakoplovstvu.',
                    'satnikov': ' Satnikov je koji pripada satniku.',
                    'satrap': ' Satrap je naslov kraljeva namjesnika koji upravlja satrapijom.',
                    'Saturn': ' Saturn je u rimskoj mitologiji bog sjetve i ratarstva.',
                    'sav': ' Sav je koji je u potpunome obuhvatu ili količini, bez iznimke.',
                    'savijača': ' Savijača je jelo od savijena tijesta ispunjena slanim ili slatkim nadjevom.',
                    'savitljiv': ' Savitljiv je koji se lako svija i oblikuje.',
                    'savitljivo': ' Savitljivo je tako da se lako svija i oblikuje.',
                    'savitljivost': ' Savitljivost je svojstvo onoga što je savitljivo.',
                    'savjet': ' Savjet je mišljenje o tome što i kako treba raditi ili kako postupiti u određenome slučaju.',
                    'scena': ' Scena je uređeni prostor s odgovarajućom scenografijom ispred gledališta na kojemu se izvodi predstava.',
                    'sebe': ' Sebe označuje da se radnja vraća na vršitelja radnje.',
                    'sebičan': ' Sebičan je koji misli na sebe i ne pokazuje obzirnost prema drugima.',
                    'sebično': ' Sebično je tako da odražava čiju usmjerenost na samoga sebe i bezobzirnost prema drugima.',
                    'sebičnost': ' Sebičnost je osobina onoga koji je sebičan ili svojstvo onoga što je sebično',
                    'sedam': ' Sedam je broj koji se obilježuje sa 7, za jedan veći od broja šest i za jedan manji od broja osam.',
                    'sedamdeset': ' Sedamdeset je broj koji se obilježuje sa 70, za jedan veći od broja šezdeset devet i za jedan manji od broja sedamdeset jedan.',
                    'sedamdesetak': ' Sedamdesetak je približno sedamdeset, oko sedamdeset.',
                    'sedamdesetero': ' Sedamdesetero je skupina od sedamdeset osoba različita spola.',
                    'sedamdeseti': ' Sedamdeseti je koji je iza šezdeset devetoga, a prije sedamdeset prvoga.',
                    'sedamdesetorica': ' Sedamdesetorica je skupina od sedamdeset muških osoba.',
                    'sedamnaest': ' Sedamnaest je broj koji se obilježuje sa 17, za jedan veći od broja šesnaest i za jedan manji od broja osamnaest.',
                    'sedamnaestero': ' Sedamnaestero je skupina od sedamnaest osoba različita spola.',
                    'sedamnaesti': ' Sedemnaesti je koji je iza šesnaestoga, a prije osamnaestoga.',
                    'sedamsto': ' Sedamsto je broj koji se obilježuje sa 700, za jedan veći od broja šesto devedeset devet i za jedan manji od broja sedamsto jedan.',
                    'sedamstoti': ' Sedamstoti je koji je iza šesto devedeset devetoga, a prije sedamsto prvoga.',
                    'sedmaš': ' Sedmaš je učenik (bez obzira na spol ili muškoga spola) sedmoga razreda osnovne škole.',
                    'sedmašica': ' Sedmašica je učenica sedmoga razreda osnovne škole.',
                    'sedmerac': ' Sedmerac je stih od sedam slogova.',
                    'sedmero': ' Sedmero je skupina od sedam osoba različita spola.',
                    'sedmerokratnik': ' Sedmerokratnik  je broj koji je umnožak zadanoga broja i broja 7, koji je sedam puta veći od zadanoga broja.',
                    'sedmerokut': ' Sedmerokut je geometrijski lik u ravnini omeđen sa sedam stranica.',
                    'sedmerostruk': ' Sedmerostruk je koji ima sedam dijelova, koji se ponavlja sedam puta.',
                    'sedmi': ' Sedmi je koji je iza šestoga, a prije osmoga.',
                    'sedmica': ' Sedmica je brojka koja označuje broj sedam.',
                    'sedmina': ' Sedmina je broj koji pomnožen sa sedam daje cijeli broj.',
                    'sedmomjesečni': ' Sedmomjesečni je koji ima sedam mjeseci.',
                    'sedmorica': ' Sedmorica je skupina od sedam muških osoba.',
                    'seizmograf': ' Seizmograf je uređaj za registraciju gibanja tla i potresa koji čini kombinacija satnoga mehanizma i njihala.',
                    'sekunda': ' Sekunda je osnovna mjerna jedinica za vrijeme (s).',
                    'seliti': ' Seliti koga ili što znači premještati koga ili što s jednoga na drugo mjesto.',
                    'selo': ' Selo je manje naselje, s više od petnaest kućanstava, u kojemu se većina stanovnika bavi poljodjelstvom.',
                    'seljački': ' Seljački je koji se odnosi na seljake.',
                    'seljak': ' Seljak je osoba bez obzira na spol ili muška osoba koja živi na selu i bavi se poljodjelstvom.',
                    'seljakinja': ' Seljakinja je ženska osoba koja živi na selu i bavi se poljodjelstvom.',
                    'seljakinjin': ' Seljakinjin je koji pripada seljakinji.',
                    'seljakov': ' Seljakov je koji pripada seljaku.',
                    'semafor': ' Semafor je stup sa svjetlosnim signalnim uređajem koji regulira promet na gradskim prometnicama, željezničkim prugama i sl.',
                    'sendvič': ' Sendvič je hladno jelo od šunke, sira, namaza ili kakvih drugih namirnica između dviju krišaka kruha ili u pecivu.',
                    'senegalski': ' Senegalski je koji se odnosi na Senegal i Senegalce.',
                    'senzor': ' Senzor je jedna od pet mogućnosti čovjeka i životinje da uspostavi fizički odnos s okolinom.',
                    'senjski': ' Senjski je koji se odnosi na Senj i Senjane.',
                    'seoski': ' Seoski je koji se odnosi na selo.',
                    'serija': ' Serija je skupina istovrsnih predmeta koji po kojemu kriteriju čine cjelinu (npr. po proizvodnji ili nastanku na istome mjestu ili u istome razdoblju, tematskoj povezanosti itd.).',
                    'sestra': ' Sestra je ženska srodnica drugoj osobi ili drugim osobama s kojima ima zajedničke roditelje.',
                    'sestrična': ' Sestrična je tetina, ujakova ili stričeva kći.',
                    'sestričnin': ' Sestričnin je koji pripada sestrični.',
                    'sestrin': ' Sestrin je koji pripada sestri, srodnici drugoj osobi ili drugim osobama sa zajedničkim roditeljima.',
                    'sestrinski': ' Sestrinski je koji se odnosi na sestre, ženske srodnice drugoj osobi ili drugim osobama sa zajedničkim roditeljima.',
                    'sesvetski': ' Sesvetski je koji se odnosi na Sesvete i Sesvećane.',
                    'sezona': ' Sezona je godišnje doba ili dio godine.',
                    'shvatiti': ' Shvatiti znači spoznati bit, smisao ili značenje čega.',
                    'sibilarizacija': ' Sibilarizacija je glasovna promjena u kojoj se suglasnici 
                    ',
                    'sibirski': ' Sibirski je koji se odnosi na Sibir i Sibirce.',
                    'sići': ' Sići znači premjestiti se s višega na niži položaj, s višega na niže mjesto.',
                    'sida': ' Sida je zarazna virusna bolest koja dovodi do teškog poremećaja imunološkog sustava, prenosi se spolnim činom i krvlju.',
                    'sidnejski': ' Sidnejski je koji se odnosi na Sydney i Sidnejce. ',
                    'sidro': ' Sidro je naprava koja ukopana u dno rijeke, jezera ili mora drži plovilo na mjestu.',
                    'sifilis': ' Sifilis je spolna bakterijska zarazna bolest.',
                    'siguran': ' Siguran je koji je dobro i pouzdano ovladao čime.',
                    'sigurno': ' Sigurno je tako da odražava ovladanost čime.',
                    'sigurnost': ' Sigurnost je osobina onoga koji je ovladao čime.',
                    'sijati': ' Sijati znači rukom ili strojem bacati sjeme na zemlju pripremljenu za sjetvu.',
                    'siječanj': ' Siječanj je prvi mjesec u kalendarskoj godini, mjesec između prosinca i veljače.',
                    'siknuti': ' Siknuti što znači reći što oštrim, prigušenim glasom nalik zmijskomu glasanju, obično u bijesu.',
                    'siktati': ' Siktati znači glasati se sitnim, oštrim glasom.',
                    'sila': ' Sila je fizička veličina koja opisuje djelovanje tijela ili polja na neko tijelo te prouzročuje ubrzanje tijela ili promjenu njegova oblika, mjeri se njutnima',
                    'silaziti': ' Silaziti znači premještati se s višega na niži položaj, s višega na niže mjesto.',
                    'silicij': ' Silicij je kemijski element (Si), polukovina, tvori tamne tvrde kristale kovinskoga sjaja, drugi je najprošireniji element u Zemljinoj kori, a kao poluvodič važan je u proizvodnji tranzistora i računala.',
                    'silom': ' Silom znači uz primjenju sile, s pomoću sile.',
                    'silovit': ' Silovit je koji je snažan u naletu, koji sadržava veliku silu.',
                    'silovito': ' Silovito je tako da je snažno u naletu, da sadržava veliku silu.',
                    'silovitost': ' Silovitost je svojstvo onoga što je silovito.',
                    'simpatičan': ' Simpatičan je koji izaziva simpatiju, privlačnost ili sklonost.',
                    'simpatično': ' Simpatično je tako da izaziva simpatiju, privlačnost ili sklonost.',
                    'simulacija': ' Simulacija je postupak kojim se oponaša izvođenje određenoga procesa s pomoću računalnoga programa.',
                    'sin': ' Sin je muško dijete u odnosu na roditelje.',
                    'sinagoga': ' Sinagoga je židovska bogomolja u kojoj se vjernici okupljaju radi vjerskih obreda, čitanja Biblije i molitve; građevina u kojoj se odvija židovski relgijski obred.',
                    'sinoć': ' Sinoć znači prošle večeri.',
                    'sinov': ' Sinov je koji pripada sinu.',
                    'sintaksa': ' Sintaksa je grana gramatike koja proučava ustroj jedinica većih od riječi.',
                    'sintesajzer': ' Sintesajzer je elektronički uređaj za sintezu zvuka koji često s klavijaturom tvori glazbalo.',
                    'sinjski': ' Sinjski je koji se odnosi na Sinj i Sinjane.',
                    'sir': ' Sir je mliječni proizvod koji se dobiva od mlijeka posebnim postupkom.',
                    'sirena': ' Sirena je naprava ili uređaj za davanje zvučnih signala.',
                    'sirijski': ' Sirijski je koji se odnosi na Siriju i Sirijce.',
                    'siromah': ' Siromah je osoba bez obzira na spol ili muška osoba koja je siromašna, koja nema mnogo novca i materijalnih vrijednosti.',
                    'siromahinja': ' Siromahinja je ženska osoba koja je siromašna, koja nema mnogo novca i materijalnih vrijednosti.',
                    'siromahinjin': ' Siromahinjin je koji pripada siromahinji, ženskoj osobi koja je siromašna, koja živi u bijedi.',
                    'siromahov': ' Siromahov je koji pripada siromahu, muškoj osobi koja je siromašna, koja živi u bijedi.',
                    'siromašan': ' Siromašan je koji je ima malo novca, dobara ili drugih vrijednosti.',
                    'siromaški': ' Siromaški je koji se odnosi na siromahe.',
                    'siromašno': ' Siromašno znači s malo novca, dobara ili drugih vrijednosti, tako da odražava čije siromaštvo.',
                    'siromaštvo': ' Siromaštvo je stanje u kojemu su svemu oskudijeva, u kojemu nedostaju osnovni materijalni preduvjeti za dostojanstven život.',
                    'sisački': ' Sisački je koji se odnosi na Sisak i Siščane.',
                    'sisaljka': ' Sisaljka je naprava ili uređaj kojim se crpi, vadi ili usisava voda, benzin, nafta i sl.',
                    'sisavac': ' Sisavci su razred toplokrvnih kralježnaka koji svoju mladunčad hrane majčinim mlijekom, tijelo im je prekriveno dlakom i uglavnom žive na kopnu, čine ih jednootvori, tobolčari i plodvaši ili pravi sisavci.',
                    'sit': ' Sit je koji se dovoljno najeo, koji nije gladan.',
                    'sitan': ' Sitan je koji je veoma malen.',
                    'sitno': ' Sitno znači u maloj mjeri, slabim intenzitetom ili u maloj količini.',
                    'sito': ' Sito je naprava s mrežastim dnom koja služi za sijanje brašna i drugih tvari sitnoga zrna.',
                    'sito': ' Sito je tako da odražava da se tko najeo i da više nije gladan.',
                    'sitost': ' Sitost je stanje onoga koji je sit, koji se dovoljno najeo.',
                    'situacija': ' Situacija je skup okolnosti u kojima se tko ili što nalazi, prilike u kojima se što zbiva.',
                    'siv': ' Siv je koji je boje pepela ili dima.',
                    'siviti': ' Siviti znači bojiti što u sivo, činiti sivim.',
                    'sivjeti': ' Sivjeti znači postajati sivim.',
                    'sjecište': ' Sjecište je točka u kojoj se sijeku crte ili crte i plohe.',
                    'sjećati se': ' Sjećati se koga ili čega znači imati u svijesti predodžbu o kome ili čemu iz prošlosti.',
                    'sjeći': ' Sjeći znači odvajati ili rušiti oštrim oruđem.',
                    'sjedalica': ' Sjedalica je stolac koji je učvršćen ili se može učvrstiti za podlogu.',
                    'sjedalo': ' Sjedalo je naprava za sjedenje u gledalištu, dvorani ili prometnome sredstvu.',
                    'sjedati': ' Sjedati znači počinjati zauzimati položaj u kojemu je težina tijela na donjemu dijelu trupa.',
                    'sjediti': ' Sjediti znači biti u položaju u kojemu je težina tijela na donjemu dijelu trupa.',
                    'sjednica': ' Sjednica je  službeni sastanak koji se održava radi dogovora i donošenja odluka.',
                    'sjekira': ' Sjekira je oštro oruđe za cijepanje drva.',
                    'sjeme': ' Sjeme je zreli sjemeni zametak iz kojega klijanjem nastaje nova biljka',
                    'sjemenik': ' Sjemenik je muška spolna žlijezda koja izlučuje muške spolne hormone i spermije.',
                    'sjemenka': ' Sjemenka je zrno sjemena, razvijeni zametak biljke u privremenome stadiju mirovanja.',
                    'sjena': ' Sjena je mjesto zaklonjeno od sunca.',
                    'sjesti': ' Sjesti znači zauzeti položaj u kojemu je težina tijela na donjemu dijelu trupa.',
                    'sjetiti se': ' Sjetiti se znači prizvati u svijest predodžbu o čemu iz prošlosti.',
                    'sjever': ' Sjever je jedna od četiriju glavnih strana svijeta usmjerena prema sjevernome nebeskom polu (S).',
                    'sjeverni': ' Sjeverni je koji se odnosi na sjever.',
                    'sjeveroistočni': ' Sjeveroistočni je koji se odnosi na sjeveroistok.',
                    'sjeveroistok': ' Sjeveroistok je sporedna strana svijeta između sjevera i istoka (SI).',
                    'sjeverozapad': ' Sjeverozapad je sporedna strana svijeta između sjevera i zapada (SZ).',
                    'sjeverozapadni': ' Sjeverozapadni je koji se odnosi na sjeverozapad.',
                    'skakaona': ' Skakaona je prostor uređen za natjecanje u skokovima na skijama.',
                    'skakaonica': ' Skakaonica je prostor uređen za natjecanje u skokovima na skijama.',
                    'skakati': ' Skakati znači odbacivati se nogama u zrak ili s jednoga mjesta na drugo.',
                    'skakavac': ' Skakavac je ravnokrilac s većim trećim parom nogu koje mu služe za skakanje.',
                    'skela': ' Skela je plovilo za prijevoz preko rijeke koje se s jedne obale na drugu kreće vezano užetom.',
                    'skener': ' Skener je fotoelektrični uređaj koji digitalizira sliku (tekst, crtež, fotografiju, sliku, kod i sl.) u podatke pogodne za računalnu obradu.',
                    'skidati': ' Skidati znači pomicati, premještati što s višega na niži položaj.',
                    'skija': ' Skija je daska sa zavinutim vrhom za kretanje po snijegu i vodi.',
                    'skijaš': ' Skijaš je osoba bez obzira na spol ili muška osoba koja skija.',
                    'skijašev': ' Skijašev je koji pripada skijašu.',
                    'skijašica': ' Skijašica je ženska osoba koja skija.',
                    'skijašičin': ' Skijašičin je koji pripada skijašici.',
                    'skijaški': ' Skijaški je koji se odnosi na skijaše i skijanje.',
                    'skijati': ' Skijati znači baviti se skijanjem, znati skijati.',
                    'skinuti': ' Skinuti znači pomaknuti, premjestiti što s višega na niži položaj.',
                    'skladatelj': ' Skladatelj je osoba bez obzira na spol ili muška osoba koja piše ili sklada glazbu.',
                    'skladateljev': ' Skladateljev je koji pripada skladatelju.',
                    'skladateljica': ' Skladateljica je ženska osoba koja piše ili sklada glazbu.',
                    'skladateljičin': ' Skladateljičin je koji pripada skladateljici.',
                    'skladateljski': ' Skladateljski je koji se odnosi na skladatelje.',
                    'skladba': ' Skladba je glazbeno djelo.',
                    'skladište': ' Skladište je prostor namijenjen smještaju većih količina materijala, robe i proizvoda.',
                    'skladnja': ' Skladnja je grana gramatike koja proučava ustroj jedinica većih od riječi.',
                    'sklop': ' Sklop je cjelina koja se sastoji od više međusobno povezanih elemenata.',
                    'sklopovlje': ' Sklopovlje su svi fizički dijelovi računala.',
                    'skočiti': ' Skočiti znači odbaciti se nogama s jednoga mjesta na drugo.',
                    'skok': ' Skok je odraz nogama i premještanje tijela s jednoga mjesta na drugo.',
                    'skopski': ' Skopski je koji se odnosi na Skoplje i Skopljake.',
                    'skoro': ' Skoro znači za kratko vrijeme, u bliskoj budućnosti.',
                    'skrenuti': ' Skrenuti znači promijeniti čemu smjer ili tijek, usmjeriti što na drugu stranu ili na što drugo.',
                    'skretati': ' Skretati znači mijenjati čemu smjer ili tijek, usmjeriti što na drugu stranu ili na što drugo.',
                    'skriti': ' Skriti znači ne dopustiti da drugi doznaju ono što se još ne zna ili je tajno, prouzročiti da se što ne može otkriti.',
                    'skrivati': ' Skrivati znači ne dopuštati da drugi doznaju ono što se još ne zna ili je tajno, prouzročivati da se što ne može otkriti.',
                    'skroman': ' Skroman je koji se ne razmeće i ne hvali.',
                    'skromno': ' Skromno je tako da odražava da se tko ne razmeće i ne hvali, koji nije pretjeran.',
                    'skromnost': ' Skromnost je osobina onoga koji je skroman, koji se ne razmeće i ne hvali.',
                    'skup': ' Skup je sastanak određenoga broja ljudi.',
                    'skup': ' Skup je koji je ima visoku cijenu, koji stoji mnogo novca.',
                    'skupina': ' Skupina je veći ili manji skup ljudi, predmeta ili pojava. ',
                    'skupiti': ' Skupiti znači kupeći staviti na jedno mjesto.',
                    'skupljati': ' Skupljati znači kupeći stavljati ili usmjeravati na jedno mjesto.',
                    'skupni': ' Skupni je koji se odnosi na skupinu.',
                    'skupnica': ' Skupnica je žena s činom skupnika.',
                    'skupničin': ' Skupničin je koji pripada skupnici.',
                    'skupnik': ' Skupnik je niži dočasnički čin podređen činu desetnika.',
                    'skupnikov': ' Skupnikov je koji pripada skupniku.',
                    'skupo': ' Skupo znači po visokoj cijeni, s mnogo novca.',
                    'skupština': ' Skupština je zasjedanje članova kakve organizacije ili kakve organizirane skupine.',
                    'slab': ' Slab je koji je male tjelesne snage.',
                    'slabo': ' Slabo je tako da se ne ostvaruje u punoj tjelesnoj snazi ili punome djelovanju.',
                    'slabost': ' Slabost je stanje onoga tko se osjeća slabo, koji nema tjelesne snage ili mu je loše.',
                    'sladak': ' Sladak je koji ima okus šećera ili meda.',
                    'sladoled': ' Sladoled je zaleđena slastica od mlijeka, jaja, šećera i različitih dodataka.',
                    'slagalica': ' Slagalica je igra u kojoj igrači od više dijelova sastavljaju traženu sliku.',
                    'slagati': ' Slagati znači stavljati što jedno uz drugo ili jedno na drugo.',
                    'slagati': ' Slagati znači reći neistinu.',
                    'slama': ' Slama su suhe stabljike žitarica nakon vršidbe.',
                    'slamka': ' Slamka je stabljika slame.',
                    'slan': ' Slan je koji ima okus soli ili u kojemu ima soli.',
                    'slanost': ' Slanost je svojstvo onoga što je slano.',
                    'slap': ' Slap je prelijevanje ili spuštanje tekućice niz stijene u koritu.',
                    'slastičarna': ' Slastičarna je ugostiteljski objekt u kojemu se služe slastice.',
                    'slastičarnica': ' Slastičarnica je ugostiteljski objekt u kojemu se služe slastice.',
                    'slati': ' Slati znači upućivati koga ili što kamo ili s određenim zadatkom.',
                    'slatko': ' Slatko znači tako da izaziva dobar dojam, da se sviđa.',
                    'slatkorječiv': ' Slatkorječiv je koji govori lijepo i umiljato, ali neiskreno.',
                    'slatkorječivo': ' Slatkorječivo je tako da odražava da tko govori lijepo i umiljato, ali neiskreno.',
                    'slatkorječivost': ' Slatkorječivost je osobina onoga koji je slatkorječiv ili svojstvo onoga što je slatkorječivo.',
                    'slava': ' Slava je počast ili priznanje zbog uspjeha i dostignuća u kojemu poslu, opća poznatost.',
                    'slavan': ' Slavan je koji je stekao slavu.',
                    'slavina': ' Slavina je naprava za otvaranje i zatvaranje protoka vode, plina ili pare i ostalih tekućina (na bačvi, posudi, cjevovodu).',
                    'slaviti': ' Slaviti znači na različite načine isticati, cijeniti ili hvaliti koga ili što, čije zasluge ili kakva svojstva.',
                    'slavlje': ' Slavlje je svečanost u prigodi kakva uspjeha, blagdana ili sretnoga događaja.',
                    'slavno': ' Slavno je tako da izaziva počast ili priznanje.',
                    'slavonski': ' Slavonski je koji se odnosi na Slavoniju i Slavonce.',
                    'slavonskobrodski': ' Slavonskobrodski je koji se odnosi na Slavonski Brod i Brođane.',
                    'slavuj': ' Slavuj je mala smećkasta ptica pjevica koja gnijezdo gradi na tlu ili na niskoj vegetaciji.',
                    'slezena': ' Slezena je najveći limfni organ u kojemu crvena krvna zrnca prelaze u bijela krvna zrnca.',
                    'sličan': ' Sličan je koji je prema svojim osobinama ili obilježjima može usporediti s kim ili čim drugim.',
                    'slično': ' Slično je tako da odražava da se tko ili što  osobinama ili obilježjima može usporediti s kim ili čim drugim.',
                    'sličnost': ' Sličnost je osobina onoga koji je sličan ili svojstvo onoga što je slično.',
                    'slijediti': ' Slijediti znači ići za kim ili čim.',
                    'slijep': ' Slijep je koji ne vidi, koji nema osjet vida.',
                    'slijepo': ' Slijepo znači tako da se ne propitkuje, da ne posliježe sumnji.',
                    'slika': ' Slika je slikarsko djelo u kojemu se s pomoću linija i boja na plošnoj pozadini daje prikaz zamišljenih ili stvarnih pojava.',
                    'slikar': ' Slikar je osoba ili muškarac koji je umjetnik i bavi se slikanjem.',
                    'slikarev': ' Slikarev je koji pripada slikaru, odrasloj osobi bez obzira na spol ili muškarcu koji je umjetnik i bavi se slikanjem.',
                    'slikarica': ' Slikarica je žena koja je umjetnica i bavi se slikanjem.',
                    'slikaričin': ' Slikaričin je koji pripada slikarici, ženi koja je umjetnica i bavi se slikanjem.',
                    'slikarov': ' Slikarov je koji pripada slikaru, odrasloj osobi bez obzira na spol ili muškarcu koji je umjetnik i bavi se slikanjem.',
                    'slikarski': ' Slikarski je koji se odnosi na slikare i slikarstvo.',
                    'slikarstvo': ' Slikarstvo je grana likovne umjetnosti u kojoj se s pomoću linija i boja na plošnoj pozadini daje prikaz zamišljenih ili stvarnih pojava.',
                    'slikati': ' Slikati znači stvarati slike, slikarska djela.',
                    'slikovit': ' Slikovit je koji izgleda lijepo i ugodno.',
                    'slikovito': ' Slikovito je tako da odražava ispunjenost izražajnim opisima, predočivost u slikama.',
                    'slikovitost': ' Slikovitost je svojstvo onoga što izgleda lijepo i ugodno.',
                    'slikovnica': ' Slikovnica je knjiga slika ili crteža za djecu s veoma malo teksta.',
                    'slina': ' Slina je sluzava bezbojna izlučina žlijezda slinovnica koja vlaži usnu šupljinu i omekšava hranu.',
                    'sloboda': ' Sloboda je mogućnost i pravo da se samostalno misli i radi ono što se želi, stanje bez prisile.',
                    'slobodan': ' Slobodan je koji sam odlučuje o sebi i svojemu ponašanju.',
                    'slobodno': ' Slobodno znači tako da se ima slobodu, bez ograničenja.',
                    'slog': ' Slog je najmanja izgovorna jedinica koju čine jedan samoglasnik i jedan ili više suglasnika.',
                    'slon': ' Slon je najveći kopneni sisavac plodvaš, biljožder koji ima surlu, kljove i velike lepezaste uši, a živi u krdima.',
                    'slovački': ' Slovački je koji se odnosi na Slovačku i Slovake.',
                    'slovenski': ' Slovenski je koji se odnosi na Sloveniju i Slovence.',
                    'slovo': ' Slovo je znak kojim se zapisuje glas.',
                    'složen': ' Složen je koji se teško može shvatiti, obaviti, riješiti.',
                    'složeno': ' Složeno je tako da se satoji od mnogo elemenata.',
                    'složenost': ' Složenost je svojstvo onoga što se teško može shvatiti, obaviti, riješiti.',
                    'slučaj': ' Slučaj je događaj ili stjecaj okolnosti koji nije predviđen ili planiran.',
                    'slučajan': ' Slučajan je koji se gdje zatekao bez namjere ili plana.',
                    'slučajno': ' Slučajno znači bez vlastite volje i namjere.',
                    'slučajnost': ' Slučajnost je događaj koji je nastao bez volje i bez namjere sudionika, stjecaj slučajnih okolnosti.',
                    'sluga': ' Sluga je osoba koja za plaću obavlja kućne i druge poslove u obitelji i na gospodarstvu.',
                    'slugin': ' Slugin je koji pripada slugi.',
                    'sluh': ' Sluh je osjetilo koje omogućuje sposobnost primanja i razlikovanja zvukova s pomoću uha.',
                    'slušalica': ' Slušalica je naprava za slušanje zvuka.',
                    'slušaona': ' Slušaona je prostor u kojemu se što sluša.',
                    'slušaonica': ' Slušaonica je prostor u kojemu se što sluša.',
                    'slušati': ' Slušati što znači primati to sluhom.',
                    'sluškinja': ' Sluškinja je žena koja za plaću obavlja kućne i druge poslove u obitelji i na gospodarstvu.',
                    'sluškinjin': ' Sluškinjin je koji pripada sluškinji.',
                    'služba': ' Služba je redoviti rad ili zaposlenje u javnim djelatnostima.',
                    'služben': ' Služben je koji ne zadire ili ne dopušta zadiranje u osobi život.',
                    'službeni': ' Službeni je koji je povezan s poslom.',
                    'službeno': ' Službeno znači  tako da odbija preveliku bliskost.',
                    'služiti': ' Služiti znači biti u čijoj ili kakvoj službi, pomagati ili donositi korist.',
                    'sljedeći': ' Sljedeći je koji dolazi, slijedi za ovim.',
                    'smanjiti': ' Smanjiti znači učiniti što manjim, manje brojnim, manje obilnim, nižim, rjeđim, ograničenijim, manje snažnim ili učiniti da što ima nižu vrijednost.',
                    'smanjivati': ' Smanjivati znači činiti što manjim, manje brojnim, manje obilnim, nižim, rjeđim, ograničenijim, manje snažnim ili činiti da što ima nižu vrijednost.',
                    'smatrati': ' Smatrati što znači imati svoje mišljenje o čemu.',
                    'smeće': ' Smeće su krupni otpadci koji se skupljaju u vreće i odlažu u spremnike.',
                    'smeđ': ' Smeđ  je koji je boje zemlje, drva ili ploda kestena, koji je između žute, crvene i crne boje.',
                    'smetati': ' Smetati znači narušavati komu mir, red, udobnost ili posao, uznemirivati koga.',
                    'smijati se': ' Smijati se znači ispuštati glasove koji pokazuju veselje i bezbrižnost.',
                    'smijeh': ' Smijeh je glasan izraz radosti popraćen veselim izrazom lica, izazvan kakvim šaljivim događajem ili posebnim i ugodnim osjećajem.',
                    'smiješak': ' Smiješak je mali smijeh.',
                    'smion': ' Smion je koji ne osjeća strah, koji se ne boji upustiti u što.',
                    'smiono': ' Smiono je tako da odražava nepostojanje straha ili čiju smjelost da se upusti u što.',
                    'smionost': ' Smionost je osobina onoga koji je smion, koji ne osjeća strah, koji se ne boji upustiti u što.',
                    'smiren': ' Smiren je koji je ispunjen mirom i nije sklon uzrujavanju.',
                    'smireno': ' Smireno je tako da odražava ispunjenost mirom i nesklonost uzrujavanju.',
                    'smirenost': ' Smirenost je osobina onoga koji je smiren ili svojstvo onoga što je smireno.',
                    'smisao': ' Smisao je dublji razlog zbog kojega što postoji ili se radi.',
                    'smislen': ' Smislen je koji je ispunjen smislom.',
                    'smisleno': ' Smisleno je tako da ima smisla, da ima stvarnih izgleda da se postigne cilj ili rezultat.',
                    'smislenost': ' Smislenost je svojstvo onoga što odražava ispunjenost smislom.',
                    'smjer': ' Smjer je put kojim se što kreće prema kakvu stvarnome ili zamišljenom cilju.',
                    'smjeran': ' Smjeran je koji ne ističe samoga sebe i svoje vrijednosti u odnosu na koga drugoga, koji važnost daje drugomu',
                    'smjerno': ' Smjerno je tako da odražava neisticanje samoga sebe i svojih vrijednosti.',
                    'smjernost': ' Smjernost je osobina onoga koji je smjeran.',
                    'smjeti': ' Smjeti znači imati dopuštenje da se što učini.',
                    'smočnica': ' Smočnica je prostorija za držanje i čuvanje hrane.',
                    'smog': ' Smog je magla puna ispušnih plinova automobila i industrijskoga dima.',
                    'smokva': ' Smokva je sredozemni listopadni grm ili drvo glatke sive kore, širokih listova i kruškolika ploda.',
                    'smreka': ' Smreke su skupina četinjača iz porodice borova koja ima visoka stabla i igličaste listove, plod im je češer koji raste prema dolje na igličastoj grani.',
                    'smršavjeti': ' Smršavjeti znači postati mršavijim ili izgubiti na tjelesnoj težini, izgubiti kilograme.',
                    'smrt': ' Smrt je prestanak života, stanje organizma u kojemu prestaju raditi mozak i srce.',
                    'smrtan': ' Smrtan je koji umire, koji ne živi vječno.',
                    'smrtni': ' Smrtni je koji se odnosi na smrt.',
                    'smrtno': ' Smrtno je tako da prouzročuje smrt.',
                    'smrtnost': ' Smrtnost je osobina onoga koji je smrtan.',
                    'snaga': ' Snaga je tjelesna sposobnost organizma da se kreće i da podnosi teret.',
                    'snažan': ' Snažan je koji ima veliku fizičku ili psihičku snagu.',
                    'snažno': ' Snažno znači s velikom snagom',
                    'snijeg': ' Snijeg je oborina u obliku bijelih pahuljica sastavljenih od ledenih kristala koja nastaje sporom sublimacijom vodene pare u zraku.',
                    'sniježiti': ' Sniježiti znači padati iz oblaka u pahuljicama.',
                    'snimati': ' Snimati znači bilježiti sliku i zvuk elektroničkim uređajima, stvarati ili bilježiti što u obliku filmskoga ili zvučnoga zapisa.',
                    'snimiti': ' Snimiti znači zabilježiti sliku ili zvuk elektroničkim uređajima, stvoriti ili zabilježiti što u obliku filmskoga ili zvučnoga zapisa.',
                    'snjegović': ' Snjegović je lik u obliku čovjeka napravljen od snijega.',
                    'snježan': ' Snježan je u kojemu ima snijega.',
                    'snježni': ' Snježni je koji se odnosi na snijeg.',
                    'soba': ' Soba je prostorija u stanu ili kući u kojoj se boravi, radi, ormara ili spava.',
                    'sobar': ' Sobar je muška osoba ili osoba bez obzira na spol koja se brine za red i čistoću u sobama.',
                    'sobarev': ' Sobarev je koji pripada sobaru.',
                    'sobarica': ' Sobarica je ženska osoba koja se brine za red i čistoću u sobama.',
                    'sobaričin': ' Sobaričin je koji pripada sobarici.',
                    'sobarov': ' Sobarov je koji pripada sobaru.',
                    'sobni': ' Sobni je koji se odnosi na sobu.',
                    'socijalan': ' Socijalni je koji se odnosi na društvo.',
                    'sočan': ' Sočan je koji je ispunjen sokom ili tekućinom (o jelu).',
                    'sočno': ' Sočno je tako da odražava ispunjenost sokom ili tekućinom (o jelu).',
                    'sočnost': ' Sočnost je svojstvo onoga što je sočno.',
                    'softver': ' Softver su neopipljivi dijelovi računala, programi koji omogućuju rad s određenim računalni sastavnicama i uređajima.',
                    'soja': ' Soja je biljka mahunarka visoke hranjive vrijednosti',
                    'sojin': ' Sojin je koji pripada soji, biljci.',
                    'sok': ' Sok je tekućina s hranjivim sastojcima u porama tkiva.',
                    'sokna': ' Sokna je kratka čarapa koja seže do iznad gležnja.',
                    'sokol': ' Sokoli/Sokolovi su red dnevnih ptica grabljivica velikih zaobljenih krila, velikih očiju, kratka vrata i duga repa s bijelom prugom iznad očiju.',
                    'sol': ' Sol je slana bijela zrnata tvar koja se nalazi u morskoj vodi ili pod zemljom i koja se upotrebljava kao dodatak hrani.',
                    'solinski': ' Solinski je koji se odnosi na Solin i Solinjane.',
                    'soliti': ' Soliti znači dodavati ili utrljavati sol kao začin.',
                    'solunski': ' Solunski je koji se odnosi na Solun i Solunjane.',
                    'som': ' Somovi su porodica riba zrakoperki iz razreda koštunjača.',
                    'somalski': ' Somalski je koji se odnosi na Somaliju i Somalce.',
                    'sonda': ' Sonda je naprava za mjerenje dubine vode.',
                    'sopilaš': ' Sopilaš je osoba bez obzira na spol ili muška osoba koja svira sopile.',
                    'sopilašev': ' Sopilašev je koji pripada sopilašu.',
                    'sopilašica': ' Sopilašica je ženska osoba koja svira sopile.',
                    'sopilašičin': ' Sopilašičin je koji pripada sopilašici.',
                    'sopilaški': ' Sopilaški je koji se odnosi na sopile i sopilaše.',
                    'sopile': ' Sopile su drveno puhaće glazbalo s piskom, rašireno u Istri i na Kvarneru.',
                    'sova': ' Sove su porodica ptica iz reda sovovka mala kukasta kljuna koje plijen hvataju pandžama.',
                    'spaliona': ' Spaliona je mjesto na kojemu se spaljuje otpad.',
                    'spalionica': ' Spalionica je mjesto na kojemu se spaljuje otpad.',
                    'spaliti': ' Spaliti znači uništiti vatrom ili visokom temperaturom.',
                    'spaljivati': ' Spaljivati znači uništavati vatrom ili visokom temperaturom.',
                    'spasiti': ' Spasiti znači spriječiti uništenje ili propadanje čega.',
                    'spašavati': ' Spašavati znači sprečavati uništenje ili propadanje čega.',
                    'spavaćica': ' Spavaćica je haljina ili košulja za spavanje.',
                    'spavaona': ' Spavaona je prostorija u kojoj se spava, koja je namijenjena spavanju.',
                    'spavaonica': ' Spavaonica je prostorija u kojoj se spava, koja je namijenjena spavanju.',
                    'spavati': ' Spavati znači odmarati se zatvorenih očiju i bez svijesti o vanjskim zbivanjima.',
                    'spičanski': ' Spičanski je koji se odnosi na Spič i Spičane.',
                    'spisateljica': ' Spisateljica je žena koja piše književna djela.',
                    'spisateljičin': ' Spisateljičin je koji pripada spisateljici.',
                    'splav': ' Splav je plovilo načinjeno od povezanih trupaca ili bačava za prijevoz ljudi i robe na rijekama.',
                    'splitski': ' Splitski je koji se odnosi na Split i Splićane.',
                    'spojnica': ' Spojnica je nešto što služi za spajanje čega. ',
                    'spol': ' Spol je jedna od temeljih bioloških kategorija kojoj ljudi i većina životinja pripadaju na temelju ukupnosti bioloških obilježja ',
                    'spolni': ' Spolni je koji se odnosi na spol.',
                    'spolnost': ' Spolnost su tjelesne i mentalne funkcije vezane uz spol.',
                    'spolovilo': ' Spolovilo je organ koji služi za reprodukciju.',
                    'spomenik': ' Spomenik je skulptura podignuta u spomen na koga ili na koji događaj.',
                    'spomenuti': ' Spomenuti znači kratko i bez mnogo obavijesti iznijeti što o kome ili čemu.',
                    'spominjati': ' Spominjati znači kratko i bez mnogo obavijesti iznijeti što o kome ili čemu.',
                    'spor': ' Spor je koji u određenome razdoblju prelazi malu udaljenost. ',
                    'sport': ' Sport je igra ili tjelesna aktivnost koja zahtijeva fizički napor i vještinu.',
                    'sportaš': ' Sportaš je osoba bez obzira na spol ili muškarac koji se bavi sportom i koji sustavno vježba i natječe se u kakvoj sportskoj disciplini.',
                    'sportašev': ' Sportašev je koji pripada sportašu, osobi bez obzira na spol ili muškarcu koji se bavi sportom i koji sustavno vježba i natječe se u kakvoj sportskoj disciplini.',
                    'sportašica': ' Sportašica je žena koja se bavi sportom i koja sustavno vježba i natječe se u kakvoj sportskoj disciplini.',
                    'sportašičin': ' Sportašičin je koji pripada sportašici.',
                    'sportski': ' Sportski je koji se odnosi na sportaše i sport.',
                    'spremač': ' Spremač je muškarac koji čisti stanove, urede, škole, fakultete, odnosno zatvorene prostore.',
                    'spremačev': ' Spremačev je koji pripada spremaču.',
                    'spremačica': ' Spremačica je žena koja čisti stanove, urede, škole, fakultete, odnosno zatvorene prostore.',
                    'spremačičin': ' Spremačičin je koji pripada spremačici.',
                    'spremački': ' Spremački je koji se odnosi na spremanje i spremače.',
                    'spreman': ' Spreman je koji je pripremljen za što.',
                    'spremati': ' Spremati znači činiti što gotovim, dovršenim.',
                    'spremište': ' Spremište je prostorija ili prostor u kojemu se što drži ili čuva.',
                    'spremiti': ' Spremiti znači učiniti što gotovim, dovršenim.',
                    'spremnik': ' Spremnik je posuda, kutija ili prostor u kojemu se što drži ili čuva.',
                    'spremno': ' Spremno znači tako da odražava čiju pripremljenost za što-',
                    'spremnost': ' Spremnost je osobina onoga koji je pripremljen za što.',
                    'spretan': ' Spretan je koji ima usklađene i vješte tjelesne pokrete.',
                    'spretno': ' Spretno je tako odražava usklađenost tjelesnih pokreta.',
                    'spretnost': ' Spretnost je osobina onoga koji ima usklađene i vješte tjelesne pokrete ili svojstvo onoga što odražava usklađenost tjelesnih pokreta.',
                    'sprijeda': ' Sprijeda znači s prednje strane ili na prednjoj strani.',
                    'spustiti': ' Spustiti znači pomaknuti, premjestiti što s višega na niži položaj.',
                    'spuštati': ' Spuštati znači pomicati, premještati što s višega na niži položaj.',
                    'sramežljiv': ' Sramežljiv je koji se srami, koji osjeća nervozu i nelagodu u društvu drugih ljudi.',
                    'sramežljivo': ' Sramežljivo je tako da odražava čiji osjećaj nervoze i nelagode u društvu drugih ljudi.',
                    'sramežljivost': ' Sramežljivost je osobina onoga koji je sramežljiv.',
                    'srce': ' Srce je šuplji mišićni organ u prsnome košu u čovjeka i većine životinja, središnji pokretač krvnoga optoka koji ritmičnim stezanjem i opuštanjem odvodi krv po čitavome tijelu.',
                    'srdačan': ' Srdačan je koji je pristojan i ugodan u komunikaciji s ljudima.',
                    'srdačno': ' Srdačno je tako da odražava pristojnost i ugodnost u komunikaciji.',
                    'srdačnost': ' Srdačnost je osobina onoga koji je srdačan ili svojstvo onoga što je srdačno.',
                    'srdela': ' Srdela je mala jestiva morska koštunjača plavih ili zelenih leđa te srebrnastih i zlatastih bokova i trbuha.',
                    'srdit': ' Srdit je koji je obuzet stanjem naglašenoga nezadovoljstva i negativnih osjećaja.',
                    'srdito': ' Srdito je tako da odražava obuzetost naglašenim nezadovoljstvom i negativnim osjećajima.',
                    'srditost': ' Srditost je osobina onoga koji je srdit ili svojstvo onoga što je srdito.',
                    'srebrn': ' Srebrn je koji je od srebra.',
                    'srebrno': ' Srebrno je tako da je srebrne boje.',
                    'srebro': ' Srebro je kemijski element (Ag), sjajna svijetla siva plemenita kovina koja se upotrebljava za izradu nakita i drugih ukrasnih predmeta.',
                    'sreća': ' Sreća je stanje ili osjećaj velikoga zadovoljstva.',
                    'sred': ' Sred označuje da se tko ili što nalazi u središnjemu dijelu čega.',
                    'sredina': ' Sredina je središnji dio čega.',
                    'središnji': ' Središnji je koji je u središtu čega.',
                    'središte': ' Središte je središnji dio čega.',
                    'srednjak': ' Srednjak je treći, srednji prst na ljudskoj ruci koji se nalazi između kažiprsta i prstenjaka.',
                    'srednji': ' Srednji je koji se nalazi u sredini.',
                    'sredstvo': ' Sredstvo je oruđe, naprava ili stroj kojim se što može uraditi.',
                    'sretan': ' Sretan je koji osjeća sreću.',
                    'sretno': ' Sretno znači tako da odražava, očituje sreću.',
                    'srijeda': ' Srijeda je treći dan u tjednu, dan između utorka i četvrtka.',
                    'srijemski': ' Srijemski je koji se odnosi na Srijem i Srijemce.',
                    'srna': ' Srna je plahi šumski preživač iz porodice jelena ljeti crvenosmeđe, a zimi sivosmeđe dlake, mužjak ima male rogove.',
                    'srndać': ' Srndać je mužjak srne.',
                    'srneći': ' Srneći je koji se odnosi na srne.',
                    'srnetina': ' Srnetina je srneće meso.',
                    'srp': ' Srp je oruđe, nož svijen u obliku luka kojim se žanje žito, siječe trava i sl.',
                    'srpanj': ' Srpanj je sedmi mjesec u kalendarskoj godini, mjesec između lipnja i kolovoza.',
                    'srpski': ' Srpski je koji se odnosi na Srbiju i Srbe.',
                    'stablo': ' Stablo je deblo koje se grana.',
                    'stabljika': ' Stabljika je vegetativni organ papratnjača i sjemenjača koji povezuje i provodi hranjive tvari i vodu od korijena do listova i cvjetova.',
                    'stadion': ' Stadion je prostor uređen za sportska natjecanja s tribinama za gledatelje.',
                    'stajaćica': ' Stajaćica je voda na površini Zemlje koja ne otječe, nego ispunja udubine u kopnu.',
                    'stajalište': ' Stajalište je mjesto na kojemu se kratko zadržavaju prijevozna sredstva kako bi se što obavilo, iskrcali ili primili putnici i sl.',
                    'stajati': ' Stajati znači biti u uspravnome položaju, biti na nogama i ne kretati se.',
                    'staklo': ' Staklo je prozirna, kruta i lomljiva tvar koja se upotrebljava za izradbu prozora, boca, čaša, leća i dr.',
                    'stalak': ' Stalak je naprava na koju se što stavlja ili na kojoj što stoji.',
                    'stalan': ' Stalan je koji se ne mijenja.',
                    'stalno': ' Stalno znači bez prestanka, bez prekida.',
                    'stalnost': ' Stalnost je svojstvo onoga što se ne mijenja.',
                    'stambeni': ' Stambeni je koji se odnosi na stanove ili stanovanje.',
                    'stan': ' Stan je prostor namijenjen stanovanju, obično dio veće zgrade.',
                    'stanar': ' Stanar je muška osoba ili osoba bez obzira na spol koja gdje stanuje.',
                    'stanarev': ' Stanarev je koji pripada stanaru.',
                    'stanarka': ' Stanarka je ženska osoba koja gdje stanuje.',
                    'stanarkin': ' Stanarkin je koji pripada stanarki.',
                    'stanarov': ' Stanarov je koji pripada stanaru.',
                    'stanarski': ' Stanarski je koji se odnosi na stanare.',
                    'stančić': ' Stančić je mali stan.',
                    'standard': ' Standard je sustav uređen svjesnom, planskom normom, tj. pravilima koja sadržavaju pravopis i gramatiku te popis riječi koji se nalazi u normativnome rječniku.',
                    'stanica': ' Stanica je osnovna jedinica u građi organizma.',
                    'stanka': ' Stanka je prekid ili odmor u poslu, govoru, predstavi i sl.',
                    'stanovati': ' Stanovati znači prebivati na određenome mjestu.',
                    'stanovnica': ' Stanovnica je žena koja stanuje u kojemu mjestu, kraju, državi ili na kojemu kontinentu.',
                    'stanovničin': ' Stanovničin je koji pripada stanovnici, ženi koja stanuje u kojemu mjestu, kraju, državi ili na kojemu kontinentu.',
                    'stanovnik': ' Stanovnik je osoba bez obzira na spol ili muškarac koji stanuje u kojemu mjestu, kraju, državi ili na kojemu kontinentu.',
                    'stanovnikov': ' Stanovnikov je koji pripada stanovniku, osobi bez obzira na spol ili muškarcu koji stanuje u kojemu mjestu, kraju, državi ili na kojemu kontinentu.',
                    'stanje': ' Stanje su prilike u kojima se tko ili što nalazi.',
                    'star': ' Star je koji već dugo živi, koji ima mnogo godina.',
                    'starac': ' Starac je  odrasla osoba bez obzira na spol ili muškarac koji ima mnogo godina, koji je u visokoj životnoj dobi.',
                    'starački': ' Starački je koji se odnosi na starce i starost.',
                    'starčev': ' Starčev je koji  pripada starcu, odrasloj osoba bez obzira na spol ili muškarcu koji ima mnogo godina, koji je u visokoj životnoj dobi.',
                    'starica': ' Starica je žena u visokoj životnoj dobi, starija žena.',
                    'staričin': ' Staričin je koji pripada starici, ženi u visokoj životnoj dobi, staroj ženi.',
                    'staro': ' Staro je tako da odražava da tko već dugo živi. ',
                    'staroslavenski': ' Staroslavenski je najstariji slavenski književni jezik koji pripada južnoslavenskim jezicima, zbog svoje je starine najbliži praslavenskomu, a sačuvan je uglavnom u crkvenim tekstovima.',
                    'starost': ' Starost je razdoblje između zrelosti i smrti.',
                    'start': ' Start je trenutak polaska natjecatelja u utrci na određeni znak.',
                    'stati': ' Stati znači prestati se kretati.',
                    'stav': ' Stav je način na koji je postavljeno tijelo.',
                    'staviti': ' Staviti znači prouzročiti da što bude na određenome mjestu.',
                    'stavljati': ' Stavljati znači prouzročivati da što bude na određenome mjestu.',
                    'staza': ' Staza je uzak pješački put.',
                    'stepenica': ' Stepenica je uzdignuta vodoravno položena ravna ploča koja služi za uspinjanje ili spuštanje pješice kojim prostorim.',
                    'stepeničast': ' Stepeničast je koji je u obliku stuba.',
                    'stezaljka': ' Stezaljka je naprava za stezanje.',
                    'stići': ' Stići znači krećući se dospjeti do čega pred sobom.',
                    'stih': ' Stih je ritamska jedinica pjesničkoga govora, obično jedan redak pjesme.',
                    'stijeg': ' Stijeg je motka na koju je pričvršćena zastava.',
                    'stijena': ' Stijene su tvrde nakupine minerala, glavni sastojci Zemljine kore.',
                    'stil': ' Stil je način djelovanja, ponašanja, odijevanja i slično svojstven kakvoj djelatnosi, pojedincu, skupini, vremenu ili mjestu. ',
                    'stilski': ' Stilski je koji se odnosi na stil. ',
                    'stizati': ' Stizati znači krećući se dospijevati do čega pred sobom.',
                    'sto': ' Sto je broj koji se obilježuje sa 100, za jedan veći od broja devedeset devet i za jedan manji od broja sto jedan.',
                    'stočar': ' Stočar je osoba bez obzira na spol ili muška osoba koja uzgaja i prodaje stoku.',
                    'stočarev': ' Stočarev je koji pripada stočaru.',
                    'stočarica': ' Stočarica je ženska osoba koja uzgaja i prodaje stoku.',
                    'stočaričin': ' Stočaričin je koji pripada stočarici.',
                    'stočarov': ' Stočarov je koji pripada stočaru.',
                    'stočarski': ' Stočarski je koji se odnosi na stočare i stočarstvo.',
                    'stočarstvo': ' Stočarstvo je gospodarska grana koja se bavi uzgojem stoke i proizvodnjom mesa, mlijeka, jaja, vune i kože.',
                    'stoga': ' Stoga ima vezničku funkciju u nezavisnosloženoj zaključnoj rečenici.',
                    'stogodišnji': ' Stogodišnji je koji ima sto godina.',
                    'stogodišnjica': ' Stogodišnjica je dan ili godina u kojoj se navršava sto godina od događaja koji se obilježuje.',
                    'stoka': ' Stoka su domaće životinje koje se uzgajaju radi dobivanja mlijeka, mesa, vune ili kao radna snaga.',
                    'stol': ' Stol je dio namještaja s radnom površinom ili pločom koja stoji na nogama ili je učvršćena u zid.',
                    'stolac': ' Stolac je dio namještaja na kojemu se sjedi.',
                    'stolica': ' Stolica je dio namještaja na kojemu se sjedi.',
                    'stolnjak': ' Stolnjak je pokrivalo za stol.',
                    'stoljeće': ' Stoljeće je razdoblje od sto godina.',
                    'stoljetni': ' Stoljetni je koji je star sto godina, koji traje sto godina.',
                    'stomatolog': ' Stomatolog je liječnik koji se bavi stomatologijom.',
                    'stomatologica': ' Stomatologica je liječnica koja se bavi stomatologijom.',
                    'stomatologičin': ' Stomatologičin je koji pripada stomatologici.',
                    'stomatologinja': ' Stomatologinja je liječnica koja se bavi stomatologijom.',
                    'stomatologinjin': ' Stomatologinjin je koji pripada stomatologinji.',
                    'stomatologov': ' Stomatologov je koji pripada stomatologu.',
                    'stomatološki': ' Stomatološki je koji se odnosi na stomatologe i stomatologiju.',
                    'stonski': ' Stonski je koji se odnosi na Ston i Stonjane.',
                    'stopa': ' Stopa je angloamerička mjerna jedinica za duljinu, trećina jarda, 30,48 centimetara (ft, ')
                ',
                'stopalo': ' Stopalo je donji dio ljudske noge i noge kralježnjaka koji služi za oslanjanje pri hodu, stajanju ili trčanju.',
                'stoti': ' Stoti je koji je iza devedeset devetoga, a prije sto prvoga.',
                'stotinjak': ' Stotinjak je približno sto, oko sto.',
                'stožac': ' Stožac je geometrijsko tijelo omeđeno krugom kao bazom i plaštom koji nastaje spajanjem vrha stošca, koji ne leži u ravnini baze, s točkama kružnice koja omeđuje bazu.',
                'str.': ' Str. je kratica za stranicu.',
                'straga': ' Straga znači sa stražnje strane ili na stražnjoj strani.',
                'strah': ' Strah je neugodan osjećaj prouzročen opasnošću ili neugodnim događajem.',
                'stran': ' Stran je koji nije blizak.',
                'strana': ' Strana je jedna od površina koja omeđuje koje tijelo.',
                'stranac': ' Stranac je osoba bez obzira na spol ili muškarac koji je stanovnik druge države ili živi u jednoj državi, a potječe iz druge.',
                'stranački': ' Stranački je koji se odnosi na stranku, organizaciju koja okuplja ljude sličnih uvjerenja i ciljeva oko zajedničkoga političkog programa.',
                'strančev': ' Strančev je koji pripada strancu, osobi bez obzira na spol ili muškarcu koji je stanovnik druge države ili živi u jednoj državi, a potječe iz druge.',
                'stranica': ' Stranica je dio knjige ili novina, jedna od dviju površina jednoga papira.',
                'stranka': ' Stranka je organizacija koja okuplja ljude sličnih uvjerenja i ciljeva oko zajedničkoga političkog programa.',
                'strankinja': ' Strankinja je žena koja je stanovnica druge države ili živi u jednoj državi, a potječe iz druge.',
                'strankinjin': ' Strankinjin je koji pripada strankinji, ženi koja je stanovnica druge države ili živi u jednoj državi, a potječe iz druge ili ženi koja je komu nepoznata.',
                'strašan': ' Strašan je koji izaziva strah.',
                'strašiti': ' Strašiti koga znači izazivati strah u kome.',
                'strašno': ' Strašno znači  iznimno jako ili snažno.',
                'stražnjica': ' Stražnjica je dio ljudskoga tijela na stražnjoj strani zdjeličnih kostiju na kojemu se sjedi.',
                'stric': ' Stric je očev brat.',
                'stričev': ' Stričev je koji pripada stricu.',
                'strijelac': ' Strijelac je ratnik opremljen lukom i strijelom.',
                'strijelčev': ' Strijelčev je koji pripada strijelcu, ratniku opremljenome lukom i strijelom.',
                'strina': ' Strina je stričeva žena.',
                'strinin': ' Strinin je koji pripada strini.',
                'strip': ' Strip je priča u crtežima, niz crteža s kratkim razgovorima ili objašnjenjima.',
                'strm': ' Strm je koji se naglo i koso uzdiže ili spušta.',
                'strmina': ' Strmina je teren koji se spušta, koji pada u odnosu na smjer gledanja ili kretanja.',
                'strmo': ' Strmo znači kosinom koja se naglo uzdiže ili spušta.',
                'strog': ' Strog  je koji je nesuosjećajan i nepopustljiv u svojim nazorima.',
                'strogo': ' Strogo je tako da ne odražava blagost ili brižnost, bez razumijevanja i suosjećanja.',
                'strogost': ' Strogost je osobina onoga koji je nesuosjećan i nepopustljiv u svojim nazorima.',
                'stroj': ' Stroj je uređaj koji pretvara jednu energiju u drugu i time omogućuje kakav rad.',
                'strojovođa': ' Strojovođa je vozač koji upravlja strojevima lokomotive, broda i sl.',
                'stroncij': ' Stroncij je kemijski element (Sr), mekana srebrnobijela kovina koja se nalazi samo u spojevima, a u medicini služi za umirenje živaca.',
                'strop': ' Strop je gornja, obično ravna ploha prostorije ili prostora.',
                'stropni': ' Stropni je koji se odnosi na strop.',
                'strpljiv': ' Strpljiv je koji je miran i ustrajan u čemu, koji ne gubi strpljenje.',
                'strpljivo': ' Strpljivo je tako daodražava mirnoću i ustrajnost u čemu.',
                'strpljivost': ' Strpljivost je osobina onoga koji je strpljiv.',
                'stručan': ' Stručan je koji je osposobljen raditi što u skladu sa strukom.',
                'stručno': ' Stručno je tako da odražava osposobljenost za rad u skladu s pravilima struke.',
                'stručnost': ' Stručnost je osobina onoga koji je stručan ili svojstvo onoga što je stručno.',
                'stručnjak': ' Stručnjak je osoba bez obzira na spol ili muška osoba koja je školovanjem stekla znanja i vještine potrebne za rad u kojoj struci.',
                'stručnjakinja': ' Stručnjakinja je ženska osoba koja je školovanjem stekla znanja i vještine potrebne za rad u kojoj struci.',
                'struja': ' Struja je gibanje tekućine ili plina u određenome smjeru.',
                'struk': ' Struk je najuži dio tijela koji se nalazi između prsa i bedara.',
                'strunjača': ' Strunjača je mekana podloga za gimnastičke vježbe i ublažavanje bola pri padu.',
                'stub': ' Stub je slobodan uspravan potporanj pravokutnoga presjeka koji prenosi teret građevine na podlogu.',
                'stuba': ' Stuba je uzdignuta vodoravno položena ravna ploča koja služi za uspinjanje ili spuštanje pješice kojim prostorim.',
                'stubišni': ' Stubišni je koji se odnosi na stubište.',
                'stubište': ' Stubište je prostor u sklopu kuće ili zgrade u kojemu se nalaze stube koje vode s jednoga kata na drugi.',
                'studeni': ' Studeni je jedanaesti mjesec u kalendarskoj godini, mjesec između listopada i prosinca.',
                'student': ' Student je osoba bez obzira na spol ili muška osoba koja pohađa visoku školu ili fakultet. ',
                'studentica': ' Studentica je ženska osoba koja pohađa visoku školu ili fakultet.',
                'studentičin': ' Studentičin je koji pripada studentici.',
                'studentov': ' Studentov je koji pripada studentu.',
                'studentski': ' Studentski je koji se odnosi na studente.',
                'studirati': ' Studirati znači pohađati ili slušati predavanja i polagati ispite na visokoj školi ili fakultetu .',
                'stup': ' Stup je uspravno postavljen, dugačak i vitak predmet.',
                'stupanj': ' Stupanj je mjerna jedinica za kut (⁰).',
                'stupica': ' Stupica je naprava za hvatanje životinja koja sklapanjem priklješćuje dio tijela.',
                'stvar': ' Stvar je nešto neživo materijalno što se može vidjeti i dotaknuti. ',
                'stvaran': ' Stvaran je koji se dogodio u stvarnosti.',
                'stvaranje': ' Stvaranje je činjenje da postane ono čega prije nije bilo.',
                'stvarati': ' Stvarati znači činiti da postane ono čega prije nije bilo .',
                'stvarno': ' Stvarno izriče uvjeravanje, upravo tako, u punoj mjeri.',
                'stvarnost': ' Stvarnost je sve što okružuje čovjeka, duhovni i tvarni svijet.',
                'stvoriti': ' Stvoriti znači učiniti da postane ono čega prije nije bilo.',
                'subjekt': ' Subjekt je samostalni rečenični dio koji označuje vršitelja radnje.',
                'subjektni': ' Subjektni je koji se odnosi na subjekt.',
                'subota': ' Subota je šesti dan u tjednu, dan između petka i nedjelje.',
                'subotički': ' Subotički je koji se odnosi na Suboticu i Subotičanin.',
                'subotnji': ' Subotnji je koji se odnosi na subotu.',
                'sučelje': ' Sučelje je fizička ili programska sastavnica koja omogućuje korisniku da komunicira te zadaje naredbe određenomu računalnom uređaju i programu.',
                'sud': ' Sud je mišljenje o kome ili čemu.',
                'sudac': '  Sudac je odrasla osoba bez obzira na spol ili muškarac koji je završio studij prava i na sudu vodi sudske postupke i donosi presude.',
                'sudački': ' Sudački je koji se odnosi na sudce, odrasle osobe bez obzira na spol ili muškarce koji su završili studij prava i na sudu vode sudske postupke i donose presude.',
                'sudanski': ' Sudanski je koji se odnosi na Sudan i Sudance.',
                'sudčev': ' Sudčev je koji pripada sudcu, odrasloj osobi bez obzira na spol ili muškarcu koji je završio studij prava i na sudu vodi sudske postupke i donosi presude.',
                'sudionica': ' Sudionica je ženska osoba koja sudjeluje u čemu.',
                'sudioničin': ' Sudioničin je koji pripada sudionici.',
                'sudionik': ' Sudionik je osoba bez obzira na spol ili muška osoba koja sudjeluje u čemu.',
                'sudionikov': ' Sudionikov je koji pripada sudioniku.',
                'suditi': ' Suditi znači voditi sportsko natjecanje i nadzirati poštovanje pravila igre .',
                'sudjelovati': ' Sudjelovati znači biti sudionikom, imati udjela u kakvu događaju ili zbivanju.',
                'sudoper': ' Sudoper je dio kuhinjskoga namještaja koji služi za pranje posuđa.',
                'suđe': ' Suđe je skup posuda.',
                'suglasnik': ' Suglasnik je glas pri čijemu je izgovoru potpuno ili djelomično zatvoren prolaz zračnoj struji.',
                'suh': ' Suh je koji nije natopljen vodom ili kojom drugom tekućinom.',
                'suho': ' Suho znači bez sekreta.',
                'suhoća': ' Suhoća je stanje prouzročeno nedostatkom vlage.',
                'suknja': ' Suknja je ženski odjevni predmet koji prekriva dio tijela od struka nadolje, a nema nogavice.',
                'sulica': ' Sulica je hladno oružje nalik na koplje.',
                'sultan': ' Sultan je naslov vladara u Osmanskome Carstvu',
                'sumpor': ' Sumpor je kemijski element (S), žuta nekovina, pojavljuje se u vulkanskim područjima, a upotrebljava se u poljoprivredi.',
                'sunce': ' Sunce je najbliža zvijezda i središnje nebesko tijelo Sunčeva sustava.',
                'suncobran': ' Suncobran je predmet sličan kišobranu koji služi za zaštitu od sunca.',
                'sunčan': ' Sunčan je koji je obasjan suncem, koji je pun Sunčeva svjetla.',
                'sunčani': ' Sunčani je koji se odnosi na Sunce/sunce.',
                'sunčano': ' Sunčano znači od sunca.',
                'sunčati': ' Sunčati znači izlagati koga ili što suncu.',
                'sunovrat': ' Sunovrat je sredozemna lukovičasta proljetnica s cvjetovima ugodna mirisa.',
                'super': ' Super znači tako da je iznimno dobro ili kvalitetno.',
                'super': ' Super je iznimno dobar ili kvalitetan.',
                'superlativ': ' Superlativ je treći stupanj u stupnjevanju pridjeva i priloga kojim se u usporedbi izriče najveći stupanj koje osobine ili svojstva.',
                'suprotan': ' Suprotan je koji se posve razlikuje od koga ili čega.',
                'suprotnost': ' Suprotnost je svojstvo onoga što odražava potpunu različitost ',
                'suprug': ' Suprug je oženjen muškarac u odnosu na ženu s kojom je u braku.',
                'supruga': ' Supruga je udana ženska osoba u odnosu na muža s kojim je u braku.',
                'suradnja': ' Suradnja je zajednički rad na čemu.',
                'surađivati': ' Surađivati znači raditi s kim na istome poslu.',
                'surečenica': ' Surečenica je rečenica koja je sastavni element složene rečenice.',
                'surečenični': ' Surečenični je koji se odnosi na surečenicu.',
                'susjed': ' Susjed je osoba bez obzira na spol ili muška osoba koja živi u blizini čije kuće ili stana.',
                'susjeda': ' Susjeda je ženska osoba koja stanuje u blizini čije kuće ili stana.',
                'susjedin': ' Susjedin je koji pripada susjedi.',
                'susjedni': ' Susjedni je koji se nalazi u blizini, u susjedstvu.',
                'susjedov': ' Susjedov je koji pripada susjedu, osobi bez obzira na spol ili muškoj osobi koja živi u blizini čije kuće ili stana.',
                'susjedski': ' Susjedski je koji se odnosi na susjede, osobe bez obzira na spol ili muške osobe koje žive u blizini čije kuće ili stana.',
                'susjedstvo': ' Susjedstvo su ljudi i kuće u blizini čijega mjesta stanovanja.',
                'susnježica': ' Susnježica je kiša sa snijegom.',
                'susresti': ' Susresti znači slučajno ili u prolazu naići na koga.',
                'susret': ' Susret je dogovoreni sastanak.',
                'susretati': ' Susretati znači slučajno ili u prolazu nailaziti na koga.',
                'sustav': ' Sustav je ukupnost jedinica, načela ili objekata koje čine cjelinu s vlastitim zakonitostima.',
                'sušilica': ' Sušilica je uređaj za sušenje rublja.',
                'sušilo': ' Sušilo je uređaj za sušenje.',
                'sušiti': ' Sušiti znači uklanjati vlagu iz čega.',
                'suteren': ' Suteren je dio zgrade koji se nalazi ispod prizemlja i djelomično je ukopan u zemlju.',
                'suterenski': ' Suterenski je koji se odnosi na suteren.',
                'sutješki': ' Sutješki je koji se odnosi na Kraljevu Sutjesku i Sutješčane.',
                'sutkinja': ' Sutkinja je žena koja je završila sudij prava i na sudu vodi sudske postupke i donosi presude.',
                'sutkinjin': ' Sutkinjin je koji pripada sutkinji, ženi koja je završila sudij prava i na sudu vodi sudske postupke i donosi presude.',
                'sutra': ' Sutra znači tijekom sljedećega dana, u sljedećemu danu.',
                'sutrašnji': ' Sutrašnji je koji će biti sutra.',
                'sutrašnjica': ' Sutrašnjica je buduće vrijeme, vrijeme koje dolazi.',
                'sutrašnjost': ' Sutrašnjost je buduće vrijeme, vrijeme koje dolazi.',
                'suvenir': ' Suvenir je predmet koji se čuva kao uspomena na koje mjesto, osobu ili događaj.',
                'suvozač': ' Suvozač je osoba koja sjedi uz vozača u kojemu vozilu.',
                'suvozačev': ' Suvozačev je koji pripada suvozaču.',
                'suvozačica': ' Suvozačica je žena koja sjedi uz vozača u kojemu vozilu.',
                'suvozačičin': ' Suvozačičin je koji pripada suvozačici.',
                'suvozački': ' Suvozački je koji se odnosi na suvozače.',
                'suza': ' Suza je bistra i slankasta izlučina suznih žlijezda koja održava vlažnost oka, a luči se kad čovjek plače.',
                'svačiji': ' Svačiji označuje pripadanje svakomu, bilo kojemu posjedovatelju.',
                'svadljiv': ' Svadljiv je koji je sklon svađi.',
                'svadljivo': ' Svadljivo znači na svadljiv značin.',
                'svadljivost': ' Svadljivost je osobina onoga koji je svadljiv ili svojstvo onoga što je svadljivo.',
                'svađa': ' Svađa je oštar sukob.',
                'svađati se': ' Svađati znači izazivati svađu između drugih.',
                'svakakav': ' Svakakav je koji se odlikuje različitim svojstavima, raznolikošću.',
                'svakako': ' Svakako znači na svaki način, u svakome slučaju.',
                'svaki': ' Svaki označuje bilo koju osobu.',
                'svakojak': ' Svakojak je koji se odlikuje različitim svojstavima, raznolikošću.',
                'svašta': ' Svašta označuje skup raznovrsnih neimenovanih predmeta ili pojava.',
                'svatko': ' Svatko označuje svaku, bilo koju osobu.',
                'sve': ' Sve označuje ukupnost stvari, osjećaja, vrlina itd.',
                'sve': ' Sve označuje postupno pojačavanje svojstva ili načina.',
                'svečan': ' Svečan je koji se čini s velikim poštovanjem, čašću i radošću.',
                'svečano': ' Svečano znači s velikim poštovanjem.',
                'svečanost': ' Svečanost je svojstvo onoga što je svečano.',
                'svećenik': ' Svećenik je muškarac koji se zaredio i može obavljati službeno bogoslužje u katoličanstvu i pravoslavlju.',
                'svejedno': ' Svejedno označuje da će se što dogoditi ili da što jest unatoč čemu.',
                'svemir': ' Svemir je beskonačno prostranstvo koje nas okružuje i kojega je Zemlja dio; ukupnost svega što postoji uključujući vrijeme i prostor.',
                'svemirski': ' Svemirski je koji se odnosi na svemir.',
                'svet': ' Svet je koji je bez grijeha, savršen, čist.',
                'svetac': ' Svetac je pokojni muškarac koji je za života ostvario duhovni i moralni ideal svoje religije te ga se u nekim crkvama i službeno proglašuje svetim.',
                'svetački': ' Svetački je koji se odnosi na svetce.',
                'svetčev': ' Svetčev je onaj koji pripada svetcu, pokojnom muškarcu koji je za života ostvario duhovni i moralni ideal svoje religije te ga se u nekim crkvama i službeno proglašuje svetim.',
                'svetica': ' Svetica je pokojna žena koja je za života ostvarila duhovni i moralni ideal svoje religije te ju se u nekim crkvama i službeno proglašuje svetom. ',
                'svetičin': ' Svetičin je koji pripada svetici, pokojnoj ženi koja je za života ostvarila duhovni i moralni ideal svoje religije te ju se u nekim crkvama i službeno proglašuje svetom. ',
                'sveučilište': ' Sveučilište je zajednica fakulteta, ustanova u kojoj se stječe najviše obrazovanje u znanstvenim i nastavnim strukama.',
                'svibanj': ' Svibanj je peti mjesec u kalendarskoj godini, mjesec između travnja i lipnja.',
                'svidjeti se': ' Svidjeti se komu znači osjetiti privlačnost prema komu.',
                'sviđati se': ' Sviđati se komu znači osjećati privlačnost prema komu.',
                'svijeća': ' Svijeća je predmet od voska sa stijenjem koji goreći daje svjetlo.',
                'svijećnjak': ' Svijećnjak je stalak za jednu ili više svijeća.',
                'svijest': ' Svijest je spoznaja o sebi i svijetu oko sebe, sposobnost mišljenja, prosuđivanja, zaključivanja i odlučivanja.',
                'svijet': ' Svijet je planet Zemlja s prostornim, duhovnim i ostalim vrijednostima koje na njemu postoje.',
                'svijetao': ' Svijetao je koji je ispunjen svjetlom.',
                'svijetliti': ' Svijetliti znači odašiljati svjetlost.',
                'svijetlo': ' Svijetlo je tako da je ispunjeno svjetlom.',
                'svinjeći': ' Svinjeći je koji se odnosi na svinjetinu.',
                'svinjetina': ' Svinjetina je svinjsko meso.',
                'svinjski': ' Svinjski je koji se odnosi na svinje.',
                'svirač': ' Svirač je odrasla osoba bez obzira na spol ili muškarac koji se bavi sviranjem.',
                'sviračev': ' Sviračev je onaj koji pripada sviraču.',
                'sviračica': ' Sviračica je žena koja se bavi sviranjem.',
                'sviračičin': ' Sviračičin je onaj koji pripada sviračici.',
                'svirati': ' Svirati znači upotrebom zviždaljke voditi sportski susret i suditi.',
                'svjećica': ' Svjećica je mala svijeća.',
                'svjesno': ' Svjesno znači s namjerom i razlogom.',
                'svjesnost': ' Svjesnost je spoznaja o sebi i svijetu oko sebe, sposobnost mišljenja, prosuđivanja, zaključivanja i odlučivanja.',
                'svjestan': ' Svjestan je koji ima svijest, spoznaju o čemu, koji što shvaća ili razumije.',
                'svjetiljka': ' Svjetiljka je naprava za osvjetljivanje.',
                'svjetionik': ' Svjetionik je građevina ili toranj s uređajima koji svjetlosnim signalima pokazuje put pomorcima na brodovima, služi za orijentaciju i upozorava na opasnost.',
                'svjetlo': ' Svjetlo je svijetle zrake koje omogućuju vidljivost.',
                'svjetlost': ' Svjetlost je jaka kratkotrajna pojava svijetlih zraka.',
                'svjetski': ' Svjetski je koji se odnosi na cijeli svijet.',
                'svjež': ' Svjež je koji čuva dobra svojstva, koji nije izgubio kakvoću.',
                'svježe': ' Svježe znači na svjež način.',
                'svježina': ' Svježina je svojstvo onoga što je svježe, koje čuva dobra svojstva, koje nije izgubilo kakvoću.',
                'svlačiona': ' Svlačiona je prostorija u kojoj se presvlači i mijenja odjeća.',
                'svlačionica': ' Svlačionica je prostorija u kojoj se presvlači i mijenja odjeća.',
                'svoj': ' Svoj je koji pripada rečeničnomu subjektu ili objektu.',
                'svojstvo': ' Svojstvo je ono što je čemu svojstveno, ono po čemu se što ističe ili prepoznaje.',
                'svrab': ' Svrab je kožna bolest s jakim svrbežom koju prouzročuje nametnik svrabac.',
                'svrbež': ' Svrbež je neugodan tjelesni osjet na koži ili sluznici koji izaziva potrebu za češanjem.',
                'svrha': ' Svrha je dublji razlog zbog kojega što postoji ili se radi.',
                'svršetak': ' Svršetak je ono čime što završava, posljednji dio čega, točka u kojoj što završava.',
                'svući': ' Svući ukloniti s koga (o odjevnome predmetu).',
                'šafran': ' Šafran je proljetna lukovičasta biljka s cvjetovima ugodna mirisa.',
                'šah': ' Šah je vladarski naslov u nekim azijskim zemljama.',
                'šahist': ' Šahist je osoba bez obzira na spol ili muška osoba koja igra šah.',
                'šahistica': ' Šahistica je žena koja igra šah.',
                'šahističin': ' Šahističin je koji pripada šahistici.',
                'šahistov': ' Šahistov je  koji pripada šahistu.',
                'šahovski': ' Šahovski je koji se odnosi na šah, igru za dva igrača koji imaju svaki šesnaest figura na ploči podijeljenoj na šezdeset četiri crna i bijela polja.',
                'šaka': ' Šaka je završetak ljudske ruke od ručnoga zgloba do vrha prstiju.',
                'šal': ' Šal je odjevni predmet koji se nosi oko vrata ili prebacuje preko ramena.',
                'šala': ' Šala je duhovita kratka priča kojoj je svrha koga nasmijati.',
                'šalica': ' Šalica je manja posuda iz koje se pije mlijeko, crna ili bijela kava, čaj i sl.',
                'šaliti se': ' Šaliti se znači praviti šale, pričati šale, izazivati smijeh ili zabavljati društvo šalama.',
                'šampon': ' Šampon je tekuće sredstvo za pranje kose, tijela, automobila itd. koje se rastapa i pjeni u vodi.',
                'šangajski': ' Šangajski je koji se odnosi na Šangaj i Šangajce.',
                'šansa': ' Šansa je povoljan trenutak.',
                'šapa': ' Šapa je dio noge zvijeri po kojemu hoda i koji ima meke jastučiće i pandže.',
                'šapnuti': ' Šapnuti znači tiho reći, tako da drugi ne čuju.',
                'šaptati': ' Šaptati znači tiho govoriti, tako da drugi ne čuju.',
                'šaran': ' Šaran je slatkovodna koštunjača cijenjena mesa koja sa svake strane ima po dva dulja i dva kraća brka, živi u mirnim, toplim i muljevitim vodama i uzgaja se u ribnjacima.',
                'šarati': ' Šarati znači ukrašavati što šarenim bojama.',
                'šaren': ' Šaren je koji je različitih boja.',
                'šareno': ' Šareno je tako da je različitih boja.',
                'šarlah': ' Šarlah je zarazna dječja bolest koju prouzročuju streptokoki i koja se prenosi kapljičnom infekcijom.',
                'šator': ' Šator je sklonište napravljeno od raširenoga nepropusnog platna pričvršćenoga za tlo, služi za privremeni boravak na otvorenome prostoru.',
                'šećer': ' Šećer je slatka tvar koja se dobiva od šećerne repe ili šećerne trske i kojom se slade jela i pića, može biti u obliku kristalnih zrna, praha ili kocaka.',
                'šeik': ' Šeik je naslov muškoga arapskog plemenskog vladara.',
                'šerif': ' Šerif je u zemljama Ujedinjenoga Kraljevstva naslov kraljeva ili vladina glavnoga službenika koji skrbi o javnome redu i miru na području grofovije.',
                'šerif': ' Šerif je počasni naslov uglednoga ratnika ili plemenitaša kod Arapa, odnosno naslov koji su nosili neki islamski vladari.',
                'šesnaest': ' Šesnaest je broj koji se obilježuje sa 16, za jedan veći od broja petnaest i za jedan manji od broja sedamnaest.',
                'šesnaestero': ' Šesnaestero je skupina od šesnaest osoba različita spola.',
                'šesnaesti': ' Šesnaesti je koji je iza petnaestoga, a prije sedamnaestoga.',
                'šest': ' Šest je broj koji se obilježuje sa 6, za jedan veći od broja pet i za jedan manji od broja sedam,',
                'šestar': ' Šestar je naprava s dvama krakovima koja služi za crtanje kružnice i mjerenje dužine.',
                'šestaš': ' Šestaš je učenik (bez obzira na spol ili muškoga spola) šestoga razreda osnovne škole.',
                'šestašica': ' Šestašica je učenica šestoga razreda osnovne ili srednje škole.',
                'šesterac': ' Šesterac je stih od šest slogova.',
                'šestero': ' Šestero je skupina od šest osoba različita spola.',
                'šesterokratnik': ' Šesterokratnik  je broj koji je umnožak zadanoga broja i broja 6, koji je šest puta veći od zadanoga broja.',
                'šesterokut': ' Šesterokut je geometrijski lik u ravnini omeđen sa šest stranica.',
                'šesterostruk': ' Šesterostruk je koji ima šest dijelova, koji se ponavlja šest puta.',
                'šesti': ' Šesti je koji je iza petoga, a prije sedmoga.',
                'šestica': ' Šestica je brojka koja označuje broj šest.',
                'šestina': ' Šestina je broj koji pomnožen sa šest daje cijeli broj.',
                'šesto': ' Šesto je broj koji se obilježuje sa 600, za jedan veći od broja petsto devedeset devet i za jedan manji od broja šesto jedan.',
                'šestomjesečni': ' Šestomjesečni je koji ima šest mjeseci.',
                'šestorica': ' Šestorica je skupina od šest muških osoba.',
                'šestoti': ' Šestoti je koji je iza petsto devedeset devetoga, a prije šesto prvoga.',
                'šešir': ' Šešir je pokrivalo za glavu s užim ili širim obodom u donjemu dijelu.',
                'šetalište': ' Šetalište je prostor uređen za šetnju.',
                'šetati': ' Šetati znači voditi koga u šetnju.',
                'šetnja': ' Šetnja je lagan hod bez određena cilja radi odmora i razonode.',
                'šezdeset': ' Šezdeset je broj koji se obilježuje sa 60, za jedan veći od broja pedeset devet i za jedan manji od broja šezdeset jedan.',
                'šezdesetak': ' Šezdesetak je približno šezdeset, oko šezdeset.',
                'šezdesetero': ' Šezdesetero je skupina od šezdeset osoba različita spola.',
                'šezdeseti': ' Šezdeseti je koji je iza pedeset devetoga, a prije šezdeset prvoga.',
                'šezdesetorica': ' Šezdesetorica je skupina od šezdeset muških osoba.',
                'šibenski': ' Šibenski je koji se odnosi na Šibenik i Šibenčane.',
                'šic': ' Šic je povik kojim se tjera koga, najčešće mačke. ',
                'šifra': ' Šifra je tajno pismo u kojemu slova, riječi ili brojke imaju dogovoreno promijenjeno značenje i čitaju se samo s pomoću dogovorenoga ključa. ',
                'šilterica': ' Šilterica je kapa sa štitnikom za zaštitu od sunca.',
                'šiljilo': ' Šiljilo je naprava za šiljenje olovaka.',
                'šipak': ' Šipak je grm s oštrim nadolje svinutim bodljikama i jestivim jajolikim crvenkastim plodom.',
                'širina': ' Širina je razmak između bočnih strana tijela ili površine.',
                'širok': ' Širok je koji ima širinu – razmak između bočnih strana tijela ili površine – veću od prosječne ili uobičajene.',
                'široko': ' Široko je vlažan i topao vjetar pretežno jugoistočnoga smjera koji puše na jadranskome primorju s mora na kopno.',
                'široko': ' Široko znači na vrlo velikome području ili tako da zahvaća velik prostor, odnosno među velikim brojem ljudi.',
                'širokobriješki': ' Širokobriješki je koji se odnosi na Široki Brijeg i Širokobriježane.',
                'širom': ' Širom znači cijelom površinom.',
                'širom': ' Širom znači čitavom širinom, do kraja.',
                'šišmiš': ' Šišmiši su red letećih sisavaca plodvaša koji noću lete s pomoću letnica, a danju spavaju okrenuti naglavce.',
                'šištati': ' Šištati znači ispuštati piskutav šum.',
                'šiti': ' Šiti znači iglom i koncem povezivati što, izrađivati što šivanjem.',
                'škare': ' Škare su naprava za rezanje s dvama oštrim krakovima.',
                'šk. god.': ' Šk. god. znak je za školsku godinu, vrijeme u kojemu učenik pohađa jedan razred, koje u Hrvatskoj traje od rujna do lipnja.',
                'škljoc': ' Škljoc je onomatopejska riječ kojom se oponaša zvuk koji nastane kad što u što nasjedne ili iz čega iskoči. ',
                'škljocanje': ' Škljocanje je proizvođenje zvuka nalik na 
                ',
                'škljocati': ' Škljocati znači proizvoditi zvuk nalik na 
                ',
                'škljocnuti': ' Šklocnuti znači proizvesti zvuk nalik na 
                ',
                'škola': ' Škola je odgojno-obrazovna ustanova u kojoj se prema nastavnome planu stječu znanja i vještine.',
                'školovanje': ' Školovanje je slanje koga u škole.',
                'školovati': ' Školovati znači poslati/slati koga u škole i platiti/plaćati mu školovanje.',
                'školski': ' Školski je koji se odnosi na školu, odgojno-obrazovnu ustanovu u kojoj se prema nastavnome planu stječu znanja i vještine.',
                'školjka': ' Školjka je dvodijelna vapnena ljuštura koja štiti mekano tijelo školjkaša.',
                'školjkaš': ' Školjkaši su razred vodenih mekušaca sploštena tijela koji nemaju glavu, a tijelo im štiti vapnena ljuštura.',
                'škorpion': ' Škorpioni su red najvećih i najstarijih kopnenih paučnjaka koji na prednjemu dijelu tijela imaju par kratkih i snažnih kliješta, čeljusne su im noge duže od ostalih udova i na njima su snažne štipaljke, a na stražnjemu izduženom dijelu imaju otrovnu bodlju.',
                'škorpionov': ' Škorpionov je koji pripada škorpionu, pripadniku istoimenoga reda kopnenih paučnjaka.',
                'škorpionski': ' Škorpionov je koji se odnosi na škorpione, pripadnike istoimenoga reda kopnenih paučnjaka.',
                'škotski': ' Škotski je koji se odnosi na Škotsku i Škote.',
                'škrgutati': ' Škrgutati znači proizvoditi zvuk pokrećući čeljust.',
                'škripa': ' Škripa su oštri zvukovi nejednake jačine i visine koji nastaju od trenja suhoga drva ili dijelova strojeva koje treba podmazati.',
                'škripati': ' Škripati znači proizvoditi škripu.',
                'škripiti': ' Škripiti znači proizvoditi škripu.',
                'škripnuti': ' Škripnuti znači proizvesti kratkotrajnu škripu.',
                'škrt': ' Škrt je koji pretjerano pazi na novac.',
                'škrto': ' Škrto znači tako da se pretjerano pazi na novac, pretjerano štedljivo.',
                'škrtost': ' Škrtost je osobina onoga koji pretjerano pazi na novac.',
                'šljap': ' Šljap je onomatopejska riječ kojom se oponaša zvuk kretanja po vodi, snijegu ili blatu. ',
                'šljapkanje': ' Šljapkanje je kretanje po vodi, snijegu ili blatu proizvodeći zvuk koji podjseća na 
                ',
                'šljapkati': ' Šljapkati znači hodati po vodi, snijegu ili blatu proizvodeći pritom zvuk koji podsjeća na 
                ',
                'šljapnuti': ' Šljapnuti znači ući u vodu, snijegu ili blato proizvodeći zvuk koji podsjeća na 
                ',
                'šljiva': ' Šljiva je voćka iz porodice ruža s duguljastim ili okruglim plodovima.',
                'šljivovica': ' Šljivovica je rakija koja se peče od ploda šljiva.',
                'šljunak': ' Šljunak su komadići stijena koje nanose tekućice ili koje je voda valjanjem učinila oblima.',
                'šminkati (se)': ' Šminkati znači nanositi šminku na što.',
                'šmrc': ' Usklikom 
                ',
                'šoltanski': ' Šoltanski je koji se odnosi na Šoltu i Šoltane.',
                'špagerica': ' Špagerice su lagana ljetna obuća s potplatom od užeta.',
                'španjolski': ' Španjolski je koji se odnosi na Španjolsku i Španjolce.',
                'špilja': ' Špilja je podzemna ili podvodna šupljina.',
                'špinat': ' Špinat je jednogodišnja povrtna zeljasta biljka jestivih listova.',
                'štakor': ' Štakori su rod mišolikih glodavaca sveždera grube smeđe ili tamnosive dlake i tanka duga repa s ljuskavim prstenovima.',
                'štap': ' Štap je dug tanak komad drveta ili tako oblikovano kakvo drugo gradivo.',
                'štapić': ' Štapić je mali štap, mali tanak komad drveta ili tako oblikovano kakvo drugo gradivo.',
                'štaviona': ' Štaviona je radionica za štavljenje kože.',
                'štavionica': ' Štavionica je radionica za štavljenje kože.',
                'štaviti': ' Štaviti znači pripremati sirovu kožu za obrađivanje potapanjem u odgovarajuću otopinu.',
                'štediona': ' Štediona je novčarska ustanova u kojoj građani štede i od koje dobivaju zajmove.',
                'štedionica': ' Štedionica je novčarska ustanova u kojoj građani štede i od koje dobivaju zajmove.',
                'štediti': ' Štediti znači čuvati ili stvarati zalihe, biti umjeren i ne trošiti preko mjere.',
                'štedjeti': ' Štedjeti znači čuvati ili stvarati zalihe, biti umjeren i ne trošiti preko mjere.',
                'štednjak': ' Štednjak je kuhinjska peć pokrivena pločom na kojoj se kuha.',
                'štektati': ' Štektati znači isprekidano lajati.',
                'štene': ' Štene je mlado psa.',
                'šteniti': ' Šteniti znači donositi mlado na svijet (o kuji).',
                'šteta': ' Šteta je negativna posljedica kakva djelovanja ili nastojanja.',
                'štikla': ' Štikla je vanjski dio obuće koji podupire petu.',
                'štit': ' Štit je obrambena naprava kojom se štiti od udaraca, pogodaka metkom, uboda strijele, koplja, mača i sl.',
                'štititi': ' Štititi znači čuvati koga ili što od opasnosti, napada, loših postupaka, utjecaja ili djelovanja.',
                'štitnik': ' Štitnik je štit na kapi protiv sunca.',
                'štivo': ' Štivo je tekst koji se čita.',
                'što': ' Što uvodi komparativ pridjeva ili priloga i naglašuje njegovo značenje.',
                'što': ' Što uvodi pitanje za nepoznato.',
                'što': ' Što uvodi atributnu surečenicu u zavisnoloženoj rečenici.',
                'štogod': ' Štogod označuje neodređeni predmet li pojavu.',
                'štogod': ' Štogod označuje određenu, u pravilu manju mjeru čega.',
                'štokholmski': ' Štokholmski je koji se odnosi na Stockholm i Štokhomljane.',
                'štoperica': ' Štoperica je mehanički sat za precizno mjerenje vremena.',
                'štrample': ' Štrample su hulahopke od debljega materijala.',
                'štramplice': ' Štramplice su male štrample, obično dječje.',
                'štrcaljka': ' Štrcaljka je naprava koja štrca tekućinu.',
                'štropot': ' Štropot je škripav zvuk.',
                'štropotati': ' Štropotati znači proizvoditi štropot.',
                'šubara': ' Šubara je kapa od krzna.',
                'šum': ' Šum je neodređeni zvuk umjerene jačine koji nastaje nepravilnim titranjem zvučnih valova različite duljine.',
                'šuma': ' Šuma je velika zajednica biljaka, veće područje obraslo drvećem.',
                'šumar': ' Šumar je odrasla osoba bez obzira na spol ili muškarac koji čuva šumu.',
                'šumarev': ' Šumarev je koji pripada šumaru.',
                'šumarica': ' Šumarica je zeljasta ljekovita biljka iz porodice žabnjaka s cvjetovima.',
                'šumarica': ' Šumarica je žena koja čuva šumu.',
                'šumaričin': ' Šumaričin je koji pripada šumarici, ženi koja čuva šumu.',
                'šumarov': ' Šumarov je koji pripada osobi koja čuva šumu.',
                'šumarski': ' Šumarski je koji se odnosi na šumare i šumarstvo.',
                'šumarstvo': ' Šumarstvo je primarna gospodarska grana koja se bavi zaštitom, njegom, čuvanjem i iskorištavanjem šuma.',
                'šumiti': ' Šumiti znači proizvoditi šum.',
                'šumjeti': ' Šumjeti znači proizvoditi šum.',
                'šunka': ' Šunka je svinjski but sušen na dimu.',
                'šupalj': ' Šupalj je koji je iznutra prazan.',
                'šuplje': ' Šuplje je kao da je iznutra prazno.',
                'šupljina': ' Šupljina je prazan prostor ili otvor u čemu.',
                'šuškati': ' Šuškati znači činiti da što proizvede šuškav zvuk.',
                'šušketati': ' Šušketati znači dosadno šuškati i ometati šuškanjem.',
                'šušnuti': ' Šušnuti znači proizvoditi šuškav zvuk.',
                'šuštati': ' Šuštati znači proizvoditi šuštav zvuk.',
                'šutiti': ' Šutiti znači ne ispuštati nikakve glasove ni riječi.',
                'šutjeti': ' Šutjeti znači ne ispuštati nikakve glasove ni riječi.',
                'šutke': ' Šutke znači da se šuti, bez riječi.',
                'švedski': ' Švedski je koji se odnosi na Švedsku i Šveđane.',
                'švicarski': ' Švicarski je koji se odnosi na Švicarsku i Švicarce.',
                'tablet': ' Tablet je tanko prijenosno osobno računalo na baterije koje je veće od pametnoga telefona te kojim se upravlja s pomoću dodirnoga zaslona.',
                'tableta': ' Tableta je ljekoviti pripravak okrugla ili duguljasta oblika.',
                'tablica': ' Tablica je prikaz različitih podataka poredanih po stupcima i redcima.',
                'tad': ' Tad znači u to vrijeme, u tome trenutku, u trenutku koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                'tada': ' Tada znači u to vrijeme, u tome trenutku, u trenutku koji nije jako udaljen od trenutka u kojemu govoritelj govori.',
                'taj': ' Taj označuje mušku osobu, životinju ili predmet označen imenicom muškoga roda u blizini sugovoritelja.',
                'tajice': ' Tajice su hlače od rastezljiva materijala koje prianjaju uz nogu.',
                'tajlandski': ' Tajlandski je koji se odnosi na Tajland i Tajlanđane.',
                'tajna': ' Tajna je ono što se taji i ne otkriva drugima, o čemu se nikomu ne priča ili što se ne objavljuje.',
                'tajnica': ' Tajnica je žena koja obavlja administrativne poslove.',
                'tajničin': ' Tajničin je koji pripada tajnici.',
                'tajnički': ' Tajnički je koji se odnosi na tajnike i tajništvo.',
                'tajnik': ' Tajnik je odrasla osoba bez obzira na spol ili muška osoba koja obavlja administrativne poslove.',
                'tajnikov': ' Tajnikov je koji pripada tajniku.',
                'takav': ' Takav je koji je poput osobe, životinje ili predmeta koji je u blizini sugovoritelja.',
                'taknuti': ' Taknuti znači nakratko biti s kim ili s čim u kratkome tjelesnom doticaju.',
                'tako': ' Tako znači na taj način, na način koji se odnosi na nešto što nije jako (u konkretnome i u apstraktnome smislu) udaljeno od govoritelja. ',
                'također': ' Također naglašuje čije uključivanje ili uključivanje čega u kakvu skupinu, kao i tko drugi ili što drugo.',
                'taksi': ' Taksi je automobil kojim se uz naplatu prevoze putnici najčešće u gradskome prometu.',
                'taksimetar': ' Taksimetar je uređaj koji pokazuje prijeđene kilometre i cijenu vožnje.',
                'taksist': ' Taksist je odrasla osoba bez obzira na spol ili muškarac koji vozi taksi.',
                'taksistica': ' Taksistica je žena koja vozi taksi.',
                'taksističin': ' Taksističin je koji pripada taksistici.',
                'taksistov': ' Taksistov je koji pripada taksistu.',
                'takt': ' Takt je vremenski odsječak koji odgovara određenomu broju otkucaja, mjerna jednica za ritam. ',
                'talijanski': ' Talijanski je koji se odnosi na Italiju i Talijane.',
                'taliona': ' Taliona je tvornica za proizvodnju kovina iz rudače.',
                'talionica': ' Talionica je tvornica za proizvodnju kovina iz rudače.',
                'taliti': ' Taliti znači činiti da čvrsta tvar zagrijavanjem prijeđe u tekuće stanje.',
                'tama': ' Tama je stanje u kojemu nema svjetla ili ga nema dovoljno.',
                'taman': ' Taman je koji nije ispunjen svjetlom.',
                'tambura': ' Tambura je trzaće žičano narodno glazbalo.',
                'tamburaš': ' Tamburaš je osoba bez obzira na spol ili muška osoba koja svira tamburu.',
                'tamburašev': ' Tamburašev je koji pripada tamburašu.',
                'tamburašica': ' Tamburašica je ženska osoba koja svira tamburu.',
                'tamburašičin': ' Tamburašičin je koji pripada tamburašici.',
                'tamburaški': ' Tamburaški je koji se odnosi na tambure i tamburaše.',
                'tamburica': ' Tamburica je mala tambura.',
                'tamno': ' Tamno je tako da nije ispunjeno svjetlom.',
                'tamo': ' Tamo znači na to mjesto, na mjesto koje nije jako udaljeno od mjesta na kojemu se nalazi govoritelj.',
                'tanak': ' Tanak je koji zauzima manje prostora po širini ili dubini nego što se očekuje.',
                'tanko': ' Tanko znači u tankome sloju .',
                'tanjur': ' Tanjur je dublja ili plića posuda iz koje se jede.',
                'tata': ' Tata je otac od milja.',
                'tatin': ' Tatin je koji pripada tati.',
                'tava': ' Tava je kuhinjska posuda s dugim drškom u kojoj se prže jela.',
                'tavan': ' Tavan je potkrovni prostor, prostorija između najvišega kata i krova.',
                'tavanski': ' Tavanski je koji se odnosi na tavan.',
                'tečaj': ' Tečaj je kraća obuka izvan redovitoga školskog sustava tijekom koje se stječu osnovna znanja ili vještine iz pojedinih područja.',
                'teći': ' Teći znači kretati se od izvora prema ušću.',
                'tehnički': ' Tehnički je koji se odnosi na tehniku.',
                'tehnika': ' Tehnika su uređaji potrebni da bi se nešto proizvelo ili izvršilo.',
                'tehnologija': ' Tehnologija je sustav primjene znanstvenih spoznaja i metoda i tehničkih dostignuća u industrijskoj proizvodnji.',
                'tek': ' Tek je želja za jelom, potreba za jelom ili uživanje u jelu.',
                'tek': ' Tek znači prije kratkoga vremena, malo prije.',
                'tekst': ' Tekst su riječi knjige, članka, pisma ili bilo kojega drugog napisanog ili tiskanog djela.',
                'tekući': ' Tekući je koji teče, koji može teći.',
                'tekućica': ' Tekućica je voda na površini Zemlje koja teče od izvora prema ušću zbog sile teže.',
                'tekućina': ' Tekućina je tvar koja ima svojstvo da teče, tvar u tekućemu stanju.',
                'tele': ' Tele je mlado goveda.',
                'teleći': ' Teleći je koji se odnosi na telad.',
                'telefaks': ' Telefaks je uređaj za prenošenje pisanih poruka ili slika u okviru telefonske mreže.',
                'telefon': ' Telefon je uređaj za prijenos govora na daljinu najčešće između dvaju sugovornika.',
                'telefonirati': ' Telefonirati znači razgovarati telefonom.',
                'telefonski': ' Telefonski je koji se odnosi na telefon.',
                'telegraf': ' Telegraf je uređaj za prijenos znakova na daljinu.',
                'telegram': ' Telegram je kratka poruka koja se prenosi na daljinu s pomoću telegrafa, a dostavlja se korisniku u pisanome obliku.',
                'telegramski': ' Telegramski je koji je u obliku telegrama. ',
                'telegramski': ' Telegramski znači s pomoću telegrama. ',
                'telenastava': ' Telenastava je nastava koja se prenosi televizijski.',
                'telenovela': ' Telenovela vrsta je televizijske serije zaokružene radnje koja se u epizodama prikazuje svakoga dana, u kojoj se događaji prikazuju s naglašenim osjećajima iz perspektive (najčešće ženskog) glavnog lika, a epizode obično završavaju sa dramatičnim događajem čiji ishod ostaje nejasan.',
                'teleprinter': ' Teleprinter je telegrafski uređaj za odašiljanje i primanje pisanih poruka.',
                'teleskop': ' Teleskop je optička naprava ili uređaj za promatranje nebeskih tijela.',
                'teletina': ' Teletina je teleće meso.',
                'televizija': ' Televizija je sustav elektroničkoga snimanja, prenošenja i emitiranja slike i zvuka.',
                'televizor': ' Televizor je televizijski prijamnik.',
                'teliti': ' Teliti znači donositi mlado na svijet (o kravi).',
                'tema': ' Tema je predmet razgovora, pisanoga djela ili djelatnosti.',
                'temelj': ' Temelj je u zemlju ukopan dio građevine koji nosi konstrukciju.',
                'tempera': ' Tempera je boja u prahu razrijeđena otopinom ljepila uz dodatak veziva.',
                'temperatura': ' Temperatua je fizička veličina, svojstvo tijela ili sustava u toplinskoj ravnoteži.',
                'tempo': ' Tempo je brzina izvođenja koje skladbe, plesnih pokreta, kretanja i sl.',
                'tenis': ' Tenis je igra na ravnome otvorenome ili zatvorenome prostoru u kojoj se loptica reketom prebacuje preko mreže na protivničko polje.',
                'tenisač': ' Tenisač je osoba bez obzira na spol ili muška osoba koja profesionalno ili amaterski igra tenis.',
                'tenisačev': ' Tenisačev je koji pripada tenisaču.',
                'tenisačica': ' Tenisačica je žena koja profesionalno ili amaterski igra tenis.',
                'tenisačičin': ' Tenisačičin je koji pripada tenisačici.',
                'tenisački': ' Tenisački je koji se odnosi na tenisače.',
                'tenisica': ' Tenisice su sportska obuća najčešće izrađena od kože ili platna.',
                'teniski': ' Teniski je koji se odnosi na tenis.',
                'tepih': ' Tepih je pokrivač za pod, obično izrađen od vune, lanenih, pamučnih ili svilenih niti.',
                'terasa': ' Terasa je prostrani ograđeni izbočeni dio zgrade na koji se izlazi iz prostorije ili ravan krov.',
                'teren': ' Teren je površina Zemlje koja ima određena obilježja.',
                'teritorij': ' Teritorij je upravno područje.',
                'termin': ' Termin je oznaka pojma određenoga u kojemu znanstvenom području s pomoću jezičnoga izraza.',
                'terminolog': ' Terminolog je stručnjak koji se bavi terminologijom. ',
                'terminologija': ' Terminologija je sustav naziva određene struke. ',
                'terminologinja': ' Terminologinja je stručnjakinja koja se bavi terminologijom. ',
                'terminologinjin': ' Terminologinjin je koji pripada terminologinji.',
                'terminologov': ' Terminologov je koji pripada terminologu. ',
                'terminološki': ' Terminološki je koji se odnosi na termin i terminologiju. ',
                'termoelement': ' Termoelement je vrsta termometra koji služi za mjerenje viših temperatura (do 1500 °C) upotrebom termoelektričnosti, odnosno Seebeckova efekta.',
                'termofor': ' Termofor je naprava za grijanje dijelova tijela ili kreveta.',
                'termometar': ' Termometar je naprava ili uređaj za mjerenje temperature.',
                'termostat': ' Termostat je uređaj za održavanje određene temperature u prostorijama ili uređajima.',
                'tesla': ' Tesla je mjerna jedinica za magnetsku indukciju (T).',
                'teško': ' Teško znači uz velik napor.',
                'teta': ' Teta je majčina ili očeva sestra.',
                'tetak': ' Tetak je muž očeve ili majčine sestre, tetin muž.',
                'tetanus': ' Tetanus je zarazna bolest prouzročena bacilom koji preko zaražene rane oštećuje živčani sustav i izaziva grčenje mišića.',
                'težak': ' Težak je koji je velike težine.',
                'ticati se': ' Ticati se znači biti ili stajati u kakvu odnosu prema drugima, imati veze s kim ili s čim.',
                'tifus': ' Tifus je zarazna bakterijska bolest popraćena općom slabošću organizma, temperaturom glavoboljom i halucinacijama.',
                'tigar': ' Tigar je zvijer iz porodice mačaka crvenkastožuta krzna s crnim poprečnim prugama, živi u azijskim prašumama, jugoistočnome Sibiru te jugoistočnoj Aziji.',
                'tih': ' Tih je koji se slabo čuje.',
                'tiho': ' Tiho znači prigušenim glasom ili prigušenoga zvuka.',
                'tijekom': ' Tijekom označuje da se što proteže u određenome razdoblju.',
                'tijelo': ' Tijelo je čovječji ili životinjski organizam.',
                'Tijelovo': ' Tijelovo je katolički blagdan tijela i krvi Kristove koji se slavi u četvrtak poslije svetkovine Presvetoga Trojstva. ',
                'tijelovski': ' Tijelovski je koji se odnosi na Tijelovo. ',
                'tijesak': ' Tijesak je naprava za tiskanje, cijeđenje ili gnječenje.',
                'tijesto': ' Tijesto je smjesa brašna, soli, vode i različitih dodataka koja se upotrebljava za pripremu različitih vrsta jela.',
                'tik-tak': ' Usklikom 
                ',
                'tikva': ' Tikva je jednogodišnja biljka velikih žutih cvjetova kojoj se stabljika povija po tlu.',
                'tikvica': ' Tikvica je mala tikva.',
                'timpan': ' Timpan je udaraljkaško glazbalo koje se sastoji od bakrnoga kotla na čijemu je otvoru napeta koža, a zvuk se proizvodi udarom batića.',
                'timpanist': ' Timpanist je osoba bez obzira na spol ili muška osoba koja svira timpan.',
                'timpanistica': ' Timpanistica je ženska osoba koja svira timpan.',
                'timpanističin': ' Timpanističin je koji pripada timpanistici.',
                'timpanistov': ' Timpanistov je koji pripada timapnistu.',
                'timpanski': ' Timpanski je koji se odnosi na timpane i timpaniste.',
                'tip': ' Tip je određena vrsta ili skupina koja ima kakva zajednička svojstva po kojima se razlikuje od drugih vrsta ili skupina.',
                'tipka': ' Tipka je pokretna pločica na nekim glazbalima.',
                'tipkalo': ' Tipkalo je naprava koja proizvodi zvučni ili svjetlosni signal ako je se pritisne ili pokreće kakvu automatiziranu radnju tako dugo dok se pritišće.',
                'tipkovnica': ' Tipkovnica je uređaj s tipkama koji služi za unos podataka i upravljanje računalnim sustavom.',
                'tisuća': ' Tisuća je skupina od tisuću članova.',
                'tisući': ' Tisući je koji je iza devetsto devedeset devetoga, a prije tisuću prvoga.',
                'tisućiti': ' Tisućiti je koji je iza devetsto devedeset devetoga, a prije tisuću prvoga.',
                'tisuću': ' Tisuću je broj koji se obilježuje s 1000, za jedan veći od broja devetsto devedeset devet i za jedan manji od broja tisuću jedan.',
                'tišina': ' Tišina je stanje bez zvukova, glasova i šumova.',
                'tivatski': ' Tivatski je koji se odnosi na Tivat i Tivćane. ',
                'tj.': ' Kratica 
                ',
                'tjedan': ' Tjedan je kalendarsko razdoblje od sedam dana, obično od ponedjeljka do nedjelje.',
                'tjelesni': ' Tjelesni je koji se odnosi na tijelo.',
                'tjeme': ' Tjeme je najviši dio lubanje, vrh glave.',
                'tjerati': ' Tjerati znači siliti koga da napusti mjesto na kojemu se nalazi.',
                'tjestenina': ' Tjestenina je namirnica od suhoga tijesta bez kvasca, različitih oblika i s različitim dodatcima.',
                'tkivo': ' Tkivo je skup stanica koje izgrađuju živi organizam.',
                'tko': ' Tko pita za nepoznatu osobu.',
                'tkogod': ' Tkogod označuje nepoznatu osobu, bilo koga, ma koga.',
                'tlakomjer': ' Tlakomjer je uređaj za mjerenje tjelesnoga tlaka.',
                'tlo': ' Tlo je dio Zemljine površine koji ima određena obilježja.',
                'tobogan': ' Tobogan je naprava na koju se penje i zatim spušta strmim žlijebom, obično na dječjim igralištima ili uz bazene za kupanje.',
                'točan': '  Točan je koji je bez pogreške, koji je u skladu s istinom.',
                'točiti': ' Točiti znači činiti da tekućina teče, obično iz čega većega u što manje',
                'točka': ' Točka je pravopisni znak (.) koji stoji na kraju rečenice te iza kratica i rednih brojeva. ',
                'točkica': ' Točkica je mala točka. ',
                'točno': ' Točno označuje da je količina, način, vrijeme, mjesto itd. upravo onakvo kako se navodi.',
                'točnost': ' Točnost je svojstvo onoga što ne sadržava pogrešku, što odgovara istini.',
                'tokijski': ' Tokijski je koji se odnosi na Tokio i Tokijce.',
                'toliko': ' Toliko znači u toj količini ili mjeri, u količini ili mjeri koju ima ono što prostorno ili vremenski nije udaljeno od govoritelja.',
                'ton': ' Ton je zvuk koji nastaje pravilnim titranjem savitljivoga tijela, obilježuje ga visina, jačina, boja i trajanje.',
                'tona': ' Tona je mjerna jedinica za masu, tisuću kilograma (t).',
                'tonuti': ' Tonuti znači propadati ispod površine vode ili koje žitke mase i spuštati se prema dnu.',
                'top': ' Top je vatreno oružje s razmjerno dugom cijevi velikoga dometa i velike razorne moći.',
                'topao': ' Topao je koji ima visoku temperaturu, koji izaziva osjet topline.',
                'toplina': ' Toplina je svojstvo onoga što je toplo, što ima temperaturu višu od temperature okoliša ili prosječne temperature.',
                'top-lista': ' Top-lista popis je u kojemu se jedinice navode prema redoslijedu poretka.',
                'toplo': ' Toplo znači pri visokoj temperaturi.',
                'toplomjer': ' Toplomjer je naprava ili uređaj za mjerenje temperature.',
                'topot': ' Topot je zvuk koji nastaje pri udaranju kopita o tlo, hodanju ili trčanju.',
                'toptati': ' Toptati znači proizvoditi topot.',
                'torba': ' Torba je predmet u kojemu se nose stvari.',
                'torinski': ' Torinski je koji se odnosi na Torino i Torinjane.',
                'torta': ' Torta je okrugao kolač s nadjevom ili kremom.',
                'trač': ' Trač je negativna ili senzacionalistička te često lažna ili poluistinita vijest o onome tko nije prisutan.',
                'tračati': ' Tračati znači neprimjereno, loše govoriti o onome tko nije prisutan. ',
                'trač-baba': ' Trač-baba je osoba koja voli tračati, koja širi tračeve.',
                'tračer': ' Tračer je osoba bez obzira na spol ili muška osoba koja često trača i širi tračeve.',
                'tračerica': ' Tračerica je ženska osoba koja često trača i širi tračeve.',
                'tračeričin': ' Tračeričin je koji pripada tračerici.',
                'tračerov': ' Tračerov je koji pripada tračeru.',
                'tračerski': ' Tračerski je koji se odnosi na trač i tračere.',
                'tračnica': ' Tračnica je jedan od dvaju usporednih dijelova pruge izrađen od čelika.',
                'trač-partija': ' Trač-partija susret je obično bliskih osoba tijekom kojega se razgovara o svakodnevnim temama.',
                'trag': ' Trag je otisak stopala, papaka ili prsta divljači, kotača i sl. na tlu ili snijegu.',
                'trajan': ' Trajan je koji traje u vremenu, koji ne prolazi.',
                'trajati': ' Trajati znači biti ili postojati u vremenu.',
                'trajekt': ' Trajekt je brod za prijevoz vozila, tereta i putnika.',
                'trajno': ' Trajno znači tako da traje u vremenu, tako da ne prolazi.',
                'trajnost': ' Trajnost je svojstvo onoga što je trajno.',
                'trak': ' Trakt je dug, uzak komad tkanine.',
                'traktor': ' Traktor je motorno vozilo koje služi za vuču poljoprivrednih strojeva, oruđa, priključnih vozila te teškoga tereta.',
                'tramvaj': ' Tramvaj je vozilo na električni pogon koje vozi po tračnicama i služi za prijevoz putnika u gradskome prometu.',
                'transformator': ' Transformator je uređaj koji s pomoću elektromagnetske indukcije pretvara izmjeničnu struju višega napona u izmjeničnu struju nižega napona ili obratno.',
                'traperice': ' Traperice su hlače od trapera.',
                'trapez': ' Trapez je četverokut koji ima jedan par usporednih stranica.',
                'trapezast': ' Trapezast je koji nalikuje trapezu.',
                'tras': ' Tras je onomatopejska riječ kojom se oponaša udarac.',
                'tratinčica': ' Tratinčica je biljka iz porodice glavočika sitnih, najčešće bijelih cvatova s mnogo latica.',
                'trava': ' Trava je porodica jednogodišnjih ili višegodišnjih biljaka jednosupnica čupava korijenja i šuplje stabljike koje su prilagođene oprašivanju vjetrom.',
                'travanj': ' Travanj je četvrti mjesec u kalendarskoj godini, mjesec između ožujka i svibnja',
                'travarica': ' Travarica je rakija lozovača u koju su dodane trave.',
                'travnički': ' Travnički je koji se odnosi na Travnik i Travničane.',
                'travnjak': ' Travnjak je zelena površina zasađena njegovanom, uzgojenom travom.',
                'tražilica': ' Tražilica je dio programa ili mrežne stranice koji je prikazan kao polje za unos sadržaja koji se nakon unosa pretražuje unutar određenih računalnih mapa ili mrežnih stranica.',
                'tražiti': ' Tražiti znači truditi se pronaći ono što se izgubilo ili zametnulo.',
                'trbuh': ' Trbuh je dio tijela između prsnoga koša i zdjelice u kojemu su smješteni probavni organi, bubrezi, slezena i krvne žile.',
                'trčati': ' Trčati znači kretati se brzo skačući s noge na nogu.',
                'trebati': ' Trebati što znači imati, osjećati potrebu za kim ili čim.',
                'trebinjski': ' Trebinjski je koji se odnose na Trebinju i Trebinjane.',
                'trebinjski': ' Trebinjski je koji se odnose na Trebinje i Trebinjce.',
                'trećaš': ' Trećaš je učenik (bez obzira na spol ili muškoga spola) trećega razreda osnovne ili srednje škole.',
                'trećašev': ' Trećašev je koji pripada trećašu.',
                'trećašica': ' Trećašica je učenica trećega razreda osnovne ili srednje škole.',
                'trećašičin': ' Trećašičin je koji pripada trećašici.',
                'treći': ' Treći je koji je iza drugoga, a prije četvrtoga.',
                'trećina': ' Trećina je broj koji pomnožen s tri daje cijeli broj.',
                'tren': ' Tren je vrijeme koje kratko traje.',
                'trener': ' Trener je odrasla osoba bez obzira na spol ili muškarac koji uvježbava sportaše. ',
                'trenerica': ' Trenerica je žena koja uvježbava koga. ',
                'treneričin': ' Treneričin je koji pripada trenerici.',
                'trenerov': ' Trenerov je koji pripada treneru.',
                'trenerski': ' Trenerski je onaj koji se odnosi na trenere.',
                'trening': ' Trening je osposobljavanje za utakmice ili natjecanje.',
                'trenirati': ' Trenirati znači poučavati, davati upute, prilagođavati, navikavati određenomu ponašanju, navikama i sl.',
                'trenirka': ' Trenirka je sportska odjeća koja se obično nosi na treningu ili kod kuće.',
                'trenutačan': ' Trenutačan je koji je u ovome trenutku.',
                'trenutačno': ' Trenutačno znači u ovome trenutku.',
                'trenutak': ' Trenutak je vrijeme koje kratko traje.',
                'trenutan': ' Trenutan je koji je u ovome trenutku.',
                'trenutno': ' Trenutno znači u ovome trenutku.',
                'trepavica': ' Trepavica je dlaka na rubu očnoga kapka. ',
                'trepnuti': ' Trepnuti znači nakratko zatvoriti i otvoriti očne kapke.',
                'treptati': ' Treptati znači nakratko zatvarati i otvarati očne kapke.',
                'tres': ' Usklikom 
                ',
                'treskati': ' Treskati znači jako udarati koga ili o što. ',
                'tresnuti': ' Tresnuti znači jako udariti koga ili o što. ',
                'tresti': ' Tresti znači jakim pokretima pomicati u jednome pa u drugome smjeru.',
                'trešnja': ' Trešnja je voćka iz porodice ruža široke krošnje, sitnih bijelih cvjetova raspoređenih u cvatove i slatkih bobičastih plodova.',
                'trešnjev': ' Trešnjev je koji pripada trešnji, koji je dio trešnje.',
                'trešnjin': ' Trešnjin je koji pripada trešnji, koji je dio trešnje.',
                'treštati': ' Treštati znači odjekivati gromoglasnom bukom.',
                'trg': ' Trg je prostran javni gradski prostor okružen zgradama.',
                'trgati': ' Trgati što znači naglim pokretima rastavljati što na dijelove ili odvajati od čega.',
                'trgovac': ' Trgovac je odrasla osoba bez obzira na spol ili muškarac koji se bavi trgovanjem, koji kupuje i prodaje na veliko.',
                'trgovački': ' Trgovački je onaj koji se odnosi na trgovce i trgovinu.',
                'trgovati': ' Trgovati čime znači kupovati po nižoj i prodavati po višoj cijeni te tako ostvarivati zaradu.',
                'trgovčev': ' Trgovčev je koji pripada trgovcu.',
                'trgovina': ' Trgovina je gospodarska djelatnost koja se bavi kupnjom i prodajom robe i posreduje između proizvođača i kupaca.',
                'trgovkinja': ' Trgovkinja je žena koja se bavi trgovanjem, koja kupuje i prodaje na veliko.',
                'trgovkinjin': ' Trgovkinjin je koji pripada trgovkinji.',
                'tri': ' Tri je broj koji se obilježuje s 3, za jedan veći od broja dva i za jedan manji od broja četiri.',
                'triangl': ' Triangl je udaraljkaško glazbalo od čelične žice u obliku trokuta.',
                'trica': ' Trica je pogodak u košarci postignut s udaljenosti veće od 6,25 m.',
                'tricikl': ' Tricikl je vozilo s trima kotačima koje se pokreće nogama ili na električnim motorom.',
                'trideset': ' Trideset je broj koji se obilježuje s 30, za jedan veći od broja dvadeset devet i za jedan manji od broja trideset jedan.',
                'tridesetak': ' Tridesetak je približno trideset, oko trideset.',
                'tridesetero': ' Tridesetero je skupina od trideset osoba različita spola.',
                'trideseti': ' Trideseti je koji je iza dvadeset devetoga, a prije trideset prvoga.',
                'tridesetogodišnjak': ' Tridesetogodišnjak je osoba koja ima trideset godina.',
                'tridesetogodišnjakinja': ' Tridesetogodišnjakinja je ženska osoba koje ima trideset godina.',
                'tridesetogodišnji': ' Tridesetogodišnji je koji ima trideset godina.',
                'tridesetogodišnjica': ' Tridesetogodišnjica je dan ili godina u kojoj se navršava trideset godina od događaja koji se obilježuje.',
                'tridesetorica': ' Tridesetorica je skupina od trideset muških osoba.',
                'trinaest': ' Trinaest je broj koji se obilježuje s 13, za jedan veći od broja dvanaest i za jedan manji od broja četrnaest.',
                'trinaestero': ' Trinaestero je skupina od trinaest osoba različita spola.',
                'trinaesti': ' Trinaesti je koji je iza dvanaestoga, a prije četrnaestoga.',
                'triput': ' Triput je u tri prilike, u tri navrata.',
                'tristo': ' Tristo je broj koji se obilježuje s 300, za jedan veći od broja dvjesto devedeset devet i za jedan manji od broja tristo jedan.',
                'tristoti': ' Tristoti je koji je iza dvjesto devedeset devetoga, a prije tristo prvoga.',
                'trn': ' Trn je šiljasta, kruta izraslina na stabljici ili listu nekih biljaka.',
                'trodijelan': ' Trodijelan je koji se sastoji od triju dijelova.',
                'trodimenzijski': ' Trodimenzijski je koji se odnosi na tri dimenzije. ',
                'trodimenzionalni': ' Trodimenzionalni je koji se odnosi na tri dimenzije. ',
                'trogirski': ' Trogirski je koji se odnosi na Trogir i Trogirane.',
                'trogodišnjak': ' Trogodišnjak je dijete koje ima tri godine.',
                'trogodišnjakinja': ' Trogodišnjakinja je žensko dijete koje ima tri godine.',
                'trogodišnji': ' Trogodišnji je koji ima tri godine.',
                'troje': ' Troje je skupina triju osoba različita spola.',
                'troji': ' Troji je skupina koja se sastoji od triju skupova ili parova.',
                'trojica': ' Trojica je skupina od triju muških osoba.',
                'trojka': ' Trojka je brojka koja označuje broj tri.',
                'trokatni': ' Trokatni je koji ima tri kata.',
                'trokatnica': ' Trokatnica je zgrada od tri kata.',
                'trokratnik': ' Trokratnik je broj koji je umnožak zadanoga broja i broja 3, koji je triput veći od zadanoga broja.',
                'trokrevetni': ' Trokrevetni je koji ima tri kreveta.',
                'trokut': ' Trokut je lik u ravnini omeđen trima stranicama. ',
                'trokutast': ' Trokutast je koji je nalik trokutu.',
                'trokutić': ' Trokutić je mali trokut.',
                'trombon': ' Trombon je limeno puhaće glazbalo po registru dublje od roga, a više od tube.',
                'trombonist': ' Trombonist je osoba bez obzira na spol ili muška osoba koja svira trombon.',
                'trombonistica': ' Trombonistica je ženska osoba koja svira trombon.',
                'trombonističin': ' Trombonističin je koji pripada trombonistici.',
                'trombonistov': ' Trombonistov je koji pripada trombonistu.',
                'trombonski': ' Trombonski je koji se odnosi na trombone i tromboniste.',
                'tromjesečni': ' Tromjesečni je koji ima tri mjeseca.',
                'troredan': ' Troredan je koji ima tri reda čega, koji se sastoji od triju redova.',
                'trorječan': ' Trorječan je koji se sastoji od triju riječi.',
                'trosjed': ' Trosjed je vozilo predviđeno za tri osobe.',
                'troslov': ' Troslov je znak za jedan glas sastavljen od triju slova. ',
                'trosoban': ' Trosoban je koji ima tri sobe.',
                'trostruk': ' Trostruk je koji ima tri dijela, koji se ponavlja tri puta.',
                'trostruko': ' Trostruko je toliko, toliko i još toliko, tri puta.',
                'trošak': ' Trošak je iznos robe ili usluga.',
                'trošilo': ' Trošilo je uređaj koji za rad troši energiju iz kojega zajedničkog izvora.',
                'trošiti': ' Trošiti što znači uporabom smanjivati količinu čega.',
                'trotjedni': ' Trotjedni je koji ima tri tjedna.',
                'trotočka': ' Trotočka je pravopisni znak (...) koji pokazuje da je tekst namjerno prekinut ili izostavljen. ',
                'truba': ' Truba je limeno puhaće glazbalo najvišega registra.',
                'trubač': ' Trubač je osoba bez obzira na spol ili muška osoba koja svira trubu.',
                'trubačev': ' Trubačev je koji pripada trubaču.',
                'trubačica': ' Trubačica je ženska osoba koja svira trubu.',
                'trubačičin': ' Trubačičin je koji pripada trubačici.',
                'trubački': ' Trubački je koji se odnosi na trube i trubače.',
                'trubiti': ' Trubiti znači svirati trubu.',
                'truditi se': ' Truditi se znači ulagati napore, težiti da se što postigne.',
                'trudnoća': ' Trudnoća je razdoblje od začeća do rođenja djeteta, stanje žene koja je trudna, koja nosi dijete u utrobi.',
                'trup': ' Trup je središnji dio ljudskoga ili životinjskoga tijela između vrata i udova koji čine prsni koš, trbušna šupljina i zdjelica.',
                'trut': ' Trut je mužjak pčela.',
                'tržište': ' Tržište je područje na kojemu se nudi ili prodaje i kupuje roba, usluge i novac.',
                'tržnica': ' Tržnica je uređeni gradski prostor na kojemu se prodaju namirnice ili sitne stvari.',
                'tuba': ' Tuba je posuda u obliku cijevi napravljena od savitljiva gradiva koja služi za spremanje mekih pripravaka koji se iz nje istiskuju.',
                'tuberkuloza': ' Tuberkuloza je zarazna bolest čovjeka i životinja prouzročena bacilima iz skupine mikrobakterija koja se prenosi kapljično.',
                'tubist': ' Tubist je osoba bez obzira na spol ili muška osoba koja svira tubu.',
                'tubistica': ' Tubistica je ženska osoba koja svira tubu.',
                'tubističin': ' Tubističin je koji pripada tubistici.',
                'tubistov': ' Tubistov je koji pripada tubistu.',
                'tuča': ' Tuča je oborina koja nastaje u olujnim oblacima u toplome dijelu godine, a sastoji se od nepravilnih ledenih zrna promjera većega od pet milimetara.',
                'tučak': ' Tučak je kratko, teško metalno oruđe s okruglim krajevima kojim se tuca u mužaru ili u stupi.',
                'tučnjava': ' Tučnjava je fizički obračun dviju ili više osoba.',
                'tući': ' Tući koga znači zadavati komu udarce.',
                'tud': ' Tud znači tim smjerom ili putom, smjerom ili putom koji nije jako udaljen od govoritelja.',
                'tuda': ' Tuda znači tim smjerom ili putom, smjerom ili putom koji nije jako udaljen od govoritelja.',
                'tuđ': ' Tuđ je koji pripada drugomu ili drugima.',
                'tuga': ' Tuga je psihička patnja, trpljenje prouzročeno kakvim gubitkom, nesrećom ili razočaranjem.',
                'tugovati': ' Tugovati znači osjećati tugu ili žalost.',
                'tulipan': ' Tulipan je lukovičasta ukrasna biljka iz porodice ljiljana dugačkih listova i stabljike s cvijetom koji može biti u različitim bojama.',
                'tuliti': ' Tuliti znači ispuštati dugačak i jednoličan zvuk.',
                'tulumariti': ' Tulumariti znači raspojasano se zabavljati, obično u većoj skupini ljudi, uz ples i alkoholna pića.',
                'tunel': ' Tunel je građevni prolaz prokopan kroz brdo, ispod vodene površine, služi za promet ili polaganje različitih cijevi.',
                'tuniški': ' Tuniški je koji se odnosi na Tunis i Tunižane.',
                'tunjevina': ' Tunjevina je meso tune.',
                'turcizam': ' Turcizam je riječ ili sveza turskoga podrijetla posuđena u koji drugi jezik i najčešće u određenoj mjeri prilagođena njegovu jezičnomu sustavu.',
                'turist': ' Turist je osoba bez obzira na spol ili muška osoba koji putuje za svoje zadovoljstvo, koji privremeno boravi na kojemu mjestu.',
                'turistica': ' Turistica je ženska osoba koja putuje za svoje zadovoljstvo, koja privremeno boravi na kojemu mjestu.',
                'turističin': ' Turističin je koji pripada turistici.',
                'turistički': ' Turistički je koji se odnosi na turiste i turizam.',
                'turizam': ' Turizam je gospodarska grana, djelatnost čiji je zadatak da se turistima organiziraju putovanja te smještaj, odmor i razonoda u mjestima privremenoga boravka.',
                'turnir': ' Turnir je natjecanje u određenoj sportskoj, društvenoj ili virtualnoj igri u kojemu sudjeluju natjecatelji kako bi osvojili nagradu.',
                'turski': ' Turski je koji se odnosi na Tursku i Turke.',
                'tuš': ' Tuš je crnilo koje se uglavnom upotrebljava u tehničkome crtanju.',
                'tuš': ' Tuš je naprava za pranje tijela jakim i tankim mlazovima vode.',
                'tuš': ' Tuš je pobjednički zahvat u hrvanju kojim se protivnika prisili da objema lopaticama dodirne strunjaču.',
                'tuš': ' Tuš je kratak svečani glazbeni pozdrav koji se obično izvodi puhačkim instrumentima i udaraljkama.',
                'tutanj': ' Tutanj je jak i gromak zvuk.',
                'tutnjiti': ' Tutnjiti znači stvarati veliku buku, odašiljati jak i gromak zvuk.',
                'tu-tu': ' Tu-tu je onomatopejska riječ kojm se oponaša zvuk automobilske sirene.',
                'tuzlanski': ' Tuzlanski je koji se odnosi na Tuzlu i Tuzlake.',
                'tužan': ' Tužan je koji osjeća tugu.',
                'tužno': ' Tužno znači tako da odražava, očituje tugu.',
                'tvar': ' Tvar je ono od čega se što sastoji, sve što ima masu i zauzima prostor.',
                'tvoj': ' Tvoj je onaj koji pripada sugovoritelju.',
                'tvornica': ' Tvornica je veće poduzeće u kojemu radnici s pomoću strojeva proizvode različitu robu u većim količlinama.',
                'tvrd': ' Tvrd je koji je čvrste građe, koji pruža jak otpor prodoru sječiva i drugih oruđa, koji se teško obrađuje ili koji ne mijenja oblik pod vanjskim pritiscima.',
                'tvrditi': ' Tvrditi znači uvjeravati koga da je što istinito ili točno.',
                'tvrdoglav': ' Tvrdoglav je koji je uporan u provedbi svojih zamisli, koji ne prihvaća razumne razloge.',
                'tvrdoglavo': ' Tvrdoglavo znači uporno u provođenju svojih zamisli uz odbacivanje razumnih razloga da se postupi drukčije.',
                'tvrdoglavost': ' Tvrdoglavost je osobina onoga koji je tvrdoglav.',
                'tvrđava': ' Tvrđava je obrambena utvrda ograđena debelim zidovima sa stalnom posadom i naoružanjem.',
                'tvrtka': ' Tvrtka je gospodarska jedinica ili radna organizacija koja se bavi proizvodnjom ili pružanjem usluga.',
                'ubijati': ' Ubijati koga znači prouzročivati čiju smrt.',
                'ubiti': ' Ubiti koga znači prouzročiti čiju smrt.',
                'ubrus': ' Ubrus je komad papira ili tkanine kojim se brišu usta nakon jela ili kojim se štiti odjeća tijekom jela.',
                'uč.': ' Uč. je kratica od 
                ',
                'učenica': ' Učenica je ženska osoba koja pohađa osnovnu ili srednju školu.',
                'učeničin': ' Učeničin je koji pripada učenici.',
                'učenički': ' Učenički je koji se odnosi na učenike.',
                'učenik': ' Učenik je osoba bez obzira na spol ili muška osoba koja pohađa osnovnu ili srednju školu.',
                'učenikov': ' Učenikov je koji pripada učeniku, osobi bez obzira na spol ili muškoj osobi koja pohađa osnovnu ili srednju školu',
                'učenje': ' Učenje je stjecanje znanja, vještina ili iskustva.',
                'učestalost': ' Učestalost je svojstvo onoga što je učestalo.',
                'učiniti': ' Učiniti što znači postupiti na određeni način prema drugima, napraviti kakvu radnju ili obaviti kakav posao.',
                'učiona': ' Učiona je prostorija u školskoj ustanovi u kojoj se održava nastava.',
                'učionica': ' Učionica je prostorija u školskoj ustanovi u kojoj se održava nastava.',
                'učitelj': ' Učitelj je odrasla osoba bez obzira na spol ili muškarac koji vodi nastavu u osnovnoj školi.',
                'učiteljev': ' Učiteljev je koji pripada  učitelju, odrasloj osobi bez obzira na spol ili muškarcu koji vodi nastavu u osnovnoj školi',
                'učiteljica': ' Učiteljica je žena koji vodi nastavu u osnovnoj školi.',
                'učiteljičin': ' Učiteljičin je koji pripada učiteljici,  ženi koja vodi nastavu u osnovnoj školi.',
                'učiteljski': ' Učiteljski je koji se odnosi na učitelje,  odrasle osobe bez obzira na spol koje vode nastavu u osnovnoj školi.',
                'učiti': ' Učiti znači stjecati znanje, vještinu ili iskustvo.',
                'ući': ' Ući u što znači doći ili pristupiti u koji prostor.',
                'udaljen': ' Udaljen je koji je na velikoj prostornoj udaljenosti čega.',
                'udaljeno': ' Udaljeno znači s udaljenosti, na daljinu.',
                'udaljenost': ' Udaljenost je svojstvo onoga što je udaljeno.',
                'udarac': ' Udarac je snažan zamah rukama ili nogama ili kakvim predmetom u napadu na koga ili u dodiru s čim.',
                'udaraljka': ' Udaraljka je glazbalo na kojemu se svira udaranjem rukama, batićem ili palicom.',
                'udarati': ' Udarati znači pritiskati što na što tako da ostavi trag.',
                'udariti': ' Udariti znači pritisnuti što na što tako da ostavi trag.',
                'udati': ' Udati znači učiniti da žena stupi u brak.',
                'udavati': ' Udavati znači činiti da žena stupi u brak.',
                'udica': ' Udica je naprava za lovljenje ribe u obliku male zavinute čelične šipke sa šiljkom na koji se nabija mamac za ribu.',
                'udoban': ' Udoban je koji je dobre kakvoće ili oblika te pri uporabi stvara osjećaj zadovoljstva.',
                'udobno': ' Udobno je tako da prouzročuje osjećaj zadovoljstva.',
                'udobnost': ' Udobnost je svojstvo onoga što je dobre kakvoće ili oblika te pri uporabi stvara osjećaj zadovoljstva.',
                'udruga': ' Udruga je  zajednica koja okuplja članove na temelju zajedničke koristi, potrebe ili cilja.',
                'udžbenik': ' Udžbenik je osnovna školska knjiga iz koje se uči gradivo određenoga nastavnog predmeta.',
                'ugao': ' Ugao je vanjski dio sjecišta površina kojega tijela ili predmeta.',
                'uginuti': ' Uginuti znači prestati živjeti (o životinjama biljkama).',
                'uglavnom': ' Uglavnom znači u većini slučajeva, najčešće.',
                'ugljen': ' Ugljen je prirodno kruto gorivo, pougljenjeni ostatci bilja različite geološke starosti koji se nalaze na različitim dubinama Zemljine kore.',
                'ugljik': ' Ugljik je kemijski element (C), nekovina, u prirodi se pojavljuje u mineralima (dijamant, grafit), u prirodnome ugljenu i u zraku, osnovni je element u građi živih stanica.',
                'ugodan': ' Ugodan je koji izaziva osjećaj zadovoljstva.',
                'ugodno': ' Ugodno je tako da pruža ugodu ili zadovoljstvo.',
                'ugovor': ' Ugovor je pravni dokument o postignutome sporazumu o prodaji ili plaćenoj usluzi.',
                'uho': ' Uho je osjetni organ u kralježnjaka za primanje zvuka i održavanje ravnoteže.',
                'uime': ' Uime označuje da tko nastupa umjesto koga drugoga, da zastupa kakvu skupinu.',
                'ujak': ' Ujak je majčin brat.',
                'ujedno': ' Ujedno znači istodobno s čim drugim.',
                'ujna': ' Ujna je ujakova žena.',
                'ujutro': ' Ujutro znači tijekom jutra.',
                'ukidati': ' Ukidati znači činiti da što prestane biti na snazi.',
                'ukinuti': ' Ukinuti znači učiniti da što prestane biti na snazi ili prestane djelovati.',
                'uključiti': ' Uključiti znači pokrenuti rad kakva uređaja ili instalacije s pomoću sklopke, otvoriti dotok energije ili staviti što u pogon.',
                'uključivati': ' Uključivati znači pokretati rad kakva uređaja ili instalacije s pomoću sklopke, otvarati dotok energije ili stavljati što u pogon.',
                'ukoliko': ' Ukoliko uvodi stvarnu uvjetnu surečenicu u zavisnosloženoj rečenici.',
                'ukosnica': ' Ukosnica je kopča za pričvršćivanje kose.',
                'ukrajinski': ' Ukrajinski je koji se odnosi na Ukrajinu i Ukrajince.',
                'ukras': ' Ukras je predmet koji služi za uljepšavanje.',
                'ukratko': ' Ukratko znači u nekoliko riječi, u glavnim crtama.',
                'ukupan': ' Ukupan je koji obuhvaća sve sastavnice, kojim se izražava sve što je uključeno.',
                'ukupno': ' Ukupno znači tako da se uzmu u obzir sve sastavnice.',
                'ukusan': ' Ukusan je koji ima dobar okus.',
                'ukusno': ' Ukusno je tako da ima dobar okus.',
                'ulaz': ' Ulaz su vrata ili otvor u zidu kroz koji se ulazi u koju građevinu, spilju ili slično. .',
                'ulazak': ' Ulazak je čin ulaženja u koji prostor. ',
                'ulaziti': ' Ulaziti u što znači dolaziti ili pristupati u koji prostor.',
                'ulaznica': ' Ulaznica je tiskani listić kojim se stječe pravo ulaska u kakav javni prostor.',
                'ulica': ' Ulica je prometnica u naseljenome mjestu kojom se kreću vozila i pješaci.',
                'uloga': ' Uloga je lik koji glumac tumači u scenskome djelu.',
                'ulomak': ' Ulomak je dio teksta ili kakvoga umjetničkog djela.',
                'ulje': ' Ulje je masna tekućina, najčešće biljnoga podrijetla, koja se upotrebljava u prehrani.',
                'umanjenica': ' Umanjenica je izvedenica koja znači da je ono što je označeno osnovnom riječju umanjeno ili malo.',
                'umanjenik': ' Umanjenik je broj od kojega se oduzima.',
                'umanjitelj': ' Umanjitelj je broj koji se oduzima.',
                'umaški': ' Umaški je koji se odnosi na Umag i Umažane.',
                'umirati': ' Umirati znači prestajati živjeti (o čovjeku).',
                'umirovljenica': ' Umirovljenica je žena koja je u mirovini.',
                'umirovljeničin': ' Umirovljeničin je koji pripada umirovljenici.',
                'umirovljenički': ' Umirovljenički je koji se odnosi na umirovljenike.',
                'umirovljenik': ' Umirovljenik je odrasla osoba bez obzira na spol ili muškarac koji je u mirovini.',
                'umirovljenikov': ' Umirovljenikov je koji pripada umirovljeniku.',
                'umiti (se)': ' Umiti znači oprati vodom (o licu i rukama).',
                'umivaonik': ' Umivaonik je školjka za umivanje sa slavinom za hladnu i toplu vodu.',
                'umivati (se)': ' Umivati znači prati vodom (o licu i rukama).',
                'umjeren': ' Umjeren je koji ima pravu mjeru u čemu.',
                'umjereno': ' Umjereno je tako da odražava da tko ima pravu mjeru u čemu.',
                'umjerenost': ' Umjerenost je osobina onoga koji ima pravu mjeru u čemu.',
                'umjesto': ' Umjesto označuje da se tko ili što zamjenjuje kime ili čime.',
                'umjetnica': ' Umjetnica je žena koja stvara umjetnička djela.',
                'umjetničin': ' Umjetničin je koji pripada umjetnici.',
                'umjetnički': ' Umjetnički je koji se odnosi na umjetnike i umjetnost.',
                'umjetnik': ' Umjetnik je osoba bez obzira na spol ili muška osoba koja stvara umjetnička djela.',
                'umjetnikov': ' Umjetnikov je koji pripada umjetniku.',
                'umjetnost': ' Umjetnost je stvaralačka djelatnost kojom nastaju umjetnička djela čiji su izraz elementi pokreta, zvuka, boje, linije, riječi, govora i mimike, trodimenzijski oblici itd.',
                'umnožak': ' Umnožak je rezultat računske operacije množenja.',
                'umoran': ' Umoran je koji osjeća umor.',
                'umorno': ' Umorno je tako da odražava čiji umor.',
                'umrijeti': ' Umrijeti znači prestati živjeti (o čovjeku).',
                'unajmiti': ' Unajmiti znači uzeti što u najam, uzeti što na korištenje na određeno vrijeme uz naknadu.',
                'unajmljivati': ' Unajmljivati znači uzimati koga ili što u najam, zapošljavati koga ili koristiti se čime na određeno vrijeme uz naknadu.',
                'unatoč': ' Unatoč označuje da se što zbiva iako su okolnosti nepovoljne ili da se što ne zbiva iako su okolnosti povoljne.',
                'uniforma': ' Uniforma je odjeća po kojoj se prepoznaje pripadnost vojnoj postrojbi, javnoj službi ili organizaciji.',
                'unija': ' Unija je spoj prvotno samostalnih jedinica u novu cjelinu.',
                'unijeti': ' Unijeti znači noseći dopremiti što u zatvoreno mjesto.',
                'unositi': ' Unositi znači noseći dopremati što u zatvoreno mjesto.',
                'unuk': ' Unuk je sinovo ili kćerino muško dijete.',
                'unuka': ' Unuka je sinovo ili kćerino žensko dijete.',
                'unutar': ' Unutar označuje da se što zbiva ili nalazi u granicama čega.',
                'unutarnji': ' Unutarnji je koji je unutar čega, koji je u unutrašnjosti čega. ',
                'unutra': ' Unutra znači u unutarnjemu prostoru kao mjestu radnje, stanja ili zbivanja.',
                'unutrašnji': ' Unutrašnji je koji je unutar čega, koji je u unutrašnjosti čega.',
                'unutrašnjost': ' Unutrašnjost je ono što se nalazi unutar čega, prostor određen fizičkim granicama.',
                'uoči': ' Uoči označuje da se što zbiva neposredno prije čega.',
                'uopće': ' Uopće pojačava niječni izraz, naglašuje da što ne postoji ni u najmanjoj mjeri.',
                'upala': ' Upala je reakcija živoga tkiva na ozljedu ili štetno djelovanje vanjskih utjecaja.',
                'upaljač': ' Upaljač je naprava za paljenje.',
                'upisati': ' Upisati znači pišući unijeti u što.',
                'upisivati': ' Upisivati znači pišući unositi u što.',
                'upitan': ' Upitan je koji se dovodi u pitanje, koji nije siguran ili jasan.',
                'upitnik': ' Upitnik je pravopisni znak (?) koji se piše na kraju upitne rečenice.',
                'upitno': ' Upitno je tako da odražava čiju nedoumicu.',
                'upotrebljavati': ' Upotrebljavati znači obavljati što s pomoću čega.',
                'upotrijebiti': ' Upotrijebiti znači poslužiti se čime ili staviti što u kakvu funkciju.',
                'upoznati': ' Upoznati znači prvi put se susresti s kim, sklopiti novo poznanstvo.',
                'upoznavati': ' Upoznavati znači prvi se put susretati s kim, sklapati nova poznanstva. ',
                'uprasiti': ' Uprasiti znači uprljati što, pokvariti kakav posao.',
                'uprava': ' Uprava je ukupnost ustanova i organa koji obavljaju javne poslove, upravna vlast.',
                'upravljač': ' Upravljač je uređaj s pomoću kojega se upravlja čime.',
                'upravo': ' Upravo je u vrijeme veoma malo udaljeno od trenutka u kojemu govoritelj govori.',
                'upućenost': ' Upućenost je stanje onoga koji je upućen u što, koji ima kakva znanja o čemu.',
                'uputnica': ' Uputnica je dokument kojim se koga ili što kamo upućuje.',
                'uran': ' Uran je kemijski element (U), srebrna teška radioaktivna kovina, najčešće se upotrebljava u vojnoj industriji i kao gorivo u nuklearnim elektranama.',
                'uranij': ' Uranij je kemijski element (U), srebrna teška radioaktivna kovina, najčešće se upotrebljava u vojnoj industriji i kao gorivo u nuklearnim elektranama.',
                'ured': ' Ured je upravno mjesto, sjedište uprave.',
                'uredan': ' Uredan je koji pazi na red i brine se o njemu.',
                'urediti': ' Urediti znači učiniti urednim, čišćim ili ljepšim.',
                'uredno': ' Uredno je tako da odražava čiju sklonost da pazi na red i brine se o njemu.',
                'urednost': ' Urednost je osobina onoga koji je uredan ili svojstvo onoga što je uredno.',
                'uredski': ' Uredski je koji se odnosi na urede.',
                'uređaj': ' Uređaj je predmet koji olakšava ili omogućuje što, a radi po složenijim fizičkim ili kemijskim načelima.',
                'uređivač': ' Uređivač je program koji omogućuje pisanje, pregled, dodavanje, brisanje ili bilo koji drugi oblik izmjene dijelova teksta ili programskoga koda.',
                'uređivati': ' Uređivati znači činiti urednim, čišćim ili ljepšim.',
                'urugvajski': ' Urugvajski je koji se odnosi na Urugvaj i Urugvajce.',
                'usisavač': ' Usisavač je uređaj za čišćenje koji usisava prašinu.',
                'usklični': ' Usklični je koji se odnosi na usklike.',
                'uskličnik': ' Uskličnik je pravopisni znak (!) koji se piše na kraju usklične i zapovjedne rečenice te iza vokativa.',
                'usklik': ' Usklik je glasno izgovoreni glas, riječ ili niz glasova ili riječi koji služe da se njima dozove koga ili izrazi koji osjećaj',
                'usko': ' Usko znači veoma čvrsto, tako da odražava čvrstu vezu.',
                'uskoro': ' Uskoro znači za kratko vrijeme, u bliskoj budućnosti.',
                'Uskrs': ' Uskrs je kršćanski blagdan i državni praznik koji se slavi prve nedjelje punoga mjeseca nakon proljetnoga ekvinocija u spomen na uskrsnuće Isusa Krista.',
                'uskrsni': ' Uskrsni je koji se odnosi na Uskrs.',
                'uskršnji': ' Uskršnji je koji se odnosi na Uskrs.',
                'uslijed': ' Uslijed označuje uzrok koji se najčešće povezuje s kakvom negativnom ili neželjenom posljedicom.',
                'usluga': ' Usluga je ono što se komu čini iz ljubaznosti, kao znak dobre volje i želje da mu se pomogne.',
                'usmen': ' Usmeni je koji se obavlja, prenosi, zadaje itd. govorom, koji postoji u govrnome mediju',
                'usna': ' Usna je jedan od dvaju vanjskih pokretnih dijelova usta pokrivenih sluzokožom.',
                'uspavanka': ' Uspavanka je pjesma kojom se uspavljuje dijete.',
                'uspijevati': ' Uspijevati znači postizati da što bude napravljeno.',
                'uspinjača': ' Uspinjača je vagon na tračnicama koji se uspinje i spušta s pomoću debeloga žičanog užeta.',
                'uspjeh': ' Uspjeh je ostvaren određeni cilj ili povoljan ishod čega.',
                'uspješan': ' Uspješan je koji je postigao uspjeh.',
                'uspjeti': ' Uspjeti znači ostvariti uspjeh u čemu.',
                'usporediti': ' Usporediti znači utvrditi sličnosti i razlike, napraviti usporedbu čega.',
                'uspoređivati': ' Uspoređivati znači utvrđivati sličnosti i razlike, činiti usporedbu čega.',
                'usprkos': ' Usprkos označuje da tko što čini iako su okolnosti nepovoljne ili da tko što ne čini iako su okolnosti povoljne.',
                'usput': ' Usput znači u prolazu.',
                'usred': ' Usred označuje da se tko ili što nalazi u središnjemu dijelu čega.',
                'usta': ' Usta su dio ljudskoga i životinjskoga tijela, šupljina na glavi između usana i ždrijela kroz koju se diše, uzima hrana, govori i glasa.',
                'ustajati': ' Ustajati znači premještati se iz sjedećega ili ležećega u uspravan položaj.',
                'ustati': ' Ustati znači premjestiti se iz sjedećega ili ležećega u uspravan položaj.',
                'ususret': ' Ususret označuje da se tko kreće prema komu ili čemu.',
                'usvinjiti': ' Usvinjiti znači uprljati što.',
                'ušće': ' Ušće je mjesto na kojemu se tekućica ulijeva u veću rijeku, močvaru, jezero ili more.',
                'utakmica': ' Utakmica je natjecanje dviju momčadi.',
                'utemeljen': ' Utemeljeno je ono što ima kakvo uporište, što se izvodi na temelju kakve činjenice.',
                'utjecaj': ' Utjecaj je moć, snaga djelovanja na koga ili što.',
                'utjecajan': ' Utjecajan je koji ima utjecaj na što.',
                'utjecati': ' Utjecati znači svojom vodom povećavati količinu koje tekućice ili stajaćice.',
                'utorak': ' Utorak je drugi dan u tjednu, dan između ponedjeljka i srijede.',
                'utrka': ' Utrka je natjecanje u trčanju ili u kakvu drugome brzom kretanju.',
                'uvećanica': ' Uvećanica  je izvedenica koja znači da je ono što je označeno osnovnom riječju uvećano ili veliko.',
                'uvid': ' Uvid je pregled čega radi upoznavanja s čime ili produbljenje znanja o čemu. ',
                'uvijek': ' Uvijek znači svaki put, bez iznimke.',
                'uvjet': ' Uvjet je ono što je potrebno da bi se što ostvarilo ili da se može dogoditi.',
                'uvod': ' Uvod je ono od čega što počinje, priprema ili početak čega.',
                'uvrh': ' Uvrh označuje da se što nalazi u gornjemu vršnom dijelu čega ili iznad čega.',
                'uz(a)': ' Uz(a) označuje da se tko ili što kreće s niže točke prema višoj.',
                'uzak': ' Uzak je koji ima širinu manju od prosječne ili uobičajene.',
                'uzbudljiv': ' Uzbudljiv je koji izaziva uzbuđenje.',
                'uzbudljivo': ' Uzbudljivo znači tako da izaziva uzbuđenje.',
                'uzbuna': ' Uzbuna je signal koji upozorava na opasnost ili poziva na pripremu protiv napada.',
                'uzduž': ' Uzduž označuje da se što proteže dužinom čega.',
                'uzeti': ' Uzeti znači uhvatiti koga ili što rukom.',
                'uzimati': ' Uzimati znači hvatati koga ili što rukom.',
                'uzor': ' Uzor je onaj na koga ili na što se treba ugledati.',
                'uzrok': ' Uzorak je ono što predstavlja kakav skup, što je tipično za njega.',
                'uzvik': ' Uzvik je glasno izgovoreni glas, riječ ili niz glasova ili riječi koji služe da se njima dozove koga ili izrazi koji osjećaj.',
                'užas': ' Užas je osjećaj velike nelagode i straha.',
                'užasan': ' Užasan je koji izaziva veliku nelagodu i strah.',
                'užasno': ' Užasno je tako da izaziva stravu.',
                'uže': ' Uže su isprepletene niti konoplje ili drugih vlakana koje služe za vezivanje, učvršćivanje ili podizanje teških predmeta.',
                'užina': ' Užina je manji obrok između dvaju glavnih obroka. ',
                'užitak': ' Užitak je  veliko zadovoljstvo, doživljaj koji nastaje uživanjem.',
                'uživati': ' Uživati znači koristiti se čime, imati pravo na što.',
                'vadičep': ' Vadičep je naprava kojom se vadi čep iz boce.',
                'vaditi': ' Vaditi znači izvlačiti što iz čega.',
                'vaga': ' Vaga je naprava ili uređaj za mjerenje mase.',
                'vagon': ' Vagon je dio vlaka bez vlastitoga pogona koji vuče lokomotiva.',
                'val': ' Val je kratkotrajna uzvisina, nabor na površini vode prouzročen vjetrom ili gibanjem kojega tijela kroz vodu.',
                'Valentinovo': ' Valentinovo je spomendan na svetoga Valentina, koji se obilježava 14. veljače, a na taj se dan obilježava i Dan zaljubljenih.',
                'valpovački': ' Valpovački je koji se odnosi na Valpovo i Valpovčane.',
                'valjak': ' Valjak je geometrijsko tijelo omeđeno dvama suprotnim krugovima – bazama koje leže u paralelnim ravninama, plaštom koji tvore dužine koje su okomite na ravnine baza i sijeku kružnice koje te baze omeđuju.',
                'valjčić': ' Valjčić je mali valjak.',
                'valjda': ' Valjda izriče da su izgledi za što veliki.',
                'valjkast': ' Valjkast je koji je nalik valjku.',
                'van': ' Van znači u vanjski prostor kao cilj kretanja ili radnje.',
                'vani': ' Vani znači u vanjskome prostoru kao mjestu radnje, stanja ili zbivanja.',
                'vanilija': ' Vanilija je mirisna tropska biljka penjačica iz porodice orhideja žutih ili narančastih cvjetova koji rastu u skupinama.',
                'vanjski': ' Vanjski je koji je vani, izvan zatvorenoga prostora.',
                'varati': ' Varati znači lažući činiti prijevare, dovoditi koga u zabludu.',
                'varaždinski': ' Varaždinski je koji se odnosi na Varaždin i Varaždince.',
                'varičela': ' Varičela je dječja zarazna bolest kod koje se na koži pojavljuju mjehurići, a koja se prenosi kapljičnom virusnom infekcijom.',
                'varivo': ' Varivo je gusto jušno jelo od povrća, a katkad i s mesom, koje se jede žlicom kao glavno jelo ili kao prilog.',
                'varšavski': ' Varšavski je koji se odnosi na Varšavu i Varšavljane.',
                'vaš': ' Vaš je koji pripada sugovoritelju i još komu.',
                'vat': ' Vat je mjerna jedinica za snagu (W).',
                'vaterpolist': ' Vaterpolist je osoba bez obzira na spol ili muška osoba koja se bavi vaterpolom. ',
                'vaterpolistica': ' Vaterpolistica je ženska osoba koja se bavi vaterpolom. ',
                'vaterpolističin': ' Vaterpolističin je koji pripada vaterpolistici. ',
                'vaterpolistički': ' Vaterpolistički je koji se odnosi na vaterpoliste.',
                'vaterpolistov': ' Vaterpolistov je koji pripada vaterpolistu. ',
                'vaterpolo': ' Vaterpolo je natjecateljska sportska igra dviju momčadi koja se igra u plivalištu s ciljem da se loptom postigne što više zgoditaka.',
                'vaterpolski': ' Vaterpolski je koji se odnosi na vaterpolo.',
                'vatikanski': ' Vatikanski je koji se odnosi na Vatikan i Vatikance.',
                'vatra': ' Vatra je oslobađanje toplinske i svjetlosne energije pri čemu se tvar koja gori pretvara u pepeo.',
                'vatrogasac': ' Vatrogasac je odrasla osoba bez obzira na spol ili muškarac koji se bavi gašenjem požara. ',
                'vatrogaskinja': ' Vatrogaskinja je žena koja se bavi gašenjem požara.',
                'vatrogaskinjin': ' Vatrogaskinjin je koji pripada vatrogaskinji. ',
                'vatrogasni': ' Vatrogasni je koji se odnosi na vatrogasce i vatrogastvo. ',
                'vatrogaščev': ' Vatrogaščev je koji pripada vatrogascu.',
                'vau': ' Vau je onomatopejska riječ kojim se oponaša glasanje psa. ',
                'vaza': ' Vaza je ukrasna posuda koja obično služi za držanje cvijeća.',
                'važan': ' Važan je koji za što ima iznimnu vrijednost.',
                'važno': ' Važno znači kao za što da ima veliku vrijednost.',
                'važnost': ' Važnost je svojstvo onoga što za što ima iznimnu vrijednost.',
                'večer': ' Večer je vrijeme od kasnoga popodneva do početka noći.',
                'večera': ' Večera je obrok koji se jede navečer.',
                'večeras': ' Večeras znači protekle ili ove večeri.',
                'večerati': ' Večerati što znači pojesti/jesti večernji obrok.',
                'večernji': ' Večernji je koji se odnosi na večer.',
                'već': ' Već znači da se što zbilo prije nego što je očekivano ili uobičajeno.',
                'već': ' Već u nezavisnosloženoj suprotnoj rečenici povezuje surečenice koje ne mogu zamijeniti mjesta i od kojih je jedna jesna, a druga niječna.',
                'većina': ' Većina je veći dio kakve cjeline.',
                'vedar': ' Vedar je koji je bistar i sunčan, bez oblaka.',
                'vedrina': ' Vedrina je prozirno stanje neba bez oblaka.',
                'vedro': ' Vedro znači tako da odražava čije dobro raspoloženje.',
                'vegetarijanac': ' Vegetarijanac je osoba bez obzira na spol ili muška osoba koji ne jede meso, čija se prehrana temelji na hrani biljnoga podrijetla. ',
                'vegetarijančev': ' Vegetarijančev je koji pripada vegetarijancu. ',
                'vegetarijanka': ' Vegetarijanka je ženska osoba koji ne jede meso, čija se prehrana temelji na hrani biljnoga podrijetla. ',
                'vegetarijankin': ' Vegetarijankin je koji pripada vegetarijanki. ',
                'vegetarijanski': ' Vegetarijanski je koji se odnosi na vegetarijance i vegetarijanstvo. ',
                'velečasni': ' Velečasni je počasni naslov katoličkoga svećenika.',
                'veličina': ' Veličina je svojstvo onoga što se može opisati duljinom, širinom, visinom ili brojnošću.',
                'velik': ' Velik je koji se ističe veličinom, težinom ili količinom.',
                'veliko': ' Veliko znači tako da se u prvi plan stave zahtjevni ciljevi.',
                'velikogorički': ' Velikogorički je koji se odnosi na Veliku Goricu i Velikogoričane.',
                'velolučki': ' Velolučki je koji se odnosi na Velu Luku i Velolučane.',
                'veljača': ' Veljača je drugi mjesec u kalendarskoj godini, mjesec između siječnja i ožujka.',
                'venecijanski': ' Venecijanski je koji se odnosi na Veneciju i Venecijance.',
                'Venera': ' Venera je u rimskoj mitologiji božica ljubavi i ljepote.',
                'venezuelski': ' Venezuelski je koji se odnosi na Venezuelu i Venezuelce.',
                'ventil': ' Ventil je naprava koja zatvara ili oslobađa prolaz plinovima ili tekućinama.',
                'ventilator': ' Ventilator je uređaj za stvaranje zračne struje radi rashlađivanja, prozračivanja, usisavanja i pokretanja zraka ili plinova.',
                'veoma': ' Veoma znači u velikoj mjeri.',
                'verzija': ' Verzija je drugi oblik iste stvari koji zadržava bitna svojstva izvornoga oblika.',
                'veseliti': ' Veseliti koga znači činiti koga veselim.',
                'veselo': ' Veselo znači tako da odražava, očituje veselje.',
                'veselje': ' Veselje je vedro i zadovoljno raspoloženje.',
                'veseo': ' Veseo je koji osjeća veselje.',
                'veslač': ' Veslač je osoba bez obzira na spol  ili muška osoba koja vesla ili se bavi veslanjem.',
                'veslačev': ' Veslačev je koji pripada veslaču.',
                'veslačica': ' Veslačica je ženska osoba koja vesla ili se bavi veslanjem. ',
                'veslačičin': ' Veslačičin je koji pripada veslačici. ',
                'veslački': ' Veslački je koji se odnosi na veslače.',
                'veslo': ' Veslo je  dugačka drvena oblica koja je na jednome kraju oblikom nalik lopatici i koja služi za pokretanje plovila.',
                'vesta': ' Vesta je pleteni odjevni predmet za gornji dio tijela na kopčanje.',
                'veterinar': ' Veterinar je osoba obzira na spol ili muškarac koji je završio veterinarski fakultet i vodi brigu o uzgoju, zaštiti zdravlja i liječenju životinja. ',
                'veterinarev': ' Veterinarev je koji pripada veterinaru. ',
                'veterinarka': ' Veterinarka je žena koja je završila veterinarski fakultet i vodi brigu o uzgoju, zaštiti zdravlja i liječenju životinja.',
                'veterinarkin': ' Veterinarkino je ono što pripada veterinarki. ',
                'veterinarov': ' Veterinarovo je ono što pripada veterinaru. ',
                'veterinarski': ' Veterinarski je koji se odnosi na veterinare i veterinu. ',
                'vez': ' Vez je mjesto u luci određeno za vezivanje plovila.',
                'veza': ' Veza je odnos među osobama, predmetima ili pojmovima.',
                'vezati': ' Vezati znači spojiti/spajati s pomoću čvora, učvrstiti što ili povezati u cjelinu.',
                'vezica': ' Vezica je tanka vrpca od konca ili kože kojom se što veže.',
                'veznički': ' Veznički je koji se odnosi na veznike. ',
                'veznik': ' Veznik je nepromjenjiva riječ kojom se povezuju riječi, skupine riječi ili rečenice. ',
                'vic': ' Vic je kratka duhovita priča sa smiješnim završetkom.',
                'viceadmiral': ' Viceadmiral je admiralski vojni čin, nadređen činu kontraadmirala, a podređen činu admirala.',
                'viceadmiralica': ' Viceadmiralica je žena s činom viceadmirala.',
                'viceadmiraličin': ' Viceadmiraličin je koji pripada viceadmiralici.',
                'viceadmiralov': ' Viceadmiralov je koji pripada viceadmiralu.',
                'viceadmiralski': ' Viceadmiralski je koji se odnosi na viceadmirale. ',
                'vid': ' Vid je osjetilo koje omogućuje sposobnost primanja i razlikovanja svjetla, boja, oblika i udaljenosti s pomoću oka.',
                'video': ' Video  je uređaj za snimanje slike i zvuka te gledanje i slušanje onoga što je snimljeno na videokasetama.',
                'videoigra': ' Videoigra je igra u kojoj igrač svojim aktivnostima u fizičkome svijetu upravljaj prikazom slike na zaslonu.',
                'videorekorder': ' Videorekorder je uređaj za snimanje slike i zvuka te gledanje i slušanje onoga što je snimljeno na videokasetama.',
                'vidjeti': ' Vidjeti znači osjetilom vida moći primati poticaje izvana, moći gledati očima.',
                'vijeće': ' Vijeće je skup ljudi koji nakon razgovora donosi mišljenje ili odluku o čemu.',
                'vijenac': ' Vijenac je okrugli ukras spleten od cvijeća ili lišća koji se nosi na glavi u posebnim, svečanim zgodama.',
                'vijest': ' Vijest je ono što se komu prenosi ili šalje kao obavijest.',
                'vijoriti': ' Vijoriti što znači činiti da se što kreće u krug ili bez određena smjera, kovitlati čime.',
                'vikati': ' Vikati znači glasno i prodorno govoriti.',
                'vikend': ' Vikend su posljednja dva dana u tjednu (subota i nedjelja) kad se obično ne radi.',
                'vikend-akcija': ' Vikend-akcija sniženje je cijena određenih proizvoda tijekom vikenda. ',
                'vikendica': ' Vikendica je kućica za odmor.',
                'viknuti': ' Viknuti znači glasno i prodorno reći.',
                'vila': ' Vila je izmišljeno biće, mlada i lijepa žena natprirodnih moći koja živi u šumama, gorama, vodama, moru i sl.',
                'vile': ' Vile su drveno ili željezno oruđe nalik na veliku vilicu s dugim drškom koje služi za skupljanje i razgrtanje sijena i sl.',
                'vilica': ' Vilica je dio pribora za jelo kojim se nabada hrana.',
                'vinkovački': ' Vinkovački je koji se odnosi na Vinkovce i Vinkovčane.',
                'vino': ' Vino je alkoholno piće dobiveno vrenjem grožđanoga soka.',
                'vinograd': ' Vinograd je zemljište zasađeno vinovom lozom.',
                'viola': ' Viola je gudaće žičano glazbalo koje je po registru niže od violine, a više od violončela.',
                'violina': ' Violina je gudaće žičano glazbalo najvišega registra.',
                'violinist': ' Violinist je osoba bez obzira na spol ili muška osoba koja svira violinu. ',
                'violinistica': ' Violinistica je ženska osoba koja svira violinu. ',
                'violinističin': ' Violinističin je koji pripada violinistici.',
                'violinistički': ' Violinistički je koji se odnosi na violiniste. ',
                'violinistov': ' Violinistov je koji pripada violinistu.',
                'violinski': ' Violinski je koji se odnosi na violine.',
                'violist': ' Violist je osoba bez obzira na spol ili muška osoba koja svira violu.',
                'violistica': ' Violistica je ženska osoba koja svira violu.',
                'violističin': ' Violističin je koji pripada violistici.',
                'violistički': ' Violistički je koji se odnosi naviole i violiste.',
                'violistov': ' Violistov je koji pripada violistu.',
                'violončelist': ' Violončelist je osoba bez obzira na spol ili muška osoba koja svira violončelo.',
                'violončelistica': ' Vilončelistica je ženska osoba koja svira violončelo.',
                'violončelističin': ' Violončelističin je koji pripada violončelistici.',
                'violončelistički': ' Violončelistički je koji se odnosi na violončeliste.',
                'violončelistov': ' Violončelistov je koji pripada violončelistu.',
                'violončelo': ' Violončelo je gudaće žičano glazbalo koje je po registru niže od viole, a više od kontrabasa.',
                'virovitički': ' Virovitički je koji se odnosi na Viroviticu i Virovitičane.',
                'viroza': ' Viroza je kraća virusna bolest.',
                'virus': ' Virus je mikroorganizam koji se razmnožava samo u živim stanicama drugih organizama i prouzročuje zarazne bolesti.',
                'visibaba': ' Visibaba je proljetnica s podzemnim lukovicama tamnozelenih dugih uskih listova i bijelih cvjetova.',
                'visina': ' Visina je razmak, udaljenost između najdonje i najgornje točke kakva objekta, predmeta ili osobe.',
                'visiti': ' Visiti znači biti za što pričvršćen gornjim dijelom tako da se donji dio slobodno pruža dolje.',
                'visjeti': ' Visjeti znači biti za što pričvršćen gornjim dijelom tako da se donji dio slobodno pruža dolje.',
                'viski': ' Viski je jako alkoholno piće napravljeno destilacijom žitarica poput raži, ječma ili kukuruza.',
                'visok': ' Visok je koji je velik rastom.',
                'visoko': ' Visko znači na velikoj visini ili na veliku visinu.',
                'više': ' Više označuje da je što u razini višoj od čega.',
                'višedimenzijski': ' Višedimenzijski je koji se odnosi na više  dimenzija. ',
                'višedimenzionalni': ' Višedimenzionalni je koji se odnosi na više  dimenzija. ',
                'višegodišnji': ' Višegodišnji je koji se odnosi na više godina.',
                'višejezičan': ' Višejezičan je koji se služi s više jezika.',
                'višekatni': ' Višekatni je koji ima više katova.',
                'višekatnica ': ' Višekatnica je zgrada koja se sastoji od više katova.',
                'višekratan': ' Višekratan je koji je više nego jednom, koji se koristi više nego jednom.',
                'višekratnički': ' Višekratnički je koji se odnosi na višekratnike.',
                'višekratnik': ' Višekratnik je broj koji je umnožak zadanoga broja i nekoga cijelog broja, koji je cijeli broj puta veći od zadanoga broja.',
                'višemjesečni': ' Višemjesečni je koji ima više mjeseci.',
                'višetjedni': ' Višetjedni je koji ima više tjedana.',
                'viški': ' Viški je koji se odnosi na Vis i Višane. ',
                'višnja': ' Višnja je voćka iz porodice ruža široke krošnje, sitnih bijelih cvjetova raspoređenih u cvatove i kiselkastih bobičastih plodova.',
                'vitak': ' Vitak je koji je skladna stasa i male širene u odnosu na visinu.',
                'vitamin': ' Vitamin je organski spoj koji u malim količinama u tijelu sudjeluje u metaboličkim procesima, organizam ga obično ne može proizvesti sam pa se unosi hranom.',
                'vitao': ' Vitao je naprava ili uređaj za namatanje užeta ili lanca koji služi za podzianje tereta.',
                'vitko': ' Vitko je tako da odražava skladnost stasa i malu širinu u odnosu na visinu.',
                'vitkost': ' Vitkost je osobina onoga koji je vitak ili svojstvo onoga što je vitko.',
                'vitlati': ' Vitlati što znači činiti da se što kreće u krug ili bez određena smjera, kovitlati čime',
                'vitrina': ' Vitrina je ormar sa staklenim plohama.',
                'vječnost': ' Vječnost je svojstvo onoga što je vječno.',
                'vjenčanje': ' Vjenčanje je obred sklapanja braka.',
                'vjenčati': ' Vjenčati znači obaviti obred sklapanja braka.',
                'vjera': ' Vjera je nada da će se što pozitivno dogoditi.',
                'vjernica': ' Vjernica je žena koja vjeruje u Boga, bogove ili viša bića.',
                'vjerničin': ' Vjerničin je koji pripada vjernici, ženi koja vjeruje u Boga, bogove ili viša bića.',
                'vjernik': ' Vjernik je čovjek koji vjeruje u Boga, bogove ili viša bića.',
                'vjernikov': ' Vjernikov je koji pripada vjerniku, čovjeku koji vjeruje u Boga, bogove ili viša bića.',
                'vjerojatan': ' Vjerojatan je za koji postoje veliki izgledi da se dogodi ili da se potvrdi.',
                'vjerojatno': ' Vjerojatno znači da su izgledi za što veliki.',
                'vjerojatnost': ' Vjerojatnost je svojstvo onoga što je vjerojatno.',
                'vjeronauk': ' Vjeronauk je osnovna vjerska pouka koja se održava u školi ili u župi.',
                'vjeroučitelj': ' Vjeroučitelj je svećenik koji poučava vjeri.',
                'vjeroučiteljev': ' Vjeroučiteljev je koji pripada vjeroučitelju.',
                'vjeroučiteljica': ' Vjeročiteljica je žena koja drži nastavu vjeronauka.',
                'vjeroučiteljičin': ' Vjeroučiteljičin je koji pripada vjeroučiteljici.',
                'vjeroučiteljski': ' Vjeroučiteljski je koji se odnosi na vjeroučitelje.',
                'vjerovati': ' Vjerovati znači biti uvjeren u istinitost onoga što tko govori.',
                'vjerski': ' Vjerski je koji se odnosi na vjeru.',
                'vjesnik': ' Vjesnik je osoba koja donosi vijesti.',
                'vješala': ' Vješala su naprava na kojoj se provodi smrtna kazna vješanjem.',
                'vješalica': ' Vješalica je komad namještaja ili predmet na koji se odlaže odjeća tako da visi.',
                'vještica': ' Vještica je izmišljeno biće, zla žena koja želi ljudima nanijeti zlo.',
                'vještina': ' Vještina je iskustvo stečeno uvježbavanjem kakve radnje.',
                'vjetar': ' Vjetar je vodoravno strujenje zraka iznad Zemljine površine od područja visokoga tlaka zraka prema području niskoga tlaka.',
                'vjetrovit': ' Vjetrovit je koji je ispunjen vjetrom, koji obiluje vjetrom, u kojemu vjetar često snažno puše.',
                'vjeverica': ' Vjeverica je mali glodavac biljožder crvenosmeđe, katkad crne boje i bijeloga trbuha te duga kitnjasta repa.',
                'vježba': ' Vježba je radnja koju treba ponavljati kako bi se stekla kakva vještina ili razvile određene sposobnosti.',
                'vježbati': ' Vježbati znači stalnim i redovitim radom razvijati navike, vještinu ili sposobnost za što, izvoditi određene vježbe.',
                'vježbenica': ' 1. Vježbenica je tiskana zbirka zadataka i praktičnih uputa namijenjenih ovladavanju kojim gradivom, obično dopuna udžbeniku koja slijedi njegov sadržaj.',
                'vježbeničin': ' Vježbeničin je koji pripada vježbenici.',
                'vježbenički': ' Vježbenički je koji se odnosi na vježbenike. ',
                'vježbenik': ' Vježbenik je odrasla osoba bez obzira na spol ili muškarac sa završenim obrazovanjem određene stručne spreme i struke, bez radnoga iskustva na odgovarajućim poslovima ili s radnim iskustvom kraćim od vremena propisanog za vježbenički staž.',
                'vježbenikov': ' Vježbenikov je koji pripada vježbeniku.',
                'vlada': ' Vlada je najviše tijelo izvršne vlasti koje države.',
                'vladar': ' Vladar je osoba bez obzira na spol ili muška osoba koja vlada kojim zemljopisnim ili mitskim prostorom, obično kralj ili car.',
                'vladarev': ' Vladarev je koji pripada vladaru, osobi bez obzira na spol ili muškoj osobi koja vlada kojim zemljopisnim ili mitskim prostorom, obično kralju ili caru.',
                'vladarica': ' Vladarica je ženska osoba koja vlada kojim zemljopisnim ili mitskim prostorom, obično kraljica ili carica',
                'vladaričin': ' Vladaričin je koji pripada vladarici, ženi koja vlada kojim zemljopisnim ili mitskim prostorom, obično kraljici ili carici',
                'vladarov': ' Vladarov je koji pripada vladaru, osobi bez obzira na spol ili muškoj osobi koji vlada kojim zemljopisnim ili mitskim prostorom, obično kralju ili caru.',
                'vladarski': ' Vladarski je koji se odnosi na vladare, osobe ili muškarce koji vladaju kojim zemljopisnim ili mitskim prostorom.',
                'vladati': ' Vladati čime znači upravljati državom ili kakvom organizacijom sličnoj dravi.',
                'vlaga': ' Vlaga je vodena para u zraku ili u čvrstoj tvari.',
                'vlak': ' Vlak je prometno sredstvo koje se kreće po tračnicama, a sastoji se od željezničkih vagona koje vuče lokomotiva.',
                'vlasnica': ' Vlasnica je žena koja što posjeduje, kojoj što pripada.',
                'vlasničin': ' Vlasničin je koji pripada vlasnici.',
                'vlasnik': ' Vlasnik je osoba koja što posjeduje, kojoj što pripada.',
                'vlast': ' Vlast je upravljanje određenim područjem ili djelokrugom.',
                'vlastit': ' Vlastit je koji pripada rečeničnomu subjektu ili objektu.',
                'voćarna': ' Voćarna je prodavaonica voća.',
                'voćarnica': ' Voćarnica je prodavaonica voća.',
                'voće': ' Voće su različiti jestivi, najčešće slatki, plodovi voćaka.',
                'voćka': ' Voćka je višegodišnje drvo na kojemu rastu jestivi, najčešće slatki, plodovi.',
                'voćni': ' Voćni je koji se odnosi na voće.',
                'voćnjak': ' Voćnjak je skup voćaka zasađenih na kojemu zemljištu.',
                'voda': ' Voda je prozirna tekućina bez boje, mirisa i okusa, sastojak svih živih organizama nuždan za život.',
                'vodenjački': ' Vodenjački je koji se odnosi na vodenjake, vodene duhove.',
                'vodenjak': ' Vodenjak je vodozemac repaš duguljasta tijela, slabih i kratkih nogu te bočno sploštena repa.',
                'vodenjakov': ' Vodenjakov je koji pripada vodenjaku, vodenome duhu.',
                'vodič': ' Vodič je tvar koja dobro provodi električnu struju.',
                'vodičev': ' Vodičev je koji pripada vodiču, odrasloj osobi bez obzira na spol ili muškarcu koji vodi ljude kroz nepoznata mjesta ili krajeve ili prenosi činjenice povezane s kulturnim i ostalim znamenitostima',
                'vodičica': ' Vodičica je žena koja vodi ljude kroz nepoznata mjesta ili krajeve ili prenosi činjenice povezane s kulturnim i ostalim znamenitostima.',
                'vodičičin': ' Vodičičin je koji pripada vodičici, ženi  koja vodi ljude kroz nepoznata mjesta ili krajeve ili prenosi činjenice povezane s kulturnim i ostalim znamenitostima.',
                'vodički': ' Vodički je koji se odnosi na vodiče, odrasle osobe bez obzira na spol i muškarce koji koji vode ljude kroz nepoznata mjesta ili krajeve ili prenose činjenice povezane s kulturnim i ostalim znamenitostima.',
                'vodik': ' Vodik je najlakši kemijski element (H), bezbojni plin bez okusa i mirisa, sastojak je vode i svih živih organizama.',
                'voditi': ' Voditi znači idući s kim pokazivati mu put ili mu pomagati da kamo stigne ili otkamo ode.',
                'vodnica': ' Vodnica je žena s činom vodnika.',
                'vodničin': ' Vodničin je koji pripada vodnici.',
                'vodnički': ' Vodnički je koji se odnosi na vodnike.',
                'vodnik': ' Vodnik je niži dočasnički čin u jugoslavenskoj vojsci, podređen činu zastavnika.',
                'vodnikov': ' Vodnikov je koji pripada vodniku.',
                'vodoinstalater': ' Vodoinstalater je odrasla osoba bez obzira na spol ili muškarac koji postavlja, održava i popravlja vodovodne instalacije.',
                'vodoinstalaterka': ' Vodoinstalaterka je žena koji postavlja, održava i popravlja vodovodne instalacije.',
                'vodoinstalaterkin': ' Vodoinstalaterkin je koji pripada vodoinstalaterki.',
                'vodoinstalaterov': ' Vodinstalaterov je koji pripada vodoinstalateru.',
                'vodoinstalaterski': ' Vodoinstalaterski je koji se odnosi na vodoinstalatere i vodoinstalaterstvo.',
                'vodomjer': ' Vodomjer je brojilo koje mjeri količinu potrošene vode.',
                'vodoravan': ' Vodoravan je koji je u istoj ravnini ili je usporedan s površinom mirne vode.',
                'vodoravno': ' Vodoravno znači tako da je u istoj ravnini ili je usporedno s površinom mirne vode.',
                'vodovod': ' Vodovod je sustav za opskrbu vodom stanovništva naseljenih mjesta i industrijskih pogona.',
                'vodozemac': ' Vodozemac je razred kralježnjaka koji žive u vodi i na kopnu kao ličinke dišu škrgama, a kao odrasle životinje veoma jednostavnim plućima.',
                'vojni': ' Vojni je koji se odnosi na vojsku.',
                'vojnički': ' Vojnički je koji se odnosi na vojnike.',
                'vojnik': ' Vojnik je odrasla osoba bez obzira na spol ili muškarac koji služi u vojsci bez obzira na čin.',
                'vojnikinja': ' Vojnikinja je žena koja služi u vojsci bez obzira na čin.',
                'vojnikinjin': ' Vojnikinjin je koji pripada vojnikinji.',
                'vojnikov': ' Vojnikov je koji pripada vojniku.',
                'vojska': ' Vojska je oružane snage države koje ju čuvaju od neprijatelja.',
                'vojvoda': ' Naslov visokoga plemića odmah ispoda kralja koji upravlja vojvodstvom. ',
                'vojvođanski': ' Vojvođanski je koji se odnosi na Vojvodinu i Vojvođane.',
                'vokalizacija': ' Vokalizacija je glasovna promjena u kojoj se
                ',
                'vokativ': ' Vokativ je padež dozivanja, pojavljuje se uz usklike, npr. 
                ',
                'vokativni': ' Vokativni je koji se odnosi na vokativ. ',
                'vol': ' Vol je uškopljeni mušjak goveda koji služi za vuču.',
                'volan': ' Volan je naprava s pomoću koje se upravlja motornim vozilom, biciklom ili letjelicom, odnosno dio računalne opreme kojom se simulira upravljanje motornim vozilom, biciklom ili letjelicom.',
                'voliti': ' Voliti koga znači osjećati duboku romantičnu privrženost i tjelesna privlačnost prema komu.',
                'volt': ' Volt je mjerna jedinica za električni napon (V).',
                'voltmetar': ' Voltmetar je uređaj za mjerenje električnoga napona.',
                'volja': ' Volja je težnja da se što postigne, ostvari ili dobije.',
                'voljeti': ' Voljeti koga znači osjećati duboku romantičnu privrženost i tjelesna privlačnost prema komu.',
                'vozač': ' Vozač je odrasla osoba bez obzira na spol ili muškarac koji zna upravljati vozilom.',
                'vozačev': ' Vozačev je koji pripada vozaču, odrasloj osobi bez obzira na spol ili muškarcu koji zna upravljati vozilom.',
                'vozačica': ' Vozačica je žena koja zna upravljati vozilom.',
                'vozačičin': ' Vozačičin je koji pripada vozačici.',
                'vozački': ' Vozački je koji se odnosi na vozače.',
                'vozilo': ' Vozilo je kopneno prijevozno sredstvo.',
                'voziti': ' Voziti znači upravljati prijevoznim sredstvom.',
                'vožnja': ' Vožnja je kretanje vozilom, put ili putovanje vozilom.',
                'vrabac': ' Vrabac je mala sivosmeđa ptica pjevica koja obično živi u naseljima i oko kuća, najrasprostranjenija ptica na Zemlji.',
                'vraćati': ' Vraćati znači upućivati, slati što tamo odakle je došlo.',
                'vrag': ' Vrag je nadnaravno biće koje čini zlo.',
                'vragov': ' Vragov je koji pripada vragu.',
                'vrat': ' Vrat je uski dio tijela koji povezuje trup s glavom.',
                'vrata': ' Vrata su konstrukcija ugrađena u kakav otvor u zidu, na ogradi, na vozilu, na uporabnim predmetima sa šupljom unutrašnjošću i sl. kroz koju se izlazi ili ulazi i koja se može otvarati i zatvarati.',
                'vratilo': ' Vratilo je drveni valjak na tkalačkome stanu oko kojega se namotava pređa.',
                'vratiti': ' Vratiti znači uputiti, poslati što tamo odakle je došlo.',
                'vražica': ' Vražica je nadnaravno žensko biće koje čini zlo. ',
                'vražičin': ' Vražičin je koji pripada vražici.',
                'vražji': ' Vražji je koji se odnosi na vraga.',
                'vrba': ' Vrbe su porodica listopadnoga drveća ili grmlja nepravilnih krošanja s obješenim granama i tamnozelenim sjajnim listovima.',
                'vrcati': ' Vrcati što znači izdvajati med ili maslo s pomoću posebne sprave koja radi na načelu centrifugalne sile.',
                'vrckati': ' Vrckati znači pomalo vrcati, slabije izraženo izlijetati, izbijati, iskakati, prskati.',
                'vrcnuti': ' Vrcnuti znači snažno izletjeti, izbiiti, iskočiti, prsnuti, pasti.',
                'vreća': ' Vreća je jednostavna torba od plastike, papira ili platna koja služi za držanje ili nošenje stvari, smeća i sl..',
                'vremeplov': ' Vremeplov je zamišljena naprava kojom se putuje kroz vrijeme.',
                'vrh': ' Vrh je najviši dio čega.',
                'vrhnje': ' Vrhnje je masnoća u mlijeku, služi za jelo i pravljenje maslaca.',
                'vrijedan': ' Vrijedan je koji ima veliku vrijednost.',
                'vrijediti': ' Vrijediti znači imati novčanu vrijednost.',
                'vrijedno': ' Vrijedno znači s velikim uloženim trudom i radom.',
                'vrijednost': ' Vrijednost je temeljno društveno uvjerenje ili mišljenje o iznimnoj važnosti čega.',
                'vrijeme': ' Vrijeme je neprekidno ili ograničeno trajanje koje se može mjeriti.',
                'vrlo': ' Vrlo znači u velikoj mjeri.',
                'vrpca': ' Vrpca je dug, uzak komad tkanine.',
                'vrsta': ' Vrsta je niz stvari, pojava ili pojmova koji imaju kakva zajednička svojstva.',
                'vrt': ' Vrt je ograđeno zemljište, obično uz kuću, na kojemu se uzgaja voće, povrće i cvijeće.',
                'vrtić': ' Vrtić je mali vrt.',
                'vrtiti': ' Vrtiti znači mijenjati položaj čega pomicanjem oko osi.',
                'vrtjeti': ' Vrtjeti znači mijenjati položaj čega pomicanjem oko osi.',
                'vrtložiti': ' Vrtložiti što znači kružno se kretati.',
                'vrtuljak': ' Vrtuljak je uređaj sa sjedalima koja se vrte u krug, obično se nalazi u sklopu lunaparka.',
                'vruć': ' Vruć je koji ima veoma visoku temperaturu.',
                'vruće': ' Vruće znači pri veoma visokoj temperaturi.',
                'vrućica': ' Vrućica je povišena tjelesna toplina, simptom kakve bolesti ili upale.',
                'vrućina': ' Vrućina je visoka temperatura zraka.',
                'vučić': ' Vučić je mlado vuka.',
                'vući': ' Vući što znači ne odvajajući što od površine pomicati privlačeći prema sebi.',
                'vuk': ' Vuk je zvijer iz porodice pasa sivosmeđega gusta krzna koja živi u čoporu i glasa se zavijanjem.',
                'vukovarski': ' Vukovarski je koji se odnosi na Vukovar i Vukovarce.',
                'vulkan': ' Vulkan je otvor na površini Zemlje kroz koji iz njezine unutrašnjosti izbija tekuća masa, različiti plinovi i pepeo.',
                'vuna': ' Vuna je gusta, meka dlaka koja raste na koži ovce i nekih drugih životinja.',
                'zabava': ' Zabava je niz ugodnih aktivnosti, obično u vedrome društvu ili igri.',
                'zabavan': ' Zabavan je koji koga zabavlja.',
                'zabaviti': ' Zabaviti znači učiniti da tko ugodno provede vrijeme, obično u vedrome društvu ili igri.',
                'zabavljati': ' Zabavljati znači činiti da tko ugodno provodi vrijeme, obično u vedrome društvu ili igri.',
                'zaboraviti': ' Zaboraviti koga ili što znači prestati se sjećati koga ili čega, više ne pamtiti što.',
                'zaboravljati': ' Zaboravljati koga ili što znači prestajati se sjećati koga ili čega, više što ne pamtiti.',
                'zabrinut': ' Zabrinut (za što, zbog čega) je koji je opterećen brigama, koji ima briga.',
                'zabrinuti se': ' Zabrinuti se znači osjetiti brigu zbog čega.',
                'zabrinuto': ' Zabrinuto je tako da je opterećeno brigama, da odražava čiju opterećenost brigama.',
                'zabrinutost': ' Zabrinutost (oko čega, za što, zbog čega) stanje je onoga koji je zabrinut, koji ima briga.',
                'zadaća': ' Zadaća je ono što tko mora obaviti ili napraviti.',
                'zadarski': ' Zadarski je koji se odnosi na Zadar i Zadrane.',
                'zadatak': ' Zadatak je ono što tko mora obaviti ili napraviti.',
                'zadati': ' Zadati znači narediti da se što učini.',
                'zadavati': ' Zadavati znači naređivati da se što učini.',
                'zadnji': ' Zadnji je koji je na kraju niza ili reda.',
                'zadovoljan': ' Zadovoljan je onaj kojemu su ispunjena očekivanja, koji je postigao kakav cilj.',
                'zadovoljno': ' Zadovoljno znači tako da odražava ispunjenost čijih očekivanje, postizanje kakva cilja.',
                'zaglavlje': ' Zaglavlje je prostor na vrhu stranice dokumenta na kojemu se obično nalazi prikaz logotipa poduzeća ili kontaktnih informacija koje se odnose na sadržaj dokumenta.',
                'zagonetka': ' Zagonetka je ono što treba pogoditi na temelju opisa koji namjerno upućuje na više različitih odgovora, ono što treba odgonetnuti. ',
                'zagorski': ' Zagorski je koji se odnosi na Hrvatsko zagorje i Zagorce.',
                'zagrada': ' Zagrada je pravopisni znak (()) kojim se označuje dopunjavanje, objašnjavanje i posebno isticanje jednoga dijela teksta i služi za skraćeno označivanje dvostrukih likova istoznačnih riječi.',
                'zagradica': ' Zagradica je mala zagrada. ',
                'zagrebački': ' Zagrebački je koji se odnosi na Zagreb i Zagrepčane. ',
                'zagrljaj': ' Zagrljaj je međusobno obuhvaćanje rukama u znak pozdrava, nježnosti ili ljubavi.',
                'zahod': ' Zahod je sanitarna prostorija u kojoj se obavlja nužda.',
                'zahtjev': ' Zahtjev je izrečeno traženje da se što učini.',
                'zahvalan': ' Zahvalan je koji cijeni učinjeno dobro.',
                'zahvaliti': ' Zahvaliti znači izraziti zahvalnost.',
                'zahvalno': ' Zahvalno znači tako da odražava da tko cijeni dobro koje mu je učinjeno i onoga tko ga je učinio.',
                'zahvalnost': ' Zahvalnost je osobina onoga koji je zahvalan ili svojstvo onoga što je zahvalno.',
                'zahvaljivati': ' Zahvaljivati znači izražavati zahvalnost.',
                'zaista': ' Zaista izriče uvjeravanje, upravo tako, u punoj mjeri. ',
                'zaječati': ' Zaječati znači oglasiti se poput jeke.',
                'zajednica': ' Zajednica je skupina čiji su članovi zajedničkim svojstvima povezani u čvrstu cjelinu.',
                'zajednički': ' Zajednički je  koji pripada većemu broju osoba.',
                'zajedno': ' Zajedno znači u skupini ili u društvu s kime.',
                'zajutrak': ' Zajutrak je prvi dnevni obrok koji se jede odmah nakon ustajanja.',
                'zakasniti': ' Zakasniti znači doći nakon očekivanoga ili dogovorenoga vremena.',
                'zaključak': ' Zaključak je misao do koje se dođe nakon pažljiva razmišljanja.',
                'zaključiti': ' Zaključiti znači donijeti zaključak.',
                'zakon': ' Zakon je zbirka osnovnih propisa kojima državna vlast što određuje, uređuje, dopušta ili zabranjuje.',
                'zalazak': ' Zalazak je nestanak s obzora.',
                'zalijepiti': ' Zalijepiti znači spojiti što ljepilom ili kakvom drugom ljepljivom tvari.',
                'zaljev': ' Zaljev je dio oceana, mora ili jezera koji je uvučen u kopno.',
                'zaljubiti se': ' Zaljubiti se znači početi voljeti koga.',
                'zaljubljen': ' Zaljubljen je koji osjeća ljubav prema kome.',
                'zaljubljeno': ' Zaljubljeno znači tako da odražava zaljubljenost.',
                'zaljubljenost': ' Zaljubljenost je stanje onoga koji je zaljubljen.',
                'zaljubljivati se': ' Zaljubljivati se znači počinjati voljeti koga.',
                'zamjena': ' Zamjena je stavljanje ili dolazak koga ili čega na mjesto koga ili čega drugoga. ',
                'zamjenica': ' Zamjenica je ženska osoba koja zamjenjuje koga, koja obavlja kakav posao umjesto koga.',
                'zamjeničin': ' Zamjeničin je koji pripada zamjenici. ',
                'zamjenični': ' Zamjenični je koji se odnosi na zamjenice (vrstu riječi). ',
                'zamjenik': ' Zamjenik je osoba bez obzira na spol  ili muška osoba koja zamjenjuje koga, koja obavlja kakav posao umjesto koga. ',
                'zamjenikov': ' Zamjenikov je koji pripada zamjeniku. ',
                'zamka': ' Zamka je naprava u obliku omče ili petlje za hvatanje divljači.',
                'zamrzivač': ' Zamrzivač je hladnjak za zamrzavanje namirnica i njihovo čuvanje u zamrznutome obliku.',
                'zamuckivati': ' Zamuckivati znači govoriti mucajući.',
                'zanaglasni': ' Zanaglasni je koji se nalazi iza naglaska. ',
                'zanaglasnica': ' Zanaglasnica je riječ koja nema vlastitoga naglaska, nego se naslanja na riječ ispred sebe i s njom čini jednu naglasnu cjelinu.',
                'zanimanje': ' Zanimanje je posao kojim se tko bavi i od kojega živi.',
                'zanimati': ' Zanimati koga znači biti predmetom čijega zanimanja i želje da se što dozna, nauči, bolje upozna ili da se sudjeluje u čemu.',
                'zanimljiv': ' Zanimljiv je koji izaziva zanimanje, koji privlači pozornost.',
                'zanimljivo': ' Zanimljivo je tako da odražava zanimanje.',
                'zanimljivost': ' Zanimljivost je svojstvo onoga što je zanimljivo.',
                'zaokružiti': ' Zaokružiti znači nacrtati krug oko čega.',
                'zaokruživati': ' Zaokruživati znači ',
                'zapad': ' Zapad je jedna od četiriju glavnih strana svijeta na kojoj zalazi Sunce (Z).',
                'zapadni': ' Zapadni je koji se odnosi na zapad i Zapad.',
                'zapamtiti': ' Zapamtiti znači zadržati u pamćenju.',
                'zapaziti': ' Zapaziti znači uočiti što promatranjem.',
                'zapažati': ' Zapažati znači uočavati što promatranjem.',
                'zapjevati': ' Zapjevati znači početi pjevati.',
                'započeti': ' Započeti znači krenuti od početka, pokrenuti kakvo djelovanje ili događanje.',
                'zaporka': ' Zaporka je brojčana i/ili slovna oznaka koja se dodjeljuje komu kako bi se sačuvala tajnosti ili se prepoznalo koga.',
                'zaposlen': ' Zaposlen je koji ima posao, koji ima radno mjesto.',
                'zaposlenost': ' Zaposlenost je stanje onoga koji ima posao, koji ima radno mjesto.',
                'zaposliti': ' Zaposliti znači dati komu kakav posao ili zaduženje.',
                'zapošljavati': ' Zapošljavati znači davati komu kakav posao ili zaduženje.',
                'zapovijed': ' Zapovijed je zahtjev da se što provede.',
                'zapravo': ' Zapravo izriče naknadnu spoznaju, tj. da što nije onakvim kakvim se činilo.',
                'zar': ' Zar izriče nevjericu.',
                'zarada': ' Zarada je novac koji se dobiva za rad, koji se zasluži radom.',
                'zarez': ' Zarez je pravopisni znak (,) kojim se označuje inverzija rečeničnih dijelova ili surečenica, suprotnost, umetanje ili naknadno dodavanje te kojim se odjeljuju desetinke od cijeloga broja.',
                'zaslon': ' Zaslon  je elektronička ploha na kojoj se prikazuje slika koju je proizveo elektonički uređaj.',
                'zaspati': ' Zaspati znači početi spavati, utonuti u san.',
                'zastava': ' Zastava je komad platna određenih boja i znakova, obično pričvršćen za motku, simbol nacije, države, vladara, vojske, stranke, grada, crkve, udruge i sl.',
                'zastor': ' Zastor je tkanina koja se vješa preko prozora, štiti od pogleda i svjetla ili služi kao ukras.',
                'zastupništvo': ' Zastupništvo je ured ili tvrtka koja pruža kakve usluge, npr. prikuplja podatke ili posreduje u prodaji ili ugovaranju poslova, za koju drugu tvrtku, ustanovu ili organizaciju. ',
                'zaškripati': ' Zaškripati znači početi škripati, malo i kratko škripati.',
                'zaškripiti': ' Zaškripiti znači početi škripiti, malo i kratko škripiti.',
                'zaštektati': ' Zaštektati znači početi isprekidano lajati.',
                'zaštita': ' Zaštita je sredstvo ili način sprečavanja neugodnosti, poteškoća ili opasnosti.',
                'zašto': ' Zašto je zbog čega, radi čega, iz kojih razloga.',
                'zatim': ' Zatim je nakon toga.',
                'zato': ' Zato je ima vezničku funkciju u nezavisnosloženoj zaključnoj rečenici.',
                'zatreptati': ' Zatreptati znači nakratko ili jednokratno trepnuti.',
                'zatvaranje': ' Zatvaranje je pomicanje dijela ili dijelova čega tako da ne bude slobodan prolaz izvana unutra i unutra van.',
                'zatvarati': ' Zatvarati što znači pomicati dio ili dijelove čega tako da ne bude slobodan prolaz izvana unutra i unutra van.',
                'zatvor': ' Zatvor je zgrada ili dio zgrade u kojoj su zatvoreni ljudi lišeni slobode.',
                'zatvoriti': ' Zatvoriti što znači pomaknuti dio ili dijelove čega tako da ne bude slobodan prolaz izvana unutra ili iznutra van.',
                'zaustaviti': ' Zaustaviti znači spriječiti koga ili što u kretanju.',
                'zaustavljati': ' Zaustavljati znači sprečavati koga ili što u kretanju.',
                'zavičaj': ' Zavičaj je mjesto ili kraj u kojemu je tko rođen ili iz kojega tko potječe, kojemu tko pripada po svojim pravima ili osjećajima.',
                'zavidjeti': ' Zavidjeti komu znači teško podnositi i ne prihvaćati čiji uspjeh ili postignuće, osjećati zavist.',
                'zavisan': ' Zavisan je koji je uvjetovan čime drugim, koji nije u čemu samostalan.',
                'zavisiti': ' Zavisiti od koga ili čega znači ne biti slobodan, ne biti samostalan.',
                'zavisnost': ' Zavisnost je svojstvo onoga što je uvjetovano čime drugim.',
                'zavist': ' Zavist je osjećaj teškoga podnošenja tuđega uspjeha, teškoga mirenja s tuđim dobrim ili boljim položajem u društvu.',
                'zavjesa': ' Zavjesa je tkanina koja se vješa preko prozora, štiti od pogleda i svjetla ili služi kao ukras.',
                'zavladati': ' Zavladati čime znači početi vladati ili nametnuti svoju vlast.',
                'zavoj': ' Zavoj je tkanina u obliku vrpce koja služi za previjanje rana ili učvršćivanje čega.',
                'završavati': ' Završavati što znači dovoditi što do kraja, obavljati što do kraja.',
                'završetak': ' Završetak je ono čime što završava, posljednji dio čega, točka u kojoj što završava.',
                'završiti': ' Završiti što znači dovesti što do kraja.',
                'zbirka': ' Zbirka je skup predmeta koji se sustavno skupljaju radi čuvanja, izlaganja i proučavanja.',
                'zbog': ' Zbog označuje da je što uzrok čemu.',
                'zbogom': ' Zbogom je pozdrav pri rastanku ili odlasku.',
                'zbor': ' Zbor je sastanak određenoga broja ljudi.',
                'zbornica': ' Zbornica je školska prostorija namijenjena boravku nastavnika.',
                'zbrajanje': ' Zbrajanje je računska operacija u kojoj se jednome broju ponovljeno dodaje jedinica onoliko puta koliko to određuje drugi broj.',
                'zbrajati': ' Zbrajati znači izvoditi računsku operaciju zbrajanja.',
                'zbroj': ' Zbroj je rezultat računske operacije zbrajanja.',
                'zbrojiti': ' Zbrojiti znači izvesti računsku operaciju zbrajanja.',
                'zbunjen': ' Zbunjen je koji nesigurno i nejasno razmišlja i zaključuje.',
                'zbunjeno': ' Zbunjeno je tako da odražava nesigurnost i nejasnoću u razmišljanju i zaključivanju.',
                'zbunjenost': ' Zbunjenost je osobina onoga koji je zbunjen.',
                'zdjela': ' Zdjela je posuda u koju se stavlja jelo.',
                'zdrav': ' Zdrav je koji je dobra zdravlja.',
                'zdravlje': ' Zdravlje je stanje organizma pri normalnome radu organa, dobro fizičko i psihičko stanje.',
                'zdravstveni': ' Zdravstveni je koji se odnosi na zdravstvo.',
                'zebra': ' Zebra je afrički kopitar iz porodice konja kratke guste dlake s crnim i bijelim prugama.',
                'zec': ' Zec je sisavac dugih ušiju, kratka repa i dugih stražnjih nogu s pomoću kojih brzo trči i skače.',
                'zečetina': ' Zečetina je zečje meso.',
                'zečić': ' Zečić je mlado zeca.',
                'zečji': ' Zečji je koji se odnosi na zečeve.',
                'zelen': ' Zelen je koji je boje trave ili mladoga lišća.',
                'zeleniti': ' Zeleniti znači bojiti što u zeleno, činiti zelenim.',
                'zeleno': ' Zeleno je tako da je zelene boje.',
                'zelenjeti': ' Zelenjeti se znači postajati zelenim.',
                'zelje': ' Zelje je dvogodišnja povrtna zeljasta biljka kupusnjača čvrstih lisnatih glavica iz porodice krstašica.',
                'zemlja': ' Zemlja je površinski rahao sloj Zemljine kore određenih obilježja ili određene namjene.',
                'zemljište': ' Zemljište je dio Zemljine površine određenih obilježja.',
                'zemljovid': ' Zemljovid je pojednostavnjeni i umanjeni prikaz Zemlje ili njezina dijela na ravnoj plohi.',
                'zemunski': ' Zemunski je koji se odnosi na Zemun i Zemunce.',
                'zglob': ' Zglob je pokretni spoj između kosti.',
                'zgodan': ' Zgodan je koji lijepo izgleda ili se sviđa drugima.',
                'zgodno': ' Zgodno je tako da lijepo izgleda ili se sviđa drugima.',
                'zgrada': ' Zgrada je građevina u kojoj ima više stanovnika ili u kojoj se obavlja kakva poslovna ili javna djelatnost.',
                'zibati': ' Zibati koga ili što znači laganim pokretima ravnomjerno pomicati koga ili što naprijed i natrag ili lijevo i desno.',
                'zid': ' Zid je uspravni dio građevine, obično od čvrstoga gradiva, koji služi kao podloga krovnoj konstrukciji ili kao pregrada unutrašnjih prostora.',
                'zidar': ' Zidar je obrtnik ili radnik koji zida.',
                'zidarev': ' Zidarev je koji pripada zidaru.',
                'zidarica': ' Zidarica je obrtnica ili radnica koja zida.',
                'zidaričin': ' Zidaričin je koji pripada zidarici.',
                'zidarov': ' Zidarov je koji pripada zidaru.',
                'zima': ' Zima je godišnje doba koje na sjevernoj hemisferi počinje 21. prosinca i traje do 21. ožujka.',
                'zimnica': ' Zimnica je hrana spremljena za zimu.',
                'zimovalište': ' Zimovalište je mjesto u kojem se provode zimski praznici.',
                'zimovati': ' Zimovati znači provoditi zimski odmor izvan stalnoga mjesta boravka.',
                'zimski': ' Zimski je koji se odnosi na zimu.',
                'zlatan': ' Zlatan je koji je od zlata ili sadržava zlato.',
                'zlatarna': ' Zlatarna je prodavaonica predmeta ili nakita od plemenitih metala.',
                'zlatarnica': ' Zlatarnica je prodavaonica predmeta ili nakita od plemenitih metala.',
                'zlato': ' Zlato je kemijski element (Au), plemenita žuta teška sjajna kovina, u prirodi se često pojavljuje sam, a upotrebljava se za izradu nakita i drugih ukrasnih predmeta.',
                'zlo': ' Zlo je ukupnost svega što je prožeto zlim namjerama.',
                'zločin': ' Zločin je najteže kazneno djelo, npr. ubojstvo, oružana pljačka, teško nasilje.',
                'zlostavljanje': ' Zlostavljanje je namjerno izlaganje koga psihičkoj ili tjelesnoj patnji. ',
                'zmaj': ' Zmaj je čudovište iz bajke s velikim krilima koje riga vatru.',
                'zmija': ' Zmije su skupina grabežljivih ljuskaša bez nogu koji se kreću pužući, žive na kopnu i u vodi, a plijen ubijaju otrovom ili ga dave.',
                'značiti': ' Značiti što znači nositi jezični sadržaj, imati kakvo značenje.',
                'značka': ' Značka je kovinska ili plastična pločica s kakvim znakom, obilježje pripadnosti kojoj udruzi, klubu, organizaciji ili akciji, nosi se pričvršćena na odjeću.',
                'znak': ' Znak je slovo, broj, slika, glas ili kretnja koji imaju kakvo značenje.',
                'znamenka': ' Znamenka je znak u zapisu broja.',
                'znanac': ' Znanac je osoba koju tko površno poznaje.',
                'znančev': ' Znančev je koji pripada znancu.',
                'znanica': ' Znanica je žena koju tko površno poznaje.',
                'znaničin': ' Znaničin je koji pripada znanici.',
                'znanost': ' Znanost su znanja do kojih se došlo opažanjem, istraživanjem i prikupljanjem dokaza koji objašnjavaju činjenice i pojave u prirodi i društvu.',
                'znanstveni': ' Znanstveni je koji se odnosi na znanost.',
                'znanstvenica': ' Znanstvenica je žena koja se bavi znanstvenim radom.',
                'znanstvenik': ' Znanstvenik je osoba bez obzira na spol ili muškarac koja se bavi znanstvenim radom.',
                'znanje': ' Znanje je poznavanje čega ili spoznaja o čemu, razumijevanje stvari i pojava koje se postiglo učenjem ili iskustvom.',
                'znati': ' Znati što znači biti upoznat s nekim podatkom.',
                'znatiželja': ' Znatiželja je osobina onoga koji je znatiželjan.',
                'znatiželjan': ' Znatiželjan je koji pokazuje veliku želju da što vidi, dozna, nauči ili istraži, kojega sve zanima.',
                'znoj': ' Znoj je bezbojna tekućina koja se kroz kožne pore luči iz znojnih žlijezda.',
                'zob': ' Zob je žitarica čije se zrnje upotrebljava kao ljudska i stočna hrana, osobito u ishrani konja.',
                'zobeni': ' Zobeni je koji se odnosi na zob, biljku.',
                'zoološki': ' Zoološki je koji se odnosi na zoologiju.',
                'zora': ' Zora je doba dana kad se počinje daniti.',
                'zrak': ' Zrak je smjesa plinova koji sačinjavaju Zemljin omotač.',
                'zrakoplov': ' Zrakoplov je letjelica teža od zraka s krilima i različitim vrstama motora.',
                'zrcalo': ' Zrcalo je staklo zatamnjeno sa stražnje strane koja pravilno odbija svjetlosne zrake i vjerno odražava likove.',
                'zrelo': ' Zrelo je tako da odražava čiju zrelost.',
                'zrelost': ' Zrelost je osobina onoga koji je zreo.',
                'zreo': ' Zreo je koji je dospio za branje.',
                'zreti': ' Zreti znači sazrijevati za branje.',
                'zrno': ' Zrno je sitan okruglast plod ili sjemenka žitarica, uljarica i mahunarka.',
                'zub': ' Zub je koštani organ u ustima koji služi za žvakanje i grizenje hrane.',
                'zubački': ' Zubački je koji se odnosi na Zupce i Zupčane.',
                'zubar': ' Zubar je liječnik koji se bavi stomatologijom.',
                'zubarev': ' Zubarev je koji pripada zubaru.',
                'zubarica': ' Zubarica je liječnica koja se bavi stomatologijom.',
                'zubaričin': ' Zubaričin je koji pripada zubarici.',
                'zubarov': ' Zubarov je koji pripada zubaru.',
                'zubarski': ' Zubarski je koji se odnosi na zubare i zubarstvo.',
                'zubobolja': ' Zubobolja je bol u zubima.',
                'zujati': ' Zujati znači proizvoditi jednoliki zvuk koji podsjeća na glas 
                ',
                'zujiti': ' Zujiti znači proizvoditi jednoliki zvuk koji podsjeća na glas 
                ',
                'zum': ' Zum je onomatopejska riječ kojom se oponaša zujenje, najčešće nekoga kukca. ',
                'zvati': ' Zvati koga znači obraćati se komu očekujući da dođe ili da se odazove.',
                'zveckati': ' Zveckati znači činiti da što proizvede visok i tanak zvuk udarcem u kovinski ili stakleni predmet ili udarcem takva predmeta po čemu.',
                'zveketati': ' Zveketati znači proizvoditi visok i tanak zvuk udarcem u kovinski ili stakleni predmet ili udarcem takva predmeta po čemu.',
                'zvijer': ' Zvijeri su skupina kopnenih plodvaša mesoždera s posebno građenim oštrim zubima koji služe za kidanje plijena.',
                'zvijezda': ' Zvijezda je plinovito nebesko tijelo sferna oblika s vlastitim izvorom energije.',
                'zviždaljka': ' Zviždaljka je sprava kojom se zviždi ili proizvodi zvižduk.',
                'zviždati': ' Zviždati znači oglašavati se zviždukom.',
                'zvižduk': ' Zvižduk je prodoran zvuk koji nastaje trenjem zraka koji prolazi kroz stisnute zaokružene usne ili zviždaljku ili s pomoću kakva uređaja.',
                'zviždukati': ' Zviždukati znači pomalo i tiho zviždati.',
                'zvjezdača': ' Zvjezdače su razred morskih beskralježnjaka bodljikaša okrugla tijela koje se naječešće dijeli na pet krakova.',
                'zvjezdica': ' Zvjezdica je mala zvijezda. ',
                'zvonce': ' Zvonce je malo zvono.',
                'zvoniti': ' Zvoniti znači oglašavati se zvonjavom.',
                'zvono': ' Zvono je šuplje kovinsko tijelo u obliku izvrnutoga stošca koje proizvodi zvuk udarcem bata iznutra ili čekića izvana.',
                'zvrčati': ' Zvrčati znači proizvoditi neugodan metalni zvuk.',
                'zvrndati': ' Zvrndati znači proizvoditi jednoliki zvuk koji podsjeća na glas 
                ',
                'zvuk': ' Zvuk je valovito kretanje, mehaničko titranje koje se prima osjetilom sluha.',
                'žaba': ' Žabe su red iz razreda vodozemaca, bezrepci zdepasta tijela koji dišu plućima, imaju veliku široku glavu, dugačke stražnje noge te dobro skaču i plivaju.',
                'žabac': ' Žabac je mužjak žabe.',
                'žalac': ' Žalac je preobražena leglica u nekih opnokrilaca koja ima otrovne žlijezde, pa služi za napad ili obranu.',
                'žaliti': ' Žaliti znači osjećati žalost za onim čega više nema.',
                'žalo': ' Žalo je šljunčana ili pjeskovita obala.',
                'žalosno': ' Žalosno znači tako da odražava, očituje žalost.',
                'žalost': ' Žalost je psihička patnja, trpljenje prouzročeno kakvim gubitkom, nesrećom ili razočaranjem.',
                'žalostan': ' Žalostan je koji osjeća žalost.',
                'žalostiti': ' Žalostiti znači činiti koga žalosnim.',
                'žamor': ' Žamor je mnoštvo glasova koji su se slili u šum ili buku.',
                'žamoriti': ' Žamoriti znači proizvoditi žamor.',
                'žariti': ' Žariti znači zračiti toplinu.',
                'žarulja': ' Žarulja je uređaj koji žarenjem kovinske niti u vakuumu ili plinu električnu energiju pretvara u svjetlosnu.',
                'žbukati': ' Žbukati znači stavljati žbuku na što.',
                'žderati': ' Žderati znači proždrljivo, nepristojno i mnogo jesti.',
                'ždrijebe': ' Ždrijebe je mlado konja do dobi od jedne godine.',
                'ždrijebiti se': ' Ždrijebiti se znači donositi ždrijebe na svijet (o kobili).',
                'ždrijelo': ' Ždrijelo je cjevasti mišićni organ iza usne šupljine koji povezuje dišne i probavne organe.',
                'žedan': ' Žedan je koji osjeća žeđ.',
                'žeđ': ' Žeđ je potreba za pijenjem tekućine.',
                'žeđati': ' Žeđati znači osjećati žeđ ili postajati žednim.',
                'želudac': ' Želudac je prošireni dio probavnoga sustava u trbušnoj šupljini u kojemu se skuplja i probavlja hrana.',
                'želja': ' Želja je težnja da se što postigne, ostvari ili dobije.',
                'željeti': ' Željeti znači imati želju, težiti da se što ostvari, postigne ili dobije.',
                'željeznica': ' Željeznica je sustav javnoga prometa koji se odvija vlakom.',
                'željezo': ' Željezo je kemijski element (Fe), srebrnobijela kovina, sastojak je hemoglobina i čelika koji se upotrebljava u industriji.',
                'žena': ' Žena je odrasla osoba ženskoga spola.',
                'ženevski': ' Ženevski je koji se odnosi na Ženevu i Ženevljane.',
                'ženin': ' Ženin je koji pripada ženi, odrasloj osobi ženskoga spola.',
                'ženka': ' Ženka je odrasla životinja ženskoga spola.',
                'ženskast': ' Ženskast je koji suprotno očekivanjima ima osobine koje se tradicionalno pripisuju ženama.',
                'ženski': ' Ženski je koji se odnosi na žene.',
                'ženstven': ' Ženstven je koji u velikoj mjeri pokazuje osobine ženskoga spola.',
                'ženstveno': ' Ženstveno je tako da odražava čiju ženstvenost, da u velikoj mjeri pokazuje osobine ženskoga spola.',
                'ženstvenost': ' Ženstvenost je  osobina onoga koji je ženstven ili svojstvo onoga što je ženstveno.',
                'žeti': ' Žeti znači srpom ili strojem sjeći stabljike žita s klasjem.',
                'žetva': ' Žetva je košenje i skupljanje žita.',
                'žica': ' Žica je kovinska nit koja služi kao električni vodič ili kao gradivo od kojega se prave različiti predmeti za svakodnevnu upotrebu.',
                'žičara': ' Žičara je prijevozno sredstvo s kabinama ili otvorenim sjedalima koja vise na napetome žičanom užetu.',
                'židov': ' Židov je osoba bez obzira na spol ili muška osoba židovske vjere.',
                'židovka': ' Židovka je ženska osoba židovske vjere.',
                'židovski': ' Židovski je koji se odnosi na židove i Židove ili im pripada.',
                'žigosati': ' Žigosati znači obilježavati koga ili što kao sramotno.',
                'žila': ' Žila je cjevasti organ koji razvodi krv i limfu po tijelu.',
                'žirafa': ' Žirafa je afrički sisavac iz porodice papkara, duljih prednjih nogu i vrlo duga vrata.',
                'žitarica': ' Žitarice su skupina jednogodišnjih biljaka iz porodice trava čiji se zrnasti hranjivi plodovi upotrebljavaju kao hrana i kao sirovina u prehrambenoj industriji.',
                'žito': ' Žito je skupina jednogodišnjih biljaka iz porodice trava čiji se zrnasti plodovi upotrebljavaju kao hrana i kao sirovina u prehrambenoj industriji.',
                'živ': ' Živ je koji ima životne funkcije.',
                'živa': ' Živa je kemijski element (Hg), srebrnobijela kovina, pri sobnoj temperaturi jedina tekuća kovina, a upotrebljava se za punjenje termometara i izradu ogledala.',
                'živac': ' Živac je vlaknasti organ koji prenosi podražaje od mozga u sve dijelove tijela.',
                'živjeti': ' Živjeti znači biti živ.',
                'živkati': ' Živkati znači glasati glasom koji podsjeća na 
                ',
                'živo': ' Živo znači s mnogo energije i snage.',
                'živost': ' Živost je osobina onoga koji je pun energije, snage i aktivnosti, koji je stalno u pokretu.',
                'život': ' Život je stanje bića od rođenja do prestanka svih životnih funkcija organizma.',
                'životan': ' Životan je koji je pun života.',
                'životinja': ' Životinja je pripadnik carstva eukariotskih višestaničnih pokretnih organizama s jezgrom i organelima koji se hrane gotovom organskom tvari, kreću se i žive u staništima koja im osiguravaju potrebne životne uvjete.',
                'životni': ' Životni je koji se odnosi na život.',
                'životno': ' Životno je tako da je puno života.',
                'životno': ' Životno je tako da se odnosi na život.',
                'životopis': ' Životopis je književni ili publicistički tekst u kojemu se iznose podatci o čijemu životu. ',
                'životopisni': ' Životopisni je koji se odnosi na životopis. ',
                'žlica': ' Žlica je dio pribora za jelo kojim se grabi tekuća hrana iz tanjura ili zdjele i stavlja u usta.',
                'žličica': ' Žličica je mala žlica.',
                'žmigavac': ' Žmigavac je uređaj na vozilu koji svijetleći s prekidima obavješćuje o smjeru skretanja.',
                'žmiriti': ' Žmiriti znači imati zatvorene oči.',
                'žrtva': ' Žrtva je dar božanstvu iz religijskih razloga.',
                'žrtvovanje': ' Žrtvovanje je prinošenje žrtve, davanje čega za žrtvu.',
                'žubor': ' Žubor je šum vode ili kiše.',
                'žuboriti': ' Žuboriti znači proizvoditi žubor.',
                'žudjeti': ' Žudjeti znači osjećati silnu želju za kim ili čim.',
                'žulj': ' Žulj je zadebljali sloj kože, obično na ruci ili nozi, nastao pritiskanjem ili trenjem.',
                'žumberački': ' Žumberački je koji se odnosi na Žumberak i Žumberčane.',
                'žumor': ' Žumor je šum vode ili kiše.',
                'žumoriti': ' Žumoriti znači proizvoditi žumor.',
                'župan': ' Župan je naslov muške osobe koja je na čelu župe.',
                'županica': ' Županica je žena s naslovom župana, žena koja je na čelu županije.',
                'županičin': ' Županičin je koji pripada županici.',
                'županija': ' Županija je jedinica lokalne uprave i samouprave.',
                'županijski': ' Županijski je koji se odnosi na županije.',
                'županov': ' Županov je koji pripada županu.',
                'županjski': ' Županjski je koji se odnosi na Županju i Županjce.',
                'žuriti se': ' Žuriti se znači ići brzo bez zastajkivanja, nastojati što prije kamo stići.',
                'žut': ' Žut  je koji je boje limuna, banane ili žutanjka.',
                'žutica': ' Žutica je bolesno stanje organizma popraćeno žutilom kože i sluznica zbog poremećaja lučenja žuči.',
                'žutiti': ' Žutiti znači bojiti što u žuto, činiti žutim.',
                'žutjeti': ' Žutjeti znači postajati žutim.',
                'žvakati': ' Žvakati znači gristi ili sitniti zubima i činiti mekšim prije gutanja.'
            }
            _createClass(_class, [{
                key: 'limitDefinitionLength',
                value: function limitDefinitionLength(string) {
                    return string.length < 110 ? string : string.substring(0, 109) + '...';
                }
            }, {
                key: 'getDefinition',
                value: function getDefinition(word) {

                    return fetch('https://api.dictionaryapi.dev/api/v1/entries/en/hello').then(function(res) {
                        return res.json();
                    }).then(function(res) {
                        return "" + definicije[word.toLowerCase()];
                    });
                }
            }, {
                key: 'showDefinition',
                value: function showDefinition(def) {
                    this.definitionText = this.game.add.text(0, 45, def, _config2.default.definitionLetterConfig);
                    this.definitionText.anchor.x = 0.5;
                    this.addChild(this.definitionText);
                }
            }, {
                key: 'enter',
                value: function enter() {
                    this.enterTween = this.game.add.tween(this.scale).to({ x: 0.275, y: 0.275 }, 400, _phaser2.default.Easing.Back.Out, true);
                }
            }, {
                key: 'dropTo',
                value: function dropTo(y) {
                    this.moveTween = this.game.add.tween(this).to({ y: y }, 300, _phaser2.default.Easing.Back.InOut, true);
                }
            }, {
                key: 'update',
                value: function update() {}
            }]);

            return _class;
        }(_phaser2.default.Text);

        exports.default = _class;

        /***/
    }),
    /* 347 */
    /*!*********************************!*\
      !*** ./src/sprites/GameOver.js ***!
      \*********************************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
        }();

        var _phaser = __webpack_require__( /*! phaser */ 18);

        var _phaser2 = _interopRequireDefault(_phaser);

        var _config = __webpack_require__( /*! ../config */ 22);

        var _config2 = _interopRequireDefault(_config);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var _class = function(_Phaser$Sprite) {
            _inherits(_class, _Phaser$Sprite);

            function _class(_ref) {
                var game = _ref.game,
                    x = _ref.x,
                    y = _ref.y,
                    asset = _ref.asset;

                _classCallCheck(this, _class);

                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, game, x, y, asset));

                _this.game = game;
                _this.createGameOverText();
                _this.createButton();
                _this.anchor.set(0.5);
                return _this;
            }

            _createClass(_class, [{
                key: 'createGameOverText',
                value: function createGameOverText() {
                    this.gameOverText = this.game.add.text(0, -this.height / 6, 'KRAJ IGRE', _config2.default.uiLetterConfig);
                    this.gameOverText.anchor.set(0.5);
                    this.addChild(this.gameOverText);
                }
            }, {
                key: 'createButton',
                value: function createButton() {
                    var _this2 = this;

                    var onClick = function onClick() {
                        window.location.reload();
                    };
                    var ogButtonScale = 0.7;

                    this.button = this.game.add.button(0, this.height / 6, 'buttonBg', onClick);
                    this.button.anchor.set(0.5);
                    this.button.scale.set(ogButtonScale);

                    this.buttonText = this.game.add.text(0, 0, 'NOVA IGRA', _config2.default.uiLetterConfig);
                    this.buttonText.anchor.set(0.5);
                    this.button.addChild(this.buttonText);

                    this.addChild(this.button);

                    this.button.onInputOver.add(function() {
                        return _this2.button.scale.set(ogButtonScale * 1.05);
                    }, this);
                    this.button.onInputOut.add(function() {
                        return _this2.button.scale.set(ogButtonScale * 1);
                    }, this);
                    this.button.onInputDown.add(function() {
                        return _this2.button.scale.set(ogButtonScale * 0.95);
                    }, this);
                    this.button.onInputUp.add(function() {
                        return _this2.button.scale.set(ogButtonScale * 1);
                    }, this);
                }

                // remove() {
                //   this.removalTween = this.game.add.tween(this.scale)
                //     .to({x: 0, y: 0}, 200, Phaser.Easing.Back.In, true)
                //   this.removalTween.onComplete.add(() => this.destroy())
                // }

            }, {
                key: 'enter',
                value: function enter() {
                    this.scale.set(0);
                    this.game.add.tween(this.scale).to({ x: 0.5, y: 0.5 }, 500, _phaser2.default.Easing.Back.Out, true);
                }
            }, {
                key: 'update',
                value: function update() {}
            }]);

            return _class;
        }(_phaser2.default.Sprite);

        exports.default = _class;

        /***/
    }),
    /* 348 */
    /*!****************************!*\
      !*** ./assets/js/words.js ***!
      \****************************/
    /*! exports provided: fullWordList, wordList */
    /*! all exports used */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
        const fullWordList = ["abeceda", "abecedni", "adapter", "administracija", "administracijski", "administrativni", "administrirati", "admiral", "admiralica", "admiraličin", "admiralov", "admiralski", "adresa", "advent", "adventski", "aerodrom", "aerodromski", "afganistanski", "afrički", "aga", "agencija", "agencijski", "agresivan", "agresivno", "agresivnost", "aha", "ajme", "akcelerator", "akcija", "akcijski", "akna", "ako", "akrostih", "aktiv", "aktiv", "aktiva", "aktivan", "aktivirati", "aktivist", "aktivistica", "aktivističin", "aktivistički", "aktivistkinja", "aktivistkinjin", "aktivistov", "aktivizam", "aktivni", "aktivni", "aktivno", "aktivnost", "aktualan", "akuzativ", "akuzativni", "akvarij", "akvarijski", "alarm", "alat", "alatni", "alatnica", "albanski", "album", "alegorija", "alegorijski", "alfabet", "algoritam", "algoritamski", "ali", "aliteracija", "aliteracijski", "alkohol", "alkoholičar", "alkoholičarev", "alkoholičarka", "alkoholičarkin", "alkoholičarov", "alkoholičarski", "alkoholni", "alkoholometar", "alpinist", "alpinistica", "alpinističin", "alpinistički", "alpinistkinja", "alpinistkinjin", "alpinistov", "alpinizam", "aluminij", "aluminijev", "aluminijski", "alžirski", "amen", "američki", "amper", "ampermetar", "amsterdamski", "analitički", "analiza", "analizirati", "ananas", "anđelov", "anđeo", "anđeoski", "anglist", "anglistica", "anglističin", "anglistički", "anglistika", "anglistkinja", "anglistkinjin", "anglistov", "anglizam", "angolski", "anosmija", "antena", "antenski", "antialkoholičar", "antialkoholičarev", "antialkoholičarka", "antialkoholičarkin", "antialkoholičarov", "antialkoholičarski", "antivirusni", "antologija", "antologijski", "aorist", "aoristni", "aparat", "apartman", "apartmanski", "apciha", "apologija", "apologijski", "apostrof", "apoteka", "apozicija", "apozicijski", "ar", "arapski", "argentinski", "argon", "arhitekt", "arhitektica", "arhitektičin", "arhitektonski", "arhitektov", "arhitektski", "arhitektura", "arhitekturni", "arhiv", "arhiva", "arhivist", "arhivistica", "arhivističin", "arhivistički", "arhivistov", "arhivski", "arkanđelov", "arkanđeo", "armenski", "arsen", "arsenov", "asimptomatski", "asonancija", "asonancijski", "astat", "atenski", "atribut", "atributni", "augmentativ", "augmentativni", "aureola", "austrijski", "autić", "auto", "autobiografija", "autobus", "autobusni", "automat", "automehaničar", "automehaničarev", "automehaničarka", "automehaničarkin", "automehaničarov", "automehaničarski", "automobil", "automobilski", "autopraona", "autopraonica", "autor", "autorčić", "autorica", "autoričin", "autorov", "autorski", "avion", "aviončić", "avionski", "azijski", "baba", "babica", "babičin", "babura", "bacač", "bacačev", "bacačica", "bacačičin", "bacački", "bacati", "baciti", "bački", "bačva", "bačvar", "bačvarev", "bačvarica", "bačvaričin", "bačvarov", "bačvarski", "bačvica", "badem", "bademov", "badnjak", "bagdadski", "bahat", "bahato", "bahatost", "bajka", "bajkovit", "bajkovito", "bajkovitost", "Bajram", "bajramski", "bajt", "baka", "bakalar", "bakar", "bakin", "bakren", "bakreni", "bakrov", "bakterija", "bakterijski", "balada", "balerina", "balerinka", "balet", "baletan", "baletni", "balista", "balkanski", "balkon", "balkončić", "balkonski", "balon", "balončić", "baloner", "bambus", "bambusov", "ban", "banana", "bananica", "banatski", "bangkoški", "bangladeški", "banica", "baničin", "banka", "bankomat", "banov", "banovinski", "banski", "banjolučki", "bar", "bar", "baranjski", "baratati", "barcelonski", "barem", "barij", "barometar", "barski", "barun", "barunica", "baruničin", "barunov", "barunski", "baskijski", "basna", "baš", "bat", "baterija", "baterijski", "bavarski", "baviti", "baza", "bazen", "bazenčić", "bazenski", "bazga", "bazgin", "bazgov", "bdjeti", "be", "beba", "bebin", "bečki", "bedreni", "bedro", "beg", "begonija", "begov", "begovica", "begovski", "bekerel", "bel", "beletristički", "beletristika", "belgijski", "belomanastirski", "bengalski", "benkovački", "beogradski", "berilij", "berlinski", "beskonačan", "beskonačno", "beskonačnost", "besmislen", "besmisleno", "besmislenost", "besmrtan", "besmrtno", "besmrtnost", "besplatan", "besplatno", "beton", "betonski", "bevanda", "bez", "bezalkoholni", "bezazlen", "bezazleno", "bezazlenost", "bezbrižan", "bezbrižno", "bezbrižnost", "bezizlazan", "bezizlazno", "bezizlaznost", "bezobziran", "bezobzirno", "bezobzirnost", "bezosjećajan", "bezosjećajno", "bezosjećajnost", "bezvrijedan", "bezvrijedno", "bezvrijednost", "bež", "Biblija", "bicikl", "biciklić", "biciklirati", "biciklist", "biciklistica", "biciklističin", "biciklistički", "biciklistkinja", "biciklistkinjin", "biciklistov", "biciklizam", "biće", "bijeda", "bijedan", "bijedno", "bijel", "bijeliti", "bijeljeti", "bijes", "bik", "bilo", "bilježnica", "bilježničin", "bilježnički", "bilježnik", "bilježnikov", "biljka", "biljni", "binarni", "biogradski", "biografija", "birati", "biser", "biseran", "biserni", "biskup", "biskupija", "biskupijski", "biskupov", "biskupski", "bit", "bitan", "biti", "bitovni", "bivši", "bizantski", "bjelina", "bjelogorica", "bjelogorični", "bjelokošćanski", "bjeloruski", "bježati", "blag", "blagajna", "blagdan", "blagdanski", "blago", "blago", "blagost", "blagovaona", "blagovaonica", "blanja", "blatan", "blatni", "blatno", "blato", "blatski", "blazinica", "blejati", "blijed", "blijedjeti", "blisko", "bliskost", "blitva", "blizak", "blizanac", "blizanački", "blizančev", "blizanka", "blizina", "blizu", "blizu", "blokirati", "bluza", "bljak", "bljedilo", "bod", "bodljika", "bofor", "bog", "bog", "bogat", "bogataš", "bogatašev", "bogatašica", "bogatašičin", "bogataški", "bogato", "bogatstvo", "boginje", "boja", "bojati", "bojažljiv", "bojažljivo", "bojažljivost", "bojica", "bojiti", "bojler", "bojnica", "bojničin", "bojnički", "bojnik", "bojnikov", "bok", "bok", "bokeljski", "boks", "boksač", "boksačev", "boksačica", "boksačičin", "boksački", "boksati", "bokserice", "bol", "bol", "bolest", "bolestan", "bolivijski", "bolnica", "bolnički", "bolovati", "boljeti", "bombon", "bor", "bor", "boravak", "boraviti", "borba", "boriti", "borov", "borovnica", "bos", "bosanski", "bosiljak", "bosonog", "Božić", "božićni", "božji", "br.", "brački", "bračni", "braća", "braćin", "brada", "bradat", "brajica", "brak", "branitelj", "braniteljev", "braniteljica", "braniteljičin", "braniteljski", "braniti", "brašno", "brat", "brati", "bratić", "bratićev", "bratislavski", "bratov", "bratski", "brava", "bravo", "brazilski", "brbljaonica", "brbljati", "brbljav", "brbljavac", "brbljavčev", "brbljavica", "brbljavičin", "brbljavost", "brbot", "brbotati", "brčić", "brčina", "brdo", "brdovit", "brecati", "brecnuti", "breka", "brektati", "brencati", "brenčati", "breskva", "bretonski", "breza", "brežuljak", "briga", "brigadir", "brigadirka", "brigadirkin", "brigadirov", "brigadirski", "brijati", "brijeg", "brinuti", "brisač", "brisati", "briselski", "britanski", "britva", "brižan", "brižno", "brižnost", "brk", "brkat", "brklja", "brod", "brodić", "broj", "brojač", "brojalica", "brojan", "brojati", "brojčanik", "brojevni", "brojilo", "brojiti", "brojka", "brokula", "brom", "brončan", "brončani", "brončanost", "bronhitis", "bronhoskop", "broš", "brr", "bršljan", "bruh", "brz", "brzina", "brzinomjer", "brzo", "brzojav", "brzojavni", "brzoplet", "brzopleto", "brzopletost", "bubanj", "bubnjar", "bubnjarev", "bubnjarica", "bubnjaričin", "bubnjarov", "bubnjarski", "bubnjati", "bubnjić", "bubreg", "bubrežni", "bučan", "bučati", "bučiti", "buć", "bućkati", "bućnuti", "budala", "budalast", "budaletina", "budaletinin", "budalica", "budaličin", "budalin", "budimpeški", "buditi", "budući", "budućnost", "budvanski", "buđenje", "bugarski", "bugojanski", "bujski", "buka", "bukov", "bukovički", "bukovina", "bukureštanski", "bukva", "bukvin", "bum", "bumerang", "bunda", "bundeva", "bundevin", "bundica", "bura", "buran", "burek", "burno", "busovački", "buzdovan", "car", "carev", "carica", "caričin", "carina", "carstvo", "CD", "celer", "celerov", "centa", "centar", "centilitar", "centimetar", "centrifuga", "cepelin", "cesta", "cestni", "cestovni", "cetinski", "cezij", "cičati", "cigareta", "cigaretni", "cigla", "ciglast", "cigleni", "cijediti", "cijel", "cijelo", "cijena", "cijeniti", "cijep", "cijepiti", "cijepljenje", "cijev", "cijevka", "ciju", "cijukanje", "cijukati", "cijuknuti", "cikla", "ciklama", "ciklograf", "ciknuti", "cilik", "cilikati", "cilj", "cimati", "cimer", "cimerica", "cimeričin", "cimerov", "cimnuti", "cinčani", "cink", "cinkati", "cinkov", "ciparski", "cipela", "cipelica", "cirkus", "civil", "civilizacija", "civilni", "cjedilo", "cjelina", "cjelovit", "cjelovito", "cjelovitost", "cjepivo", "cjevčica", "cm", "cmok", "COVID-19", "creški", "crijevo", "crikvenički", "crknuti", "crkva", "crkveni", "crn", "crniti", "crnogorica", "crnogorični", "crnogorski", "crnjeti", "crpka", "crta", "crtalo", "crtančica", "crtanka", "crtati", "crtež", "crtica", "crtični", "crv", "crven", "crveniti", "crvenjeti", "cupkati", "cura", "curetak", "curica", "curičin", "curin", "cvijeće", "cvijet", "cvijetak", "cviliti", "cviljeti", "cvjećarna", "cvjećarnica", "cvjetača", "cvjetić", "cvokotati", "cvrčak", "cvrčati", "cvrkut", "cvrkutati", "čadski", "čaj", "čak", "čakovečki", "čamac", "čapljinski", "čarapa", "čaroban", "čarobnica", "čarobničin", "čarobnjački", "čarobnjak", "čarobnjakov", "čas", "časnica", "časničin", "časnički", "časnik", "časnikov", "časopis", "čast", "čaša", "čavao", "čečenski", "čegrtaljka", "čekanje", "čekaona", "čekaonica", "čekati", "čekić", "čekrk", "čelik", "čelo", "čempres", "čest", "čestica", "čestični", "čestit", "čestitati", "čestitka", "čestito", "čestitost", "često", "čestoća", "češalj", "češki", "češljanje", "češljaona", "češljaonica", "češljati", "češnjak", "četiri", "četiristo", "četiristoti", "četka", "četkati", "četkica", "četrdeset", "četrdesetak", "četrdesetero", "četrdeseti", "četrdesetogodišnjak", "četrdesetogodišnjakinja", "četrdesetogodišnji", "četrdesetogodišnjica", "četrdesetorica", "četrnaest", "četrnaestero", "četrnaesti", "četveri", "četvero", "četverodijelan", "četverodimenzijski", "četverodimenzionalni", "četverogodišnjak", "četverogodišnjakinja", "četverogodišnji", "četverokatni", "četverokatnica", "četverokratnik", "četverokut", "četveromjesečni", "četveroredan", "četverorječan", "četverosjed", "četverosoban", "četverostruk", "četvorica", "četvorka", "četvrt", "četvrtak", "četvrtaš", "četvrtašica", "četvrti", "četvrtica", "četvrtina", "četvrtinka", "čeznuti", "čičak", "čigra", "čiji", "čijigod", "čikaški", "čileanski", "čim", "čim", "čimbenik", "čin", "činele", "činiti", "činiti", "činjenica", "čip", "čist", "čistač", "čistačev", "čistačica", "čistačičin", "čistački", "čistiona", "čistionica", "čistiti", "čitač", "čitanka", "čitaona", "čitaonica", "čitati", "čitav", "čitlučki", "čizma", "član", "članak", "članica", "članičin", "članov", "članski", "čokolada", "čovjek", "čučati", "čučnuti", "čuditi", "čudo", "čuti", "čuvati", "čv", "čvor", "čvor", "čvrst", "čvrsto", "ćelav", "ćelavac", "ćelavčev", "ćelavost", "ćevapčić", "ćilim", "ćirilica", "ćirilični", "ćud", "ćuk", "ćup", "ćurlikati", "ćurliknuti", "da", "da", "dablinski", "dag", "dah", "dahija", "dahtati", "dakle", "dalaj-lama", "dalek", "daleko", "dalekopisač", "dalekozor", "dalija", "dalmatinski", "dalton", "daltonist", "daltonistica", "daltonističin", "daljnji", "dama", "damin", "dan", "danas", "današnji", "danski", "danji", "dar", "darežljiv", "darežljivo", "darežljivost", "darivati", "darovati", "darovit", "darovito", "darovitost", "daska", "daščica", "dati", "dati", "dativ", "dativni", "datoteka", "datulja", "datum", "davati", "davni", "debelo", "debeo", "deblo", "debljina", "decibel", "decilitar", "decimetar", "dečko", "dečkov", "deka", "dekadski", "dekagram", "delhijski", "delnički", "deminutiv", "deminutivni", "denzimetar", "derviš", "dervišev", "deset", "desetak", "desetak", "desetero", "deseterokratnik", "deseterokut", "deseterostruk", "deseti", "desetica", "desetina", "desetka", "desetljeće", "desetnica", "desetničin", "desetnički", "desetnik", "desetnikov", "desetogodišnjak", "desetogodišnjakinja", "desetogodišnji", "desetogodišnjica", "desetomjesečni", "desetorica", "desni", "desno", "despot", "despotov", "despotski", "dešnjački", "dešnjak", "dešnjakinja", "dešnjakinjin", "dešnjakov", "detalj", "deterdžent", "deva", "devedeset", "devedesetak", "devedesetero", "devedeseti", "devedesetorica", "devet", "devetero", "deveterokratnik", "deveterokut", "deveterostruk", "deveti", "devetica", "devetina", "devetka", "devetnaest", "devetnaestero", "devetnaesti", "devetomjesečni", "devetorica", "devetsto", "devetstoti", "dezinfekcija", "dezinficijens", "dezinficirati", "dičiti", "difterija", "digitalizacija", "digitalizirati", "digitalni", "dignuti", "dijabetes", "dijalog", "dijaspora", "dijeliti", "dijeljenje", "dijeta", "dijete", "dijetetički", "dijetetika", "dijetni", "diktat", "diljem", "dim", "dimovod", "dinamičan", "dinamometar", "dinja", "dio", "dionica", "dioptrija", "diploma", "diplomat", "diplomatkinja", "direktan", "direktor", "direktorica", "direktoričin", "direktorij", "direktorov", "direktorski", "dirigentski", "dirigirati", "disati", "disciplina", "disk", "disketa", "diskoteka", "div", "divan", "diviti", "divkinja", "divkinjin", "divljak", "divljakinja", "divljakuša", "divlji", "divov", "divovski", "dizajn", "dizajner", "dizajnerica", "dizajneričin", "dizajnerski", "dizalica", "dizalo", "dizati", "dižonski", "djeca", "dječačić", "dječačićev", "dječački", "dječak", "dječakov", "dječji", "djed", "djedov", "djedovina", "djelatnost", "djelitelj", "djelo", "djelotvoran", "djelotvorno", "djelotvornost", "djelovati", "djeljenik", "djeljiv", "djeljivost", "djetelina", "djetešce", "djetinjstvo", "djevac", "djevica", "djevičanski", "djevičin", "djevojački", "djevojčica", "djevojčičin", "djevojčin", "djevojka", "dl", "dlačica", "dlaka", "dlan", "dlijeto", "dm", "dnevni", "dnevnik", "dnevno", "dno", "do", "do", "doba", "doba", "dobar", "dobiti", "dobivati", "dobro", "dobro", "dobro", "dobroćudan", "dobroćudno", "dobroćudnost", "dočasnica", "dočasničin", "dočasnički", "dočasnik", "dočasnikov", "dočim", "doći", "dodatak", "dodatan", "dodati", "dodavati", "dodijeliti", "dodir", "dodjeljivati", "događaj", "događanje", "događati", "dogoditi", "dogovarati", "dogovor", "dogovoriti", "doista", "dojam", "dojka", "dok", "dokaz", "dokoljenica", "dokoljenka", "doktor", "doktorica", "doktoričin", "doktorirati", "doktorov", "doktorski", "dokud", "dokument", "dolar", "dolazak", "dolaziti", "dolina", "dolje", "dom", "doma", "domaći", "domaćica", "domaćičin", "domaćin", "domaćinov", "domaćinski", "domišljat", "domišljato", "domišljatost", "domovina", "domovnica", "donijeti", "donositi", "donji", "donjomiholjački", "dopisnica", "dopodne", "dopodnevni", "doručak", "doručkovati", "dosada", "dosadan", "dosaditi", "dosadno", "dosađivati", "dosjetljiv", "dosjetljivo", "dosjetljivost", "dosljedan", "dosljedno", "dosljednost", "dosta", "došašće", "dovesti", "doviđenja", "dovoljan", "dovoljno", "dovršavati", "dovršiti", "doživjeti", "doživljaj", "doživljavati", "drački", "drag", "dragoljub", "drama", "dramaljski", "dramski", "drap", "dražica", "dres", "drezdenski", "drmati", "drmnuti", "drndati", "drniški", "drsko", "drskost", "drugačiji", "drugaš", "drugašica", "drugašičin", "drugi", "drugi", "drukčiji", "društven", "društveno", "društvenost", "društvo", "druženje", "družiti", "drvce", "drveće", "drven", "drvlje", "drvo", "drzak", "držati", "država", "državni", "dubina", "dubinomjer", "dubok", "dubrovački", "dućan", "duda", "dudaš", "dudašev", "dudašica", "dudašičin", "dudaški", "dude", "dug", "dug", "duga", "dugačak", "dugme", "dugo", "dugootočki", "dugoratski", "dugoreški", "dugoselski", "duguljast", "duh", "duhan", "duhanski", "duljina", "dum", "dunja", "duša", "dušični", "dušik", "dušikov", "dušnik", "duž", "dužan", "dužd", "dužina", "dužnost", "dva", "dvadeset", "dvadesetak", "dvadesetero", "dvadeseti", "dvadesetogodišnjak", "dvadesetogodišnjakinja", "dvadesetogodišnji", "dvadesetogodišnjica", "dvadesetorica", "dvanaest", "dvanaestero", "dvanaesti", "dvaput", "DVD", "dvica", "dvije", "dvjesto", "dvjestoti", "dvodijelan", "dvodimenzijski", "dvodimenzionalni", "dvogodišnjak", "dvogodišnjakinja", "dvogodišnji", "dvoje", "dvojezičan", "dvoji", "dvojica", "dvojka", "dvokatni", "dvokatnica", "dvokratan", "dvokratnik", "dvokrevetni", "dvoličan", "dvolično", "dvoličnost", "dvomjesečni", "dvorac", "dvorana", "dvoranski", "dvoredan", "dvorišni", "dvorište", "dvorječan", "dvorski", "dvosjed", "dvoslov", "dvosoban", "dvostruk", "dvostruko", "dvotjedni", "dvotočka", "dž", "dž", "džamija", "džem", "džemper", "džep", "džeparac", "džepić", "džez", "džip", "džul", "džungla", "đak", "đakovački", "đavao", "đavolak", "đavolčev", "đavolčić", "đavolčićev", "đavolica", "đavoličin", "đavolov", "đavolski", "điha", "đon", "đumbir", "đurđevački", "đurđica", "e-adresa", "eda", "edinburški", "egipatski", "egzotičan", "ehinokok", "ej", "ekipa", "ekipni", "ekologija", "ekološki", "ekonomija", "ekonomski", "ekoselo", "ekran", "ekskluzivan", "ekskurzija", "eksplodirati", "ekstranet", "ekstravagantan", "ekvadorski", "elegantan", "elektronvolt", "elektroskop", "element", "emisija", "enciklopedija", "enciklopedijski", "energija", "energijski", "engleski", "enklitika", "eno", "ep", "epigram", "epika", "epitet", "epizoda", "epizodni", "e-poruka", "epski", "eritrejski", "esej", "e-sport", "estonski", "etanol", "etaža", "etažni", "etiopski", "eto", "euro", "europski", "eventualan", "evo", "fabula", "fagot", "fagotist", "fagotistica", "fagotističin", "fagotistički", "fagotistov", "faks", "faktor", "fakultet", "fanfara", "farad", "faraon", "fasada", "fasadni", "fauna", "faza", "fazan", "feferon", "fen", "festival", "fidžijski", "figura", "fiju", "fijukanje", "fijukati", "fijuknuti", "filipinski", "filipljanski", "film", "financije", "financijski", "finski", "firentinski", "fizičar", "fizičarka", "flauta", "flautist", "flautistica", "flautističin", "flautistički", "flautistov", "flora", "fluor", "fond", "fonologija", "fonološki", "forma", "forum", "fosfor", "fotelja", "fotoaparat", "fotografija", "fotokopija", "fotokopiranje", "fotokopiraona", "fotokopiraonica", "fotokopirati", "fragment", "fragmentacija", "fragmentarni", "fragmentirati", "francuski", "frankfurtski", "frekvencija", "frfljati", "frizer", "frizerka", "frizerkin", "frizerov", "frizerski", "frizura", "frula", "frulaš", "frulašev", "frulašica", "frulašičin", "frulaški", "frulica", "fufljati", "fuj", "fukušimski", "funkcija", "funkcionirati", "furlanski", "futur", "futurski", "g.", "gabeoski", "gaće", "gajdaš", "gajdašev", "gajdašica", "gajdašičin", "gajdaški", "gajde", "gakati", "gaknuti", "gaktati", "galama", "galapagoški", "galeb", "galerija", "galicijski", "galicizam", "galilejski", "galski", "ganski", "garaža", "garešnički", "garsonijera", "gasiti", "gastroskop", "gaziti", "gdanjski", "gdje", "gdje", "gdje", "gdjekad", "gdjekoji", "gdješto", "gdješto", "gdjetko", "gđa", "gđica", "gemišt", "generacija", "general", "generalica", "generaličin", "generalov", "generalski", "genijalan", "genijalno", "genijalnost", "genitiv", "genitivni", "geometrija", "georgina", "germanizam", "gibak", "gibraltarski", "giljotina", "gimnastičar", "gimnastičarev", "gimnastičarka", "gimnastičarkin", "gimnastičarov", "gimnastički", "gimnastika", "gimnazija", "gipko", "gipkost", "gitara", "gitarist", "gitaristica", "gitarističin", "gitaristički", "gitaristov", "gitarski", "gizdav", "gizdavo", "gizdavost", "glačalo", "glačati", "glad", "gladan", "gladno", "glagol", "glagolski", "glagoljica", "glagoljični", "glas", "glasati", "glasati", "glasnica", "glasovir", "glasovirski", "glava", "glavni", "glavobolja", "glazba", "glazbalo", "glazbeni", "gle", "gledalište", "gledatelj", "gledateljev", "gledateljica", "gledateljičin", "gledateljski", "gledati", "glede", "gležnjača", "glinski", "gliser", "glista", "glog", "gluh", "gluhonijem", "gluhoslijep", "glumac", "glumački", "glumčev", "glumica", "glumičin", "glup", "glupo", "glupost", "gljiva", "gmaz", "gnijezdo", "god", "god.", "godina", "godišnji", "godišnjica", "gojzerica", "gol", "gol", "golub", "gomolj", "gora", "gorak", "goranski", "gore", "goriti", "gorivo", "gorjeti", "gornji", "gospa", "gospićki", "gospoda", "gospodar", "gospodarica", "gospodariti", "gospodarski", "gospodarstvo", "gospodin", "gospođa", "gospođica", "gost", "gostiona", "gostionica", "gošća", "gotov", "gotovina", "gotovo", "govedina", "govedo", "govedski", "goveđi", "govor", "govorenje", "govoriti", "govorni", "govornik", "gozba", "grabilica", "grablje", "gračački", "grad", "grad", "gradacija", "gradački", "gradilište", "gradišćanski", "graditi", "gradivo", "gradnja", "gradonačelnik", "gradski", "građanin", "građevina", "grafoskop", "grah", "graknuti", "graktati", "gram", "gramatički", "gramatika", "gramofon", "gramziv", "gramzivo", "gramzivost", "grana", "granica", "grašak", "grb", "grčki", "greda", "grejp", "grenlandski", "grepsti", "grgljati", "grgoljiti", "grijač", "grijalica", "grijati", "grijeh", "gripa", "grliti", "grlo", "grm", "grmljavina", "grob", "groblje", "grof", "groktati", "grom", "gromobran", "groteska", "grozd", "grožđe", "grub", "grubišnopoljski", "grubo", "grubost", "grudnjak", "grudski", "grupa", "gruzijski", "guba", "gubiti", "gugutati", "gujavica", "gukati", "gulaš", "guma", "gumica", "gunđati", "gurati", "gusar", "gusjenica", "gusji", "guska", "gust", "gusto", "gustoća", "gušavost", "guščetina", "guščji", "gušter", "gutati", "gužva", "gvatemalski", "gvinejski", "ha", "habit", "haiku", "haitski", "hajde", "halo", "halja", "haljina", "hamburger", "hamburški", "Hanuka", "hardver", "harfa", "harfist", "harfistica", "harfističin", "harfistički", "harfistov", "harmonika", "harmonikaš", "harmonikašev", "harmonikašica", "harmonikašičin", "harmonikaški", "haški", "he", "hej", "heksadekadski", "heksametar", "hektar", "hektolitar", "hektopaskal", "helij", "helikopter", "hemofilija", "henri", "herc", "herceg", "hercegnovljanski", "hercegovački", "herpes", "hi", "hidrofor", "hidrogliser", "himna", "hiperbola", "hiperveza", "hirošimski", "hitan", "hitar", "hitno", "hitro", "hitrost", "hl", "hlače", "hlad", "hladan", "hladiti", "hladno", "hladnoća", "hladnjak", "hladovina", "hlebinski", "ho", "hobi", "hobotnica", "hodalica", "hodati", "hodnik", "hodža", "hongkonški", "hotel", "hrabar", "hrabro", "hrabrost", "hrana", "hraniti", "hrast", "hrastov", "hrastovina", "hrčak", "hren", "hrid", "hripati", "hripavac", "hroptati", "hrpa", "hrskati", "hrvatački", "hrvatski", "hrzati", "htjeti", "hučati", "hučiti", "hujati", "hujiti", "huka", "hukati", "huknuti", "huktati", "hulahopke", "humor", "humoreska", "humorističan", "hungarizam", "hunjavica", "hura", "hutovski", "hvala", "hvalisav", "hvalisavo", "hvalisavost", "hvalospjev", "hvarski", "hvat", "hvataljka", "ia", "iako", "ičiji", "ići", "idealist", "idealistica", "idealističin", "idealistički", "idealistov", "idealizam", "ideja", "idući", "igla", "ignorirati", "igra", "igrač", "igračev", "igračica", "igračičin", "igračka", "igrački", "igralište", "igraonica", "igrati", "igrifikacija", "ijedan", "ikad(a)", "ikakav", "ikoji", "ikona", "ili", "iločki", "iluzija", "iluzionist", "iluzionistica", "iluzionističin", "imam", "imati", "ime", "imendan", "imenica", "imenički", "imenik", "imenski", "imotski", "imperativ", "imperativni", "imperfekt", "imperfektni", "inače", "indijski", "indirektan", "indonezijski", "induktor", "infinitiv", "infinitivni", "informacija", "informatičar", "informatičarev", "informatičarka", "informatičarov", "informatički", "informatika", "informirati", "inicijal", "inkubator", "inozemstvo", "instalirati", "institucija", "instrument", "instrumental", "instrumentalni", "interes", "interesantan", "interesirati", "internet", "internetski", "interpretacija", "intervju", "intranet", "invalid", "invalidan", "invaliditet", "invalidnost", "invalidov", "invalidski", "invalitkinja", "invalitkinjin", "invokacija", "inženjer", "inženjerka", "inženjerkin", "inženjerov", "inženjerski", "injekcija", "ipak", "irački", "iranski", "iris", "irski", "iseljenica", "iseljeničin", "iseljenik", "iskaz", "iskaznica", "isključiti", "isključivo", "iskoristiti", "iskra", "iskren", "iskreno", "iskrenost", "iskustvo", "islandski", "ispeći", "ispit", "ispod", "isprava", "ispravak", "ispravan", "ispraviti", "ispravljati", "ispravno", "ispravnost", "ispred", "ispričati", "ispričavati", "ispričnica", "isprika", "istaknuti", "istanbulski", "istarski", "isti", "isticati", "istina", "istinit", "istinito", "istinitost", "isto", "istočni", "istok", "istraživanje", "iš", "išta", "itd.", "itko", "ivančica", "ivanečki", "ivanićgradski", "iz", "iza", "izabirati", "izabrati", "izaći", "izbor", "izbornički", "izbornik", "izbornikov", "izdajica", "izdajičin", "izdajnica", "izdajničin", "izdajnički", "izdajnik", "izdajnikov", "izdanje", "izdržljiv", "izdržljivo", "izdržljivost", "izgled", "izgledati", "izgovor", "izgradnja", "izgubiti", "izići", "izjava", "izjaviti", "izlaz", "izlaziti", "izlet", "izložba", "između", "izmisliti", "izmišljati", "iznad", "iznajmiti", "iznajmljivati", "iznenada", "iznenaditi", "iznenađenje", "iznenađivati", "iznimka", "iznos", "iznositi", "iznositi", "izolator", "izostanak", "izostavnik", "izrada", "izraelski", "izražajan", "izražajno", "izražajnost", "izreka", "izroniti", "izumiti", "izuti", "izuvati", "izvan", "izvijestiti", "izvješćivati", "izvještavati", "izvor", "izvrsno", "izvrstan", "izvući", "ja", "jablan", "jabuka", "jačanje", "jačati", "jačina", "jadan", "jadno", "jaglac", "jagoda", "jahati", "jahta", "jajački", "jaje", "jajnik", "jajovod", "jak", "jakna", "jako", "jakost", "jama", "jamajački", "janje", "janjeći", "janjetina", "janjevački", "janjiti", "jao", "japanka", "japanski", "jarac", "jard", "jare", "jareći", "jaretina", "jarić", "jasan", "jaslice", "jasmin", "jasno", "jastrebarski", "jastučnica", "jastuk", "jat", "jato", "javiti", "javljati", "javni", "javnobilježnički", "javnost", "jecati", "ječati", "jedan", "jedan", "jedanaest", "jedanaesterac", "jedanaestero", "jedanaesti", "jedanput", "jedinac", "jedini", "jedinica", "jediničin", "jedino", "jednačenje", "jednak", "jednako", "jednakost", "jedni", "jednina", "jedninski", "jednodijelan", "jednodimenzijski", "jednodimenzionalni", "jednogodišnjak", "jednogodišnjakinja", "jednogodišnji", "jednojezičan", "jednokatni", "jednokatnica", "jednokratan", "jednokrevetni", "jednom", "jednomjesečni", "jednoredan", "jednorječan", "jednosjed", "jednoslov", "jednosoban", "jednostavan", "jednostavno", "jednostavnost", "jednostih", "jednostruk", "jednotjedni", "jedrenje", "jedrilica", "jedva", "jeftin", "jeknuti", "jela", "jelen", "jelo", "jelovnik", "jer", "jeruzalemski", "jesen", "jesenski", "jesenji", "jesti", "jetra", "jezero", "jezgra", "jezičac", "jezičak", "jezičast", "jezičav", "jezičavost", "jezični", "jezik", "jezikoslovac", "jezikoslovka", "jezikoslovkin", "jezikoslovlje", "jezikoslovni", "jež", "ježinac", "jod", "jogurt", "joj", "jojoba", "jojobin", "jordanski", "jorgan", "jorgovan", "josipdolski", "još", "jotacija", "jučer", "judejski", "jug", "jugo", "jugoistočni", "jugoistok", "jugozapad", "jugozapadni", "juha", "junački", "junak", "junakinja", "junakinjin", "june", "juneći", "junetina", "jupi", "Jupiter", "jutarnji", "jutro", "jutro", "jutros", "južni", "južnoafrički", "južnoamerički", "k(a)", "kabanica", "kabao", "kabina", "kabulski", "kaciga", "kad", "kada", "kada", "kadet", "kadetkinja", "kadetkinjin", "kadetov", "kadgod", "kadifica", "kafić", "kairski", "kajati", "kakao", "kakav", "kakavgod", "kaki", "kako", "kako", "kako", "kalcij", "kalendar", "kaligram", "kalij", "kalkulator", "kalkutski", "kalorija", "kaljača", "kambodžanski", "kamen", "kamenje", "kamera", "kamerunski", "kamilica", "kamion", "kamo", "kan", "kanadski", "kanalizacija", "kanalizacijski", "kandela", "kandidat", "kandidatkinja", "kanta", "kantina", "kao", "kap", "kapa", "kapaljka", "kapavac", "kapetan", "kapetanica", "kapetaničin", "kapetanov", "kapetanski", "kapuljača", "kaput", "karakteristika", "karakterizacija", "karanfil", "karat", "karcinom", "kardinal", "karijera", "karika", "karlovački", "karneval", "karta", "kartica", "kartica", "kasa", "kasnije", "kasniti", "kasno", "kastanjete", "kaša", "kašalj", "kašljati", "kaštelanski", "kat", "katalonski", "katapult", "katarski", "katarza", "katastrofa", "katedrala", "kategorija", "katni", "katnica", "katolički", "katolik", "katolikov", "katolkinja", "katolkinjin", "kauč", "kava", "kavana", "kavez", "kavkaski", "kazahstanski", "kazališni", "kazalište", "kazaljka", "kazati", "kazetofon", "kazna", "kazniona", "kaznionica", "kazniti", "kažiprst", "kažnjavati", "kćer", "kćerin", "kćerinski", "kćerka", "kćerkin", "kći", "keks", "kelvin", "kelj", "kembrički", "kemija", "kenijski", "kesten", "kg", "%ikick%i-boks", "kikiriki", "kila", "kilogram", "kilometar", "kilovat", "kilovatsat", "kim", "kinematograf", "kinematografija", "kinematografski", "kineski", "kino", "kinodvorana", "kinoprojekcija", "kinoprojektor", "kiosk", "kip", "kip", "kipar", "kiparev", "kiparica", "kiparičin", "kiparov", "kiparski", "kirgistanski", "kiseljački", "kiseo", "kisik", "kist", "kiša", "kišiti", "kišobran", "kitica", "kivi", "kladiona", "kladionica", "kladiti", "klapa", "klarinet", "klarinetist", "klarinetistica", "klarinetističin", "klarinetistički", "klarinetistov", "klatno", "klaun", "klavir", "klavirist", "klaviristica", "klavirističin", "klaviristički", "klaviristov", "klavirski", "klečati", "kleka", "klepet", "klepetati", "kliješta", "klik", "klikati", "kliknuti", "kliktati", "klima", "klin", "klinika", "klip", "kliški", "klitika", "klizalište", "klizaljka", "klizati", "klokot", "klokotati", "klompa", "kloparati", "klopka", "klopot", "klopotati", "klor", "kloštarski", "klub", "klupa", "klupko", "kljucati", "kljucnuti", "ključ", "kljun", "km", "kn", "knez", "kninski", "knjiga", "knjižara", "književnica", "književničin", "književnik", "književnost", "knjižnica", "knjižničar", "knjižničarev", "knjižničarka", "knjižničarkin", "knjižničarov", "knjižničarski", "knjižničarstvo", "kobalt", "kobasica", "kobila", "kocka", "kockast", "kockica", "kočijaš", "kočnica", "kod", "kod", "kodni", "kofer", "kojekakav", "koješta", "koji", "kokodak", "kokodakanje", "kokodakati", "kokodaknuti", "kokos", "kokoš", "kola", "kolač", "kolaž", "kolega", "kolegica", "kolektor", "kolera", "kolica", "količina", "količnik", "kolijevka", "koliko", "kolnik", "kolo", "kolodvor", "kolovoz", "kolumbijski", "kolutati", "koljeno", "komad", "komandant", "komandantica", "komandantičin", "komandantov", "komandantski", "kombi", "kombinacija", "komedija", "komentar", "komentirati", "komiški", "komoda", "komodor", "kompanija", "komparativ", "kompas", "kompilator", "kompjutor", "kompjutorski", "kompresor", "komunikacija", "komunikacijski", "komunikativan", "komunikativnost", "konac", "konac", "konačan", "konačno", "konačnost", "konavoski", "koncert", "kondenzator", "kondicional", "kondicionalni", "konferencija", "kongoanski", "konobar", "konobarev", "konobarica", "konobaričin", "konobarov", "konobarski", "kontinent", "kontraadmiral", "kontrabas", "kontrabasist", "kontrabasistica", "kontrabasističin", "kontrabasistički", "kontrabasistov", "kontrola", "konj", "konjak", "kopačka", "kopati", "kopenhaški", "koplje", "kopnica", "kopno", "kopriva", "koprivnički", "kora", "koraba", "korak", "korčulanski", "korejski", "korica", "korice", "korijen", "korijenje", "korisnica", "korisničin", "korisnički", "korisnik", "korisnikov", "korist", "koristiti", "korištenje", "korito", "korizma", "kormilo", "kornjača", "korov", "kos", "kosa", "kosa", "kosina", "kositar", "kosovski", "kost", "kostarikanski", "kostim", "kostur", "koš", "košara", "košarica", "košarka", "košarkaš", "košarkašica", "koštati", "košulja", "košuta", "kotač", "kotiti", "kotoripski", "kotorski", "koturaljka", "kovač", "kovčeg", "kovina", "kovitlati", "kovrčav", "kovrčavost", "koza", "kozica", "kozle", "kozleći", "kozletina", "kozlić", "kozmetičar", "kozmetičarev", "kozmetičarka", "kozmetičarkin", "kozmetičarov", "kozmetičarski", "kozmetički", "koža", "krađa", "kraj", "kraj", "krajnik", "krakovski", "kralj", "kraljevstvo", "kralježnica", "kraljica", "kranjski", "krapinski", "krasan", "krasno", "krastavac", "krasti", "kratak", "kratica", "krava", "kravata", "krc", "krckati", "krcnuti", "krčati", "krčki", "kreda", "kredit", "kreketati", "krenuti", "krepati", "kreševski", "kreštati", "kretati", "kretski", "krevet", "kriještati", "krik", "krilo", "krimski", "kriti", "kriv", "kriza", "križ", "križaljka", "križevački", "križić", "krkljati", "krletka", "krmača", "krojač", "krojačev", "krojačica", "krojačičin", "krojački", "krojiti", "krokodil", "krom", "krošnja", "krotak", "krotko", "krotkost", "krov", "krovni", "kroz(a)", "krpa", "krpelj", "krstionica", "krstiti", "k%ur%ušćanin", "kršćaninov", "kršćanka", "kršćankin", "kršćanski", "krtica", "krug", "kruh", "kruliti", "kruljiti", "krumpir", "kruna", "kruška", "krut", "kruto", "krutost", "kružić", "kružiti", "kružni", "kružnica", "krv", "krzno", "ksilofon", "ksilofonist", "ksilofonistica", "ksilofonističin", "ksilofonistov", "ksilofonski", "kubanski", "kucati", "kuća", "kućanica", "kućaničin", "kućica", "kućni", "kud", "kuda", "kuga", "kugla", "kuglast", "kuglica", "kuhalo", "kuhar", "kuharev", "kuharica", "kuharičin", "kuharov", "kuharski", "kuhati", "kuhinja", "kuhinjski", "kukac", "kukurijek", "kukurijekanje", "kukurijekati", "kukurijeknuti", "kukurikanje", "kukurikati", "kukuriknuti", "kukuriku", "kukuruz", "kula", "kulminacija", "kulon", "kultura", "kulturan", "kulturno", "kum", "kuma", "kumče", "kumica", "kumin", "kumin", "kumin", "kumov", "kuna", "kuneći", "kunić", "kunićevina", "kupac", "kupaona", "kupaonica", "kupaonički", "kupaonski", "kupati", "kupčev", "kupina", "kupiti", "kupiti", "kupovati", "kupovina", "kupreški", "kupus", "kursor", "kut", "kutija", "kutinski", "kutomjer", "kuvajtski", "kvadar", "kvadrat", "kvadratičan", "kvadratić", "kvadratni", "kvaka", "kvaliteta", "kvalitetan", "kvar", "kvariti", "kviz", "kvocati", "kvocijent", "labinski", "ladica", "ladičar", "lađa", "lagan", "lagano", "lagati", "lak", "lak", "lakat", "lako", "lakom", "lakomo", "lakomost", "lakovjeran", "lakovjerno", "lakovjernost", "lakrdija", "laktometar", "lamatati", "lamati", "lampa", "lanac", "lančić", "lane", "laringoskop", "larva", "lastavica", "lastovski", "latica", "latinica", "latinični", "lav", "lavanda", "lavež", "lavica", "lavičin", "lavić", "lavićev", "lavina", "lavlji", "lavov", "lavovski", "laž", "leća", "leća", "leći", "led", "ledenjak", "ledomat", "leđa", "legenda", "lekcija", "lektira", "lepetati", "lepeza", "leptir", "let", "letjelica", "letjeti", "letonski", "leukemija", "ležaljka", "ležati", "li", "libanonski", "libijski", "libreto", "lice", "ličinka", "lički", "lift", "liga", "lignja", "liječiti", "liječnica", "liječničin", "liječnički", "liječnik", "liječnikov", "lijegati", "lijek", "lijen", "lijeno", "lijenost", "lijep", "lijepiti", "lijepo", "lijerica", "lijeričar", "lijeričarev", "lijeričarka", "lijeričarov", "lijeričarski", "lijes", "lijeska", "lijevati", "lijevi", "lijevo", "lijonski", "lik", "limenka", "limun", "limunada", "limunika", "lingvist", "lingvistica", "lingvističin", "lingvistički", "lingvistika", "lingvistov", "linija", "lipa", "lipanj", "lipsati", "lira", "lirika", "lirski", "lisabonski", "lisac", "lisica", "lisice", "lisičji", "liska", "lisnat", "lisni", "lisnica", "list", "lista", "listak", "listati", "listić", "listina", "listonoša", "listopad", "listopadni", "listopadski", "lišaj", "lišavanje", "lišavati", "lišce", "lišće", "lišenost", "lišiti", "litanije", "litavski", "literarni", "literatura", "liti", "litica", "litij", "litijev", "litografija", "litosfera", "litosferni", "litra", "litraža", "litreni", "liturgija", "liturgijski", "liturgika", "litvanski", "livada", "livadni", "livanjski", "livreja", "lizalica", "lizanje", "lizati", "lizing", "liznuti", "loj", "lokalan", "lokativ", "lokativni", "lokomotiva", "lonac", "lončić", "londonski", "lopata", "lopoč", "lopov", "lopovski", "lopta", "loš", "loše", "lošinjski", "lov", "lovac", "lovački", "lovčev", "loviti", "lovkinja", "lovkinjin", "lovrećki", "lozinka", "lp", "lubenica", "lud", "ludbreški", "ludo", "ludost", "luk", "luk", "luka", "lukav", "lukavo", "lukavost", "lukovica", "luksemburški", "lunapark", "lupati", "luster", "lutak", "lutati", "lutka", "luzitanizam", "lj", "lj", "ljekarna", "ljekarnica", "ljekarničin", "ljekarnički", "ljekarnik", "ljekarnikov", "ljepilo", "ljepota", "ljestve", "lješnjak", "ljetni", "ljeto", "ljetovalište", "ljetovati", "ljevak", "ljevakinja", "ljevakinjin", "ljevakov", "ljevaonica", "ljiljan", "ljubak", "ljubav", "ljubazan", "ljubazno", "ljubaznost", "ljubica", "ljubičast", "ljubimac", "ljubimčev", "ljubimica", "ljubimičin", "ljubiti", "ljubljanski", "ljudi", "ljudski", "ljuljačka", "ljuljati", "ljupko", "ljupkost", "ljuska", "ljuskar", "ljuskast", "ljuskaš", "ljuskav", "ljut", "ljutina", "ljutit", "ljutiti", "ljutito", "ljutitost", "ljutnja", "ljuto", "ma", "maciti", "mač", "mačak", "mače", "mačić", "mačka", "mačkica", "maćeha", "maćehin", "maćehinski", "maćuhica", "mada", "madagaskarski", "madrac", "madridski", "mađarski", "mađioničar", "mađioničarev", "mađioničarka", "mađioničarkin", "mađioničarov", "mađioničarski", "maestral", "maestro", "magarac", "magla", "maglajski", "magleni", "magnet", "magnetofon", "magnezij", "magnolija", "maharadža", "mahati", "mahnuti", "mahovina", "mahuna", "majčin", "majčinski", "majica", "majka", "majmun", "major", "majorica", "majoričin", "majorov", "majorski", "mak", "makar", "makar", "makarski", "maknuti", "malezijski", "mali", "malijski", "malina", "malinin", "malinov", "malo", "malteški", "malj", "mama", "mamac", "mamin", "mana", "mandarina", "mandolina", "mandolinist", "mandolinistica", "mandolinističin", "mandolinistički", "mandolinistov", "mandolinski", "mangan", "manje", "mapa", "marama", "maramica", "marelica", "mariborski", "marijabistrički", "marioneta", "marka", "markiz", "marljiv", "marljivo", "marljivost", "marokanski", "Mars", "maršal", "maršalov", "maršalski", "maska", "maskenbal", "maslac", "maslačak", "maslina", "maslinast", "maslinin", "maslinov", "masno", "masnoća", "mast", "mastan", "mašta", "maštati", "matematičar", "matematičarev", "matematičarka", "matematičarkin", "matematičarov", "matematičarski", "matematika", "materijal", "materijalist", "materijalistica", "materijalističin", "materijalistički", "materijalistov", "materijalizam", "maternica", "matura", "maturant", "maturantica", "maturantičin", "maturantov", "maturantski", "me", "med", "medalja", "medenjak", "medij", "medvjed", "medvjedić", "međimurski", "među", "međunarodni", "međuspremnik", "međutim", "megafon", "megavat", "megavolt", "mehaničar", "mehaničarev", "mehaničarka", "mehaničarkin", "mehaničarov", "mehaničarski", "meketati", "meksički", "melodija", "melodika", "melodrama", "memorija", "memorijski", "menadžer", "menadžerica", "menadžeričin", "menadžerov", "menadžerski", "Merkur", "mesar", "mesarev", "mesarica", "mesaričin", "mesarov", "mesarski", "meso", "metal", "metanol", "metar", "metkovski", "metla", "metoda", "metrika", "metronom", "metropolit", "mi", "mic", "micati", "mijau", "mijaukanje", "mijaukati", "mijauknuti", "mijeh", "mijenjati", "miješalica", "miješati", "mikrofon", "mikrometar", "mikroprocesor", "mikroprocesorski", "mikroskop", "milijarda", "milijarditi", "milijardu", "milijun", "milijun", "milijunti", "milimetar", "milivat", "milivolt", "milosrdan", "milosrdno", "milosrdnost", "milja", "mimo", "mimoza", "min", "mina", "mina", "mineral", "minhenski", "miniračunalo", "ministar", "ministarski", "ministarstvo", "ministrica", "ministričin", "ministrov", "minobacač", "minus", "minuta", "mio", "mir", "miran", "miris", "mirisati", "miroljubiv", "miroljubivo", "miroljubivost", "misao", "misliti", "miš", "mišić", "mišljenje", "mišolovka", "mit", "mjanmarski", "mjehur", "mjenjač", "mjenjačica", "mjenjačičin", "mjenjačnica", "mjera", "mjeriti", "mjesec", "mjesečina", "mjesečno", "mjesto", "ml", "mlad", "mladić", "mladićev", "mladićki", "mlado", "mladost", "mladunče", "mlat", "mliječni", "mlijeko", "mlinac", "mljac", "mljackati", "mljacnuti", "mljekara", "mljekarnica", "mljetski", "mm", "mnogi", "mnogo", "mnogokut", "množenik", "množenje", "množina", "množinski", "množitelj", "množiti", "mobitel", "moćan", "moći", "moćno", "moda", "modar", "model", "modem", "modemski", "moderan", "moderna", "moderno", "modro", "moguć", "mogućnost", "moj", "mokar", "mokasinka", "mokro", "molba", "moldavski", "moliški", "moliti", "molitva", "momački", "momak", "momčad", "momčadski", "momkov", "mongolski", "monitor", "monodrama", "monolog", "mononukleoza", "monostrofa", "morati", "more", "morfologija", "morfološki", "mornar", "mornarev", "mornarica", "mornaričin", "mornarički", "mornarov", "mornarski", "morski", "moskovski", "most", "mostarski", "motika", "motiv", "motivacija", "motocikl", "motor", "mozak", "mozambički", "možda", "mrak", "mrav", "mrdati", "mrdnuti", "mreža", "mrkva", "mrmljati", "mrmoriti", "mršav", "mršavo", "mršavost", "mrtav", "mrtvac", "mrziti", "mržnja", "mu", "mucati", "mučiti", "mudar", "mudro", "mudrost", "muha", "muka", "mukanje", "mukati", "muknuti", "mumljati", "munja", "musliman", "muslimanka", "muškarac", "muškarčev", "muški", "mušmula", "muzej", "muž", "mužev", "muževan", "mužjak", "na", "nacionalan", "nacrtati", "način", "naći", "nada", "nad(a)", "nadati", "nadbiskup", "nadimak", "nadmadrac", "nadnarednica", "nadnaredničin", "nadnarednički", "nadnarednik", "nadnarednikov", "nadnevak", "nadohvat", "nadomak", "nadstolnjak", "nadvojvoda", "naglas", "naglasiti", "nagrada", "naime", "naivan", "naivno", "naivnost", "najaviti", "najesti", "najlonka", "nakit", "nakon", "nalaziti", "nalikovati", "nametljiv", "nametljivo", "nametljivost", "namirnica", "namjeravati", "namjesnik", "namještaj", "nanometar", "nanoračunalo", "naočale", "naopako", "napa", "napad", "napadati", "napadati", "napamet", "napasti", "napet", "napeto", "napetost", "napisati", "napokon", "naprava", "napraviti", "naprijed", "naranča", "narančast", "naravno", "naredba", "narednica", "naredničin", "narednički", "narednik", "narednikov", "narod", "naručiti", "naručivati", "narudžba", "narukvica", "naselje", "nasilan", "nasilno", "nasilnost", "nasilu", "nasilje", "naslonjač", "naslov", "nasmijati", "nasred", "nasrtljiv", "nasrtljivo", "nasrtljivost", "nastati", "nastava", "nastavak", "nastaviti", "nastavljati", "nastavnica", "nastavničin", "nastavnički", "nastavnik", "nastavnikov", "nastup", "nasuprot", "naš", "našički", "našminkati", "natikača", "natjecanje", "natjecatelj", "natjecateljev", "natjecateljica", "natjecateljičin", "natjecateljski", "natjecati", "natječaj", "natkoljenka", "natporučnica", "natporučničin", "natporučnički", "natporučnik", "natporučnikov", "natrag", "natrij", "naučiti", "naušnica", "navečer", "navijač", "navijačev", "navijačica", "navijačičin", "navijački", "navijati", "navika", "navoditi", "navodnik", "navodno", "nazdravlje", "naziv", "nazivati", "nazivlje", "nazivoslovlje", "nazvati", "nažalost", "ne", "nebo", "neboder", "nečiji", "nećak", "nećakinja", "nećakinjin", "nećakov", "nedaleko", "nedavno", "nedjelja", "nedjeljiv", "nedjeljivo", "nedjeljivost", "nedjeljni", "nedostajati", "nedostatak", "nedostižan", "nedostižno", "nedostižnost", "nedovoljan", "negativ", "negativan", "negdje", "nego", "nego", "negoli", "negoli", "neka", "nekad(a)", "nekakav", "nekako", "nekamo", "neki", "nekoliko", "nektarina", "nemati", "nemilosrdan", "nemilosrdno", "nemilosrdnost", "nenaglasnica", "neodgojen", "neodgojeno", "neodgojenost", "neodgovoran", "neodgovorno", "neodgovornost", "neodlučan", "neodlučno", "neodlučnost", "neon", "neovisan", "neovisno", "neovisnost", "neozbiljan", "neozbiljno", "neozbiljnost", "nepalski", "neparan", "nepismen", "nepismeno", "nepismenost", "neplivač", "neplivačev", "neplivačica", "neplivačičin", "neplodan", "neplodno", "neplodnost", "nepobitan", "nepobjediv", "nepobjedivo", "nepobjedivost", "neposredan", "neposredno", "neposrednost", "nepravilan", "nepromjenjiv", "nepromjenjivo", "nepromjenjivost", "neproziran", "neprozirno", "neprozirnost", "Neptun", "nepušač", "nepušačev", "nepušačica", "nepušačičin", "nepušački", "neretvanski", "nesiguran", "nesigurno", "nesigurnost", "nespreman", "nespremno", "nespremnost", "nespretan", "nespretno", "nespretnost", "nesreća", "nestašan", "nestašno", "nestašnost", "nesvijest", "nesvjesnost", "nešto", "nešto", "netko", "neugodan", "neugodno", "neugodnost", "neuhvatljiv", "neuhvatljivo", "neuhvatljivost", "neumjeren", "neumjereno", "neumjerenost", "neumoran", "neumorno", "neumornost", "neumski", "neuništiv", "neuništivo", "neuništivost", "neuredan", "neuredno", "neurednost", "neustrašiv", "neustrašivo", "neustrašivost", "nevin", "nevino", "nevinost", "nevodič", "nevolja", "nevozač", "nevozačev", "nevozačica", "nevozačičin", "nevozački", "nevrijeme", "nezahvalan", "nezahvalno", "nezahvalnost", "nezaposlen", "nezaposlenost", "nezgoda", "ni", "ničiji", "nigerijski", "nigerski", "nijedan", "nijekati", "nijem", "nijemo", "nikad(a)", "nikakav", "nikako", "nikal", "nikoji", "nisko", "ništa", "ništica", "nit", "niti", "niti", "nitko", "niz", "niz(a)", "nizak", "nizozemski", "nižekratnik", "no", "noć", "noćni", "noga", "nogomet", "nogometaš", "nogometašev", "nogometašica", "nogometašičin", "nogometaški", "nogometni", "noj", "nokat", "nominativ", "nominativni", "normalan", "norveški", "nos", "nosač", "nosila", "nositi", "nošnja", "nota", "nov", "novac", "novčanica", "novčanik", "novela", "novina", "novinar", "novinarev", "novinarka", "novinarkin", "novinarov", "novinarski", "novine", "novinski", "novljanski", "novo", "novogradiški", "novorođenče", "novost", "novozelandski", "nož", "npr.", "nuditi", "nula", "nuncij", "nj", "nj", "nja", "njakanje", "njakati", "njaknuti", "njegov", "njegovati", "njemački", "njezin", "nježan", "nježno", "nježnost", "njihaljka", "njihati", "njihov", "njisak", "njištati", "njiva", "njuh", "njujorški", "njuška", "njutn", "njutnmetar", "obala", "obao", "obaveza", "obavezan", "obavezno", "obavijest", "običan", "obično", "obići", "obilazak", "obilovati", "obilje", "obilježavati", "obilježiti", "obitelj", "obiteljski", "objasniti", "objašnjavati", "objaviti", "objed", "objekt", "objektni", "objesiti", "oblačan", "oblačiti", "oblačni", "oblačno", "oblak", "oblik", "oblikoslovlje", "oblikoslovni", "oblo", "obljetnica", "obljetnički", "oboa", "oboist", "oboistica", "oboističin", "oboistički", "oboistov", "obojiti", "oborina", "obožavati", "obrana", "obraz", "obrazlagati", "obrazložiti", "obrazovanje", "obrijati", "obrok", "obrt", "obrtnica", "obrtničin", "obrtnički", "obrtnik", "obrva", "obuća", "obući", "obujam", "obuti", "obuvati", "obveza", "obvezan", "obvezno", "obzir", "obziran", "obzirno", "obzirnost", "ocat", "ocean", "ocjena", "očekivati", "očev", "oči", "očinski", "očit", "očito", "očuh", "očuhov", "od", "od", "oda", "odabirati", "odabrati", "odakle", "odan", "odano", "odanost", "odašiljač", "odbojan", "odbojka", "odbojkaš", "odbojkašev", "odbojkašica", "odbojkašičin", "odbojkaški", "odbojno", "odbojnost", "odbolovati", "odbor", "odgoj", "odgojitelj", "odgojiteljev", "odgojiteljica", "odgojiteljičin", "odgojiteljski", "odgovarati", "odgovor", "odgovoran", "odgovoriti", "odgovorno", "odgovornost", "odijelo", "odijevati", "odjeća", "odjekivati", "odjeknuti", "odjel", "odjenuti", "odlagati", "odlazak", "odlaziti", "odličan", "odlično", "odlomak", "odložiti", "odlučan", "odlučiti", "odlučivati", "odlučno", "odlučnost", "odluka", "odmah", "odmaralište", "odmarati", "odmor", "odmoriti", "odnos", "odnositi", "odnosno", "odojak", "odora", "odrastao", "odredište", "odrediti", "određen", "određeno", "određivati", "odrezak", "održati", "održavanje", "održavati", "oduševljen", "oduševljeno", "oduševljenost", "oduvijek", "oduzeti", "oduzimanje", "oduzimati", "odvajati", "odvesti", "odvoditi", "odvojiti", "odzvanjati", "odzvoniti", "oficir", "oficirev", "oficirka", "oficirkin", "oficirov", "oficirski", "oglas", "ogled", "ogledalo", "ograda", "ogrjev", "ogrlica", "ogrtač", "ogulinski", "ohladiti", "ohol", "oholo", "oholost", "oj", "ojanjiti", "ojariti", "oker", "oklop", "oko", "oko", "okoliš", "okolo", "okomit", "okomito", "okomitost", "okoristiti", "okotiti", "okrenuti", "okretati", "okrugao", "okruglo", "okrutan", "okrutno", "okrutnost", "oksimoron", "oktalni", "okućnica", "okulist", "okulistica", "okulističin", "okulistov", "okupati", "okus", "okvir", "olovka", "olovo", "oluja", "om", "omaciti", "omiljen", "omiljeno", "omiljenost", "omiški", "omjer", "ommetar", "omogućavati", "omogućiti", "omogućivati", "omot", "omotati", "omotavati", "on", "ona", "ona", "ona", "onaj", "onakav", "onda", "one", "oni", "ono", "ono", "onomatopeja", "opanak", "opasan", "opasno", "opasnost", "opatijski", "opći", "općina", "opeka", "operacija", "opet", "opip", "opis", "opisati", "opisivati", "opkoračenje", "opna", "opomena", "oporabiti", "oporabljivati", "oporuka", "oprasiti", "opraštati", "oprema", "oprezan", "oprezno", "opreznost", "oprostiti", "optimist", "optimistica", "optimističin", "opustiti", "opuštati", "opuzenski", "orah", "oranica", "orao", "organ", "organizacija", "organizam", "organizirati", "orguljaš", "orguljašev", "orguljašica", "orguljašičin", "orguljaški", "orgulje", "orhideja", "orkestar", "ormar", "oruđe", "oružje", "os", "osa", "osam", "osamdeset", "osamdesetak", "osamdesetero", "osamdeseti", "osamdesetorica", "osamnaest", "osamnaestero", "osamnaesti", "osamsto", "osamstoti", "osigurač", "osiguranje", "osigurati", "osim", "osip", "osječki", "osjećaj", "osjećajan", "osjećajno", "osjećajnost", "osjećati", "osjet", "osjetilo", "osjetiljiv", "osjetiti", "osjetljivo", "osjetljivost", "osloboditi", "osmaš", "osmašica", "osmerac", "osmero", "osmerokratnik", "osmerokut", "osmerostruk", "osmi", "osmica", "osmijeh", "osmina", "osmomjesečni", "osmorica", "osnivati", "osnova", "osnovan", "osnovati", "osnovni", "osoba", "osoban", "osobno", "osobnost", "osojnički", "ospice", "ostajati", "ostali", "ostatak", "ostati", "ostava", "ostaviti", "ostavljati", "ostvariti", "osvajati", "osvetoljubiv", "osvetoljubivo", "osvetoljubivost", "osvojiti", "ošteniti", "otac", "otapati", "oteliti", "otići", "otkad", "otkada", "otkako", "otklon", "otključati", "otključavati", "otkriti", "otkrivati", "otkud", "otkuda", "otočački", "otok", "otopiti", "otpad", "otporan", "otpornik", "otporno", "otpornost", "otprilike", "otpustiti", "otpuštati", "otrov", "otvarač", "otvarati", "otvoren", "otvoreno", "otvorenost", "otvoriti", "ovaj", "ovakav", "ovako", "ovan", "ovca", "ovdje", "ovisan", "ovisiti", "ovisno", "ovisnost", "ovladati", "ovladavati", "ozbiljan", "ozbiljno", "ozbiljnost", "ozdraviti", "ozdravljati", "ozljeda", "označavati", "označiti", "oznaka", "oždrijebiti", "oženiti", "ožujak", "pa", "pa", "pacijent", "pacijentica", "pacijentičin", "pacijentov", "pacijentski", "pače", "pačetina", "pačji", "pad", "padati", "padavica", "padobran", "padobranac", "padobranka", "pahulja", "pak", "pak", "pakao", "pakistanski", "pakrački", "palac", "palača", "palačinka", "palatalizacija", "palčić", "paliti", "palma", "pamćenje", "pamet", "pametan", "pametno", "pamtiti", "pamuk", "pandža", "papa", "papar", "papiga", "papir", "paprika", "papuča", "par", "par", "para", "paralelogram", "paran", "parangal", "paranoja", "pariški", "park", "parkiralište", "parkirati", "partner", "partnerica", "partneričin", "partnerski", "pas", "pas", "pasiv", "pasiva", "pasivan", "pasivni", "pasivni", "pasivno", "pasivnost", "pasjemenik", "paskal", "pastela", "pasti", "pasti", "pastir", "pastirev", "pastirica", "pastiričin", "pastirov", "pastirski", "pastrva", "paški", "pašnjak", "pašteta", "patak", "patka", "patlidžan", "patnja", "patuljak", "paučica", "paučina", "pauk", "pauza", "paziti", "pažljiv", "pažljivo", "pčela", "pecati", "pecivo", "pečenje", "peć", "peći", "pećnica", "pedagog", "pedagogica", "pedagogičin", "pedagoginja", "pedagoginjin", "pedagogov", "pedagoški", "pedalj", "pedeset", "pedesetak", "pedesetero", "pedeseti", "pedesetogodišnjak", "pedesetogodišnjakinja", "pedesetogodišnji", "pedesetogodišnjica", "pedesetorica", "pegla", "pekar", "pekara", "pekarev", "pekarica", "pekaričin", "pekarna", "pekarnica", "pekarov", "pekarski", "pekinški", "pekmez", "pelena", "pelin", "pelinkovac", "pelješki", "penjalica", "penjati", "pepelnica", "pepeo", "perad", "peraja", "perfekt", "perfektni", "perilica", "periskop", "perje", "pernica", "pero", "peron", "peronospora", "peršin", "peruanski", "perunika", "pesimist", "pesimistica", "pesimističin", "pet", "peta", "petak", "petaš", "petašica", "peterac", "petero", "peterokratnik", "peterokut", "peterosjed", "peterostruk", "peti", "petica", "petina", "petnaest", "petnaestero", "petnaesti", "petogodišnjak", "petogodišnjakinja", "petogodišnji", "petogodišnjica", "petomjesečni", "petorica", "petrinjski", "petroselski", "petrovaradinski", "petsto", "petstoti", "piće", "pidžama", "pijanist", "pijanistica", "pijanističin", "pijanistički", "pijanistov", "pijesak", "pijetao", "piju", "pijuk", "pijukati", "piksel", "pila", "pile", "pileći", "piletina", "pilot", "pingvin", "piramida", "pirat", "pisac", "pisač", "pisanica", "pisanka", "pisati", "piskutati", "pismen", "pismeno", "pismenost", "pismo", "pismonoša", "pisnuti", "pista", "piščev", "pištati", "pištolj", "pita", "pitalica", "pitanje", "pitati", "piti", "pivo", "%ipizza%i", "%ipizzeria%i", "pjena", "pjesma", "pjesmarica", "pjesnički", "pjesnik", "pjesnikinja", "pjesnikinjin", "pjesnikov", "pješački", "pješak", "pješakinja", "pješakinjin", "pješakov", "pješčanik", "pješice", "pjevač", "pjevačev", "pjevačica", "pjevačičin", "pjevački", "pjevati", "plač", "plačljiv", "plačljivo", "plačljivost", "plaća", "plaćati", "plahta", "plakat", "plakati", "plamen", "plamenik", "plamenjača", "plan", "planet", "planina", "planinar", "planinarev", "planinariti", "planinarka", "planinarkin", "planinarov", "planinarski", "planinski", "planirati", "plastelin", "plastika", "plašiti", "plašt", "platina", "platiti", "platno", "plav", "plaviti", "plavjeti", "plaža", "plemenit", "plemenito", "plemenitost", "pleonazam", "ples", "plesač", "plesačev", "plesačica", "plesačičin", "plesački", "plesati", "plesti", "pletenica", "plin", "pliš", "plitak", "plitko", "plivač", "plivačev", "plivačica", "plivačičin", "plivački", "plivati", "ploča", "pločanski", "pločnik", "plod", "plodan", "plodno", "plodnost", "ploha", "plovilo", "ploviti", "pluća", "plug", "plus", "pluskvamperfekt", "pluskvamperfektni", "Pluton", "pljačka", "pljas", "pljus", "pljusak", "pljuskati", "pljusnuti", "pljuvačka", "po", "pobijediti", "pobjeda", "pobožan", "pobožno", "pobožnost", "počešljati", "početak", "početi", "početnica", "počinjati", "poći", "pod", "pod(a)", "podao", "podatak", "poderati", "podlo", "podloga", "podlost", "podmornica", "podmukao", "podmuklo", "podmuklost", "podne", "podnevni", "podni", "podnijeti", "podno", "podnožje", "podravski", "podrijetlo", "podrška", "područje", "područni", "podrum", "podrumski", "podstanar", "podstanarev", "podstanarka", "podstanarkin", "podstanarov", "podstanarski", "poduzeće", "pogađati", "poglavlje", "pogled", "pogledati", "pogodak", "pogoditi", "pogon", "pogoršati", "pogoršavati", "pogotovo", "pogreb", "pogrešan", "pogreška", "pohlepa", "pohlepan", "pohlepno", "pohlepnost", "pohvala", "pohvalnica", "pojačalo", "pojam", "pojas", "pojas", "pojaviti", "pojedinac", "pojedini", "pojesti", "pokazati", "pokazivač", "pokazivati", "poklade", "poklanjati", "poklon", "pokloniti", "pokoji", "pokraj", "pokrajina", "pokrata", "pokrenuti", "pokret", "pokretati", "pokrivač", "pokušaj", "pokušati", "pokušavati", "pokvariti", "pol", "pol", "pola", "polako", "polazak", "polazište", "polaziti", "poletjeti", "polica", "policajac", "policajčev", "policajka", "policajkin", "policija", "polijevati", "političar", "političarev", "političarka", "političarkin", "političarov", "političarski", "politički", "politički", "politika", "politi", "polnoćka", "polovica", "polovina", "položaj", "polubrat", "polubratov", "polugodište", "polunavodnik", "poluotok", "polusestra", "polusestrin", "polusloženica", "polusloženički", "polje", "poljički", "poljoprivreda", "poljoprivrednica", "poljoprivredničin", "poljoprivrednički", "poljoprivrednik", "poljoprivrednikov", "poljski", "poljubac", "pomagalo", "pomagati", "pomoć", "pomoći", "ponašanje", "ponašati", "ponavljati", "ponedjeljak", "ponekad", "poneki", "ponešto", "ponešto", "ponetko", "ponoć", "ponoćni", "ponos", "ponositi", "ponoviti", "ponovno", "ponton", "ponuda", "ponuditi", "poosobljenje", "pop", "popis", "popiti", "poplava", "poplun", "popodne", "popodnevni", "popovski", "popularan", "popularno", "popularnost", "poput", "poraz", "porečki", "pored", "poredba", "porez", "poriluk", "porođaj", "portal", "portret", "portugalski", "poručnica", "poručničin", "poručnički", "poručnik", "poručnikov", "poruka", "posada", "posaditi", "posao", "poseban", "posebno", "posebnost", "posjećivati", "posjet", "posjetiti", "poslanica", "poslati", "poslije", "poslije", "poslijepodne", "poslijepodnevni", "poslovan", "poslovanje", "poslovati", "poslovica", "poslovnost", "poslušan", "poslušno", "poslušnost", "poslužilac", "poslužiti", "posluživati", "posljedica", "posljednji", "pospan", "pospano", "pospanost", "posred", "post", "postaja", "postajati", "postati", "postaviti", "postelja", "posteljica", "posteljina", "poster", "postići", "posto", "postojati", "postojeći", "postupak", "postupati", "postupiti", "posuda", "posuditi", "posuđe", "posuđenica", "posuđivati", "posvađati", "posvud", "posvuda", "pošiljka", "pošta", "poštar", "poštarev", "poštarica", "poštaričin", "poštarov", "poštarski", "pošten", "pošteno", "poštenje", "poštivati", "pošto", "poštovanje", "poštovati", "potenciometar", "potišten", "potišteno", "potištenost", "potkošulja", "potkraj", "potkrovlje", "potkrovni", "potok", "potom", "potpetica", "potpetica", "potpis", "potpisati", "potpisivati", "potpora", "potporučnica", "potporučničin", "potporučnički", "potporučnik", "potporučnikov", "potprogram", "potpukovnica", "potpukovničin", "potpukovnički", "potpukovnik", "potpukovnikov", "potpun", "potpuno", "potpunost", "potraga", "potreba", "potreban", "potrebno", "potvrditi", "pouzdan", "pouzdano", "pouzdanost", "povećalo", "povezati", "povezivati", "poveznica", "povijest", "povik", "povjerenje", "povjerljiv", "povjerljivo", "povjerljivost", "povjestica", "povjetarac", "povod", "povodom", "povoj", "povoljan", "povoljno", "povratak", "povrće", "povremeno", "povrh", "površina", "pozabaviti", "pozdrav", "pozdraviti", "pozdravljati", "pozicija", "pozitiv", "pozitivan", "pozitivno", "poziv", "pozivati", "pozivnica", "poznanica", "poznaničin", "poznanik", "poznanikov", "poznat", "poznato", "pozornica", "pozornica", "pozorničin", "pozornički", "pozornik", "pozornikov", "pozvati", "požar", "požeški", "prabaka", "prabakin", "praćka", "pradjed", "pradjedov", "prah", "praksa", "praona", "praonica", "praporac", "pras", "prasak", "prase", "prasiti", "praskati", "praslavenski", "prasnuti", "prašak", "prašina", "praški", "prašuma", "prati", "pratiti", "pravac", "pravda", "pravedan", "pravedno", "pravednost", "pravi", "pravilan", "pravilno", "pravilnost", "pravilo", "pravni", "pravo", "pravokutan", "pravokutnik", "pravopis", "pravopisni", "pravoslavac", "pravoslavka", "prazan", "praznik", "prčanjski", "precizan", "precizno", "preciznost", "precrtati", "precrtavati", "preča", "pred(a)", "predavanje", "predavaona", "predavaonica", "predbožićni", "predikat", "predikatni", "prediona", "predionica", "predivan", "predivno", "predmet", "prednaglasni", "prednaglasnica", "prednost", "predsjedati", "predsjedavati", "predsjednica", "predsjedničin", "predsjednički", "predsjednik", "predsjednikov", "predsjednikovati", "predsoblje", "predstava", "predstaviti", "predstavljati", "predstavnica", "predstavničin", "predstavnički", "predstavnik", "predstavnikov", "predug", "predvorje", "pregled", "preglednik", "prehlada", "prehrana", "prekidač", "preklopnik", "preko", "prekosutra", "prekrasan", "prekratak", "prelaziti", "prema", "premalo", "premda", "premijer", "premijerka", "premjestiti", "premještati", "premosnica", "prepisati", "prepisivati", "prepjev", "prepreka", "preseliti", "preskakati", "preskočiti", "preslica", "prestajati", "prestati", "presti", "prethodni", "preurediti", "preuređivati", "preuzeti", "preuzimanje", "preuzimati", "previše", "prevodilac", "prevoditelj", "prevoditeljev", "prevoditeljica", "prevoditeljičin", "prevoditeljski", "prezent", "prezentski", "prezime", "pri", "pribor", "pribrojnik", "priča", "pričanje", "pričati", "pričest", "pridjev", "pridjevni", "prigoda", "prigodni", "prigodom", "prigušivač", "prihvaćati", "prihvatiti", "prihvatljiv", "prihvatljivo", "prihvatljivost", "prijamnik", "prijatelj", "prijateljev", "prijateljica", "prijateljičin", "prijateljski", "prijava", "prije", "prije", "prijeći", "prijedlog", "prijedložni", "prijelaz", "prijenos", "prijepodne", "prijepodnevni", "prijetiti", "prijevoz", "prikladan", "prikladno", "prikladnost", "priključiti", "priključivati", "prilagodnik", "prilika", "prilikom", "prilog", "priložni", "primalja", "primaljin", "primarijus", "primati", "primijetiti", "primiti", "primjećivati", "primjer", "primjeren", "primjereno", "primjerenost", "primjerice", "primorje", "primorski", "princ", "pripjev", "pripovijest", "pripovijetka", "pripovjedač", "pripovjedačev", "pripovjedačica", "pripovjedačičin", "priprema", "priredba", "priroda", "prirodan", "prirodno", "prirodnost", "prispodoba", "pristajati", "pristati", "pristojan", "pristojno", "pristojnost", "pristup", "pristupačan", "pristupačno", "pristupačnost", "pritisnuti", "privatan", "privatno", "privatnost", "privitak", "privlačan", "privlačno", "privlačnost", "prizeman", "prizemlje", "prizemni", "prizemnica", "prizemno", "priznanje", "prkos", "prljav", "prljavština", "probati", "problem", "proces", "procesor", "procesorski", "pročelje", "pročišćivač", "pročitati", "proći", "prodaja", "prodati", "prodavač", "prodavačev", "prodavačica", "prodavačičin", "prodavački", "prodavaona", "prodavaonica", "prodavati", "prodoran", "prodorno", "prodornost", "produkt", "prof.", "profesor", "profesorica", "profesoričin", "profesorov", "profesorski", "prognoza", "program", "programator", "prohodan", "prohodno", "prohodnost", "proizvod", "proizvodnja", "proizvođač", "proizvođačica", "proizvođačičin", "projekcija", "projekt", "projektil", "projektor", "proklitika", "prolaz", "prolazan", "prolaziti", "prolaznica", "prolazničin", "prolaznički", "prolaznik", "prolaznikov", "prolazno", "prolaznost", "proljeće", "proljetni", "promet", "prometnica", "prometnica", "prometničin", "prometnički", "prometnik", "prometnikov", "promijeniti", "promjena", "promjenjiv", "promjenjivo", "promjenjivost", "pronaći", "propovijed", "propovijedati", "propovjedaona", "propovjedaonica", "propuh", "propustiti", "propuštati", "proračun", "prosinac", "prosječan", "prosječno", "prosječnost", "proslava", "prostirač", "prostor", "prostorija", "prostran", "prostrano", "prostranost", "prošli", "prošlost", "protiv", "protivnica", "protivničin", "protivnički", "protivnik", "protivnikov", "protokol", "proučavati", "proučiti", "provesti", "provjeravati", "provjeriti", "provoditi", "proza", "proziran", "prozirno", "prozirnost", "prozor", "prozorski", "prozujati", "prozujiti", "prozviždati", "proždrljiv", "proždrljivo", "proždrljivost", "prsa", "prskalica", "prsluk", "prst", "prsten", "prstenjak", "prstić", "pršut", "prtljaga", "pruga", "prut", "prvački", "prvak", "prvakinja", "prvakinjin", "prvakov", "prvaš", "prvašev", "prvašica", "prvašičin", "prvaški", "prvenstvo", "prvi", "prvo", "pržilica", "psiholog", "psihologinja", "psihologinjin", "psihologov", "psihološki", "psihoza", "psika", "psikati", "pst", "pšenica", "ptica", "ptičica", "publika", "pucati", "puckati", "pucketati", "pučiški", "puh", "puhati", "puhnuti", "puknuti", "pukovnica", "pukovničin", "pukovnički", "pukovnik", "pukovnikov", "pulover", "pulski", "pun", "puniti", "puno", "punjač", "pupoljak", "pura", "puran", "pureći", "puretina", "purica", "pust", "pustinja", "pustiti", "pušač", "pušačev", "pušačica", "pušačičin", "pušački", "pušiti", "puška", "puštati", "put", "put", "put", "puta", "putem", "putnica", "putničin", "putnički", "putnik", "putnikov", "putovanje", "putovanje", "putovati", "putovnica", "puž", "r.", "rabin", "rabinov", "rabinski", "račić", "račji", "račun", "računalni", "računalo", "računalstvo", "računati", "rad", "radar", "radi", "radio", "radiona", "radionica", "raditi", "radni", "radnica", "radničin", "radnički", "radnik", "radnikov", "rado", "radost", "radovati", "rađaona", "rađaonica", "rađati", "rahitis", "raj", "rajčica", "rak", "raketa", "raketoplan", "rakija", "rakov", "ral", "ralo", "ramazan", "rame", "ramski", "rana", "ranije", "rano", "ranjenica", "ranjeničin", "ranjenički", "ranjenik", "ranjenikov", "rapski", "raskrižje", "rasplinjač", "raspolagati", "raspored", "rasprava", "raspravljati", "raspršivač", "rast", "rastanak", "rasti", "rastresen", "rastreseno", "rastresenost", "rastrošan", "rastrošno", "rastrošnost", "raščlamba", "rašeljka", "rat", "ratni", "ratnica", "ratničin", "ratnički", "ratnik", "ratnikov", "ravan", "ravanjski", "ravnalo", "ravnatelj", "ravnateljev", "ravnateljica", "ravnateljičin", "ravnateljski", "ravnati", "ravno", "ravnokotarski", "ravnopravan", "ravnopravno", "ravnopravnost", "raz.", "razdoblje", "razdragan", "razdragano", "razdraganost", "razglas", "razgledati", "razgledavati", "razglednica", "razgovarati", "razgovijetan", "razgovijetno", "razgovijetnost", "razgovor", "razigran", "razigrano", "razigranost", "razina", "različit", "različito", "različitost", "razlika", "razlikovati", "razlog", "razmisliti", "razmišljati", "razni", "razred", "razum", "razumijevati", "razumjeti", "razumljiv", "razumljivo", "razumljivost", "razvodnica", "razvodničin", "razvodnički", "razvodnik", "razvodnikov", "razvoj", "razvojni", "ražnjić", "reaktor", "recepcija", "recept", "reciklirati", "rečenica", "reći", "red", "redak", "redoslijed", "redovit", "redovito", "redovitost", "redovnica", "redovničin", "redovnički", "reduktor", "regija", "regionalni", "reklama", "religija", "religijski", "religiozan", "religiozno", "religioznost", "remen", "rendgen", "rep", "repa", "repetitor", "reprezentacija", "republika", "respirator", "restoran", "rešetka", "reuma", "reumatizam", "revati", "revolver", "rezati", "rezervacija", "rezervirati", "rezultat", "riba", "ribar", "ribarev", "ribarica", "ribaričin", "ribarnica", "ribarov", "ribarski", "ribarstvo", "ribnjak", "ribolov", "ribolovni", "ridati", "riđ", "riječ", "riječki", "riječni", "rijedak", "rijeka", "riješiti", "rijetko", "rijetkost", "rikati", "rikavati", "riknuti", "rima", "rimokatolički", "rimski", "ris", "ritam", "riža", "rižin", "rječnik", "rješavati", "rješenje", "robot", "ročnica", "ročničin", "ročnički", "ročnik", "ročnikov", "rod", "roda", "rodbina", "rodbinski", "roditelj", "roditeljev", "roditeljica", "roditeljičin", "roditeljski", "roditi", "rodni", "rođ.", "rođački", "rođak", "rođakinja", "rođakinjin", "rođakov", "rođendan", "rođendanski", "rođenje", "rog", "rok", "roktati", "rola", "rolanje", "roman", "romanizam", "romb", "rombičan", "romboidan", "romobil", "romon", "romoniti", "ronilac", "ronilački", "roniočev", "roniteljica", "roniteljičin", "roniti", "roptati", "rosa", "roštilj", "roštiljati", "rotkva", "rotkvica", "rovinjski", "roza", "ruandski", "rub", "rubac", "rubeola", "rublje", "ručak", "ručati", "ruče", "ručnik", "rudnik", "rugati", "rujan", "ruka", "rukav", "rukavica", "rukomet", "rukometaš", "rukometašev", "rukometašica", "rukometašičin", "rukometaški", "rukopis", "rukovati", "rukovati", "rukovoditi", "rum", "rumen", "rumeno", "rumunjski", "rupa", "rupčić", "ruski", "ruža", "ružan", "ružičast", "ružičasto", "ružmarin", "ružno", "rzati", "s(a)", "sabirnica", "sablja", "sad", "sada", "sadašnjost", "sadržaj", "sag", "sako", "saksofon", "saksofonist", "saksofonistica", "saksofonističin", "saksofonistički", "saksofonistov", "saksofonski", "salama", "salata", "salonka", "sam", "samo", "samoborski", "samoglasnik", "samostalan", "samostalno", "samostalnost", "samouvjeren", "samouvjereno", "samouvjerenost", "san", "sandala", "sanduk", "sanjati", "sanjke", "saonice", "sapun", "sarajevski", "sastajati", "sastanak", "sastati", "sastav", "sastavak", "sasvim", "sat", "satnica", "satničin", "satnički", "satnik", "satnikov", "satrap", "Saturn", "sav", "savijača", "savitljiv", "savitljivo", "savitljivost", "savjet", "scena", "sebe", "sebičan", "sebično", "sebičnost", "sedam", "sedamdeset", "sedamdesetak", "sedamdesetero", "sedamdeseti", "sedamdesetorica", "sedamnaest", "sedamnaestero", "sedamnaesti", "sedamsto", "sedamstoti", "sedmaš", "sedmašica", "sedmerac", "sedmero", "sedmerokratnik", "sedmerokut", "sedmerostruk", "sedmi", "sedmica", "sedmina", "sedmomjesečni", "sedmorica", "seizmograf", "sekunda", "seliti", "selo", "seljački", "seljak", "seljakinja", "seljakinjin", "seljakov", "semafor", "sendvič", "senegalski", "senzor", "senjski", "seoski", "serija", "sestra", "sestrična", "sestričnin", "sestrin", "sestrinski", "sesvetski", "sezona", "shvatiti", "sibilarizacija", "sibirski", "sići", "sida", "sidnejski", "sidro", "sifilis", "siguran", "sigurno", "sigurnost", "sijati", "siječanj", "siknuti", "siktati", "sila", "silaziti", "silicij", "silovit", "silovito", "silovitost", "simpatičan", "simpatično", "simulacija", "sin", "sinagoga", "sinoć", "sinov", "sintaksa", "sintesajzer", "sinjski", "sir", "sirena", "sirijski", "siromah", "siromahinja", "siromahinjin", "siromahov", "siromašan", "siromaški", "siromašno", "siromaštvo", "sisački", "sisaljka", "sisavac", "sit", "sitan", "sitno", "sito", "sito", "sitost", "situacija", "siv", "siviti", "sivjeti", "sivo", "sjecište", "sjećati", "sjeći", "sjedalica", "sjedalo", "sjedati", "sjediti", "sjednica", "sjekira", "sjeme", "sjemenik", "sjemenka", "sjena", "sjesti", "sjetiti", "sjever", "sjeverni", "sjeveroistočni", "sjeveroistok", "sjeverozapad", "sjeverozapadni", "skakaona", "skakaonica", "skakati", "skakavac", "skela", "skener", "skidati", "skija", "skijaš", "skijašev", "skijašica", "skijašičin", "skijaški", "skijati", "skinuti", "skladatelj", "skladateljev", "skladateljica", "skladateljičin", "skladateljski", "skladba", "skladište", "skladnja", "sklop", "sklopovlje", "skočiti", "skok", "skopski", "skoro", "skrenuti", "skretati", "skriti", "skrivati", "skroman", "skromno", "skromnost", "skup", "skup", "skupina", "skupiti", "skupljati", "skupni", "skupnica", "skupničin", "skupnik", "skupnikov", "skupo", "skupština", "slab", "slabo", "slabost", "sladak", "sladoled", "slagalica", "slagati", "slagati", "slama", "slamka", "slan", "slano", "slanost", "slap", "slastičarna", "slastičarnica", "slati", "slatko", "slatkorječiv", "slatkorječivo", "slatkorječivost", "slava", "slavan", "slavina", "slaviti", "slavlje", "slavno", "slavonski", "slavonskobrodski", "slavuj", "slezena", "sličan", "slično", "sličnost", "slijediti", "slijep", "slijepo", "slika", "slikar", "slikarev", "slikarica", "slikaričin", "slikarov", "slikarski", "slikarstvo", "slikati", "slikovit", "slikovito", "slikovitost", "slikovnica", "slina", "sloboda", "slobodan", "slobodno", "slog", "slon", "slovački", "slovenski", "slovo", "složen", "složeno", "složenost", "slučaj", "slučajan", "slučajno", "slučajnost", "sluga", "sluh", "slušalica", "slušaona", "slušaonica", "slušati", "sluškinja", "služba", "služben", "službeno", "služiti", "sljedeći", "smanjiti", "smatrati", "smeće", "smeđ", "smeđe", "smetati", "smijati", "smijeh", "smiješak", "smion", "smiono", "smionost", "smiren", "smireno", "smirenost", "smisao", "smislen", "smisleno", "smislenost", "smjer", "smjeran", "smjerno", "smjernost", "smjeti", "smočnica", "smog", "smokva", "smreka", "smršavjeti", "smrt", "smrtan", "smrtni", "smrtno", "smrtnost", "snaga", "snažan", "snažno", "snijeg", "sniježiti", "snimati", "snimiti", "snjegović", "snježan", "soba", "sobar", "sobarev", "sobarica", "sobaričin", "sobarov", "sobica", "sobni", "socijalan", "sočan", "sočno", "sočnost", "softver", "soja", "sojin", "sok", "sokna", "sokol", "sol", "solinski", "soliti", "solunski", "som", "somalski", "sonda", "sopilaš", "sopilašev", "sopilašica", "sopilašičin", "sopilaški", "sopile", "sova", "spaliona", "spalionica", "spaliti", "spasiti", "spašavati", "spavaćica", "spavaona", "spavaonica", "spavati", "spičanski", "spisateljica", "spisateljičin", "splav", "splitski", "spojnica", "spol", "spolni", "spolnost", "spolovilo", "spomenik", "spomenuti", "spominjati", "spor", "sport", "sportaš", "sportašev", "sportašica", "sportašičin", "sportski", "spremač", "spremačev", "spremačica", "spremačičin", "spremački", "spreman", "spremati", "spremište", "spremiti", "spremnik", "spremno", "spremnost", "spretan", "spretno", "spretnost", "sprijeda", "spustiti", "spuštati", "sramežljiv", "sramežljivo", "sramežljivost", "srce", "srdačan", "srdačno", "srdačnost", "srdela", "srdit", "srdito", "srditost", "srebrn", "srebrno", "srebro", "sreća", "sred", "sredina", "središnji", "središte", "srednjak", "srednji", "sredstvo", "sretan", "sretno", "srijeda", "srijemski", "srna", "srndać", "srneći", "srnetina", "srp", "srpanj", "srpski", "stablo", "stabljika", "stadion", "stajaćica", "stajalište", "stajati", "staklo", "stalak", "stalan", "stalno", "stalnost", "stambeni", "stan", "stanar", "stanarev", "stanarka", "stanarkin", "stanarov", "stanarski", "stančić", "standard", "stanica", "stanka", "stanovati", "stanovnica", "stanovničin", "stanovnik", "stanovnikov", "stanje", "star", "starac", "starački", "starčev", "starica", "staričin", "staro", "staroslavenski", "starost", "start", "stati", "stav", "staviti", "stavljati", "staza", "stepenica", "stepeničast", "stezaljka", "stići", "stih", "stijeg", "stijena", "stil", "stilski", "stizati", "sto", "stočar", "stočarev", "stočarica", "stočaričin", "stočarov", "stočarski", "stočarstvo", "stoga", "stogodišnji", "stogodišnjica", "stoka", "stol", "stolac", "stolica", "stolnjak", "stoljeće", "stomatolog", "stomatologica", "stomatologičin", "stomatologinja", "stomatologinjin", "stomatologov", "stomatološki", "stonski", "stopa", "stopalo", "stoti", "stotinjak", "stožac", "str.", "straga", "strah", "stran", "strana", "stranac", "stranački", "strančev", "stranica", "stranka", "strankinja", "strankinjin", "strano", "strašan", "strašiti", "strašno", "stražnjica", "stric", "stričev", "strijelac", "strijelčev", "strina", "strinin", "strip", "strm", "strmina", "strmo", "strog", "strogo", "strogost", "stroj", "strojovođa", "stroncij", "strop", "stropni", "strpljiv", "strpljivo", "strpljivost", "stručan", "stručno", "stručnost", "stručnjak", "stručnjakinja", "struja", "struk", "strunjača", "stuba", "stubišni", "stubište", "studeni", "student", "studentica", "studentičin", "studentov", "studentski", "studirati", "stup", "stupanj", "stupica", "stvar", "stvaran", "stvaranje", "stvarati", "stvarno", "stvarnost", "stvoriti", "subjekt", "subjektni", "subota", "subotički", "subotnji", "sučelje", "sud", "sudac", "sudački", "sudanski", "sudčev", "sudionica", "sudioničin", "sudionik", "sudionikov", "suditi", "sudjelovati", "sudoper", "suđe", "suglasnik", "suh", "suho", "suhoća", "suknja", "sulica", "sultan", "sumpor", "sunce", "suncobran", "sunčan", "sunčano", "sunčati", "sunovrat", "super", "superlativ", "suprotan", "suprotnost", "suprug", "supruga", "suradnja", "surađivati", "surečenica", "susjed", "susjeda", "susjedin", "susjedni", "susjedov", "susjedski", "susjedstvo", "susnježica", "susresti", "susret", "susretati", "sustav", "sušilica", "sušilo", "sušiti", "suteren", "suterenski", "sutješki", "sutkinja", "sutkinjin", "sutra", "suvenir", "suvozač", "suvozačev", "suvozačica", "suvozačičin", "suvozački", "suza", "svačiji", "svadljiv", "svadljivo", "svadljivost", "svađa", "svađati", "svakakav", "svakako", "svaki", "svakojak", "svašta", "svatko", "sve", "sve", "svečan", "svečano", "svečanost", "svećenik", "svejedno", "svemir", "svemirski", "svet", "svetac", "svetački", "svetčev", "svetica", "svetičin", "sveučilište", "svibanj", "svidjeti", "sviđati", "svijeća", "svijećnjak", "svijest", "svijet", "svijetao", "svijetliti", "svijetlo", "svinja", "svinjeći", "svinjetina", "svinjski", "svirač", "sviračev", "sviračica", "sviračičin", "svirati", "svjećica", "svjesno", "svjesnost", "svjestan", "svjetiljka", "svjetionik", "svjetlo", "svjetlost", "svjetski", "svjež", "svježe", "svježina", "svoj", "svojstvo", "svrab", "svrbež", "svrha", "svršetak", "svući", "šafran", "šah", "šah", "šahist", "šahistica", "šahističin", "šahistov", "šaka", "šal", "šala", "šalica", "šaliti", "šampon", "šangajski", "šansa", "šapa", "šaptati", "šaran", "šarati", "šaren", "šareno", "šarlah", "šator", "šećer", "šeik", "šerif", "šesnaest", "šesnaestero", "šesnaesti", "šest", "šestar", "šestaš", "šestašica", "šesterac", "šestero", "šesterokratnik", "šesterokut", "šesterostruk", "šesti", "šestica", "šestina", "šesto", "šestomjesečni", "šestorica", "šestoti", "šešir", "šetalište", "šetati", "šetnja", "šezdeset", "šezdesetak", "šezdesetero", "šezdeseti", "šezdesetorica", "šibenski", "šic", "šifra", "šilterica", "šiljilo", "šipak", "širina", "širok", "široko", "širokobriješki", "šišmiš", "šištati", "šiti", "škare", "škljoc", "škljocanje", "škljocati", "škljocnuti", "škola", "školovanje", "školovati", "školski", "školjka", "školjkaš", "škorpion", "škorpionov", "škorpionski", "škotski", "škrgutati", "škripa", "škripati", "škripiti", "škripnuti", "škrt", "škrto", "škrtost", "šljap", "šljapkanje", "šljapkati", "šljapnuti", "šljiva", "šljivovica", "šljunak", "šminkati", "šmrc", "šoltanski", "špagerica", "španjolski", "špilja", "špinat", "štakor", "štap", "štapić", "štaviona", "štavionica", "štaviti", "štediona", "štedionica", "štediti", "štedjeti", "štednjak", "štektati", "štene", "šteniti", "šteta", "štikla", "štit", "štititi", "štitnik", "štivo", "što", "što", "što", "štogod", "štogod", "štokholmski", "štoperica", "štrample", "štramplice", "štrcaljka", "štropot", "štropotati", "šubara", "šum", "šuma", "šumar", "šumarev", "šumarica", "šumarica", "šumaričin", "šumarov", "šumarski", "šumarstvo", "šumiti", "šumjeti", "šunka", "šupalj", "šuplje", "šupljina", "šuškati", "šušketati", "šušnuti", "šuštati", "šutiti", "šutjeti", "švedski", "švicarski", "tablet", "tableta", "tablica", "tad", "tada", "taj", "tajice", "tajlandski", "tajna", "tajnica", "tajničin", "tajnički", "tajnik", "tajnikov", "takav", "taknuti", "tako", "također", "taksi", "taksimetar", "taksist", "taksistica", "taksističin", "taksistov", "takt", "talijanski", "taliona", "talionica", "taliti", "tama", "tambura", "tamburaš", "tamburašev", "tamburašica", "tamburašičin", "tamburaški", "tamburica", "tamo", "tanak", "tanko", "tanjur", "tata", "tatin", "tava", "tavan", "tavanski", "te", "te", "tečaj", "teći", "tehnički", "tehnika", "tehnologija", "tek", "tek", "tek", "tekst", "tekući", "tekućica", "tekućina", "tele", "teleći", "telefaks", "telefon", "telefonirati", "telefonski", "telegraf", "telegram", "telegramski", "telegramski", "telenovela", "teleprinter", "teleskop", "teletina", "televizija", "televizor", "teliti", "tema", "temelj", "tempera", "temperatura", "tempo", "tenis", "tenisač", "tenisačev", "tenisačica", "tenisačičin", "tenisački", "tenisica", "teniski", "tepih", "terasa", "teren", "teritorij", "termin", "terminolog", "terminologija", "terminologinja", "terminologinjin", "terminologov", "terminološki", "termoelement", "termofor", "termometar", "termostat", "tesla", "teško", "teta", "tetak", "tetanus", "težak", "ti", "ticati", "ticati", "tifus", "tigar", "tih", "tiho", "tijekom", "tijelo", "Tijelovo", "tijelovski", "tijesak", "tijesto", "tik-tak", "tikva", "tikvica", "timpan", "timpanist", "timpanistica", "timpanističin", "timpanistov", "timpanski", "tip", "tipka", "tipkalo", "tipkovnica", "tisuća", "tisući", "tisućiti", "tisuću", "tišina", "tivatski", "tj.", "tjedan", "tjelesni", "tjeme", "tjerati", "tjestenina", "tkivo", "tko", "tkogod", "tlakomjer", "tlo", "to", "tobogan", "točan", "točiti", "točka", "točkica", "točno", "točnost", "tokijski", "toliko", "ton", "tona", "tonuti", "top", "topao", "toplina", "toplo", "toplomjer", "topot", "toptati", "torba", "torinski", "torta", "trač", "tračati", "trač-baba", "tračer", "tračerica", "tračeričin", "tračerov", "tračerski", "tračnica", "trač-partija", "trag", "trajan", "trajati", "trajekt", "trajno", "trajnost", "trak", "traktor", "tramvaj", "transformator", "traperice", "trapez", "trapezast", "tras", "tratinčica", "trava", "travanj", "travarica", "travnički", "travnjak", "tražilica", "tražiti", "trbuh", "trčati", "trebati", "trebinjski", "trebinjski", "trećaš", "trećašev", "trećašica", "trećašičin", "treći", "trećina", "tren", "trener", "trenerica", "treneričin", "trenerov", "trenerski", "trening", "trenirati", "trenirka", "trenutačan", "trenutačno", "trenutak", "trenutan", "trenutno", "trepavica", "trepnuti", "treptati", "tres", "treskati", "tresnuti", "tresti", "trešnja", "trešnjev", "trešnjin", "treštati", "trg", "trgati", "trgovac", "trgovački", "trgovati", "trgovčev", "trgovina", "trgovkinja", "trgovkinjin", "tri", "triangl", "trica", "tricikl", "trideset", "tridesetak", "tridesetero", "trideseti", "tridesetogodišnjak", "tridesetogodišnjakinja", "tridesetogodišnji", "tridesetogodišnjica", "tridesetorica", "trinaest", "trinaestero", "trinaesti", "triput", "tristo", "tristoti", "trn", "trodijelan", "trodimenzijski", "trodimenzionalni", "trogirski", "trogodišnjak", "trogodišnjakinja", "trogodišnji", "troje", "troji", "trojica", "trojka", "trokatni", "trokatnica", "trokratnik", "trokrevetni", "trokut", "trokutast", "trokutić", "trombon", "trombonist", "trombonistica", "trombonističin", "trombonistov", "trombonski", "tromjesečni", "troredan", "trorječan", "trosjed", "troslov", "trosoban", "trostruk", "trostruko", "trošak", "trošilo", "trošiti", "trotjedni", "trotočka", "truba", "trubač", "trubačev", "trubačica", "trubačičin", "trubački", "trubiti", "truditi", "trudnoća", "trup", "trut", "tržište", "tržnica", "tu", "tuba", "tuberkuloza", "tubist", "tubistica", "tubističin", "tubistov", "tuča", "tučak", "tučnjava", "tući", "tuđ", "tuđe", "tuga", "tugovati", "tulipan", "tuliti", "tulumariti", "tunel", "tuniški", "tunjevina", "turcizam", "turist", "turistica", "turističin", "turistički", "turizam", "turnir", "turski", "tuš", "tuš", "tuš", "tuš", "tutanj", "tutnjiti", "tu-tu", "tuzlanski", "tužan", "tužno", "tvar", "tvoj", "tvornica", "tvrd", "tvrditi", "tvrdoglav", "tvrdoglavo", "tvrdoglavost", "tvrđava", "tvrtka", "ubijati", "ubiti", "ubrus", "uč.", "učenica", "učeničin", "učenički", "učenik", "učenikov", "učenje", "učestalost", "učiniti", "učiona", "učionica", "učitelj", "učiteljev", "učiteljica", "učiteljičin", "učiteljski", "učiti", "ući", "ud", "udaljen", "udaljeno", "udaljenost", "udarac", "udaraljka", "udarati", "udariti", "udati", "udavati", "udica", "udoban", "udobno", "udobnost", "udruga", "udžbenik", "ugao", "uginuti", "uglavnom", "ugljen", "ugljik", "ugodan", "ugodno", "ugovor", "uh", "uho", "uime", "ujak", "ujedno", "ujna", "ujutro", "ukidati", "ukinuti", "uključiti", "uključivati", "ukoliko", "ukosnica", "ukrajinski", "ukras", "ukratko", "ukupan", "ukupno", "ukusan", "ukusno", "ulaz", "ulazak", "ulaziti", "ulaznica", "ulica", "uloga", "ulomak", "ulje", "umanjenica", "umanjenik", "umanjitelj", "umaški", "umirati", "umirovljenica", "umirovljeničin", "umirovljenik", "umiti", "umivaonik", "umivati", "umjeren", "umjereno", "umjerenost", "umjesto", "umjetnica", "umjetničin", "umjetnik", "umjetnost", "umnožak", "umoran", "umorno", "umrijeti", "unajmiti", "unajmljivati", "unatoč", "uniforma", "unija", "unijeti", "unositi", "unuk", "unuka", "unutar", "unutarnji", "unutra", "unutrašnji", "unutrašnjost", "uoči", "uopće", "upala", "upaljač", "upisati", "upisivati", "upitan", "upitnik", "upitno", "upotrebljavati", "upotrijebiti", "upoznati", "upoznavati", "uprasiti", "uprava", "upravljač", "upravo", "upućenost", "uputnica", "Uran", "uranij", "ured", "uredan", "urediti", "uredno", "urednost", "uredski", "uređaj", "uređivač", "uređivati", "urugvajski", "usisavač", "usklični", "uskličnik", "usklik", "usko", "uskoro", "Uskrs", "uskrsni", "uskršnji", "uslijed", "usluga", "usmen", "usmeno", "usna", "uspavanka", "uspijevati", "uspinjača", "uspjeh", "uspješan", "uspjeti", "usporediti", "uspoređivati", "usprkos", "usput", "usred", "usta", "ustajati", "ustati", "ususret", "usvinjiti", "uš", "ušće", "uši", "utakmica", "utemeljen", "utjecaj", "utjecajan", "utjecati", "utorak", "utrka", "uvećanica", "uvid", "uvijek", "uvjet", "uvod", "uvrh", "uz(a)", "uzak", "uzbudljiv", "uzbudljivo", "uzbuna", "uzduž", "uzeti", "uzimati", "uzor", "uzrok", "uzvik", "užas", "užasan", "užasno", "uže", "užina", "užitak", "uživati", "vadičep", "vaditi", "vaga", "vagon", "val", "Valentinovo", "valpovački", "valjak", "valjčić", "valjda", "valjkast", "van", "vani", "vanilija", "vanjski", "varati", "varaždinski", "varičela", "varivo", "varšavski", "vaš", "vat", "vaterpolist", "vaterpolistica", "vaterpolističin", "vaterpolistički", "vaterpolistov", "vaterpolo", "vaterpolski", "vatikanski", "vatra", "vatrogasac", "vatrogaskinja", "vatrogaskinjin", "vatrogasni", "vatrogaščev", "vau", "vaza", "važan", "važno", "važnost", "večer", "večera", "večeras", "večerati", "večernji", "već", "već", "većina", "vedar", "vedrina", "vedro", "vegetarijanac", "vegetarijančev", "vegetarijanka", "vegetarijankin", "vegetarijanski", "velečasni", "veličina", "velik", "veliko", "velikogorički", "velolučki", "veljača", "venecijanski", "Venera", "venezuelski", "ventil", "ventilator", "veoma", "verzija", "veseliti", "veselo", "veselje", "veseo", "veslač", "veslačev", "veslačica", "veslačičin", "veslački", "veslo", "vesta", "veterinar", "veterinarev", "veterinarka", "veterinarkin", "veterinarov", "veterinarski", "vez", "veza", "vezati", "vezica", "veznički", "veznik", "vi", "vic", "viceadmiral", "viceadmiralica", "viceadmiraličin", "viceadmiralov", "viceadmiralski", "vid", "video", "videoigra", "videorekorder", "vidjeti", "vihoriti", "vijeće", "vijenac", "vijest", "vijoriti", "vikati", "vikend", "vikend-akcija", "vikendica", "viknuti", "vila", "vile", "vilica", "vinkovački", "vino", "vinograd", "viola", "violina", "violinist", "violinistica", "violinističin", "violinistički", "violinistov", "violinski", "violist", "violistica", "violističin", "violistički", "violistov", "violončelist", "violončelistica", "violončelističin", "violončelistički", "violončelistov", "violončelo", "virovitički", "viroza", "virus", "visibaba", "visina", "visiti", "visjeti", "viski", "visok", "visoko", "više", "višedimenzijski", "višedimenzionalni", "višegodišnji", "višejezičan", "višekatni", "višekatnica", "višekratan", "višekratnički", "višekratnik", "višemjesečni", "višetjedni", "viški", "višnja", "vitak", "vitamin", "vitao", "vitko", "vitkost", "vitlati", "vitrina", "vječnost", "vjenčanje", "vjenčati", "vjera", "vjernica", "vjerničin", "vjernik", "vjerojatan", "vjerojatno", "vjerojatnost", "vjeronauk", "vjeroučitelj", "vjeroučiteljev", "vjeroučiteljica", "vjeroučiteljičin", "vjeroučiteljski", "vjerovati", "vjerski", "vjesnik", "vješala", "vješalica", "vještica", "vještina", "vjetar", "vjetrovit", "vjetrovito", "vjeverica", "vježba", "vježbati", "vježbenica", "vježbeničin", "vježbenički", "vježbenik", "vježbenikov", "vlada", "vladar", "vladarev", "vladarica", "vladaričin", "vladarov", "vladarski", "vladati", "vlaga", "vlak", "vlas", "vlasnica", "vlasničin", "vlasnik", "vlast", "vlastit", "vlastito", "voćarna", "voćarnica", "voće", "voćka", "voćni", "voćnjak", "voda", "vodenjački", "vodenjak", "vodenjakov", "vodič", "vodičev", "vodičica", "vodičičin", "vodički", "vodik", "voditi", "vodnica", "vodničin", "vodnički", "vodnik", "vodnikov", "vodoinstalater", "vodoinstalaterka", "vodoinstalaterkin", "vodoinstalaterov", "vodoinstalaterski", "vodomjer", "vodoravan", "vodoravno", "vodovod", "vodozemac", "vojni", "vojnički", "vojnik", "vojnikinja", "vojnikinjin", "vojnikov", "vojska", "vojvoda", "vojvođanski", "vokalizacija", "vokativ", "vokativni", "vol", "volan", "voliti", "volt", "voltmetar", "volja", "voljeti", "vozač", "vozačev", "vozačica", "vozačičin", "vozački", "vozilo", "voziti", "vožnja", "vrabac", "vraćati", "vrag", "vragov", "vrat", "vrata", "vratilo", "vratiti", "vražica", "vražičin", "vražji", "vrba", "vrcati", "vrckati", "vrcnuti", "vreća", "vremeplov", "vrh", "vrhnje", "vrijedan", "vrijediti", "vrijedno", "vrijednost", "vrijeme", "vrlo", "vrpca", "vrsta", "vrt", "vrtić", "vrtiti", "vrtjeti", "vrtložiti", "vrtuljak", "vruć", "vruće", "vrućica", "vrućina", "vučić", "vući", "vuk", "vukovarski", "vulkan", "vuna", "za", "zabava", "zabavan", "zabaviti", "zabavljati", "zaboraviti", "zaboravljati", "zabrinut", "zabrinuti", "zabrinuto", "zabrinutost", "zad.", "zadaća", "zadarski", "zadatak", "zadati", "zadavati", "zadnji", "zadovoljan", "zadovoljno", "zaglavlje", "zagonetka", "zagorski", "zagrada", "zagradica", "zagrebački", "zagrljaj", "zahod", "zahtjev", "zahvalan", "zahvaliti", "zahvalno", "zahvalnost", "zahvaljivati", "zaista", "zaječati", "zajednica", "zajednički", "zajedno", "zajutrak", "zakasniti", "zaključak", "zaključiti", "zakon", "zalazak", "zalijepiti", "zaljev", "zaljubiti", "zaljubljen", "zaljubljeno", "zaljubljenost", "zaljubljivati", "zamjena", "zamjenica", "zamjeničin", "zamjenični", "zamjenik", "zamjenikov", "zamka", "zamrzivač", "zamuckivati", "zanaglasni", "zanaglasnica", "zanimanje", "zanimati", "zanimljiv", "zanimljivo", "zanimljivost", "zaokružiti", "zaokruživati", "zapad", "zapadni", "zapamtiti", "zapaziti", "zapažati", "zapjevati", "započeti", "zaporka", "zaposlen", "zaposlenost", "zaposliti", "zapošljavati", "zapovijed", "zapravo", "zar", "zarada", "zarez", "zaslon", "zaspati", "zastava", "zastor", "zastupništvo", "zaškripati", "zaškripiti", "zaštektati", "zaštita", "zašto", "zatim", "zato", "zatreptati", "zatvarati", "zatvor", "zatvoriti", "zaustaviti", "zaustavljati", "zavičaj", "zavidjeti", "zavisan", "zavisiti", "zavisno", "zavisnost", "zavist", "zavjesa", "zavladati", "zavoj", "završavati", "završetak", "završiti", "zbirka", "zbog", "zbogom", "zbor", "zbornica", "zbrajanje", "zbrajati", "zbroj", "zbrojiti", "zbunjen", "zbunjeno", "zbunjenost", "zdjela", "zdrav", "zdravlje", "zdravstveni", "zebra", "zec", "zečetina", "zečić", "zečji", "zelen", "zeleniti", "zeleno", "zelenjeti", "zelje", "zemlja", "zemljište", "zemljovid", "zemunski", "zglob", "zgodan", "zgodno", "zgrada", "zibati", "zid", "zidar", "zidarev", "zidarica", "zidaričin", "zidarov", "zijevati", "zima", "zimnica", "zimovalište", "zimovati", "zimski", "zjenica", "zlatan", "zlatarna", "zlatarnica", "zlato", "zlo", "zločin", "zlostavljanje", "zmaj", "zmija", "značiti", "značka", "znak", "znamenka", "znanac", "znančev", "znanica", "znaničin", "znanost", "znanstveni", "znanstvenica", "znanstvenik", "znanje", "znati", "znatiželja", "znatiželjan", "znoj", "zob", "zobeni", "zoološki", "zora", "zrak", "zrakoplov", "zrcalo", "zrelo", "zrelost", "zreo", "zreti", "zrno", "zub", "zubački", "zubar", "zubarev", "zubarica", "zubaričin", "zubarov", "zubarski", "zubobolja", "zujati", "zujiti", "zum", "zvati", "zveckati", "zveketati", "zvijer", "zvijezda", "zviždaljka", "zviždati", "zvižduk", "zviždukati", "zvjezdača", "zvjezdica", "zvonce", "zvoniti", "zvono", "zvrčati", "zvrndati", "zvuk", "žaba", "žabac", "žalac", "žaliti", "žalo", "žalosno", "žalost", "žalostan", "žalostiti", "žamor", "žamoriti", "žariti", "žarulja", "žbukati", "žderati", "ždrijebe", "ždrijebiti", "ždrijelo", "žedan", "žeđ", "žeđati", "želudac", "želja", "željeti", "željeznica", "željezo", "žena", "ženevski", "ženin", "ženka", "ženski", "ženstven", "ženstveno", "ženstvenost", "žeti", "žetva", "žica", "žičara", "židov", "židovka", "židovski", "žigosati", "žila", "žitarica", "žito", "živ", "živa", "živac", "živiti", "živjeti", "živkati", "živo", "živost", "život", "životan", "životinja", "životno", "životopis", "životopisni", "žlica", "žličica", "žmigavac", "žmiriti", "žrtva", "žrtvovanje", "žubor", "žuboriti", "žudjeti", "žulj", "žumberački", "žumor", "žumoriti", "župan", "županica", "županičin", "županija", "županijski", "županov", "županjski", "žuriti", "žut", "žutica", "žutiti", "žutjeti", "žvakati"]
            /* harmony export (immutable) */
        __webpack_exports__["fullWordList"] = fullWordList;


        const wordList = fullWordList.filter(w => w.length >= 2)
            /* harmony export (immutable) */
        __webpack_exports__["wordList"] = wordList;


        /***/
    }),
    /* 349 */
    /*!*********************!*\
      !*** ./src/lang.js ***!
      \*********************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _idiom = __webpack_require__( /*! idiom.js */ 350);

        var _idiom2 = _interopRequireDefault(_idiom);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var lang = (0, _idiom2.default)({
            'default': {
                'welcome': 'Welcome to Phaser + ES6 + Webpack!'
            },
            'pt-BR': {
                'welcome': 'Bem vindo ao Phaser + ES6 + Webpack!'
            }
        });

        exports.default = lang(window.navigator.language);

        /***/
    }),
    /* 350 */
    /*!********************************************!*\
      !*** ./node_modules/idiom.js/lib/index.js ***!
      \********************************************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _extends2 = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var idiom = function idiom(languages) {
            if (!languages.default) {
                throw '[idiom.js] You need to set a default language';
            }

            return function() {
                var currentLang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
                return {
                    get currentLanguage() {
                        return !languages[currentLang] ? 'default' : currentLang;
                    },
                    get languages() {
                        return Object.keys(languages);
                    },
                    extends: function _extends(lib) {
                        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentLanguage;

                        if (!languages[name]) {
                            languages[name] = _extends2({}, lib);
                        } else {
                            languages[name] = _extends2({}, languages[name], lib);
                        }
                    },
                    text: function text(key) {
                        var lib = languages[this.currentLanguage];

                        if (!lib[key]) {
                            throw '[idiom.js] Any match for key: \'' + key + '\'.';
                        }

                        return lib[key];
                    }
                };
            };
        };

        exports.default = idiom;

        /***/
    }),
    /* 351 */
    /*!**********************************!*\
      !*** ./src/sprites/Tetramino.js ***!
      \**********************************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
        }();

        var _phaser = __webpack_require__( /*! phaser */ 18);

        var _phaser2 = _interopRequireDefault(_phaser);

        var _config = __webpack_require__( /*! ../config */ 22);

        var _config2 = _interopRequireDefault(_config);

        var _tetraminoes = __webpack_require__( /*! ../tetraminoes */ 133);

        var _tetraminoes2 = _interopRequireDefault(_tetraminoes);

        var _Grid = __webpack_require__( /*! ../classes/Grid */ 132);

        var _letters = __webpack_require__( /*! ../letters */ 94);

        var _utils = __webpack_require__( /*! ../utils */ 52);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var _class = function() {
            function _class(_ref) {
                var _this = this;

                var x = _ref.x,
                    y = _ref.y,
                    createTile = _ref.createTile,
                    shapeIndex = _ref.shapeIndex;

                _classCallCheck(this, _class);

                this.coord = { x: x, y: y };
                this.shapeIndex = shapeIndex;
                this.poseIndex = 0;
                this.setLayout(this.shapeIndex, this.poseIndex);
                this.tiles = this.layout.map(function(coord) {
                    return {
                        x: coord.x + _this.coord.x,
                        y: coord.y + _this.coord.y
                    };
                }).map(function(coord) {
                    return createTile((0, _Grid.coordToPosition)(coord), (0, _letters.randomLetter)());
                });
                this.updateDelay = 1000;
                this.previousUpdate = undefined;
            }

            _createClass(_class, [{
                key: 'pulse',
                value: function pulse() {
                    return Promise.all(this.tiles.concat().sort(function(a, b) {
                        return a.x - b.x + (a.y - b.y);
                    }).map(function(t, i) {
                        return (0, _utils.delay)(i * 50).then(function() {
                            return t.pulse();
                        });
                    }));
                }
            }, {
                key: 'enter',
                value: function enter() {
                    return Promise.all(this.tiles.concat().sort(function(a, b) {
                        return a.x - b.x + (a.y - b.y);
                    }).map(function(t) {
                        t.scale.set(0);
                        return t;
                    }).map(function(t, i) {
                        return (0, _utils.delay)(i * 50).then(function() {
                            return t.enter();
                        });
                    }));
                }
            }, {
                key: 'getLetters',
                value: function getLetters() {
                    return this.tiles.map(function(t) {
                        return t.letterValue;
                    });
                }
            }, {
                key: 'getCoordsTilesAndLetters',
                value: function getCoordsTilesAndLetters() {
                    var _this2 = this;

                    var letters = this.getLetters();
                    return this.layoutAsCoords().map(function(coord, i) {
                        return Object.assign(coord, { letter: letters[i], tile: _this2.tiles[i] });
                    });
                }
            }, {
                key: 'removeBlockAtCoord',
                value: function removeBlockAtCoord(coord) {
                    var _this3 = this;

                    this.layoutAsCoords().forEach(function(c, i) {
                        if (c.x !== coord.x || c.y !== coord.y) return;
                        _this3.tiles[i].remove();
                        _this3.tiles[i].destroyed = true;
                        _this3.layout[i].destroyed = true;
                    });
                    this.tiles = this.tiles.filter(function(t) {
                        return !t.destroyed;
                    });
                    this.layout = this.layout.filter(function(l) {
                        return !l.destroyed;
                    });
                }
            }, {
                key: 'layoutAsCoords',
                value: function layoutAsCoords() {
                    var _this4 = this;

                    return this.layout.map(function(offset) {
                        return {
                            x: _this4.coord.x + offset.x,
                            y: _this4.coord.y + offset.y
                        };
                    });
                }
            }, {
                key: 'setLayout',
                value: function setLayout(index, poseIndex) {
                    this.layout = _tetraminoes2.default.shapes[index].poses[poseIndex].map(_tetraminoes.arrayToCoord);
                }
            }, {
                key: 'nextPose',
                value: function nextPose() {
                    this.poseIndex = this.poseIndex === 3 ? 0 : this.poseIndex + 1;
                }
            }, {
                key: 'updateTilePositions',
                value: function updateTilePositions() {
                    var _this5 = this;

                    this.tiles.forEach(function(tile, i) {
                        var position = (0, _Grid.coordToPosition)({
                            x: _this5.coord.x + _this5.layout[i].x,
                            y: _this5.coord.y + _this5.layout[i].y
                        });
                        tile.position.x = position.x;
                        tile.position.y = position.y;
                    });
                }
            }, {
                key: 'update',
                value: function update(_ref2, cursors, _ref3, createNewTetramino) {
                    var time = _ref2.time;
                    var canMoveLeft = _ref3.canMoveLeft,
                        canMoveRight = _ref3.canMoveRight,
                        canMoveDown = _ref3.canMoveDown,
                        layoutOverlapsAnything = _ref3.layoutOverlapsAnything;

                    if (this.previousUpdate === undefined) this.previousUpdate = time.time;

                    if (time.time > this.previousUpdate + this.updateDelay) {
                        if (canMoveDown(this)) {
                            this.coord.y += 1;
                            this.previousUpdate = time.time;
                        } else {
                            createNewTetramino(this);
                        }
                    }

                    if (cursors.left.justDown && canMoveLeft(this)) {
                        this.coord.x -= 1;
                    } else if (cursors.right.justDown && canMoveRight(this)) {
                        this.coord.x += 1;
                    }
                    if (cursors.down.isDown && canMoveDown(this)) {
                        this.coord.y += 1;
                    }

                    if (cursors.up.justDown) {
                        this.nextPose();
                        this.setLayout(this.shapeIndex, this.poseIndex);
                        while (layoutOverlapsAnything(this)) {
                            this.nextPose();
                            this.setLayout(this.shapeIndex, this.poseIndex);
                        }
                    }

                    this.updateTilePositions();
                }
            }]);

            return _class;
        }();

        exports.default = _class;

        /***/
    }),
    /* 352 */
    /*!*******************************!*\
      !*** ./src/sprites/Points.js ***!
      \*******************************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
        }();

        var _phaser = __webpack_require__( /*! phaser */ 18);

        var _phaser2 = _interopRequireDefault(_phaser);

        var _config = __webpack_require__( /*! ../config */ 22);

        var _config2 = _interopRequireDefault(_config);

        var _letters = __webpack_require__( /*! ../letters */ 94);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var _class = function(_Phaser$Text) {
            _inherits(_class, _Phaser$Text);

            function _class(_ref) {
                var game = _ref.game,
                    x = _ref.x,
                    y = _ref.y + 70;

                _classCallCheck(this, _class);

                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, game, x, y, 'BODOVI: 0 \nriječi se slažu\nu idućim\nsmjerovima\n↓, →', _config2.default.uiLetterConfig));
                _this.anchor.set(0.5);
                _this.scale.set(0.5);
                _this.game = game;
                _this.total = 0;
                return _this;
            }

            _createClass(_class, [{
                key: 'updateDisplay',
                value: function updateDisplay() {
                    this.setText('BODOVI: ' + this.total + '\nriječi se slažu\nu idućim\nsmjerovima\n↓, →');
                }
            }, {
                key: 'collectLetter',
                value: function collectLetter(letter) {
                    this.total += (0, _letters.letterToPoint)(letter);
                    this.updateDisplay();
                }
            }, {
                key: 'update',
                value: function update() {}
            }]);

            return _class;
        }(_phaser2.default.Text);

        exports.default = _class;

        /***/
    }),
    /* 353 */
    /*!*****************************************!*\
      !*** ./src/sprites/BackgroundFXTile.js ***!
      \*****************************************/
    /*! dynamic exports provided */
    /*! all exports used */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
        }();

        var _phaser = __webpack_require__( /*! phaser */ 18);

        var _phaser2 = _interopRequireDefault(_phaser);

        var _config = __webpack_require__( /*! ../config */ 22);

        var _config2 = _interopRequireDefault(_config);

        var _utils = __webpack_require__( /*! ../utils */ 52);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var _class = function(_Phaser$Sprite) {
            _inherits(_class, _Phaser$Sprite);

            function _class(_ref) {
                var game = _ref.game,
                    x = _ref.x,
                    y = _ref.y;

                _classCallCheck(this, _class);

                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, game, x, y, 'tile'));

                _this.anchor.set(0.5);
                _this.scale.set(0.275);
                _this.alpha = 0;
                _this.game = game;
                _this.setRotationSpeed();
                return _this;
            }

            _createClass(_class, [{
                key: 'setRotationSpeed',
                value: function setRotationSpeed() {
                    this.rotationSpeed = Math.random() * 1 - 0.5;
                }
            }, {
                key: 'loop',
                value: function loop() {
                    var _this2 = this;

                    this.x = (0, _utils.randomXPos)();
                    this.y = (0, _utils.randomYPos)();
                    this.scale.set(0.2);
                    var targetScale = 0.4;
                    var targetAlpha = 0.5;
                    var duration = Math.floor(Math.random() * 5000) + 5000;
                    this.setRotationSpeed();
                    Promise.all([new Promise(function(resolve) {
                        return _this2.game.add.tween(_this2.scale).to({ x: targetScale, y: targetScale }, duration, _phaser2.default.Easing.Linear.None, true).onComplete.add(resolve);
                    }), new Promise(function(resolve) {
                        return _this2.game.add.tween(_this2).to({ alpha: targetAlpha }, duration / 2, _phaser2.default.Easing.Linear.None, true).onComplete.add(function() {
                            return _this2.game.add.tween(_this2).to({ alpha: 0 }, duration / 2, _phaser2.default.Easing.Linear.None, true).onComplete.add(resolve);
                        });
                    })]).then(function() {
                        return _this2.loop();
                    });
                }
            }, {
                key: 'update',
                value: function update() {
                    this.angle += this.rotationSpeed;
                }
            }]);

            return _class;
        }(_phaser2.default.Sprite);

        exports.default = _class;

        /***/
    })], [134]);
//# sourceMappingURL=bundle.js.map